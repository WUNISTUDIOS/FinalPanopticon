#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 5

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MINOR 0

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define ALWAYS_EVALUATE_WORLD_POSITION_OFFSET 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 0

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 0

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define DISTORTION_ACCOUNT_FOR_COVERAGE 0

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define INTERPOLATE_VERTEX_COLOR 0

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define IS_MATERIAL_SHADER 1

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define MANUAL_VERTEX_FETCH 1

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_CONTACT_SHADOWS 0

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DECAL_READ_MASK 7

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DITHER_OPACITY_MASK 0

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DOMAIN_SURFACE 1

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FULLY_ROUGH 0

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_SKY 0

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_STRATA 1

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ISTHINSURFACE 0

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NONMETAL 1

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PATH_TRACING_BUFFER_READ 0

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 1

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SHADINGMODEL_DEFAULT_LIT 1

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SINGLE_SHADINGMODEL 1

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SKY_ATMOSPHERE 0

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SSR 1

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TANGENTSPACENORMAL 1

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TWOSIDED 0

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_LM_DIRECTIONALITY 1

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_PREINTEGRATED_GF 0

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_ANISOTROPY 0

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_DECAL_LOOKUP 0

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_SCENE_COLOR_COPY 0

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_VIRTUALTEXTURE_FEEDBACK 0

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALBLENDING_TRANSLUCENT 1

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDECALRESPONSEMASK 7

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDOMAIN_SURFACE 1

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_EMULATION 1

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_HIGH_QUALITY_BRDF 0

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_COLOR 0

#line 75 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0

#line 76 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0

#line 77 "DumpShaderDefinesAsCommentedCode"
// #define NUM_VIRTUALTEXTURE_SAMPLES 0

#line 78 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 1

#line 79 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1

#line 80 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ENABLES_STRATA_GLINTS 1

#line 81 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ENABLES_STRATA_SPECULAR_PROFILE 1

#line 82 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 83 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 84 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1

#line 85 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1

#line 86 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0

#line 87 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0

#line 88 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 89 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 90 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 0

#line 91 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 92 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 93 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 94 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 95 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 96 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 97 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 98 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 99 "DumpShaderDefinesAsCommentedCode"
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1

#line 100 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 101 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 102 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 0

#line 103 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 104 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 0

#line 105 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_USE_NONE 1

#line 106 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 107 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_DEFERRED 1

#line 108 "DumpShaderDefinesAsCommentedCode"
// #define SHAREDLOCALBASIS_INDEX_0_0 0

#line 109 "DumpShaderDefinesAsCommentedCode"
// #define SHAREDLOCALBASIS_INDEX_0_1 0

#line 110 "DumpShaderDefinesAsCommentedCode"
// #define SM5_PROFILE 1

#line 111 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 112 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_BLENDING_TRANSLUCENT_GREYTRANSMITTANCE 1

#line 113 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_CLAMPED_BSDF_COUNT 1

#line 114 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_COMPLEXSPECIALPATH 0

#line 115 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 1

#line 116 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_FASTPATH 1

#line 117 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_CONTEXT 0

#line 118 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_LEGACY_BLEND_MODE 0

#line 119 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_TYPE 0

#line 120 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_NUM_UINTS 20

#line 121 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_OUTPUT_OPAQUE_ROUGH_REFRACTIONS 0

#line 122 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_NORMAL_QUALITY 0

#line 123 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 1

#line 124 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPTIMIZED_UNLIT 0

#line 125 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_PREMULTIPLIED_ALPHA_OPACITY_OVERRIDEN 0

#line 126 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SHADING_QUALITY 1

#line 127 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SHEEN_QUALITY 1

#line 128 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SINGLEPATH 0

#line 129 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USE_DBUFFER_PASS 0

#line 130 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USES_CONVERSION_FROM_LEGACY 1

#line 131 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 132 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 133 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_GPUSKIN_PASSTHROUGH 1

#line 134 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 135 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 136 "DumpShaderDefinesAsCommentedCode"
// #define TEXTURE_SAMPLE_DEBUG 0

#line 137 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENCY_LIGHTING_SURFACE_LIGHTINGVOLUME 1

#line 138 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0

#line 139 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 1

#line 140 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_VELOCITY 0

#line 141 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 142 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 143 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 144 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 145 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 146 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 147 "DumpShaderDefinesAsCommentedCode"
// #define USE_8BIT_TILE_COORD 0

#line 148 "DumpShaderDefinesAsCommentedCode"
// #define USE_ACHROMATIC_BXDF_ENERGY 0

#line 149 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 1

#line 150 "DumpShaderDefinesAsCommentedCode"
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0

#line 151 "DumpShaderDefinesAsCommentedCode"
// #define USE_STENCIL_LOD_DITHER_DEFAULT 0

#line 152 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISPLACEMENT 0

#line 153 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISTORTION 0

#line 154 "DumpShaderDefinesAsCommentedCode"
// #define USES_EMISSIVE_COLOR 1

#line 155 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_CUSTOM_DATA 0

#line 156 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_RANDOM 0

#line 157 "DumpShaderDefinesAsCommentedCode"
// #define USES_TRANSFORM_VECTOR 1

#line 158 "DumpShaderDefinesAsCommentedCode"
// #define USES_VERTEX_INTERPOLATOR 0

#line 159 "DumpShaderDefinesAsCommentedCode"
// #define USES_WORLD_POSITION_OFFSET 0

#line 160 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 161 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 162 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 1

#line 163 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_SPEEDTREE_WIND 1

#line 164 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 165 "DumpShaderDefinesAsCommentedCode"
// #define WANT_PIXEL_DEPTH_OFFSET 0

#line 166 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 860 "/Engine/Public/Platform.ush"
float min3(float a, float b, float c)
{
	return min(a, min(b, c));
}

#line 865 "/Engine/Public/Platform.ush"
int min3(int a, int b, int c)
{
	return min(a, min(b, c));
}

#line 870 "/Engine/Public/Platform.ush"
uint min3(uint a, uint b, uint c)
{
	return min(a, min(b, c));
}

#line 875 "/Engine/Public/Platform.ush"
float2 min3 ( float2 a, float2 b, float2 c) { return float2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); }

#line 875 "/Engine/Public/Platform.ush"
float3 min3 ( float3 a, float3 b, float3 c) { return float3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); }

#line 875 "/Engine/Public/Platform.ush"
float4 min3 ( float4 a, float4 b, float4 c) { return float4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

#line 876 "/Engine/Public/Platform.ush"
int2 min3 ( int2 a, int2 b, int2 c) { return int2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); }

#line 876 "/Engine/Public/Platform.ush"
int3 min3 ( int3 a, int3 b, int3 c) { return int3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); }

#line 876 "/Engine/Public/Platform.ush"
int4 min3 ( int4 a, int4 b, int4 c) { return int4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

#line 877 "/Engine/Public/Platform.ush"
uint2 min3 ( uint2 a, uint2 b, uint2 c) { return uint2( min3 (a.x , b.x , c.x ), min3 (a.y , b.y , c.y )); }

#line 877 "/Engine/Public/Platform.ush"
uint3 min3 ( uint3 a, uint3 b, uint3 c) { return uint3( min3 (a.xy, b.xy, c.xy), min3 (a.z , b.z , c.z )); }

#line 877 "/Engine/Public/Platform.ush"
uint4 min3 ( uint4 a, uint4 b, uint4 c) { return uint4( min3 (a.xy, b.xy, c.xy), min3 (a.zw, b.zw, c.zw)); }

#line 973 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 97 "/Engine/Private/PackUnpack.ush"
uint PackR8(float Value)
{
	return uint(saturate(Value) * 255.0f);
}

#line 102 "/Engine/Private/PackUnpack.ush"
float UnpackR8(uint In)
{



	return float(In & 0xFF) * (1.0f / 255.0f);

}

#line 128 "/Engine/Private/PackUnpack.ush"
float4 UnpackRGBA8(uint In)
{







	float4 Out;
	Out.r = float((In >> 0) & 0xFF) * (1.0f / 255.0f);
	Out.g = float((In >> 8) & 0xFF) * (1.0f / 255.0f);
	Out.b = float((In >> 16) & 0xFF) * (1.0f / 255.0f);
	Out.a = float((In >> 24) & 0xFF) * (1.0f / 255.0f);
	return Out;

}

#line 116 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 118 "/Engine/Private/Common.ush"
const static float Max11BitsFloat = 65024.0f;

#line 119 "/Engine/Private/Common.ush"
const static float Max10BitsFloat = 64512.0f;

#line 120 "/Engine/Private/Common.ush"
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 75 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }

#line 76 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }

#line 77 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }

#line 78 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }

#line 79 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 80 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 93 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 227 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }

#line 228 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 229 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 230 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 232 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 239 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 256 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }

#line 257 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(float2 Value) { return Value; }

#line 258 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(float3 Value) { return Value; }

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(float4 Value) { return Value; }

#line 260 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer   View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 float3  View_ViewForward;
	 float  PrePadding_View_1004;
	 float3  View_ViewUp;
	 float  PrePadding_View_1020;
	 float3  View_ViewRight;
	 float  PrePadding_View_1036;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1052;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2196;
	 float  PrePadding_View_2200;
	 float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2284;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 520 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedPointClampedSampler;

#line 525 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearClampedSampler;

#line 543 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCMatTexture;

#line 544 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCMatSampler;

#line 545 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCAmpTexture;

#line 546 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCAmpSampler;

#line 549 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyGGXSpecTexture;

#line 550 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float2>  View_ShadingEnergyGGXGlassTexture;

#line 553 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_ShadingEnergySampler;

#line 560 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SSProfilesTexture;

#line 569 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float4>  View_RectLightAtlasTexture;

#line 3 "/Engine/Generated/UniformBuffers/LumenTranslucencyRadianceCacheMarkPass.ush"
cbuffer   LumenTranslucencyRadianceCacheMarkPass 
{
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_SceneColorTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_4;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_SceneDepthTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_12;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_ScenePartialDepthTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_20;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferATexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_28;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferBTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_36;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferCTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_44;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferDTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_52;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferETexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_60;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferFTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_68;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferVelocityTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_76;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_ScreenSpaceAOTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_84;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_CustomDepthTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_92;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_CustomStencilTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_100;
	 uint BindlessSampler_LumenTranslucencyRadianceCacheMarkPass_SceneTextures_PointClampSampler ;
	 float  PrePadding_LumenTranslucencyRadianceCacheMarkPass_108;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_RWRadianceProbeIndirectionTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_116;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_120;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_124;
	 float4  LumenTranslucencyRadianceCacheMarkPass_PackedWorldPositionToRadianceProbeCoord[6];
	 float4  LumenTranslucencyRadianceCacheMarkPass_PackedRadianceProbeCoordToWorldPosition[6];
	 uint  LumenTranslucencyRadianceCacheMarkPass_RadianceProbeClipmapResolutionForMark;
	 uint  LumenTranslucencyRadianceCacheMarkPass_NumRadianceProbeClipmapsForMark;
	 float  LumenTranslucencyRadianceCacheMarkPass_InvClipmapFadeSizeForMark;
	 float  PrePadding_LumenTranslucencyRadianceCacheMarkPass_332;
	 uint BindlessResource_LumenTranslucencyRadianceCacheMarkPass_FurthestHZBTexture ;
	 uint  PrePadding_LumenTranslucencyRadianceCacheMarkPass_340;
	 float2  LumenTranslucencyRadianceCacheMarkPass_ViewportUVToHZBBufferUV;
	 float  LumenTranslucencyRadianceCacheMarkPass_HZBMipLevel;
}

#line 62 "/Engine/Generated/UniformBuffers/LumenTranslucencyRadianceCacheMarkPass.ush"
RWTexture3D<uint>  LumenTranslucencyRadianceCacheMarkPass_RWRadianceProbeIndirectionTexture;

#line 63 "/Engine/Generated/UniformBuffers/LumenTranslucencyRadianceCacheMarkPass.ush"
Texture2D  LumenTranslucencyRadianceCacheMarkPass_FurthestHZBTexture;

#line 3 "/Engine/Generated/UniformBuffers/Material.ush"
cbuffer   Material 
{
	 float4  Material_PreshaderBuffer[3];
	 uint BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint  PrePadding_Material_52;
	 uint BindlessSampler_Material_Clamp_WorldGroupSettings ;
}

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 36 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView()
{
	return GetPrimaryView();
}

#line 595 "/Engine/Private/Common.ush"
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}

#line 661 "/Engine/Private/Common.ush"
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}

#line 665 "/Engine/Private/Common.ush"
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}

#line 669 "/Engine/Private/Common.ush"
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}

#line 673 "/Engine/Private/Common.ush"
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}

#line 52 "/Engine/Private/FastMathThirdParty.ush"
float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}

#line 62 "/Engine/Private/FastMathThirdParty.ush"
float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}

#line 82 "/Engine/Private/FastMathThirdParty.ush"
float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

#line 26 "/Engine/Private/Random.ush"
float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#line 904 "/Engine/Private/Common.ush"
float Square( float x )
{
	return x*x;
}

#line 909 "/Engine/Private/Common.ush"
float2 Square( float2 x )
{
	return x*x;
}

#line 914 "/Engine/Private/Common.ush"
float3 Square( float3 x )
{
	return x*x;
}

#line 919 "/Engine/Private/Common.ush"
float4 Square( float4 x )
{
	return x*x;
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 964 "/Engine/Private/Common.ush"
float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

#line 970 "/Engine/Private/Common.ush"
float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

#line 976 "/Engine/Private/Common.ush"
float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

#line 982 "/Engine/Private/Common.ush"
float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

#line 988 "/Engine/Private/Common.ush"
float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

#line 994 "/Engine/Private/Common.ush"
float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

#line 1000 "/Engine/Private/Common.ush"
float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

#line 1006 "/Engine/Private/Common.ush"
float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

#line 1179 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}

#line 1187 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return asuint(ViewToClip._44);
}

#line 1193 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View_ViewToClip);
}

#line 1229 "/Engine/Private/Common.ush"
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

#line 1263 "/Engine/Private/Common.ush"
float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}

#line 1293 "/Engine/Private/Common.ush"
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

#line 1658 "/Engine/Private/Common.ush"
float3 TransformTangentVectorToWorld(float3x3 TangentToWorld, float3 InTangentVector)
{
	
	
	return mul(InTangentVector, TangentToWorld);
}

#line 9 "/Engine/Private/BRDF.ush"
struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;

};

#line 25 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

#line 44 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 X, float3 Y, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}

#line 84 "/Engine/Private/BRDF.ush"
void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );
	
		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );





			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{
				
				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;

				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr; 





			Context.VoL = Context.VoL * CosAlpha + VoTr;

			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );





			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}

#line 278 "/Engine/Private/BRDF.ush"
float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}

#line 335 "/Engine/Private/BRDF.ush"
float3 Diffuse_Chan( float3 DiffuseColor, float a2, float NoV, float NoL, float VoH, float NoH, float RetroReflectivityWeight)
{
	
	NoV = saturate(NoV);
	NoL = saturate(NoL);
	VoH = saturate(VoH);
	NoH = saturate(NoH);

	
	float g = saturate( (1.0 / 18.0) * log2( 2 * rcpFast(a2) - 1 ) );

	float F0 = VoH + Pow5( 1 - VoH );
	float FdV = 1 - 0.75 * Pow5( 1 - NoV );
	float FdL = 1 - 0.75 * Pow5( 1 - NoL );

	
	float Fd = lerp( F0, FdV * FdL, saturate( 2.2 * g - 0.5 ) );

	
	float Fb = ( (34.5 * g - 59 ) * g + 24.5 ) * VoH * exp2( -max( 73.2 * g - 21.2, 8.9 ) * sqrtFast( NoH ) );
	
	Fb *= RetroReflectivityWeight;
	
	return DiffuseColor * ( (1 / PI) * ( Fd + Fb ) );
}

#line 377 "/Engine/Private/BRDF.ush"
float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}

#line 439 "/Engine/Private/BRDF.ush"
float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}

#line 469 "/Engine/Private/BRDF.ush"
float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					
	
	
	
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

#line 478 "/Engine/Private/BRDF.ush"
float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

#line 689 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}

#line 696 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}

#line 701 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}

#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}

#line 48 "/Engine/Private/MonteCarlo.ush"
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

#line 365 "/Engine/Private/MonteCarlo.ush"
float VisibleGGXPDF(float3 V, float3 H, float a2)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);

	float d = (NoH * a2 - NoH) * NoH + 1;
	float D = a2 / (PI*d*d);

	float PDF = 2 * VoH * D / (NoV + sqrt(NoV * (NoV - NoV * a2) + a2));
	return PDF;
}

#line 516 "/Engine/Private/MonteCarlo.ush"
float RayPDFToReflectionRayPDF(float VoH, float RayPDF)
{
	float ReflectPDF = RayPDF / (4.0 * saturate(VoH));

	return ReflectPDF;
}

#line 20 "/Engine/Private/HairShadingCommon.ush"
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;

	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

#line 33 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);

	return o;
}

#line 98 "/Engine/Private/ShadingCommon.ush"
float F0ToDielectricSpecular(float F0)
{
	return saturate(F0 / 0.08f);
}

#line 103 "/Engine/Private/ShadingCommon.ush"
float F0RGBToF0(float3 F0)
{
	return dot(0.3333333.xxx, F0);
}

#line 108 "/Engine/Private/ShadingCommon.ush"
float F0RGBToDielectricSpecular(float3 F0)
{
	return F0ToDielectricSpecular(F0RGBToF0(F0));
}

#line 113 "/Engine/Private/ShadingCommon.ush"
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}

#line 138 "/Engine/Private/ShadingCommon.ush"
float  F0ToMicroOcclusion(float F0)   { return saturate(50.0 * F0); }

#line 139 "/Engine/Private/ShadingCommon.ush"
float3 F0ToMicroOcclusion(float3 F0)  { return saturate(50.0 * F0); }

#line 141 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMicroOcclusion(float3 F0)
{
	return F0ToMicroOcclusion(max(F0.r, max(F0.g, F0.b)));
}

#line 146 "/Engine/Private/ShadingCommon.ush"
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 156 "/Engine/Private/ShadingCommon.ush"
float3 ComputeDiffuseAlbedo(float3 BaseColor, float Metallic)
{
	return BaseColor - BaseColor * Metallic;
}

#line 161 "/Engine/Private/ShadingCommon.ush"
float MakeRoughnessSafe(float Roughness, float MinRoughness=0.001f)
{
	return clamp(Roughness, MinRoughness, 1.0f);
}

#line 166 "/Engine/Private/ShadingCommon.ush"
float F0ToMetallic(float F0)
{
	
	const float FullMetalBeginF0 = 0.08f;	
	const float FullMetalEndF0   = 0.4f;	
	

	return saturate((F0 - FullMetalBeginF0) / (FullMetalEndF0 - FullMetalBeginF0));
}

#line 176 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMetallic(float3 F0)
{
	return F0ToMetallic(max(F0.r, max(F0.g, F0.b)));
}

#line 185 "/Engine/Private/ShadingCommon.ush"
struct FVerticalLayeringInfo
{
	float TransmittanceTopAndBottom;	
	float TransmittanceOnlyBottom;		
	float TransmittanceOnlyTop;			

	float SurfaceBottom;				
	float SurfaceTop;					

	float Coverage;						
	float NoSurface;					
};

#line 200 "/Engine/Private/ShadingCommon.ush"
FVerticalLayeringInfo GetVerticalLayeringInfo(const float TopCoverage, const float BottomCoverage)
{
	FVerticalLayeringInfo Info;

	Info.TransmittanceTopAndBottom	= TopCoverage * BottomCoverage;
	Info.TransmittanceOnlyBottom	= (1.0f - TopCoverage) * BottomCoverage;
	Info.TransmittanceOnlyTop		= (1.0f - BottomCoverage) * TopCoverage;

	Info.SurfaceBottom				= Info.TransmittanceOnlyBottom;
	Info.SurfaceTop					= TopCoverage;								

	Info.Coverage					= Info.SurfaceTop + Info.SurfaceBottom;		
	Info.NoSurface					= 1.0f - Info.Coverage;

	return Info;
}

#line 329 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{
	
	float3 WorldNormal;
	
	float3 WorldTangent;
	
	float3 DiffuseColor;
	
	float3 SpecularColor;
	
	float3 BaseColor;
	
	float Metallic;
	
	float Specular;
	
	float4 CustomData;
	
	float GenericAO;
	
	float IndirectIrradiance;
	
	
	float4 PrecomputedShadowFactors;
	
	float Roughness;
	
	float Anisotropy;
	
	float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	float PerObjectGBufferData;
	
	float CustomDepth;
	
	uint CustomStencil;
	
	
	float Depth;
	
	float4 Velocity;

	
	float3 StoredBaseColor;
	
	float StoredSpecular;
	
	float StoredMetallic;

	
	float Curvature;
};

#line 398 "/Engine/Private/DeferredShadingCommon.ush"
bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}

#line 42 "/Engine/Private/ShadingEnergyConservation.ush"
float2 GGXEnergyLookup(float Roughness, float NoV)
{

	return View_ShadingEnergyGGXSpecTexture.SampleLevel(View_ShadingEnergySampler, float2(NoV, Roughness), 0);









}

#line 57 "/Engine/Private/ShadingEnergyConservation.ush"
float GGXEnergyLookup(float Roughness, float NoV, float Eta)
{
	
	

	
	float2 E = View_ShadingEnergyGGXGlassTexture.SampleLevel(View_ShadingEnergySampler, float3(NoV, Roughness, max(Eta, rcp(Eta)) * 0.5 - 0.5), 0);
	return Eta >= 1.0 ? E.x : E.y;




}

#line 18 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3   GetF0F90RGB(float3 InF0)
{



	return InF0;

}

#line 27 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsRGB
{
	float3 W; 
	float3 E; 
};

#line 35 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeFresnelEnergyTermsRGB(float2 E, float3 InF0, float3 InF90)
{
	float3 F0  =   GetF0F90RGB(InF0);
	float3 F90 =   GetF0F90RGB(InF90);

	  FBxDFEnergyTermsRGB Result;
	
	

	Result.W = View_bShadingEnergyConservation ? (1.0 + F0 * ((1 - E.x) / E.x)) : 1.0f;



	
	
	
	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

#line 55 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsRGB Out;

	{
		Out =   ComputeFresnelEnergyTermsRGB(GGXEnergyLookup(Roughness, NoV), F0, F90);
}






	return Out;
}

#line 71 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); 
	return   ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, F0, F90);
}

#line 115 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsRGB EnergyTerms)
{


	return View_bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;






}

#line 129 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3 ComputeEnergyConservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return EnergyTerms.W;
}

#line 27 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsA
{
	float W; 
	float E; 
};

#line 115 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsA EnergyTerms)
{


	return View_bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;






}

#line 129 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyConservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return EnergyTerms.W;
}

#line 40 "/Engine/Private/ColorSpace.ush"
static const float3x3 XYZ_2_Linear_sRGB_MAT =
{
	 3.2409699419, -1.5373831776, -0.4986107603,
	-0.9692436363,  1.8759675015,  0.0415550574,
	 0.0556300797, -0.2039769589,  1.0569715142,
};

#line 47 "/Engine/Private/ColorSpace.ush"
static const float3x3 Linear_sRGB_2_XYZ_MAT =
{
	0.4123907993, 0.3575843394, 0.1804807884,
	0.2126390059, 0.7151686788, 0.0721923154,
	0.0193308187, 0.1191947798, 0.9505321522,
};

#line 54 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_XYZ( float3 LinearRGB )
{

	return mul(Linear_sRGB_2_XYZ_MAT, LinearRGB);



}

#line 63 "/Engine/Private/ColorSpace.ush"
float3 XYZ_2_LinearRGB( float3 XYZ )
{

	return mul(XYZ_2_Linear_sRGB_MAT, XYZ);



}

#line 78 "/Engine/Private/ColorSpace.ush"
float3 Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}

#line 92 "/Engine/Private/ColorSpace.ush"
static const float3 XYZ_WHITE_REF_NOMINAL = float3(0.9504559271, 1.0, 1.0890577508);

#line 97 "/Engine/Private/ColorSpace.ush"
static const float XYZ_2_LAB_DELTA_SQUARED = 0.04280618311;

#line 98 "/Engine/Private/ColorSpace.ush"
static const float XYZ_2_LAB_DELTA_CUBED = 0.00885645167;

#line 100 "/Engine/Private/ColorSpace.ush"
float xyz_otherwise(float t)
{
	return (t / (3.0 * XYZ_2_LAB_DELTA_SQUARED)) + 4.0 / 29.0;
}

#line 105 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_LAB( float3 LinearRGB )
{
	float3 XYZ = LinearRGB_2_XYZ(LinearRGB);

	float t_X = XYZ.x / XYZ_WHITE_REF_NOMINAL.x;
	float t_Y = XYZ.y / XYZ_WHITE_REF_NOMINAL.y;
	float t_Z = XYZ.z / XYZ_WHITE_REF_NOMINAL.z;

	float f_X = (t_X > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_X, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_X);
	float f_Y = (t_Y > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Y, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Y);
	float f_Z = (t_Z > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Z, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Z);

	float L = ( 116.0 * f_Y ) - 16.0;
	float a = 500.0 * ( f_X - f_Y );
	float b = 200.0 * ( f_Y - f_Z );

	return float3(L, a, b);
}

#line 124 "/Engine/Private/ColorSpace.ush"
float lab_otherwise(float t)
{
	return (3.0 * XYZ_2_LAB_DELTA_SQUARED) * (t - (4.0 / 29.0));
}

#line 129 "/Engine/Private/ColorSpace.ush"
float3 LAB_2_LinearRGB( float3 LAB )
{
	float L = LAB.x;
	float a = LAB.y;
	float b = LAB.z;

	float t_y = (L + 16.0) / 116.0;
	float t_x = t_y + (a / 500.0);
	float t_z = t_y - (b / 200.0);

	float f_x = pow(t_x, 3.0);
	float f_y = pow(t_y, 3.0);
	float f_z = pow(t_z, 3.0);

	if (f_x <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_x = lab_otherwise(t_x);
	}

	if (f_y <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_y = lab_otherwise(t_y);
	}

	if (f_z <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_z = lab_otherwise(t_z);
	}

	float X = XYZ_WHITE_REF_NOMINAL.x * f_x;
	float Y = XYZ_WHITE_REF_NOMINAL.y * f_y;
	float Z = XYZ_WHITE_REF_NOMINAL.z * f_z;

	return XYZ_2_LinearRGB(float3(X, Y, Z));
}

#line 164 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToExtinction(in float3 TransmittanceColor, in float ThicknessMeters)
{
	
	
	return -log(clamp(TransmittanceColor, 0.000000000001f, 1.0f)) / max(0.000000000001f, ThicknessMeters);
}

#line 171 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToMeanFreePath(in float3 TransmittanceColor, in float ThicknessMeters)
{
	return 1.0f / max(0.000000000001f, TransmittanceToExtinction(TransmittanceColor, ThicknessMeters));
}

#line 62 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileTexture(uint SampleIndex, uint SubsurfaceProfileInt)
{
	



	return View_SSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

#line 72 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileTexture(Texture2D InSSProfilesTexture, SamplerState InSSProfilesSampler, float4 InSSProfilesTextureSizeAndInvSize, uint SampleIndex, uint SubsurfaceProfileInt)
{
	



	return InSSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

#line 82 "/Engine/Private/SubsurfaceProfileCommon.ush"
void GetSubsurfaceProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{
	const float4 Data = GetSubsurfaceProfileTexture((((((0+1)+1)+1)+1)+1), SubsurfaceProfileInt);

	
	
	float MaterialRoughnessToLobeRoughness0 = lerp(1.0f, Data.x * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	float MaterialRoughnessToLobeRoughness1 = lerp(1.0f, Data.y * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	LobeMix = Data.z;

	
	LobeRoughness0 = max(saturate(Roughness * MaterialRoughnessToLobeRoughness0), 0.02f);
	LobeRoughness1 = saturate(Roughness * MaterialRoughnessToLobeRoughness1);
}

#line 98 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileSurfaceAlbedo(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture((0+1), SubsurfaceProfileInt);
}

#line 103 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileDiffuseMeanFreePath(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(((0+1)+1), SubsurfaceProfileInt);
}

#line 108 "/Engine/Private/SubsurfaceProfileCommon.ush"
float GetSubsurfaceProfileWorldUnitScale(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(0, SubsurfaceProfileInt).a;
}

#line 113 "/Engine/Private/SubsurfaceProfileCommon.ush"
float DecodeWorldUnitScale(float EncodedWorldUnitScale)
{
	return EncodedWorldUnitScale * 1/0.02f;
}

#line 118 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 DecodeDiffuseMeanFreePath(float4 EncodedDiffuseMeanFreePath)
{
	return EncodedDiffuseMeanFreePath * 1/(0.01f*0.2f);
}

#line 161 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileDMFPInCm(int SubsurfaceProfileInt)
{
	const float4 DiffuseMeanFreePath = DecodeDiffuseMeanFreePath(GetSubsurfaceProfileDiffuseMeanFreePath(SubsurfaceProfileInt));
	const float WorldUnitScale = DecodeWorldUnitScale(GetSubsurfaceProfileWorldUnitScale(SubsurfaceProfileInt));
	return DiffuseMeanFreePath * WorldUnitScale; 
}

#line 63 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetPerpendicularScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}

#line 91 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetSearchLightDiffuseScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}

#line 105 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetMFPFromDMFPCoeff(float3 DMFPSurfaceAlbedo, float3 MFPSurfaceAlbedo, float Dmfp2MfpMagicNumber = 0.6f)
{
	return Dmfp2MfpMagicNumber * GetPerpendicularScalingFactor3D(MFPSurfaceAlbedo) / GetSearchLightDiffuseScalingFactor3D(DMFPSurfaceAlbedo);
}

#line 110 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetMFPFromDMFPApprox(float3 SurfaceAlbedo, float3 TargetSurfaceAlbedo, float3 DMFP)
{
	return GetMFPFromDMFPCoeff(SurfaceAlbedo, TargetSurfaceAlbedo) * DMFP;
}

#line 122 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float4 GetSubsurfaceProfileMFPInCm(int SubsurfaceProfileInt)
{
	float4 DMFP = GetSubsurfaceProfileDMFPInCm(SubsurfaceProfileInt);
	float4 SurfaceAlbedo = GetSubsurfaceProfileSurfaceAlbedo(SubsurfaceProfileInt);

	return float4(GetMFPFromDMFPApprox(SurfaceAlbedo.xyz, SurfaceAlbedo.xyz, DMFP.xyz),0.0f);
}

#line 50 "/Engine/Private/GammaCorrectionCommon.ush"
float3 sRGBToLinear( float3 Color ) 
{
	Color = max(6.10352e-5, Color); 
	return  select_internal( Color > 0.04045 , pow( Color * (1.0 / 1.055) + 0.0521327, 2.4 ) , Color * (1.0 / 12.92) );
}

#line 10 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
struct FStrataLobeStatistic
{
	
	
	
	float3 Mu;

	
	float3 E;

	
	float Sigma;
};

#line 26 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
float StrataLobeRoughnessToVariance(float Roughness)
{
	
	const float SafeRoughness = clamp(Roughness, 0.0f, 0.999f);
	const float a11 = pow(SafeRoughness, 1.1f);
	return a11 / (1.0f - a11);
}

#line 34 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
float StrataLobeVarianceToRoughness(float Variance)
{
	
	return pow(Variance / (1.0f + Variance), 1.0f / 1.1f);
}

#line 57 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetDiracLobe(float3 Wi)
{
	FStrataLobeStatistic WiLobe;
	WiLobe.E = 1.0f;
	WiLobe.Mu = Wi;
	WiLobe.Sigma = 0.0f;
	return WiLobe;
}

#line 70 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataOppositeLobe(FStrataLobeStatistic LobeIn)
{
	FStrataLobeStatistic LobeOut = LobeIn;
	LobeOut.Mu = -LobeOut.Mu;
	return LobeOut;
}

#line 77 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetReflectedLobe(FStrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness)
{
	FStrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * InterfaceFDG;

	
	WoLobe.Mu = float3(-WiLobe.Mu.xy, WiLobe.Mu.z);

	WoLobe.Sigma = WiLobe.Sigma + StrataLobeRoughnessToVariance(InterfaceRoughness);

	return WoLobe;
}

#line 91 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetRefractedLobe(FStrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness, float InterfaceEta12)
{
	FStrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * (1.0f - InterfaceFDG);

	
	WoLobe.Mu.xy = -WiLobe.Mu.xy * InterfaceEta12;
	WoLobe.Mu.z  = -sign(WiLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 

	
	
	const float S = 1.0f;																			
	WoLobe.Sigma = (WiLobe.Sigma / InterfaceEta12) + StrataLobeRoughnessToVariance(S * InterfaceRoughness);

	return WoLobe;
}

#line 123 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataWeightLobe(FStrataLobeStatistic A, float Weight)
{
	
	
	
	
	FStrataLobeStatistic WoLobe = A;
	WoLobe.E *= Weight;
	WoLobe.Mu.xy = WoLobe.Mu.xy * Weight;
	WoLobe.Mu.z = sign(WoLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 
	WoLobe.Sigma *= Weight;
	return WoLobe;
}

#line 137 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataHorizontalMixLobes(FStrataLobeStatistic A, FStrataLobeStatistic B, float Mix)
{
	FStrataLobeStatistic WoLobe;
	WoLobe.E = lerp(A.E, B.E, Mix);
	WoLobe.Mu = lerp(A.Mu, B.Mu, Mix);
	WoLobe.Mu.z = sign(WoLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 
	WoLobe.Sigma = lerp(A.Sigma, B.Sigma, Mix);
	return WoLobe;
}

#line 209 "/Engine/Private/Strata/StrataSubsurface.ush"
uint StrataSubsurfaceProfileIdTo8bits(float In)
{
	
	return uint(In * 255.0f + 0.5f);
}

#line 133 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelHeader;

#line 134 "/Engine/Private/Strata/Strata.ush"
struct FStrataIntegrationSettings;

#line 135 "/Engine/Private/Strata/Strata.ush"
struct FStrataAddressing;

#line 136 "/Engine/Private/Strata/Strata.ush"
struct FStrataDBuffer;

#line 137 "/Engine/Private/Strata/Strata.ush"
struct FStrataData;

#line 142 "/Engine/Private/Strata/Strata.ush"
struct FStrataBSDF
{
	uint				State;			

	
	int					OperatorIndex;
	float3				LuminanceWeightV;

	float				CoverageAboveAlongN;
	float3				TransmittanceAboveAlongN;	

	int					bIsBottom;
	int					bIsTop;



	float				Coverage;		

	float3				Emissive;		
	float				ThicknessCm;	
	float3				TmpMFP;			

	float				TopLayerDataWeight;


	
	







	float4 VGPRs[5];

	uint   Haziness;					


	void EnableSlabMFPComputationSpace();

	void EnableSlabBSDFSimpleVolumetric();

	void StrataSanitizeBSDF();

	void StrataSetBSDFRoughness(in float Roughness);

	void UnpackFastPathSlabBSDF(uint2 PackedData01);

	void PostProcessSlabBeforeLighting(bool bIsStrataOpaqueMaterial);

	void PostProcessBSDFBeforeLighting(bool bIsStrataOpaqueMaterial);

	
	bool HasScatteringData();

	
	bool HasBackScattering();
};

#line 603 "/Engine/Private/Strata/Strata.ush"
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm);

#line 604 "/Engine/Private/Strata/Strata.ush"
void   StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index);

#line 612 "/Engine/Private/Strata/Strata.ush"
float3 UnpackR7G7B6Gamma2(uint rgb);

#line 630 "/Engine/Private/Strata/Strata.ush"
struct FHaziness
{
	bool  bSimpleClearCoat;
	float Roughness;
	float Weight;
};

#line 637 "/Engine/Private/Strata/Strata.ush"
FHaziness InitialiseHaziness()
{
	FHaziness Haziness = (FHaziness)0;
	return Haziness;
}

#line 644 "/Engine/Private/Strata/Strata.ush"
uint PackHaziness(FHaziness Haziness)
{
	uint High8Bits = (Haziness.bSimpleClearCoat ? 0x80 : 0x00) | uint(saturate(Haziness.Weight) * 127);
	uint Data = (High8Bits << 8) | PackR8(Haziness.Roughness);
	return Data;
}

#line 651 "/Engine/Private/Strata/Strata.ush"
FHaziness UnpackHaziness(uint Data)
{
	FHaziness Haziness;
	Haziness.bSimpleClearCoat	= Data & 0x8000;
	Haziness.Weight				= float(uint((Data>>8) & 0x7F)) * (1.0f / 127.0f);
	Haziness.Roughness			= UnpackR8(Data);
	return Haziness;
}

#line 675 "/Engine/Private/Strata/Strata.ush"
struct FStrataIrradianceAndOcclusion
{
	float MaterialAO;
	float IndirectIrradiance;
	uint  DiffuseIndirectSampleOcclusion;
};

#line 682 "/Engine/Private/Strata/Strata.ush"
FStrataIrradianceAndOcclusion InitIrradianceAndOcclusion(float InAO=1.0f)
{
	FStrataIrradianceAndOcclusion Out;
	Out.MaterialAO = 1.0f;
	Out.IndirectIrradiance = 1.0f;
	Out.DiffuseIndirectSampleOcclusion = 0x0u;
	return Out;
}

#line 730 "/Engine/Private/Strata/Strata.ush"
struct FStrataTopLayerData
{
	float3 BaseColor; 
	float3 WorldNormal;
	float  Roughness;
	uint   Material;
};

#line 773 "/Engine/Private/Strata/Strata.ush"
bool IsStrataMaterial(FStrataTopLayerData In)
{
	return In.Material > 0;
}

#line 994 "/Engine/Private/Strata/Strata.ush"
struct FStrataOperator
{
	
	int ParentIndex;
	uint LayerDepth;
	uint MaxDistanceFromLeaves;							
	uint Type;											
	int	LeftIndex;
	int RightIndex;
	float Weight;

	

	float  Coverage;									
	float3 ThroughputAlongV;							
	float3 TransmittanceAlongN;							

	float  VerticalTop_Coverage;						
	float3 VerticalTop_ThroughputAlongV;				
	float3 VerticalTop_TransmittanceAlongN;				

	float  VerticalBot_Coverage;						
	float3 VerticalBot_ThroughputAlongV;				
	float3 VerticalBot_TransmittanceAlongN;				

	
	float3				 TopDownRefractionWorldNormal;	
	FStrataLobeStatistic TopDownRefractionLobeStat;		
	FStrataLobeStatistic BottomUpRefractionLobeStat;	

	
	float				 OpaqueRoughRefractCoverage;	
	float				 OpaqueRoughRefractThicknessCm;	
	float				 OpaqueRoughRefractTopRoughness;

	
	FStrataLobeStatistic VerticalTop_TopDownRefractionLobeStat;	
	FStrataLobeStatistic VerticalTop_BottomUpRefractionLobeStat;
};

#line 1034 "/Engine/Private/Strata/Strata.ush"
FStrataOperator GetInitialisedStrataOperator()
{
	FStrataOperator StrataOp = (FStrataOperator)0;
	StrataOp.ParentIndex = -1;
	StrataOp.LeftIndex = -1;
	StrataOp.RightIndex = -1;
	return StrataOp;
}

#line 1044 "/Engine/Private/Strata/Strata.ush"
struct FStrataTree
{
	int BSDFCount;
	uint OperatorCount;

	FStrataBSDF BSDFs[8u];
	FStrataOperator Operators[15];

	void UpdateSingleBSDFOperatorCoverageTransmittance(
		FStrataPixelHeader StrataPixelHeader,
		int BSDFIndex,
		FStrataIntegrationSettings Settings,
		FStrataAddressing NullStrataAddressing,
		float3 V);

	void UpdateSingleOperatorCoverageTransmittance(
		int OpIndex);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Weight(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Horizontal(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Vertical(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	FStrataData StrataAdd(FStrataData A, FStrataData B, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataWeight(FStrataData A, float Weight, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataVerticalLayering(FStrataData Top, FStrataData Base, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom);
};

#line 1084 "/Engine/Private/Strata/Strata.ush"
FStrataTree GetInitialisedStrataTree()
{
	FStrataTree Out;
	Out.BSDFCount = 0;
	Out.OperatorCount = 0;
	return Out;
}

#line 1281 "/Engine/Private/Strata/Strata.ush"
struct FStrataData
{
	FStrataBSDF InlinedBSDF;

	int  OperatorIndex;		


	float3 PreviewColor;	

};

#line 1292 "/Engine/Private/Strata/Strata.ush"
FStrataData GetInitialisedStrataData()
{
	FStrataData StrataData = (FStrataData)0;
	return StrataData;
}

#line 1298 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelFootprint
{
	float PixelRadiusInWorldSpace;	
	float NormalCurvatureRoughness; 
};

#line 1304 "/Engine/Private/Strata/Strata.ush"
FStrataPixelFootprint StrataGetPixelFootprint(float3 dPdx, float3 dPdy, float InNormalCurvatureRoughness)
{
	const float dX = lengthFast(dPdx);
	const float dY = lengthFast(dPdy);

	FStrataPixelFootprint Out;
	Out.PixelRadiusInWorldSpace = min(dX, dY) * 0.5f;
	Out.NormalCurvatureRoughness = InNormalCurvatureRoughness;
	return Out;
}

#line 1315 "/Engine/Private/Strata/Strata.ush"
FStrataPixelFootprint StrataGetPixelFootprint(float3 InWorldPosition, float InNormalCurvatureRoughness)
{




	const float3 dPdx = ddx(InWorldPosition);
	const float3 dPdy = ddy(InWorldPosition);
	return StrataGetPixelFootprint(dPdx, dPdy, InNormalCurvatureRoughness);

}

#line 1330 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataSlabBSDF(
	FStrataPixelFootprint InPixelFootprint,
	float3 DiffuseAlbedo, float3 F0, float3 F90,
	float Roughness, float Anisotropy,
	float SSSProfileID, float3 SSSMFP, float SSSMFPScale, float SSSPhaseAnisotropy, float UseSSSDiffusion,
	float3 Emissive, 
	float SecondRoughness, float SecondRoughnessWeight, float SecondRoughnessAsSimpleClearCoat,
	float FuzzAmount, float3 FuzzColor, float FuzzRoughness,
	float GlintValue, float2 GlintUV,
	float SpecularProfileId,
	float ThicknessCm,
	bool bIsThinSurface,
	bool bIsAtTheBottomOfTopology,	
	uint SharedLocalBasisIndex, inout uint SharedLocalBasisTypes)
{
	
	Roughness		= max(Roughness, InPixelFootprint.NormalCurvatureRoughness);
	SecondRoughness = max(SecondRoughness, InPixelFootprint.NormalCurvatureRoughness);
	FuzzRoughness	= max(FuzzRoughness, InPixelFootprint.NormalCurvatureRoughness);
	

	FStrataData StrataData = GetInitialisedStrataData();

	SSSMFPScale = saturate(SSSMFPScale);
	const bool bSSSProfilePlugged = SSSProfileID > 0.0f;
	const bool bMFPPlugged = any(SSSMFP > 0);
	bool bIsThin		= bIsAtTheBottomOfTopology && (bMFPPlugged && bIsThinSurface); 
	bool bHasSSSWrap	= bIsAtTheBottomOfTopology && (bMFPPlugged && !UseSSSDiffusion);
	bool bHasSSSProfile	= bIsAtTheBottomOfTopology && (bSSSProfilePlugged && SSSMFPScale > 0.f);
	bool bHasSSS		= bIsAtTheBottomOfTopology && (bMFPPlugged || bHasSSSProfile || bHasSSSWrap);

	FHaziness Haziness = InitialiseHaziness();

	
	if (!1 && bSSSProfilePlugged)
	{
		
		const uint SubsurfaceProfileUInt = StrataSubsurfaceProfileIdTo8bits(SSSProfileID);

		GetSubsurfaceProfileDualSpecular(SubsurfaceProfileUInt, Roughness, SSSMFPScale, Roughness, Haziness.Roughness, Haziness.Weight);

		SSSMFP = GetSubsurfaceProfileMFPInCm(SubsurfaceProfileUInt).xyz * SSSMFPScale;
	}
	else
	{
		Haziness.Roughness = SecondRoughness;
		Haziness.Weight = SecondRoughnessWeight;
		Haziness.bSimpleClearCoat = SecondRoughnessAsSimpleClearCoat > 0.0f;
	}

	
#line 1392 "/Engine/Private/Strata/Strata.ush"


	
	if (!1 && bHasSSSWrap)
	{
		SSSMFP = RescaleMFPToComputationSpace(SSSMFP, ThicknessCm, 100.0f);
		ThicknessCm = 100.0f;
	}

	const bool bHasGlint = GlintValue > 0.0f;
	const uint bHasHaziness = (((Haziness.Roughness != Roughness || bHasGlint)  && Haziness.Weight > 0.0f) || Haziness.bSimpleClearCoat) ? 1 : 0;
	const uint bHasAnisotropy = Anisotropy != 0 ? 1 : 0;
	const uint bHasFuzz = FuzzAmount > 0.0f ? 1 : 0;
	if (!1 && bHasAnisotropy)
	{
		StrataRequestSharedLocalBasisTangent(SharedLocalBasisTypes, SharedLocalBasisIndex);
	}

	
	
	
	
	
	
	

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 0 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;












#line 1451 "/Engine/Private/Strata/Strata.ush"







	  StrataData.InlinedBSDF .VGPRs[0].xyz			= DiffuseAlbedo;
	  StrataData.InlinedBSDF .VGPRs[1].xyz						= F0;
	  StrataData.InlinedBSDF .VGPRs[2].xyz					= F90;

	  StrataData.InlinedBSDF .VGPRs[0].w		= Roughness;

#line 1486 "/Engine/Private/Strata/Strata.ush"



	
	StrataData.InlinedBSDF.TmpMFP = SSSMFP * SSSMFPScale;

	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor = lerp(DiffuseAlbedo, F0, F0RGBToMetallic(F0));


	return StrataData;
}

#line 1523 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataUnlitBSDF(float3 Emissive, float3 TransmittanceColor, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 2 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = TransmittanceColor;
	  StrataData.InlinedBSDF .VGPRs[1].xyz = Normal;


	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= Emissive;


	return StrataData;
}

#line 1543 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataHairBSDF(float3 BaseColor, float Scatter, float Specular, float Roughness, float Backlit, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	
	
	  


		
	  
	

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 3 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = BaseColor;
	  StrataData.InlinedBSDF .VGPRs[0].w = Scatter;
	  StrataData.InlinedBSDF .VGPRs[1].x = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].y = Specular;
	  StrataData.InlinedBSDF .VGPRs[1].z = Backlit;
	  StrataData.InlinedBSDF .VGPRs[1].w = 0;


	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= BaseColor;


	return StrataData;
}

#line 1577 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataEyeBSDF(float3 DiffuseAlbedo, float Roughness, float IrisMask, float IrisDistance, float3 IrisNormal, float3 IrisPlaneNormal, float SSSProfileId, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 5 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = DiffuseAlbedo;
	  StrataData.InlinedBSDF .VGPRs[0].w = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].x = IrisDistance;
	  StrataData.InlinedBSDF .VGPRs[1].y = IrisMask;
	  StrataData.InlinedBSDF .VGPRs[2].xyz = IrisNormal;
	  StrataData.InlinedBSDF .VGPRs[3].xyz = IrisPlaneNormal;
	  StrataData.InlinedBSDF .VGPRs[1].z = SSSProfileId;
	  StrataData.InlinedBSDF .VGPRs[2].w = 0.028f;
	  StrataData.InlinedBSDF .VGPRs[3].w = 1.0f;

	const bool bHasSSS = SSSProfileId != 0;
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( bHasSSS ? (3u) : (0u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));

	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= DiffuseAlbedo;


	return StrataData;
}

#line 1606 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataSingleLayerWaterBSDF(
	float3 BaseColor, float Metallic, float Specular, float Roughness, float3 Emissive, float TopMaterialOpacity,
	float3 WaterAlbedo, float3 WaterExtinction, float WaterPhaseG, float3 ColorScaleBehindWater, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 4 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = BaseColor;
	  StrataData.InlinedBSDF .VGPRs[1].x = Metallic;
	  StrataData.InlinedBSDF .VGPRs[1].y = Specular;
	  StrataData.InlinedBSDF .VGPRs[1].z = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].w = TopMaterialOpacity;








	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= lerp(WaterAlbedo, BaseColor, TopMaterialOpacity);


	return StrataData;
}

#line 1669 "/Engine/Private/Strata/Strata.ush"
struct FStrataAddressing
{
	uint  CurrentIndex;
	uint2 PixelCoords;
	uint  ReadBytes;
};

#line 1878 "/Engine/Private/Strata/Strata.ush"
struct FSharedLocalBases
{
	uint Count;
	uint Types;
	float3 Normals[4];	
	float3 Tangents[4];
};

#line 1886 "/Engine/Private/Strata/Strata.ush"
FSharedLocalBases StrataInitialiseSharedLocalBases()
{
	FSharedLocalBases SharedLocalBases = (FSharedLocalBases)0;
	return SharedLocalBases;
}

#line 1892 "/Engine/Private/Strata/Strata.ush"
void StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index)
{
	Types = Types | (1u << Index);
}

#line 1905 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelHeader
{
	uint BSDFCount;

	uint State;


	
	FSharedLocalBases SharedLocalBases;
	
	FStrataTree StrataTree;
	FStrataIrradianceAndOcclusion IrradianceAO;

	
	void PreUpdateAllBSDFWithBottomUpOperatorVisit(FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllBSDFsOperatorCoverageTransmittance(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllOperatorsCoverageTransmittance();
	void UpdateAllBSDFWithBottomUpOperatorVisit();
	void PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllOperatorsCoverageTransmittance_FullySimplified();
	void UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified();

	void StrataUpdateTree(
		inout FStrataAddressing StrataAddressing,
		float3 V,
		FStrataIntegrationSettings Settings);

	void StrataUpdateTree(
		inout FStrataAddressing StrataAddressing,
		in FStrataData StrataData,
		float3 V,
		FStrataIntegrationSettings Settings,
		inout float OutCoverage,
		inout float3 OutTransmittancePreCoverage);




	Texture2DArray<uint>  StrataBuffer;
	uint SharedLocalBasesIndexOffset;
	uint SharedLocalBasesTypes_PackedHeader; 
	uint PackedTopLayerData;


	
	FStrataDBuffer StrataConvertToDBuffer(in FStrataBSDF InBSDF);
	void StrataConvertFromDBuffer(in FStrataDBuffer In, inout FStrataData OutData);

	
	uint GetMaterialMode()										{ return (this.State & (0x7)); }
	bool IsSimpleMaterial()										{ return (this.State & (0x7)) == 1 || 1; }
	bool IsSingleMaterial()										{ return (this.State & (0x7)) == 2 || 0; }
	bool IsComplexMaterial()									{ return (this.State & (0x7)) == 3 && !1 && !0; }
	bool IsSingleLayerWater()									{ return (this.State & (0x7)) == 4; }
	bool IsHair()												{ return (this.State & (0x7)) == 5; }
	bool IsEye()												{ return (this.State & (0x7)) == 6; }
	uint StrataGetBSDFType()
	{
		switch (this.GetMaterialMode())
		{
		case 1:
		case 2:
		case 3:	return 0;
		case 4:		return 4;
		case 5:			return 3;
		case 6:			return 5;
		default:								return 0;
		}
	}

	bool HasPrecShadowMask()									{ return (this.State & (1u << 3)) != 0; }
	bool HasZeroPrecShadowMask()								{ return (this.State & (1u << 4)) != 0; }
	bool DoesCastContactShadow()								{ return (this.State & (1u << 5)) != 0; }
	bool HasSubsurface()										{ return (this.State & (1u << 7)) != 0; }
	bool HasDynamicIndirectShadowCasterRepresentation()			{ return (this.State & (1u << 6)) != 0; }

	void SetHasPrecShadowMask(bool bIn)							{ this.State |= (bIn ? (1u << 3) : 0u); }
	void SetZeroPrecShadowMask(bool bIn)						{ this.State |= (bIn ? (1u << 4) : 0u); }
	void SetCastContactShadow(bool bIn)							{ this.State |= (bIn ? (1u << 5) : 0u); }
	void SetHasSubsurface(bool bIn)								{ this.State |= (bIn ? (1u << 7) : 0u); }
	void SetDynamicIndirectShadowCasterRepresentation(bool bIn)	{ this.State |= (bIn ? (1u << 6) : 0u); }

	bool IsStrataMaterial()										{ return this.GetMaterialMode() != 0; }
	void SetMaterialMode(uint MaterialMode)						{ this.State = (this.State & ~(0x7)) | (MaterialMode & (0x7)); }

	bool GetUsesComplexSpecialRenderPath()						{ return (this.State &  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) ))) != 0; }
	void SetUsesComplexSpecialRenderPath(bool bIn)				{ this.State |= (bIn ?  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) )) : 0u); }
};

#line 1997 "/Engine/Private/Strata/Strata.ush"
Texture2DArray<uint>  DummyStrataBuffer;

#line 2000 "/Engine/Private/Strata/Strata.ush"
FStrataPixelHeader InitialiseStrataPixelHeader()
{
	FStrataPixelHeader Out;
	Out.BSDFCount = 0;

	Out.SharedLocalBases = (FSharedLocalBases)0;
	Out.StrataTree = GetInitialisedStrataTree();
	Out.IrradianceAO = InitIrradianceAndOcclusion();



	Out.StrataBuffer = DummyStrataBuffer;

	Out.SharedLocalBasesIndexOffset = 0;
	Out.SharedLocalBasesTypes_PackedHeader = 0;
	Out.PackedTopLayerData = 0;

	Out.State = 0;
	Out.SetMaterialMode(1); 
	return Out;
}

#line 2022 "/Engine/Private/Strata/Strata.ush"
float3x3 StrataGetBSDFSharedBasis_InlineShading(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{

	
	float3 Normal  = StrataPixelHeader.SharedLocalBases.Normals[  uint(( BSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	float3 Tangent = StrataPixelHeader.SharedLocalBases.Tangents[  uint(( BSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	float3 Bitangent = cross(Normal, Tangent);
	return float3x3(Tangent, Bitangent, Normal);



}

#line 2068 "/Engine/Private/Strata/Strata.ush"
float3x3 StrataGetBSDFSharedBasis(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{

	return StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, BSDF, StrataAddressing);



}

#line 2080 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataAdd(FStrataData A, FStrataData B, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = A.PreviewColor + B.PreviewColor;


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 3;
	Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= B.OperatorIndex;

	Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;
	Operators[B.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

#line 2101 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataWeight(FStrataData A, float Weight, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float SafeWeight = saturate(Weight);

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = A.PreviewColor * SafeWeight;


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 0;
	Operators[OperatorIndex].Weight					= SafeWeight;
	Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;

	Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

#line 2123 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float ForegroundMixFactor = saturate(Mix);
	const float BackgroundMixFactor = 1.0 - ForegroundMixFactor;

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = lerp(Background.PreviewColor, Foreground.PreviewColor, Mix);


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 2;
	Operators[OperatorIndex].Weight					= Mix;
	Operators[OperatorIndex].LeftIndex				= Background.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= Foreground.OperatorIndex;

	Operators[Background.OperatorIndex].ParentIndex	= OperatorIndex;
	Operators[Foreground.OperatorIndex].ParentIndex	= OperatorIndex;

	return StrataData;
}

#line 2148 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataVerticalLayering(FStrataData Top, FStrataData Base, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = lerp(Top.PreviewColor, Base.PreviewColor, 0.5);


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 1;
	Operators[OperatorIndex].LeftIndex				= Top.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= Base.OperatorIndex;

	Operators[Top.OperatorIndex].ParentIndex		= OperatorIndex;
	Operators[Base.OperatorIndex].ParentIndex		= OperatorIndex;

	return StrataData;
}

#line 2170 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom)
{
	BSDFCount++;
	OperatorCount++;

	BSDFs[BSDFIndex] = StrataData.InlinedBSDF;
	
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].LayerDepth				= LayerDepth;
	Operators[OperatorIndex].MaxDistanceFromLeaves	= 0;
	Operators[OperatorIndex].Type					= 4;
	Operators[OperatorIndex].LeftIndex				= BSDFIndex;

	BSDFs[BSDFIndex].OperatorIndex					= OperatorIndex;
	BSDFs[BSDFIndex].bIsBottom						= bIsBottom;
	BSDFs[BSDFIndex].bIsTop							= LayerDepth == 0;

	StrataData.OperatorIndex = OperatorIndex;
	return StrataData;
}

#line 2637 "/Engine/Private/Strata/Strata.ush"
float SanitizeRoughness(float Roughness)
{



	
	
	
	Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	
	return saturate(max(View_MinRoughness, Roughness));

}

#line 2651 "/Engine/Private/Strata/Strata.ush"
float3 SanitizeDiffuseAlbedo(float3 DiffuseAlbedo)
{
	
	
	
	return saturate(DiffuseAlbedo) * ResolvedView.DiffuseOverrideParameter.www + ResolvedView.DiffuseOverrideParameter.xyz;
	


}

#line 2662 "/Engine/Private/Strata/Strata.ush"
float3 SanitizeF0(float3 F0)
{
	
	
	
	return saturate(F0) * ResolvedView.SpecularOverrideParameter.w + ResolvedView.SpecularOverrideParameter.xyz;
	


}

#line 2673 "/Engine/Private/Strata/Strata.ush"
float SanitizeF0(float F0)
{
	
	
	
	return saturate(F0) * ResolvedView.SpecularOverrideParameter.w + ResolvedView.SpecularOverrideParameter.x;
	


}

#line 2684 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::StrataSanitizeBSDF()
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
		case 0:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[1].xyz = SanitizeF0(  this .VGPRs[1].xyz);
			  this .VGPRs[2].xyz = saturate(  this .VGPRs[2].xyz);
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w);
			if (  uint(( this .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
			{
				FHaziness Haziness = UnpackHaziness(  this .Haziness);
				Haziness.Roughness = SanitizeRoughness(Haziness.Roughness);
				  this .Haziness = PackHaziness(Haziness);
			}
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w); 
			  this .VGPRs[1].w = clamp(  this .VGPRs[1].w, -1.f, 1.f);
			
		





			
			if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
			{
				  this .VGPRs[3].y = saturate(  this .VGPRs[3].y);
			}
			else if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u))
			{
				  this .VGPRs[3].xyz = clamp(  this .VGPRs[3].xyz, 0.0f, Max111110BitsFloat3);
			}

			  this .VGPRs[4].w = saturate(  this .VGPRs[4].w);
			  this .VGPRs[4].xyz = saturate(  this .VGPRs[4].xyz);
			  this .VGPRs[2].w = saturate(  this .VGPRs[2].w);
			break; 
		}
		case 3:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[0].w = saturate(  this .VGPRs[0].w);
			  this .VGPRs[1].x = SanitizeRoughness(  this .VGPRs[1].x);
			  this .VGPRs[1].y = SanitizeF0(  this .VGPRs[1].y);
			  this .VGPRs[1].z = saturate(  this .VGPRs[1].z);
			break;
		}
		case 5:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w);
			  this .VGPRs[1].x = saturate(  this .VGPRs[1].x);
			  this .VGPRs[1].y = saturate(  this .VGPRs[1].y);
			  this .VGPRs[2].xyz = normalize(  this .VGPRs[2].xyz);
			  this .VGPRs[3].xyz = normalize(  this .VGPRs[3].xyz);
			break;
		}
		case 4:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[1].x = saturate(  this .VGPRs[1].x);
			  this .VGPRs[1].y = SanitizeF0(  this .VGPRs[1].y);
			  this .VGPRs[1].z = SanitizeRoughness(  this .VGPRs[1].z);
			  this .VGPRs[1].w = saturate(  this .VGPRs[1].w);
		





			break;
		}
		case 2:
		{
		
			
			  this .Emissive = max(  this .Emissive, 0.0) ;
		
			  this .VGPRs[0].xyz = saturate(  this .VGPRs[0].xyz);
			  this .VGPRs[1].xyz = normalize(  this .VGPRs[1].xyz);
		}
	}
}

#line 2799 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::PostProcessSlabBeforeLighting(bool bIsStrataOpaqueMaterial)
{
	
	
	const bool bIsThin = this.bIsBottom &&   uint(( this .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) && bIsStrataOpaqueMaterial;

	
	
	
	const bool bIsSimpleVolume = !bIsThin &&   uint(( this .State >>( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) )) &  ((1u<<( 1 ))-1)) && (!bIsStrataOpaqueMaterial || (bIsStrataOpaqueMaterial && !this.bIsBottom));

	if (bIsSimpleVolume)
	{
		
		
		
		this.EnableSlabBSDFSimpleVolumetric();
	}
	else if (bIsThin)
	{
		
		
		if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
		{
			this.EnableSlabMFPComputationSpace();
		}
	}
	else
	{
		
		   this .State = ( this .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) | ((( 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) ));
	}
}

#line 2833 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::PostProcessBSDFBeforeLighting(bool bIsStrataOpaqueMaterial)
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0:
	{
		this.PostProcessSlabBeforeLighting(bIsStrataOpaqueMaterial);
		break;
	}
	}
}

#line 2845 "/Engine/Private/Strata/Strata.ush"
bool FStrataBSDF::HasScatteringData()
{
	const uint SSSType =   uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	return SSSType != (0u) && SSSType != (4u);
}

#line 2851 "/Engine/Private/Strata/Strata.ush"
bool FStrataBSDF::HasBackScattering()
{
	const uint SSSType =   uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	return SSSType != (0u) && SSSType != (4u);
}

#line 2908 "/Engine/Private/Strata/Strata.ush"
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm)
{
	
	
	
	
	return max(InMFPInCm * (InDstThicknessInCm / max(1e-10f, InSrcThicknessInCm)), 0.0f);
}

#line 2917 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::EnableSlabMFPComputationSpace()
{

	
	  this .VGPRs[3].xyz = this.TmpMFP;


	
	
	  this .VGPRs[3].xyz = RescaleMFPToComputationSpace(  this .VGPRs[3].xyz,   this .ThicknessCm, 100.0f);
}

#line 2929 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::EnableSlabBSDFSimpleVolumetric()
{
	this.EnableSlabMFPComputationSpace();

	
	
	
	   this .State = ( this .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( (4u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));
}

#line 2942 "/Engine/Private/Strata/Strata.ush"
uint StrataGetBSDFType(in FStrataBSDF BSDF)
{
	return   uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
}

#line 2982 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularF0(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[1].xyz;
	case 3: 			return DielectricSpecularToF0(  BSDF .VGPRs[1].y);
	case 5: 				return   BSDF .VGPRs[2].w;
	case 4: return DielectricSpecularToF0(  BSDF .VGPRs[1].y);
	}
	return 0.f;
}

#line 2993 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularColor(in FStrataBSDF BSDF) { return StrataGetBSDFSpecularF0(BSDF);  }

#line 2995 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularF90(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[2].xyz;
	case 3: 			return 1.0f;
	case 5: 				return   BSDF .VGPRs[3].w;
	case 4: return 1.0f;
	}
	return 0.f;
}

#line 3065 "/Engine/Private/Strata/Strata.ush"
float StrataGetBSDFRoughness(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[0].w;
	case 3: 			return   BSDF .VGPRs[1].x;
	case 5: 				return   BSDF .VGPRs[0].w;
	case 4: return   BSDF .VGPRs[1].z;
	}
	return 0.f;
}

#line 3077 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::StrataSetBSDFRoughness(in float Roughness)
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			  this .VGPRs[0].w = Roughness; break;
	case 3: 			  this .VGPRs[1].x = Roughness; break;
	case 5: 				  this .VGPRs[0].w  = Roughness; break;
	case 4:   this .VGPRs[1].z  = Roughness; break;
	}
}

#line 3160 "/Engine/Private/Strata/Strata.ush"
float3 StrataSrgbToLinear(float3 In)
{

	return sRGBToLinear(In);



}

#line 3209 "/Engine/Private/Strata/Strata.ush"
float3 UnpackR7G7B6Gamma2(uint rgb)
{
	float3 Out;
	Out.r = float((rgb >> 0)  & 0x7F) * (1.0f / 127.0f);
	Out.g = float((rgb >> 7)  & 0x7F) * (1.0f / 127.0f);
	Out.b = float((rgb >> 14) & 0x3F) * (1.0f /  63.0f);

	return StrataSrgbToLinear(Out);
}

#line 3443 "/Engine/Private/Strata/Strata.ush"
struct FStrataDBuffer
{
	float3 WorldNormal;
	float  Roughness;
	float3 BaseColor;
	float  Specular;
	float3 Emissive;
	float  Metallic;
	float  Coverage;

	
	
	
	float  OneMinusCoverage;
	float  OneMinusCoverage_BaseColor;
	float  OneMinusCoverage_WorldNormal;
	float  OneMinusCoverage_Roughness;
};

#line 3500 "/Engine/Private/Strata/Strata.ush"
FStrataDBuffer FStrataPixelHeader::StrataConvertToDBuffer(
	in FStrataBSDF InBSDF)
{
	FStrataDBuffer Out = (FStrataDBuffer)0;



	const float3 DiffuseColor =   InBSDF .VGPRs[0].xyz;
	const float3 F0 =   InBSDF .VGPRs[1].xyz;

	Out.Roughness =   InBSDF .VGPRs[0].w;
	Out.Metallic = F0RGBToMetallic(F0);
	Out.Specular = F0RGBToDielectricSpecular(F0);
	Out.BaseColor = lerp(DiffuseColor, F0, Out.Metallic);
	Out.Emissive =   InBSDF .Emissive;
	Out.WorldNormal = this.SharedLocalBases.Normals[  uint(( InBSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	Out.Coverage = InBSDF.Coverage;





	return Out;
}

#line 3525 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataConvertFromDBuffer(
	in FStrataDBuffer In,
	inout FStrataData OutData)
{
	
	const uint SharedLocalBasisIndex = 0;
	uint SharedLocalBasisTypes = 0;
	this.BSDFCount = 1;

	this.SharedLocalBases = StrataInitialiseSharedLocalBases();
	this.SharedLocalBases.Normals[SharedLocalBasisIndex] = In.WorldNormal;
	this.SharedLocalBases.Tangents[SharedLocalBasisIndex] = 0.f;
	this.IrradianceAO = InitIrradianceAndOcclusion();

	this.State = 0;
	this.SetMaterialMode(1);

	
	const FStrataPixelFootprint PixelFootprint = (FStrataPixelFootprint)0;
	const float DefaultThicknessCm = 0.01f;
	OutData = GetStrataSlabBSDF(
		PixelFootprint,		
		ComputeDiffuseAlbedo(In.BaseColor, In.Metallic),
		ComputeF0(In.Specular, In.BaseColor, In.Metallic),
		1.0f,				
		In.Roughness,		
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		In.Roughness,		
		0.f,				
		0.f.xx,				
		0.f, 				
		DefaultThicknessCm,
		false,				
		false,				
		SharedLocalBasisIndex,
		SharedLocalBasisTypes);

	OutData.InlinedBSDF.Emissive = In.Emissive;
	OutData.InlinedBSDF.Coverage = In.Coverage;

}

#line 3581 "/Engine/Private/Strata/Strata.ush"
struct FStrataIntegrationSettings
{
	bool bForceFullyRough;
	bool bRoughDiffuseEnabled;
	bool bRoughnessTracking;

	
	int  SliceStoringDebugStrataTreeData;
	int  PeelLayersAboveDepth;
};

#line 3615 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	float3 V,
	FStrataIntegrationSettings Settings)
{
	
#line 3643 "/Engine/Private/Strata/Strata.ush"

	{
		
		
		
		this.PreUpdateAllBSDFWithBottomUpOperatorVisit(StrataAddressing, V);

		
		
		
		this.UpdateAllBSDFsOperatorCoverageTransmittance(Settings, StrataAddressing, V);

		
		
		
		this.UpdateAllOperatorsCoverageTransmittance();

		
		
		
		this.UpdateAllBSDFWithBottomUpOperatorVisit();
	}

}

#line 3668 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	in FStrataData StrataData,		
	float3 V,
	FStrataIntegrationSettings Settings,
	inout float OutCoverage,
	inout float3 OutTransmittancePreCoverage)
{
	this.StrataUpdateTree(
		StrataAddressing,
		V,
		Settings);

	OutCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].Coverage);
	OutTransmittancePreCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].ThroughputAlongV);
}

#line 3778 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::UnpackFastPathSlabBSDF(uint2 PackedData01)
{
	const uint PackedData8Bits		= PackedData01.y & 0xFF;
	const uint PackedData32Bits		= PackedData01.x;
	const uint PackedF020Bits		= ((PackedData8Bits << 12) & 0xFF000) | (PackedData32Bits & 0xFFF);
	const uint PackedDiffuse20Bits	= (PackedData32Bits >> 12) & 0xFFFFF;

	  this .VGPRs[0].xyz	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	  this .VGPRs[1].xyz				= UnpackR7G7B6Gamma2(PackedF020Bits);

	float4 Data1 = UnpackRGBA8(PackedData01.y);
	  this .VGPRs[0].w			= Data1.y;
	  this .VGPRs[1].w			= Data1.z * 2.f - 1.f;
	  this .VGPRs[3].w	= Data1.w * 2.f - 1.f;
}

#line 95 "/Engine/Private/CapsuleLight.ush"
float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 115 "/Engine/Private/CapsuleLight.ush"

		
		
		
		
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}




	return NoL;
}

#line 23 "/Engine/Private/LightData.ush"
struct FRectTexture
{
	float2 AtlasUVOffset;
	float2 AtlasUVScale;
	float  AtlasMaxLevel;
};

#line 30 "/Engine/Private/LightData.ush"
FRectTexture InitRectTexture()
{
	FRectTexture Out;
	Out.AtlasUVOffset = 0;
	Out.AtlasUVScale  = 0;
	Out.AtlasMaxLevel = 32;
	return Out;
}

#line 14 "/Engine/Private/RectLight.ush"
struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};

#line 23 "/Engine/Private/RectLight.ush"
float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference = false)
{

	const bool bIsValid = RectTexture.AtlasMaxLevel < 32;
	const float2 RectTextureSize = RectTexture.AtlasUVScale * View_RectLightAtlasSizeAndInvSize.xy;
	Level += log2(min(RectTextureSize.x, RectTextureSize.y)) - 2.f;
	Level  = min(Level, RectTexture.AtlasMaxLevel);

	RectUV = saturate(RectUV) * RectTexture.AtlasUVScale + RectTexture.AtlasUVOffset;
	return bIsValid ? View_RectLightAtlasTexture.SampleLevel(View_SharedTrilinearClampedSampler, RectUV, bIsReference ? 0 : Level).rgb : 1.f;



}

#line 278 "/Engine/Private/RectLight.ush"
float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{

	
	L += Rect.Axis[2] * saturate( 0.001 - dot( Rect.Axis[2], L ) );

	
	float DistToPlane = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * DistToPlane;

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

	
    float2 RectUV = (PointInRect + Rect.Offset) / max(0.0001f, Rect.FullExtent) * float2(0.5, -0.5) + 0.5;
	
	float Level = log2( DistToPlane * rsqrt( max(0.0001f, Rect.FullExtent.x * Rect.FullExtent.y) ) );

    return SampleRectTexture(RectTexture, RectUV, Level);



}

#line 303 "/Engine/Private/RectLight.ush"
float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );
	
	

	








	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );
	
	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( 1 - c01 * c01 ) - w01;


	return w01;
}

#line 328 "/Engine/Private/RectLight.ush"
float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );	
	float3 L1 = normalize( Poly[1] );	
	float3 L2 = normalize( Poly[2] );	
	float3 L3 = normalize( Poly[3] );	
	








	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );








	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	return L;
}

#line 365 "/Engine/Private/RectLight.ush"
struct FRectLTC
{
	float3x3 LTC;
	float3x3 InvLTC;
	float3 IrradianceScale;
};

#line 373 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_GGX( float Roughness, float3 SpecularColor, float NoV)
{
	
	const float3 F0  = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);

	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);
   
	float4 LTCMat = View_GGXLTCMatTexture.SampleLevel( View_GGXLTCMatSampler, UV, 0 );
	float4 LTCAmp = View_GGXLTCAmpTexture.SampleLevel( View_GGXLTCAmpSampler, UV, 0 );

	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3(        0, 1,        0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};

	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;

	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3(	          0, 1,           0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};

	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;
	return Out;
}

#line 440 "/Engine/Private/RectLight.ush"
float3 RectApproxLTC(FRectLTC In, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{	
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	
	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );

	In.LTC = mul( In.LTC, TangentBasis );
	In.InvLTC = mul( transpose( TangentBasis ), In.InvLTC );

	float3 Poly[4];
	Poly[0] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );

	
	float3 L = PolygonIrradiance( Poly );

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	
	
	
	float SinAlphaSqr = Length;

	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;

	
	Irradiance = -min(-Irradiance, 0.0);









	
	
	L = mul( In.InvLTC, L );
	OutMeanLightWorldDirection = L;

	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );
	
	return LightColor * Irradiance * In.IrradianceScale;
}

#line 499 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const FRectLTC LTC = GetRectLTC_GGX(Roughness, SpecularColor, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}

#line 510 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC(float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, SpecularColor, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 7 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLight
{
	float		SphereSinAlpha;
	float		SphereSinAlphaSoft;
	float		LineCosSubtended;

	float3		FalloffColor;

	FRect		Rect;
	FRectTexture Texture;

	uint		IsRectAndDiffuseMicroReflWeight;
};

#line 21 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};

#line 45 "/Engine/Private/AreaLightCommon.ush"
float GetAreaLightDiffuseMicroReflWeight(FAreaLight AreaLight)
{
	return asfloat(AreaLight.IsRectAndDiffuseMicroReflWeight >> 1);
}

#line 55 "/Engine/Private/AreaLightCommon.ush"
FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{
	
	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}

#line 138 "/Engine/Private/ShadingModels.ush"
struct FShadowTerms
{
	float	SurfaceShadow;
	float	TransmissionShadow;
	float	TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};

#line 156 "/Engine/Private/ShadingModels.ush"
float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );
	
	
}

#line 163 "/Engine/Private/ShadingModels.ush"
float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{
		
		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}

	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}

	if( AreaLight.LineCosSubtended < 1 )
	{

		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / Line_a2 );






	}

	return Energy;
}

#line 94 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataBSDFContext
{
	FStrataBSDF BSDF;

	float3 N;
	float3 X;
	float3 Y;
	float3 V;
	float3 R;
	float3 H;
	float3 B;

	float3 L;	

	BxDFContext Context;
	float SatNoL;
	float SatNoV;

	float3x3 TangentBasis;
	float3 TangentV;
	float3 TangentH;
	float3 TangentB; 
	float3 TangentL;
	
	uint2 PixelCoord; 

	void StrataUpdateBSDFContext(float3 NewL);
};

#line 123 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(float3x3 TangentBasis, FStrataBSDF BSDF, float3 V, float3 L, bool bHasValidL=true, uint2 InPixelCoord=0)
{
	FStrataBSDFContext BSDFContext = (FStrataBSDFContext)0;

	BSDFContext.BSDF = BSDF;

	BSDFContext.X = TangentBasis[0]; 
	BSDFContext.Y = TangentBasis[1];
	BSDFContext.N = TangentBasis[2]; 
	BSDFContext.V = V;
	BSDFContext.R = 2 * dot(BSDFContext.V, BSDFContext.N) * BSDFContext.N - BSDFContext.V;
	BSDFContext.L = bHasValidL ? L : BSDFContext.R;
	BSDFContext.H = normalize(BSDFContext.V + BSDFContext.L);
	BSDFContext.B = normalize(BSDFContext.R + BSDFContext.L);

	BSDFContext.Context = (BxDFContext)0;







	{
		Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, BSDFContext.L);
	}
	BSDFContext.TangentBasis = float3x3(BSDFContext.X, BSDFContext.Y, BSDFContext.N);

	BSDFContext.TangentV = mul(BSDFContext.TangentBasis, BSDFContext.V);
	BSDFContext.TangentH = mul(BSDFContext.TangentBasis, BSDFContext.H);
	BSDFContext.TangentB = mul(BSDFContext.TangentBasis, BSDFContext.B);
	BSDFContext.TangentL = normalize(mul(BSDFContext.TangentBasis, BSDFContext.L));

	BSDFContext.SatNoL = saturate(BSDFContext.Context.NoL);
	BSDFContext.SatNoV = saturate(BSDFContext.Context.NoV);








	BSDFContext.PixelCoord = InPixelCoord;

	return BSDFContext;
}

#line 171 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(FStrataPixelHeader StrataPixelHeader, FStrataBSDF BSDF, const FStrataAddressing StrataAddressing, float3 V)
{
	float3 UnusedL = float3(0, 0, 1);
	float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
	return StrataCreateBSDFContext(TangentBasis, BSDF, V, UnusedL, false, StrataAddressing.PixelCoords);
}

#line 178 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(FStrataPixelHeader StrataPixelHeader, FStrataBSDF BSDF, const FStrataAddressing StrataAddressing, float3 V, float3 L)
{
	float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
	return StrataCreateBSDFContext(TangentBasis, BSDF, V, L, true, StrataAddressing.PixelCoords);
}

#line 184 "/Engine/Private/Strata/StrataEvaluation.ush"
void FStrataBSDFContext::StrataUpdateBSDFContext(float3 NewL)
{
	
	this.L = NewL;
	Init(this.Context, this.N, this.V, this.L);
	this.R		 = 2 * dot(this.V, this.N) * this.N - this.V;
	this.H		 = normalize(this.V + this.L);
	this.B		 = normalize(this.R + this.L);

	this.TangentH = mul(this.TangentBasis, this.H);
	this.TangentB = mul(this.TangentBasis, this.B);
	this.TangentL = normalize(mul(this.TangentBasis, this.L));

	this.SatNoL	 = saturate(this.Context.NoL);
	this.SatNoV	 = saturate(this.Context.NoV);
}

#line 228 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_D_GGX(float Roughness, float a2, float NoH)
{



	return D_GGX(a2, NoH);

}

#line 242 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_Vis_GGX(float Roughness, float a2, float NoV, float NoL)
{





	return Vis_SmithJointApprox(a2, NoV, NoL);

}

#line 259 "/Engine/Private/Strata/StrataEvaluation.ush"
float3 Strata_F_GGX(float3 F0, float3 F90, float VoH)
{




	return F_Schlick(F0, F90, VoH);

}

#line 272 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataEvaluateResult
{
	float3 IntegratedDiffuseValue;
	float3 IntegratedSpecularValue;

	
	float3 DiffuseColor;

	float3 EmissivePathValue;

	float3 DiffusePathValue;
	float3 SpecularPathValue;
	float3 SpecularHazePathValue;
	float3 TransmissionPathValue;

	
	
	float SpecularPathProbability;
	float SpecularHazePathProbability;

	float  DiffusePDF;
	float  SpecularPDF;
	float  SpecularHazePDF;
	float  TransmissionPDF;

	float3 ThroughputV;					
	float3 TransmittanceAlongN;			
	bool   bSubsurface;					
	bool   bApplyProjectedSolidAngle;	
};

#line 309 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEvaluateResult StrataEvaluateBSDFCommon(FStrataBSDFContext BSDFContext, FShadowTerms ShadowTerms, FAreaLightIntegrateContext AreaLightContext, FStrataIntegrationSettings Settings, int IntegrationType)
{
	FStrataEvaluateResult Sample = (FStrataEvaluateResult)0;

	const float OpaqueBSDFThroughput = 0.0f;

	const uint BSDFType =   uint(( BSDFContext.BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	switch (BSDFType)
	{
		case 0:
		{
			float3 DiffuseColor			=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0					=   BSDFContext.BSDF .VGPRs[1].xyz;
			float3 F90					=   BSDFContext.BSDF .VGPRs[2].xyz;
			const float SafeRoughness	= MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);
			const bool bHasAnisotropy	=   uint(( BSDFContext.BSDF .State >>( 0 )) &  ((1u<<( 1 ))-1));
			const bool bHaziness		=   uint(( BSDFContext.BSDF .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1));

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			float Alpha2Spec = Pow4(SafeRoughness);

			float NoV, VoH, NoH;
		











			{
				Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, AreaLightContext.L);

				NoV = BSDFContext.Context.NoV;
				VoH = BSDFContext.Context.VoH;
				NoH = BSDFContext.Context.NoH;

				SphereMaxNoH(BSDFContext.Context, AreaLightContext.AreaLight.SphereSinAlpha, true);
			}
			BSDFContext.Context.NoV = saturate(max(abs(BSDFContext.Context.NoV), 1e-10f));

			
			
			

			if (Settings.bRoughDiffuseEnabled && any(DiffuseColor > 0))
			{
				
				
				
				
				Sample.DiffusePathValue = Diffuse_Chan(DiffuseColor, Alpha2Spec, NoV, AreaLightContext.NoL, VoH, NoH, GetAreaLightDiffuseMicroReflWeight(AreaLightContext.AreaLight));
			}
			else

			{
				Sample.DiffusePathValue = Diffuse_Lambert(DiffuseColor);
			}
			Sample.IntegratedDiffuseValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * Sample.DiffusePathValue * AreaLightContext.AreaLight.FalloffColor;
			Sample.DiffuseColor		= DiffuseColor;
			Sample.DiffusePDF		= BSDFContext.SatNoL / PI;
			Sample.bSubsurface		=   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u) ||   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);




			
			
			
			
			

			const bool bIsRectLight = IntegrationType == 2;

			
			float PDF = 0;
			float DirectionalAlbedo_SpecularTransmission = 1.0f;
			{
				float3 MSScale = 1.0f;
				{
					FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
					DirectionalAlbedo_SpecularTransmission = ComputeEnergyPreservation(EnergyTerms);
					MSScale = ComputeEnergyConservation(EnergyTerms);
				}
				
				
				
				Sample.DiffusePathValue *= DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue *= DirectionalAlbedo_SpecularTransmission;
			
				float D = 0;
				float Vis = 0;

				float3 RectLightSpec = 0;
				
#line 447 "/Engine/Private/Strata/StrataEvaluation.ush"

				{
					[branch]
					if (bIsRectLight)
					{
						
						{
							float3 MeanLightWorldDirection = 0.0f;
							RectLightSpec = RectGGXApproxLTC(SafeRoughness, F0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture, MeanLightWorldDirection);
							
							
						
#line 470 "/Engine/Private/Strata/StrataEvaluation.ush"


							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
							PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
					else
					{
						

						
						{
							if(IntegrationType == 0)
							{
							









								{
									D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
								}
							}
							else
							{
								const float Energy = EnergyNormalization(Alpha2Spec, BSDFContext.Context.VoH, AreaLightContext.AreaLight);

							









								{
									D = Energy * Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
								}
							}

							Vis = Strata_Vis_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoV, AreaLightContext.NoL);
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
							PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
				}

				if (bIsRectLight)
				{
					Sample.SpecularPathValue = MSScale * RectLightSpec;
				}
				else
				{
					const float3 FresnelTerm = Strata_F_GGX(F0, F90, BSDFContext.Context.VoH);
					Sample.SpecularPathValue = D * Vis * MSScale * FresnelTerm;
				}

				Sample.SpecularPathProbability     = 1.0f;
				Sample.SpecularHazePathProbability = 0.0f;
				Sample.IntegratedSpecularValue = Sample.SpecularPathValue;
			}

			
			float HazePDF = 0;
			
#line 655 "/Engine/Private/Strata/StrataEvaluation.ush"


			
			







			{
				float3 CommonTerm = 0.0f;
				if (bIsRectLight)
				{
					CommonTerm = ShadowTerms.SurfaceShadow; 
				}
				else
				{
					CommonTerm = (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor;
				}
				Sample.IntegratedSpecularValue *= CommonTerm;
			}

			Sample.SpecularPDF = PDF * Sample.SpecularPathProbability;
			Sample.SpecularHazePDF = HazePDF * Sample.SpecularHazePathProbability;


			
			
			
			
			
			Sample.EmissivePathValue =   BSDFContext.BSDF .Emissive;

			Sample.ThroughputV			= OpaqueBSDFThroughput;
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;

			
			
			

			
#line 773 "/Engine/Private/Strata/StrataEvaluation.ush"


			
			
			

			
#line 838 "/Engine/Private/Strata/StrataEvaluation.ush"


			
			
			
			
#line 884 "/Engine/Private/Strata/StrataEvaluation.ush"


			
			
			
			

			
#line 937 "/Engine/Private/Strata/StrataEvaluation.ush"


			break;
		}

		
#line 1112 "/Engine/Private/Strata/StrataEvaluation.ush"

	}

	return Sample;
}

#line 1119 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEvaluateResult StrataEvaluateBSDF(FStrataBSDFContext BSDFContext, FStrataIntegrationSettings Settings)
{
	FShadowTerms IdentityShadow = { 1, 1, 1, InitHairTransmittanceData() };
	FAreaLightIntegrateContext DummyAreaLightContext = InitAreaLightIntegrateContext();
	DummyAreaLightContext.L = BSDFContext.L;
	DummyAreaLightContext.NoL = BSDFContext.Context.NoL;
	DummyAreaLightContext.Falloff = 1;
	return StrataEvaluateBSDFCommon(BSDFContext, IdentityShadow, DummyAreaLightContext, Settings, 0);
}

#line 22 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateSingleBSDFOperatorCoverageTransmittance(
	FStrataPixelHeader StrataPixelHeader,
	int BSDFIndex,
	FStrataIntegrationSettings Settings,
	FStrataAddressing NullStrataAddressing,
	float3 V)
{


	



	

	
	this.BSDFs[BSDFIndex].Coverage = int(this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].LayerDepth) < Settings.PeelLayersAboveDepth && !this.BSDFs[BSDFIndex].bIsBottom ? 0.0f : this.BSDFs[BSDFIndex].Coverage;


	float CurrentBSDFCoverage = this.BSDFs[BSDFIndex].Coverage;
	float Roughness = StrataGetBSDFRoughness(this.BSDFs[BSDFIndex]);
	float3x3 TangentBasis = StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, this.BSDFs[BSDFIndex], NullStrataAddressing);


	Roughness = Settings.bRoughnessTracking ? Roughness : 0.0;


	
	this.BSDFs[BSDFIndex].StrataSanitizeBSDF();

	


	
	
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractThicknessCm  = this.BSDFs[BSDFIndex].bIsBottom ? 0.0f					: this.BSDFs[BSDFIndex].ThicknessCm;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractCoverage	  = this.BSDFs[BSDFIndex].bIsTop    ? this.BSDFs[BSDFIndex].Coverage	: 0.0f;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractTopRoughness = this.BSDFs[BSDFIndex].bIsTop    ? Roughness				: 0.0f;

	const bool bIsStrataOpaqueMaterial = ((1 && 1) && ((!(0 > 0) && (1 || 0 || 0 || 1 || 0 || 0)<=0) || ((0 > 0) && (0 == 0)))) > 0;
	this.BSDFs[BSDFIndex].PostProcessBSDFBeforeLighting(bIsStrataOpaqueMaterial);

	
	float3 LEqualN = TangentBasis[2];
	FStrataBSDFContext StrataBSDFContext = StrataCreateBSDFContext(StrataPixelHeader, this.BSDFs[BSDFIndex], NullStrataAddressing, V, LEqualN);
	FStrataEvaluateResult BSDFEvaluate = StrataEvaluateBSDF(StrataBSDFContext, Settings);

	
	
	
	
	this.BSDFs[BSDFIndex].LuminanceWeightV = float3(1.0f, 1.0f, 1.0f) * CurrentBSDFCoverage;

	
	this.BSDFs[BSDFIndex].CoverageAboveAlongN = 0.0f;
	this.BSDFs[BSDFIndex].TransmittanceAboveAlongN = float3(1.0f, 1.0f, 1.0f);

	
	this.BSDFs[BSDFIndex].TopLayerDataWeight = 1.0f;

	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].Coverage				= CurrentBSDFCoverage;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].ThroughputAlongV		= BSDFEvaluate.ThroughputV;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TransmittanceAlongN	= BSDFEvaluate.TransmittanceAlongN;

	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(Roughness, StrataBSDFContext.SatNoV, StrataGetBSDFSpecularColor(this.BSDFs[BSDFIndex]), StrataGetBSDFSpecularF90(this.BSDFs[BSDFIndex]));
	{
		const float TopDownInterfaceEta = this.BSDFs[BSDFIndex].bIsTop ? 1.0f / 1.0f : 1.0f;
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataGetDiracLobe(V), EnergyTerms.E, Roughness, TopDownInterfaceEta);
		
		RefractedLobe.E *= BSDFEvaluate.ThroughputV;
		
		RefractedLobe = StrataWeightLobe(RefractedLobe, CurrentBSDFCoverage);
		this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TopDownRefractionLobeStat = RefractedLobe;
	}

	
	{
		const float BottomUpInterfaceEta = this.BSDFs[BSDFIndex].bIsTop ? 1.0f / 1.0f : 1.0f;
		const float3 NormalDown = float3(0, 0, -1);
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataGetDiracLobe(NormalDown), EnergyTerms.E, Roughness, BottomUpInterfaceEta);
		
		RefractedLobe.E *= BSDFEvaluate.ThroughputV;
		
		RefractedLobe = StrataWeightLobe(RefractedLobe, CurrentBSDFCoverage);
		this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].BottomUpRefractionLobeStat = RefractedLobe;
	}

#line 128 "/Engine/Private/Strata/StrataTree.ush"

	
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TopDownRefractionWorldNormal = TangentBasis[2];





}

#line 139 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateSingleOperatorCoverageTransmittance(int OpIndex)
{






	
	
	
	
	this.Operators[OpIndex].LayerDepth = this.Operators[this.Operators[OpIndex].LeftIndex].LayerDepth;

	switch (this.Operators[OpIndex].Type)
	{

	case 0:
	{
		const float Weight = saturate(this.Operators[OpIndex].Weight);
		this.Operators[OpIndex].Coverage				= Weight * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		this.Operators[OpIndex].ThroughputAlongV		= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		this.Operators[OpIndex].TransmittanceAlongN	= this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataWeightLobe(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, Weight);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal * Weight;

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataWeightLobe(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, Weight);

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm;
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage * Weight;
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness;
		break;
	}

	case 1:
	{
		const float3 TopThroughputAlongV	= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		const float3 TopTransmittanceAlongN = this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;
		const float3 BotThroughputAlongV	= this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV;
		const float3 BotTransmittanceAlongN = this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN;
		const float TopCoverage = this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		const float BotCoverage = this.Operators[this.Operators[OpIndex].RightIndex].Coverage;

#line 200 "/Engine/Private/Strata/StrataTree.ush"

		FVerticalLayeringInfo Info = GetVerticalLayeringInfo(TopCoverage, BotCoverage);

		this.Operators[OpIndex].Coverage				= Info.Coverage;
		this.Operators[OpIndex].ThroughputAlongV		= Info.TransmittanceOnlyTop * TopThroughputAlongV +		Info.TransmittanceOnlyBottom * BotThroughputAlongV +	Info.TransmittanceTopAndBottom * TopThroughputAlongV * BotThroughputAlongV;
		this.Operators[OpIndex].TransmittanceAlongN  = Info.TransmittanceOnlyTop* TopTransmittanceAlongN + Info.TransmittanceOnlyBottom * BotTransmittanceAlongN + Info.TransmittanceTopAndBottom * TopTransmittanceAlongN * BotTransmittanceAlongN;


		this.Operators[OpIndex].VerticalTop_Coverage				= this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		this.Operators[OpIndex].VerticalTop_ThroughputAlongV		= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		this.Operators[OpIndex].VerticalTop_TransmittanceAlongN  = this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;

		this.Operators[OpIndex].VerticalBot_Coverage				= this.Operators[this.Operators[OpIndex].RightIndex].Coverage;
		this.Operators[OpIndex].VerticalBot_ThroughputAlongV		= this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV;
		this.Operators[OpIndex].VerticalBot_TransmittanceAlongN	= this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN;

		
		{
			const float TopDownInterfaceEta = 1.0f;
			this.Operators[OpIndex].TopDownRefractionLobeStat = StrataGetRefractedLobe(StrataOppositeLobe(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat), 
				0.0f, StrataLobeVarianceToRoughness(this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat.Sigma), TopDownInterfaceEta);
			this.Operators[OpIndex].TopDownRefractionLobeStat.E *= saturate(this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV + (1.0f - this.Operators[this.Operators[OpIndex].RightIndex].Coverage)); 

			
			const float RefractionNormalMix = saturate((Info.SurfaceBottom + 0.5f * Info.TransmittanceTopAndBottom * dot(TopThroughputAlongV, 0.33.xxx)) / max(1e-10f, Info.Coverage));
			this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, RefractionNormalMix);
		}

		
		{
			const bool bIsTop = this.Operators[OpIndex].LayerDepth == 0;
			const float BottomUpInterfaceEta = bIsTop ? 1.0f / 1.0f : 1.0f;
			this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataGetRefractedLobe(StrataOppositeLobe(this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat), 
				0.0f, StrataLobeVarianceToRoughness(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat.Sigma), BottomUpInterfaceEta);
			this.Operators[OpIndex].BottomUpRefractionLobeStat.E *= saturate(this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV + (1.0f - this.Operators[this.Operators[OpIndex].LeftIndex].Coverage)); 
		}

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm + this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm;
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage;
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness;

		this.Operators[OpIndex].VerticalTop_TopDownRefractionLobeStat = this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat;
		this.Operators[OpIndex].VerticalTop_BottomUpRefractionLobeStat = this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat;
		break;
	}

	case 2:
	{
		const float Mix = saturate(this.Operators[OpIndex].Weight);
		const float AMix = 1.0 - Mix;
		const float BMix = Mix;

		this.Operators[OpIndex].Coverage = AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage;
		this.Operators[OpIndex].ThroughputAlongV    = (AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage * this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV    + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage * this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV)    / max(1e-10f, AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		this.Operators[OpIndex].TransmittanceAlongN = (AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage * this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage * this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN) / max(1e-10f, AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage);

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat, BMix);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, BMix);

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat, BMix);

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm,  this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm,  BMix);
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage,     this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractCoverage,     BMix);
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness, this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractTopRoughness, BMix);
		break;
	}

	case 3:
	{
		const float SafeABSDFCoverage = saturate(this.Operators[this.Operators[OpIndex].LeftIndex].Coverage);
		const float SafeBBSDFCoverage = saturate(this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		const float AMixFactor = SafeABSDFCoverage / max(1e-10f, SafeABSDFCoverage + SafeBBSDFCoverage);

		this.Operators[OpIndex].Coverage = saturate(this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		this.Operators[OpIndex].ThroughputAlongV    = lerp(this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV,    this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV,    AMixFactor);
		this.Operators[OpIndex].TransmittanceAlongN = lerp(this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN, this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN, AMixFactor);

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat, 0.5f);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, 0.5f);

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat, 0.5f);

		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm,  this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm,  0.5f);
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage,     this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractCoverage,     0.5f);
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness, this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractTopRoughness, 0.5f);
		break;
	}

	}






}

#line 305 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Weight(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	const float Weight = saturate(this.Operators[OpIndex].Weight);
	this.BSDFs[BSDFIndex].LuminanceWeightV *= Weight;
	this.BSDFs[BSDFIndex].Coverage *= Weight;

	this.BSDFs[BSDFIndex].TopLayerDataWeight *= Weight;


}

#line 321 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Horizontal(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	const float Mix = saturate(this.Operators[OpIndex].Weight);
	const float AMix = 1.0 - Mix;
	const float BMix = Mix;
	const float Weight = PreviousIsInputA > 0 ? AMix : BMix;
	this.BSDFs[BSDFIndex].LuminanceWeightV *= Weight;
	this.BSDFs[BSDFIndex].Coverage *= Weight;

	this.BSDFs[BSDFIndex].TopLayerDataWeight *= Weight;


}

#line 340 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Vertical(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	
	const bool bBSDFComesFromTopLayer = PreviousIsInputA > 0;

	
	this.BSDFs[BSDFIndex].LuminanceWeightV		 *= bBSDFComesFromTopLayer ? 1.0f : saturate(1.0f - this.Operators[OpIndex].VerticalTop_Coverage) + saturate(this.Operators[OpIndex].VerticalTop_Coverage) * this.Operators[OpIndex].VerticalTop_ThroughputAlongV;

	
	const float BotCover  = this.BSDFs[BSDFIndex].CoverageAboveAlongN;
	const float TopCover  = this.Operators[OpIndex].VerticalTop_Coverage;
	const float3 BotTrans = this.BSDFs[BSDFIndex].TransmittanceAboveAlongN;
	const float3 TopTrans = this.Operators[OpIndex].VerticalTop_TransmittanceAlongN;
	FVerticalLayeringInfo Info = GetVerticalLayeringInfo(this.Operators[OpIndex].VerticalTop_Coverage, this.BSDFs[BSDFIndex].CoverageAboveAlongN);
	
	const float3 PreCoverageTransmittance = saturate((Info.TransmittanceOnlyTop * TopTrans + Info.TransmittanceOnlyBottom * BotTrans + Info.TransmittanceTopAndBottom * (TopTrans * BotTrans)) / max(1e-10f, Info.Coverage));
	this.BSDFs[BSDFIndex].CoverageAboveAlongN		  = bBSDFComesFromTopLayer ? this.BSDFs[BSDFIndex].CoverageAboveAlongN		: Info.Coverage;			
	this.BSDFs[BSDFIndex].TransmittanceAboveAlongN  = bBSDFComesFromTopLayer ? this.BSDFs[BSDFIndex].TransmittanceAboveAlongN	: PreCoverageTransmittance;	

	
	this.BSDFs[BSDFIndex].TopLayerDataWeight *= bBSDFComesFromTopLayer ? 1.0 : saturate(1.0f - this.Operators[OpIndex].VerticalTop_Coverage);

	if (!bBSDFComesFromTopLayer)	
	{
		
		
		

		
		const float3 DummyWi = float3(0, 0, 1);
		const float DummyInterfaceDFG = 0.5f;
		FStrataLobeStatistic ReflectedLobe = StrataGetReflectedLobe(StrataGetDiracLobe(DummyWi), DummyInterfaceDFG, StrataGetBSDFRoughness(this.BSDFs[BSDFIndex]));

		
		
		
		const float DiracLobeSigma = 0.0f;
		const float TopLayerSigma = lerp(DiracLobeSigma, this.Operators[OpIndex].VerticalTop_BottomUpRefractionLobeStat.Sigma, this.Operators[OpIndex].VerticalTop_Coverage * dot(this.Operators[OpIndex].VerticalTop_TransmittanceAlongN, (1.0f/3.0f).xxx));
		const bool bIsTop = this.Operators[OpIndex].LayerDepth == 0;
		const float BottomUpInterfaceEta = bIsTop ? 1.0f / 1.0f : 1.0f;
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataOppositeLobe(ReflectedLobe), DummyInterfaceDFG, StrataLobeVarianceToRoughness(TopLayerSigma), BottomUpInterfaceEta);

		this.BSDFs[BSDFIndex].StrataSetBSDFRoughness(StrataLobeVarianceToRoughness(RefractedLobe.Sigma));
	}


}

#line 10 "/Engine/Private/Strata/StrataLegacyConversion.ush"
void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal);

#line 21 "/Engine/Private/Strata/StrataLegacyConversion.ush"
struct FStrataLegacyParameters
{
	FStrataPixelFootprint PixelFootprint;
	bool UseMetalness;
	float3 DiffuseAlbedo;
	float3 F0;
	float3 F90;

	float3 BaseColor;
	float  Specular;
	float  Metallic;
	float  Roughness;
	float  Anisotropy;
	float  SSSProfileID;
	float3 SSSMFP;
	float  SSSMFPScale;
	float  SSSPhaseAniso;
	bool   UseSSSDiffusion;
	float3 Emissive;
	float  SecondRoughness;
	float  SecondRoughnessWeight;
	bool   SecondRoughnessAsSimpleClearCoat;
	float  FuzzAmount;
	float3 FuzzColor;
	float  Thickness;
	bool   bIsThinSurface;
	uint   SharedLocalBasisIndex;

	float Weight;
};

#line 52 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataLegacyParameters InitStrataLegacyParameters(FStrataPixelFootprint InPixelFootprint, uint InSharedLocalBasisIndex, float InWeight)
{
	const float3 Zeros = float3(0, 0, 0);

	FStrataLegacyParameters Out;

	Out.UseMetalness = true;
	Out.DiffuseAlbedo = Zeros;
	Out.F0 = Zeros;
	Out.F90 = Zeros;

	Out.BaseColor = Zeros;
	Out.Specular = 0.5f;
	Out.Metallic = 0.f;
	Out.Roughness = 0.5f;
	Out.Anisotropy = 0.f;
	Out.SSSProfileID = 0.f;
	Out.SSSMFP = Zeros;
	Out.SSSMFPScale = 1.f;
	Out.SSSPhaseAniso = 0.f;
	Out.UseSSSDiffusion = false;
	Out.Emissive = Zeros;
	Out.SecondRoughness = 0.0f;
	Out.SecondRoughnessWeight = 0.0f;
	Out.SecondRoughnessAsSimpleClearCoat = false;
	Out.FuzzAmount = 0.f;
	Out.FuzzColor = Zeros;
	Out.Thickness = 0.01f;
	Out.bIsThinSurface = false;
	Out.SharedLocalBasisIndex = InSharedLocalBasisIndex;
	Out.Weight = InWeight;
	Out.PixelFootprint = InPixelFootprint;
	return Out;
}

#line 87 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData CreateLegacySlab(
	FStrataLegacyParameters In, inout uint SharedLocalBasisTypes)
{
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones  = float3(1, 1, 1);

	float3 DiffuseAlbedo = In.DiffuseAlbedo;
	float3 F0 = In.F0;
	float3 F90 = In.F90;
	if (In.UseMetalness > 0.0f)
	{
		DiffuseAlbedo = ComputeDiffuseAlbedo(In.BaseColor, In.Metallic);
		F0 = ComputeF0(In.Specular, In.BaseColor, In.Metallic);
		F90 = Ones;
	}

	
	return GetStrataSlabBSDF(
		In.PixelFootprint,
		DiffuseAlbedo,										
		F0,													
		F90,												
		In.Roughness,										
		In.Anisotropy,										
		In.SSSProfileID,									
		In.SSSMFP,											
		In.SSSMFPScale,										
		In.SSSPhaseAniso,									
		In.UseSSSDiffusion,									
		In.Emissive,										
		In.SecondRoughness,									
		In.SecondRoughnessWeight,							
		In.SecondRoughnessAsSimpleClearCoat ? 1.0f : 0.0f,	
		In.FuzzAmount,										
		In.FuzzColor,										
		In.Roughness,										
		0.0f, 0.0f.xx,										
		0.0f,												
		In.Thickness,
		In.bIsThinSurface,
		true,												
		In.SharedLocalBasisIndex, SharedLocalBasisTypes);
}

#line 136 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData StrataConvertLegacyMaterialDynamic(
	FStrataPixelFootprint PixelFootprint,
	float3 BaseColor, float Specular, float Metallic,
	float Roughness, float Anisotropy,
	float3 SubSurfaceColor, float SubSurfaceProfileId,
	float ClearCoat, float ClearCoatRoughness,
	float3 Emissive,
	float Opacity,
	float3 TransmittanceColor,
	float3 WaterScatteringCoefficients, float3 WaterAbsorptionCoefficients, float WaterPhaseG, float3 ColorScaleBehindWater,
	uint ShadingModel,
	float3 RawNormal,
	float3 RawTangent,
	float3 RawClearCoatNormal,
	float3 RawCustomTangent,
	uint SharedLocalBasisIndex,
	uint ClearCoatBottomNormal_SharedLocalBasisIndex,
	inout uint SharedLocalBasisTypes)
{
	const float DefaultThickness = 0.01f;
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones  = float3(1, 1, 1);

	

	
	
#line 181 "/Engine/Private/Strata/StrataLegacyConversion.ush"

	
#line 194 "/Engine/Private/Strata/StrataLegacyConversion.ush"

	
#line 216 "/Engine/Private/Strata/StrataLegacyConversion.ush"


	FStrataLegacyParameters LegacySlab = InitStrataLegacyParameters(PixelFootprint, SharedLocalBasisIndex, 1.0f);

	float FinalWeight = 1.0f;

	if (ShadingModel == 0)
	{
		
		LegacySlab.BaseColor = Zeros;
		LegacySlab.Specular = 0.f;
		LegacySlab.Metallic = 0.f;
		LegacySlab.Roughness = 0.f;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 1)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 2)
	{
		const float ThicknessInCm = 100.0f;
		const float3 MFPInCm = TransmittanceToMeanFreePath(SubSurfaceColor, ThicknessInCm * (1.0f / 100.0f)) * 100.0f;

		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSPhaseAniso = saturate(1.f - Opacity); 
		LegacySlab.Emissive = Emissive;
		LegacySlab.UseSSSDiffusion = false;
		LegacySlab.Thickness = ThicknessInCm;

		FinalWeight = 1.0f;


		
		
		
		
		const float Transmittance = saturate(1.f - Opacity);
		LegacySlab.SSSMFP = 0;
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.Thickness = ThicknessInCm;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 3)
	{
		
		const float3 MFPInCm = float3(1.0f, 0.088964f, 0.072095f) * 2.6748f * 0.1f;

		
		
		LegacySlab.BaseColor = max(SubSurfaceColor, BaseColor); 
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFPScale = 1.f - Opacity;
		LegacySlab.SSSPhaseAniso = 0.93f;
		LegacySlab.UseSSSDiffusion = true;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 5)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = SubSurfaceProfileId;
		LegacySlab.SSSMFPScale = Opacity;
		LegacySlab.SSSPhaseAniso = 0.93f;
		LegacySlab.UseSSSDiffusion = true;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 4)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = Zeros;
		LegacySlab.SSSMFPScale = 0.f;
		LegacySlab.SecondRoughnessWeight = ClearCoat;
		LegacySlab.SecondRoughness = ClearCoatRoughness;
		LegacySlab.SecondRoughnessAsSimpleClearCoat = ClearCoat > 0.0f; 
		LegacySlab.Emissive = Zeros;
		LegacySlab.Weight = 1.f;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 6)
	{
		
		const float Thickness = 0.01f;
		const float3 MFPInCm = TransmittanceToMeanFreePath(SubSurfaceColor , Thickness * (1.0f / 100.0f)) * 100.0f;

		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSPhaseAniso = 1.0f - saturate(Opacity); 
		LegacySlab.Emissive = Emissive;
		LegacySlab.UseSSSDiffusion = false;
		LegacySlab.Thickness = Thickness;
		LegacySlab.bIsThinSurface = true;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 8)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = 0.f;
		LegacySlab.SSSMFPScale = 0.f;
		LegacySlab.Emissive = Emissive;
		LegacySlab.FuzzAmount = ClearCoat;
		LegacySlab.FuzzColor = SubSurfaceColor;

		FinalWeight = 1.0f;

		FinalWeight = Opacity;

	}
	else if (ShadingModel == 11)	
	{
		const float Thickness = DefaultThickness;

		
		Opacity = lerp(1.f - Square(1.f - Opacity), Opacity, Metallic);

		
		
		
		const float3 BaseColor_LAB			= LinearRGB_2_LAB(BaseColor);
		const float3 TransmittanceColor_LAB = LinearRGB_2_LAB(TransmittanceColor);
		const float3 Color_LAB			    = lerp(TransmittanceColor_LAB, BaseColor_LAB, Opacity);
		const float3 Color					= LAB_2_LinearRGB(Color_LAB);

		
		const float3 MFP = TransmittanceToMeanFreePath(lerp(Color, Zeros, Opacity), Thickness * (1.0f / 100.0f)) * 100.0f;

		const float F0Dieletrict = DielectricSpecularToF0(Specular);

		const float3 TopF0     = lerp(F0Dieletrict, BaseColor, Metallic);
		const float3 TopAlbedo = Color * (1.f - Metallic);
		const float3 TopMFP    = 0;

		const float3 BotF0     = F0Dieletrict;
		const float3 BotAlbedo = Zeros;
		const float3 BotMFP    = MFP;

		LegacySlab.DiffuseAlbedo	= lerp(BotAlbedo, TopAlbedo, Opacity);
		LegacySlab.SSSMFP			= lerp(BotMFP,    TopMFP,    Opacity);
		LegacySlab.F0				= lerp(BotF0,     TopF0,     Opacity);
		LegacySlab.F90				= Ones;
		LegacySlab.UseMetalness	= false;
		LegacySlab.Roughness 		= Roughness;
		LegacySlab.Anisotropy 		= 0.f;
		LegacySlab.SSSProfileID 	= 0.f;
		LegacySlab.SSSMFPScale 	= 1.f;
		LegacySlab.Emissive 		= Emissive;
		LegacySlab.Thickness 		= Thickness;
		LegacySlab.SharedLocalBasisIndex = SharedLocalBasisIndex;

		
		FinalWeight = 1.0f;
	}

	
	FStrataData Slab = CreateLegacySlab(LegacySlab, SharedLocalBasisTypes);

	Slab.InlinedBSDF.Coverage = LegacySlab.Weight * FinalWeight;	


	return Slab;
}

#line 449 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData StrataConvertLegacyMaterialStatic(
	FStrataPixelFootprint PixelFootprint,
	float3 BaseColor, float Specular, float Metallic,
	float Roughness, float Anisotropy,
	float3 SubSurfaceColor, float SubSurfaceProfileId,
	float ClearCoat, float ClearCoatRoughness,
	float3 Emissive,
	float Opacity,
	float3 TransmittanceColor,
	float3 WaterScatteringCoefficients, float3 WaterAbsorptionCoefficients, float WaterPhaseG, float3 ColorScaleBehindWater,
	uint ShadingModel,
	float3 RawNormal,
	float3 RawTangent,
	float3 RawClearCoatNormal,
	float3 RawCustomTangent,
	uint SharedLocalBasisIndex,
	uint ClearCoatBottomNormal_SharedLocalBasisIndex,
	inout uint SharedLocalBasisTypes)
{
	FStrataData Out = GetInitialisedStrataData();

	const float DefaultThickness = 0.01f;
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones = float3(1, 1, 1);







	if (ShadingModel == 0)
	{
		const float GreyTransmittance = saturate(1.0f - Opacity);
	
#line 495 "/Engine/Private/Strata/StrataLegacyConversion.ush"

		
		Out = GetStrataUnlitBSDF(Emissive * Opacity, 0.0f, RawNormal);
		
			Out.InlinedBSDF.Coverage = Opacity;
		
	









	}
	else if (ShadingModel == 7)
	{
		Out = GetStrataHairBSDF(
				BaseColor,	   
				Metallic,	   
				Specular,	   
				Roughness,	   
				ClearCoat,	   
				Emissive,	   
				SharedLocalBasisIndex);
	}
	else if (ShadingModel == 9)
	{
		const float IrisMask = ClearCoat;
		const float IrisDistance = ClearCoatRoughness;

		float3 IrisNormal = RawNormal;
		float3 IrisPlaneNormal = RawNormal;
		GetEyeNormals(IrisMask, IrisDistance, RawNormal, RawClearCoatNormal, RawCustomTangent, IrisNormal, IrisPlaneNormal);

		Out = GetStrataEyeBSDF(
				BaseColor,	         
				Roughness,	         
				IrisMask,	         
				IrisDistance,        
				IrisNormal,	         
				IrisPlaneNormal,	 
				SubSurfaceProfileId, 
				Emissive,	         
				SharedLocalBasisIndex);
	}
	else if (ShadingModel == 10)
	{
		const float3 WaterExtinction= WaterScatteringCoefficients + WaterAbsorptionCoefficients;
		const float3 WaterAlbedo	= WaterScatteringCoefficients / WaterExtinction;

		Out = GetStrataSingleLayerWaterBSDF(
				BaseColor, 				
				Metallic, 				
				Specular, 				
				Roughness, 				
				Emissive, 				
				Opacity,				
				WaterAlbedo, 			
				WaterExtinction, 		
				WaterPhaseG, 			
				ColorScaleBehindWater,	
				SharedLocalBasisIndex);
	}
	else
	{
		Out = StrataConvertLegacyMaterialDynamic(
			PixelFootprint,
			BaseColor, Specular, Metallic,
			Roughness, Anisotropy,
			SubSurfaceColor, SubSurfaceProfileId,
			ClearCoat, ClearCoatRoughness,
			Emissive,
			Opacity,
			TransmittanceColor,
			WaterScatteringCoefficients, WaterAbsorptionCoefficients, WaterPhaseG, ColorScaleBehindWater,
			ShadingModel,
			RawNormal,
			RawTangent,
			RawClearCoatNormal,
			RawCustomTangent,
			SharedLocalBasisIndex,
			ClearCoatBottomNormal_SharedLocalBasisIndex,
			SharedLocalBasisTypes);
	}

	return Out;
}

#line 186 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{
	
	float RelativeTime;
	
	float MotionBlurFade;
	
	float Random;
	
	float4 Velocity;
	
	float4 Color;
	
	float4 TranslatedWorldPositionAndSize;
	
	float4 MacroUV;

	



	float4 DynamicParameter;













	
	FLWCMatrix ParticleToWorld;

	
	FLWCInverseMatrix WorldToParticle;








	
	float2 Size;

	
	float SpriteRotation;
};

#line 296 "/Engine/Generated/Material.ush"
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};

#line 373 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	float SurfaceThickness;
	float Displacement;
	





FStrataData GetFrontStrataData()
{



	return FrontMaterial;

}

};

#line 414 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{

	float2 TexCoords[1];


	
	float4 VertexColor;

	
	float3 WorldNormal;
	
	
	float3 WorldTangent;

	
	float3 ReflectionVector;

	
	float3 CameraVector;

	
	float3 LightVector;

	




	float4 SvPosition;
		
	
	float4 ScreenPosition;

	



	float2 ViewBufferUV;





	float UnMirrored;

	float TwoSidedSign;

	



	float3x3 TangentToWorld;






	



	FLWCVector3 AbsoluteWorldPosition;

	


	float3 WorldPosition_CamRelative;

	



	FLWCVector3 WorldPosition_NoOffsets;

	



	float3 WorldPosition_NoOffsets_CamRelative;

	
	float3 LightingPositionOffset;

	
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	

	float2 TexCoords_DDX[1];
	float2 TexCoords_DDY[1];


	float AOMaterialMask;















	
	uint PrimitiveId;










	


















	
	FMaterialParticleParameters Particle;











	
	
	
	uint Dummy;






















	FSharedLocalBases SharedLocalBases;
	FStrataTree StrataTree;






	FStrataPixelFootprint StrataPixelFootprint;

	FStrataPixelHeader GetFrontStrataHeader()
	{
		FStrataPixelHeader StrataPixelHeader = InitialiseStrataPixelHeader();





		StrataPixelHeader.StrataTree = StrataTree;
		StrataPixelHeader.BSDFCount = StrataTree.BSDFCount;
		StrataPixelHeader.SharedLocalBases = SharedLocalBases;

		StrataPixelHeader.IrradianceAO = InitIrradianceAndOcclusion();
		return StrataPixelHeader;
	}


	FMaterialAttributes MaterialAttributes;
};

#line 642 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}

#line 2099 "/Engine/Generated/Material.ush"
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}

#line 2950 "/Engine/Generated/Material.ush"
void  FStrataPixelHeader::PreUpdateAllBSDFWithBottomUpOperatorVisit(FStrataAddressing NullStrataAddressing, float3 V)
{
	{
	}
}

#line 2955 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFsOperatorCoverageTransmittance(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V)
{
	 StrataTree.UpdateSingleBSDFOperatorCoverageTransmittance(this, 0, Settings, NullStrataAddressing, V);
}

#line 2959 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllOperatorsCoverageTransmittance()
{
}

#line 2962 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFWithBottomUpOperatorVisit()
{
}

#line 2965 "/Engine/Generated/Material.ush"
void  FStrataPixelHeader::PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(FStrataAddressing NullStrataAddressing, float3 V)
{
	{
	}
}

#line 2970 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V)
{
	 StrataTree.UpdateSingleBSDFOperatorCoverageTransmittance(this, 0, Settings, NullStrataAddressing, V);
}

#line 2974 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllOperatorsCoverageTransmittance_FullySimplified()
{
}

#line 2977 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified()
{
}

#line 3074 "/Engine/Generated/Material.ush"
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

#line 3079 "/Engine/Generated/Material.ush"
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
		
	
	{
		
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;

		



		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	

	return RetNormal;
}

#line 3467 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld(float3x3 TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}

#line 3507 "/Engine/Generated/Material.ush"
float GetRoughnessFromNormalCurvature(FMaterialPixelParameters InMaterialParameters)
{









	return 0.f;

}

#line 3528 "/Engine/Generated/Material.ush"
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	

	
	PixelMaterialInputs.Normal = float3(0.00000000,0.00000000,1.00000000);



	Parameters.StrataPixelFootprint = StrataGetPixelFootprint(Parameters.WorldPosition_CamRelative, GetRoughnessFromNormalCurvature(Parameters));
	Parameters.SharedLocalBases = StrataInitialiseSharedLocalBases();
	Parameters.StrataTree = GetInitialisedStrataTree();






	
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);




	
	MaterialNormal = normalize(MaterialNormal);


	
	
	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);








	
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


	
	float3 Local0 = lerp(float3(0.00000000,0.00000000,0.00000000),Material_PreshaderBuffer[1].yzw,Material_PreshaderBuffer[1].x);
	float Local1 = dot(Parameters.WorldNormal,Parameters.CameraVector);
	float Local2 = max(0.00000000,Local1);
	float Local3 = (1.00000000 - Local2);
	float Local4 = abs(Local3);
	float Local5 = max(Local4,0.00010000);
	float Local6 = PositiveClampedPow(Local5,2.00000000);
	float Local7 = (Local6 * (1.00000000 - 0.20000000));
	float Local8 = (Local7 + 0.20000000);
	float Local9 = (5.00000000 * Local8);
	float Local10 = (Local9 * 0.50000000);
	float2 Local11 = Parameters.TexCoords[0].xy;
	float2 Local12 = (  Local11  - float2(0.50000000,0.50000000));
	float Local13 = length(  Local12 );
	float Local14 = (  Local13  / 0.50000000);
	float Local15 = (1.00000000 -   Local14 );
	float Local16 = (  Local15  * 2.33299994);
	float Local17 = (  Local16  *   Local16 );
	float Local18 = PositiveClampedPow(2.71828198,  Local17 );
	float Local19 = (1.00000000 /   Local18 );
	float Local20 =  select_internal( (abs(  Local15  - 0.00000000) > 0.00001000) ,  select_internal( (  Local15  >= 0.00000000) ,   Local19  , 1.00000000 ) , 1.00000000 );
	float Local21 = (1.00000000 -   Local20 );
	float Local22 = (  Local21  * 3.00000000);
	FStrataData Local23 = Parameters.StrataTree.PromoteParameterBlendedBSDFToOperator(StrataConvertLegacyMaterialStatic(Parameters.StrataPixelFootprint,   Local22 , 0.50000000, 0.00000000, 0.10000000, 0.00000000, float3(1.00000000,1.00000000,1.00000000), 0.00000000, 1.00000000, 0.10000000, float3(0.00000000,0.00000000,0.00000000), Local10, float3(0.50000000,0.50000000,0.50000000), float3(0.00000000,0.00000000,0.00000000), float3(0.00000000,0.00000000,0.00000000), 0.00000000, float3(1.00000000,1.00000000,1.00000000), 1, Parameters.TangentToWorld[2], Parameters.TangentToWorld[2], Parameters.TangentToWorld[2], Parameters.TangentToWorld[2], 0, 0, Parameters.SharedLocalBases.Types) , 0, 0, 0, 1);
	



	PixelMaterialInputs.EmissiveColor = Local0;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = 1.00000000;
	PixelMaterialInputs.BaseColor = float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = float3(0.00000000,0.00000000,1.00000000);
	PixelMaterialInputs.Tangent = float3(1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = float3(float3(1.00000000,0.00000000,0.00000000).xy,Material_PreshaderBuffer[2].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 1;
	PixelMaterialInputs.FrontMaterial = Local23;
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.00000000;
	





	
	Parameters.SharedLocalBases.Normals[0] = Parameters.TangentToWorld[2];
	
	Parameters.SharedLocalBases.Normals[0] *= Parameters.TwoSidedSign;
	
	Parameters.SharedLocalBases.Tangents[0] = Parameters.TangentToWorld[0];
	
	Parameters.SharedLocalBases.Tangents[0] *= Parameters.TwoSidedSign;
	
	Parameters.SharedLocalBases.Count = 1;



	
	















	Parameters.WorldTangent = 0;

}

#line 3365
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));




		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

#line 3383
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}

#line 3857 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}

#line 3860 "/Engine/Generated/Material.ush"
void ClipLODTransition(float2 SvPosition)
{
}

#line 3891 "/Engine/Generated/Material.ush"
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);

#line 3919 "/Engine/Generated/Material.ush"

}

#line 3990 "/Engine/Generated/Material.ush"
bool IsOrthoProjection(ViewState InView)
{
	return InView.ViewToClip[3][3] >= 1.0f;
}

#line 3996 "/Engine/Generated/Material.ush"
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);

	
	

	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.WorldPosition_NoOffsets = LWCSubtract(TranslatedWorldPositionExcludingShaderOffsets, ResolvedView.PreViewTranslation);


	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);

	
	


		if (IsOrthoProjection(ResolvedView))
		{
			
			Parameters.CameraVector = -ResolvedView.ViewForward;
		}
		else
		{
			
			Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
		}
	

	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;



























	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}

#line 4104 "/Engine/Generated/Material.ush"
float3x3 AssembleTangentToWorld( float3 TangentToWorld0, float4 TangentToWorld2 )
{
	
	

	
	
	float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	
	return float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}

#line 4199 "/Engine/Generated/Material.ush"
void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal)
{
#line 4220 "/Engine/Generated/Material.ush"

  



	OutIrisNormal = InNormal;
	OutIrisPlaneNormal = InNormal;
  

}

#line 7 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;











	float4	TexCoords[(1+1)/2]	: TEXCOORD0;












	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
	


	



	























};

#line 69 "/Engine/Private/LocalVertexFactoryCommon.ush"
float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

#line 89 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

#line 135 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

#line 140 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#line 154 "/Engine/Private/LocalVertexFactoryCommon.ush"
uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;



}

#line 467 "/Engine/Private/ShaderPrintCommon.ush"
// Hashes are computed using the CityHash32 function

#line 516 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for( int CoordinateIndex = 0; CoordinateIndex < 1; CoordinateIndex++ )
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}








	float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	
	Result.Particle.Color = float4(1,1,1,1);




	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

#line 46 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
struct FRadianceProbeCoord
{
	uint3 ProbeMinCoord;
	uint3 ProbeMaxCoord;
	uint  ClipmapIndex;
};

#line 53 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
bool IsValidRadianceCacheClipmapForMark(uint InClipmapIndex)
{
	return InClipmapIndex < LumenTranslucencyRadianceCacheMarkPass_NumRadianceProbeClipmapsForMark;
}

#line 58 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
FRadianceProbeCoord GetRadianceProbeCoord(float3 WorldSpacePosition, float ClipmapDitherRandom)
{
	FRadianceProbeCoord Out = (FRadianceProbeCoord)0;
	Out.ClipmapIndex = LumenTranslucencyRadianceCacheMarkPass_NumRadianceProbeClipmapsForMark;

	uint ClipmapIndex = 0;
	for (; ClipmapIndex < LumenTranslucencyRadianceCacheMarkPass_NumRadianceProbeClipmapsForMark; ++ClipmapIndex)
	{
		float3 ProbeCoordFloat = WorldSpacePosition *  LumenTranslucencyRadianceCacheMarkPass_PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].w +  LumenTranslucencyRadianceCacheMarkPass_PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].xyz;
		float3 BottomEdgeFades = saturate((ProbeCoordFloat - .5f) * LumenTranslucencyRadianceCacheMarkPass_InvClipmapFadeSizeForMark);
		float3 TopEdgeFades = saturate(((float3)LumenTranslucencyRadianceCacheMarkPass_RadianceProbeClipmapResolutionForMark - .5f - ProbeCoordFloat) * LumenTranslucencyRadianceCacheMarkPass_InvClipmapFadeSizeForMark);
		float EdgeFade = min(min3(BottomEdgeFades.x, BottomEdgeFades.y, BottomEdgeFades.z), min3(TopEdgeFades.x, TopEdgeFades.y, TopEdgeFades.z));

		int3 ProbeMinCoord;
		int3 ProbeMaxCoord;

		ProbeMinCoord = floor(ProbeCoordFloat - 0.5f);
		ProbeMaxCoord = ProbeMinCoord + 1;

		if (EdgeFade > ClipmapDitherRandom)
		{
			Out.ProbeMinCoord = ProbeMinCoord;
			Out.ProbeMaxCoord = ProbeMaxCoord;
			Out.ClipmapIndex  = ClipmapIndex;
			return Out;
		}
	}

	return Out;
}

#line 89 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
uint GetRadianceProbeClipmapForMark(float3 WorldSpacePosition, float ClipmapDitherRandom)
{
	FRadianceProbeCoord Cell = GetRadianceProbeCoord(WorldSpacePosition, ClipmapDitherRandom);
	return Cell.ClipmapIndex;
}

#line 95 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
uint GetRadianceProbeClipmapForMark(float3 WorldSpacePosition)
{
	return GetRadianceProbeClipmapForMark(WorldSpacePosition, .01f);
}

#line 100 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
void MarkProbeIndirectionTextureCoord(int3 ProbeCoord, uint ClipmapIndex)
{
	if (all(ProbeCoord >= 0) && all(ProbeCoord < (int3)LumenTranslucencyRadianceCacheMarkPass_RadianceProbeClipmapResolutionForMark) && ClipmapIndex < LumenTranslucencyRadianceCacheMarkPass_NumRadianceProbeClipmapsForMark)
	{
		int3 IndirectionTextureCoord = ProbeCoord + int3(ClipmapIndex * LumenTranslucencyRadianceCacheMarkPass_RadianceProbeClipmapResolutionForMark, 0, 0);
		LumenTranslucencyRadianceCacheMarkPass_RWRadianceProbeIndirectionTexture[IndirectionTextureCoord] = 0xFFFFFFFE;
	}
}

#line 109 "/Engine/Private/Lumen/LumenRadianceCacheMarkCommon.ush"
void MarkPositionUsedInIndirectionTexture(float3 WorldPosition, uint ClipmapIndex)
{
	float3 ProbeCoordFloat = WorldPosition *  LumenTranslucencyRadianceCacheMarkPass_PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].w +  LumenTranslucencyRadianceCacheMarkPass_PackedWorldPositionToRadianceProbeCoord[ ClipmapIndex ].xyz;
	int3 BottomCornerProbeCoord = floor(ProbeCoordFloat - 0.5f);

	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 0, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 0, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 1, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(0, 1, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 0, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 0, 1), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 1, 0), ClipmapIndex);
	MarkProbeIndirectionTextureCoord(BottomCornerProbeCoord + int3(1, 1, 1), ClipmapIndex);
}

#line 22 "/Engine/Private/Lumen/LumenTranslucencyRadianceCacheMarkShaders.usf"
struct FLumenTranslucencyRadianceCacheMarkInterpolantsVSToPS
{

};

#line 61 "/Engine/Private/Lumen/LumenTranslucencyRadianceCacheMarkShaders.usf"
[earlydepthstencil]
void MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FLumenTranslucencyRadianceCacheMarkInterpolantsVSToPS PassInterpolants,
	in   float4 SvPosition : SV_Position		
	, in bool bIsFrontFace : SV_IsFrontFace)
{
	ResolvedView = ResolveView();
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);

	FPixelMaterialInputs PixelMaterialInputs;
	
	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
	}

	GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);

	
	uint ClipmapIndex = GetRadianceProbeClipmapForMark( LWCToFloat( MaterialParameters.AbsoluteWorldPosition ), InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8));

	if (IsValidRadianceCacheClipmapForMark(ClipmapIndex))
	{
		float MaxDepth = 1000000.0f;


		float2 HZBScreenUV = (SvPosition.xy - View_ViewRectMin.xy) * View_ViewSizeAndInvSize.zw * LumenTranslucencyRadianceCacheMarkPass_ViewportUVToHZBBufferUV;

		MaxDepth = ConvertFromDeviceZ(LumenTranslucencyRadianceCacheMarkPass_FurthestHZBTexture.SampleLevel( View_SharedPointClampedSampler, HZBScreenUV, LumenTranslucencyRadianceCacheMarkPass_HZBMipLevel).x);


		if (MaterialParameters.ScreenPosition.w < MaxDepth)
		{
			MarkPositionUsedInIndirectionTexture( LWCToFloat( MaterialParameters.AbsoluteWorldPosition ), ClipmapIndex);
		}
	}
}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
SceneTexturesStruct, 158338568
MobileSceneTextures, 147131313
Primitive, 50331904
Scene, 273683233
InstanceCulling, 3146265
HairCardsVF, 60686848
SpeedTreeData, 39846144
Atmosphere, 11534592
BlueNoise, 3473677
OpaqueBasePass, 159911720
BasePass, 148439296
LumenTranslucencyRadianceCacheMarkPass, 74516265
PrecomputedLightingBuffer, 15728896
ShaderPrintData, 5243136
LocalVFLooseParameters, 2490654
LocalVF, 105252632
InstancedVFLooseParameters, 6291712
Material, 4718848
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
HairCardsVF_PositionBuffer, HairCardsVF, 6, 0
HairCardsVF_PreviousPositionBuffer, HairCardsVF, 6, 1
HairCardsVF_NormalsBuffer, HairCardsVF, 6, 2
HairCardsVF_UVsBuffer, HairCardsVF, 6, 3
HairCardsVF_MaterialsBuffer, HairCardsVF, 6, 4
HairCardsVF_DepthTexture, HairCardsVF, 5, 5
HairCardsVF_DepthSampler, HairCardsVF, 8, 6
HairCardsVF_TangentTexture, HairCardsVF, 5, 7
HairCardsVF_TangentSampler, HairCardsVF, 8, 8
HairCardsVF_CoverageTexture, HairCardsVF, 5, 9
HairCardsVF_CoverageSampler, HairCardsVF, 8, 10
HairCardsVF_AttributeTexture, HairCardsVF, 5, 11
HairCardsVF_AttributeSampler, HairCardsVF, 8, 12
HairCardsVF_AuxilaryDataTexture, HairCardsVF, 5, 13
HairCardsVF_AuxilaryDataSampler, HairCardsVF, 8, 14
HairCardsVF_MaterialTexture, HairCardsVF, 5, 15
HairCardsVF_MaterialSampler, HairCardsVF, 8, 16
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 46
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 48
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid32Bit, BasePass, 16, 6
BasePass_Forward_CulledLightDataGrid16Bit, BasePass, 16, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid32Bit, BasePass, 16, 14
BasePass_ForwardISR_CulledLightDataGrid16Bit, BasePass, 16, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_SceneColorTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 0
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_SceneDepthTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 1
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_ScenePartialDepthTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 2
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferATexture, LumenTranslucencyRadianceCacheMarkPass, 9, 3
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferBTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 4
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferCTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 5
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferDTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 6
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferETexture, LumenTranslucencyRadianceCacheMarkPass, 9, 7
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferFTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 8
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_GBufferVelocityTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 9
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_ScreenSpaceAOTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 10
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_CustomDepthTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 11
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_CustomStencilTexture, LumenTranslucencyRadianceCacheMarkPass, 12, 12
LumenTranslucencyRadianceCacheMarkPass_SceneTextures_PointClampSampler, LumenTranslucencyRadianceCacheMarkPass, 8, 13
LumenTranslucencyRadianceCacheMarkPass_RWRadianceProbeIndirectionTexture, LumenTranslucencyRadianceCacheMarkPass, 13, 14
LumenTranslucencyRadianceCacheMarkPass_FurthestHZBTexture, LumenTranslucencyRadianceCacheMarkPass, 9, 15
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Wrap_WorldGroupSettings, Material, 8, 0
Material_Clamp_WorldGroupSettings, Material, 8, 1
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=MainPS -shaderPlatformName=PCD3D_SM5_Preview -ps D:/active_labour/unreal/FinalPanopticon/FinalPanopticon/Saved/ShaderDebugInfo/PCD3D_SM5_Preview/Rain_Large_WaterMat_776d10599e52b83/Default/FLocalVertexFactory/FLumenTranslucencyRadianceCacheMarkPS/0/LumenTranslucencyRadianceCacheMarkShaders.usf -cflags=8589938688 -nocrashreports
#endif /*DIRECT COMPILE*/
