#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 5

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MINOR 0

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define ALWAYS_EVALUATE_WORLD_POSITION_OFFSET 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define CACHED_POINT_INDIRECT_LIGHTING 1

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 0

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 0

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DISTORTION_ACCOUNT_FOR_COVERAGE 0

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_DBUFFER_TEXTURES 1

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_NON_NANITE_VSM 1

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define ENABLE_SKY_LIGHT 1

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_LAYOUT 0

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define INDEX_NONE -1

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define INTERPOLATE_VERTEX_COLOR 0

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define IS_BASE_PASS 1

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define IS_MATERIAL_SHADER 1

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define IS_MOBILE_BASE_PASS 0

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define LOCAL_LIGHT_DATA_STRIDE 6

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define MANUAL_VERTEX_FETCH 1

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_CONTACT_SHADOWS 0

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DECAL_READ_MASK 7

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DITHER_OPACITY_MASK 0

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DOMAIN_SURFACE 1

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FULLY_ROUGH 0

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_SKY 0

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_STRATA 1

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ISTHINSURFACE 0

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NONMETAL 0

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PATH_TRACING_BUFFER_READ 0

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 1

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SHADINGMODEL_SINGLELAYERWATER 1

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SINGLE_SHADINGMODEL 1

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SKY_ATMOSPHERE 0

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SSR 0

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TANGENTSPACENORMAL 0

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TWOSIDED 0

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_LM_DIRECTIONALITY 1

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_PREINTEGRATED_GF 0

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_ANISOTROPY 0

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_DECAL_LOOKUP 0

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_SCENE_COLOR_COPY 0

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_VIRTUALTEXTURE_FEEDBACK 0

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALBLENDING_MASKED 1

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDECALRESPONSEMASK 7

#line 75 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDOMAIN_SURFACE 1

#line 76 "DumpShaderDefinesAsCommentedCode"
// #define MAX_NUM_LIGHTMAP_COEF 2

#line 77 "DumpShaderDefinesAsCommentedCode"
// #define MAX_PAGE_AREA_DIAGNOSTIC_SLOTS 32

#line 78 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 79 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_EMULATION 1

#line 80 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_HIGH_QUALITY_BRDF 0

#line 81 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 82 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 83 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0

#line 84 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0

#line 85 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_COLOR 0

#line 86 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0

#line 87 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0

#line 88 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS 1

#line 89 "DumpShaderDefinesAsCommentedCode"
// #define NUM_CULLED_GRID_PRIMITIVE_TYPES 2

#line 90 "DumpShaderDefinesAsCommentedCode"
// #define NUM_CULLED_LIGHTS_GRID_STRIDE 2

#line 91 "DumpShaderDefinesAsCommentedCode"
// #define NUM_VIRTUALTEXTURE_SAMPLES 0

#line 92 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 1

#line 93 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADEROUTPUT_MRT0 1

#line 94 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADEROUTPUT_MRT1 1

#line 95 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADEROUTPUT_MRT2 1

#line 96 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1

#line 97 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ENABLES_STRATA_GLINTS 1

#line 98 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ENABLES_STRATA_SPECULAR_PROFILE 1

#line 99 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_FORCE_SIMPLE_SKY_DIFFUSE 0

#line 100 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 101 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 102 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1

#line 103 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1

#line 104 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0

#line 105 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0

#line 106 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 107 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 108 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 0

#line 109 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 110 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 111 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 112 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 113 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 114 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 115 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 116 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 117 "DumpShaderDefinesAsCommentedCode"
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1

#line 118 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 119 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 120 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 0

#line 121 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 122 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 1

#line 123 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_USE_INDEX_OF_REFRACTION 1

#line 124 "DumpShaderDefinesAsCommentedCode"
// #define SCENE_TEXTURES_DISABLED 0

#line 125 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 126 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_DEFERRED 1

#line 127 "DumpShaderDefinesAsCommentedCode"
// #define SHAREDLOCALBASIS_INDEX_0_0 0

#line 128 "DumpShaderDefinesAsCommentedCode"
// #define SHAREDLOCALBASIS_INDEX_0_1 0

#line 129 "DumpShaderDefinesAsCommentedCode"
// #define SINGLE_LAYER_WATER_SEPARATED_MAIN_LIGHT 1

#line 130 "DumpShaderDefinesAsCommentedCode"
// #define SM5_PROFILE 1

#line 131 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 132 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_BLENDING_MASKED 1

#line 133 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_CLAMPED_BSDF_COUNT 1

#line 134 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_COMPLEXSPECIALPATH 0

#line 135 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 1

#line 136 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_FASTPATH 0

#line 137 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_INLINE_SHADING 1

#line 138 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_CONTEXT 0

#line 139 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_LEGACY_BLEND_MODE 0

#line 140 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_TYPE 0

#line 141 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_NUM_UINTS 20

#line 142 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_OUTPUT_OPAQUE_ROUGH_REFRACTIONS 0

#line 143 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_NORMAL_QUALITY 0

#line 144 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 1

#line 145 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPTIMIZED_UNLIT 0

#line 146 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_PREMULTIPLIED_ALPHA_OPACITY_OVERRIDEN 0

#line 147 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SHADING_QUALITY 1

#line 148 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SHEEN_QUALITY 1

#line 149 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SINGLEPATH 0

#line 150 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USE_DBUFFER_PASS 0

#line 151 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USES_CONVERSION_FROM_LEGACY 1

#line 152 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 153 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 154 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_GPUSKIN_PASSTHROUGH 1

#line 155 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 156 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 157 "DumpShaderDefinesAsCommentedCode"
// #define TEXTURE_SAMPLE_DEBUG 0

#line 158 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0

#line 159 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 0

#line 160 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_VELOCITY 0

#line 161 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 162 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 163 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 164 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 165 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 166 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 167 "DumpShaderDefinesAsCommentedCode"
// #define USE_8BIT_TILE_COORD 0

#line 168 "DumpShaderDefinesAsCommentedCode"
// #define USE_ACHROMATIC_BXDF_ENERGY 0

#line 169 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 1

#line 170 "DumpShaderDefinesAsCommentedCode"
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0

#line 171 "DumpShaderDefinesAsCommentedCode"
// #define USE_STENCIL_LOD_DITHER_DEFAULT 0

#line 172 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISPLACEMENT 0

#line 173 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISTORTION 0

#line 174 "DumpShaderDefinesAsCommentedCode"
// #define USES_EMISSIVE_COLOR 1

#line 175 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_CUSTOM_DATA 0

#line 176 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_RANDOM 0

#line 177 "DumpShaderDefinesAsCommentedCode"
// #define USES_TRANSFORM_VECTOR 1

#line 178 "DumpShaderDefinesAsCommentedCode"
// #define USES_VERTEX_INTERPOLATOR 0

#line 179 "DumpShaderDefinesAsCommentedCode"
// #define USES_WORLD_POSITION_OFFSET 1

#line 180 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 181 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 182 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 1

#line 183 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_SPEEDTREE_WIND 1

#line 184 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_SHADOW_MAP 1

#line 185 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 186 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LEVEL0_DIM_PAGES_XY 128

#line 187 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LOG2_LEVEL0_DIM_PAGES_XY 7

#line 188 "DumpShaderDefinesAsCommentedCode"
// #define VSM_LOG2_PAGE_SIZE 7

#line 189 "DumpShaderDefinesAsCommentedCode"
// #define VSM_MAX_MIP_LEVELS 8

#line 190 "DumpShaderDefinesAsCommentedCode"
// #define VSM_NUM_STATS 32

#line 191 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_SIZE 128

#line 192 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_SIZE_MASK 127

#line 193 "DumpShaderDefinesAsCommentedCode"
// #define VSM_PAGE_TABLE_SIZE 21845

#line 194 "DumpShaderDefinesAsCommentedCode"
// #define VSM_RASTER_WINDOW_PAGES 4

#line 195 "DumpShaderDefinesAsCommentedCode"
// #define VSM_VIRTUAL_MAX_RESOLUTION_XY 16384

#line 196 "DumpShaderDefinesAsCommentedCode"
// #define WANT_PIXEL_DEPTH_OFFSET 0

#line 197 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 879 "/Engine/Public/Platform.ush"
float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

#line 884 "/Engine/Public/Platform.ush"
int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

#line 889 "/Engine/Public/Platform.ush"
uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

#line 894 "/Engine/Public/Platform.ush"
float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 894 "/Engine/Public/Platform.ush"
float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 894 "/Engine/Public/Platform.ush"
float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 895 "/Engine/Public/Platform.ush"
int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 895 "/Engine/Public/Platform.ush"
int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 895 "/Engine/Public/Platform.ush"
int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 896 "/Engine/Public/Platform.ush"
uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 896 "/Engine/Public/Platform.ush"
uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 896 "/Engine/Public/Platform.ush"
uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 973 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 991 "/Engine/Public/Platform.ush"
bool  and_internal(bool  a, bool  b) { return bool(a && b); }

#line 992 "/Engine/Public/Platform.ush"
bool2 and_internal(bool2 a, bool2 b) { return bool2(a.x && b.x, a.y && b.y); }

#line 993 "/Engine/Public/Platform.ush"
bool3 and_internal(bool3 a, bool3 b) { return bool3(a.x && b.x, a.y && b.y, a.z && b.z); }

#line 994 "/Engine/Public/Platform.ush"
bool4 and_internal(bool4 a, bool4 b) { return bool4(a.x && b.x, a.y && b.y, a.z && b.z, a.w && b.w); }

#line 1027 "/Engine/Public/Platform.ush"
float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }

#line 1028 "/Engine/Public/Platform.ush"
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }

#line 1029 "/Engine/Public/Platform.ush"
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }

#line 1030 "/Engine/Public/Platform.ush"
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

#line 1032 "/Engine/Public/Platform.ush"
int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }

#line 1033 "/Engine/Public/Platform.ush"
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }

#line 1034 "/Engine/Public/Platform.ush"
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }

#line 1035 "/Engine/Public/Platform.ush"
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

#line 1037 "/Engine/Public/Platform.ush"
uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }

#line 1038 "/Engine/Public/Platform.ush"
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }

#line 1039 "/Engine/Public/Platform.ush"
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }

#line 1040 "/Engine/Public/Platform.ush"
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }

#line 55 "/Engine/Private/PackUnpack.ush"
uint PackUInt2ToUInt(uint X, uint Y)
{
	return X | (Y << 16u);
}

#line 62 "/Engine/Private/PackUnpack.ush"
uint PackUInt2ToUInt(uint2 XY)
{
	return PackUInt2ToUInt(XY.x, XY.y);
}

#line 77 "/Engine/Private/PackUnpack.ush"
uint PackFloat2ToUInt(float X, float Y)
{
	return PackUInt2ToUInt(f32tof16(X), f32tof16(Y));
}

#line 83 "/Engine/Private/PackUnpack.ush"
uint PackFloat2ToUInt(float2 XY)
{
	return PackFloat2ToUInt(XY.x, XY.y);
}

#line 97 "/Engine/Private/PackUnpack.ush"
uint PackR8(float Value)
{
	return uint(saturate(Value) * 255.0f);
}

#line 102 "/Engine/Private/PackUnpack.ush"
float UnpackR8(uint In)
{



	return float(In & 0xFF) * (1.0f / 255.0f);

}

#line 115 "/Engine/Private/PackUnpack.ush"
uint PackRGBA8(float4 In)
{



	uint r = (uint(saturate(In.r) * 255.0f) << 0);
	uint g = (uint(saturate(In.g) * 255.0f) << 8);
	uint b = (uint(saturate(In.b) * 255.0f) << 16);
	uint a = (uint(saturate(In.a) * 255.0f) << 24);
	return r | g | b | a;

}

#line 128 "/Engine/Private/PackUnpack.ush"
float4 UnpackRGBA8(uint In)
{







	float4 Out;
	Out.r = float((In >> 0) & 0xFF) * (1.0f / 255.0f);
	Out.g = float((In >> 8) & 0xFF) * (1.0f / 255.0f);
	Out.b = float((In >> 16) & 0xFF) * (1.0f / 255.0f);
	Out.a = float((In >> 24) & 0xFF) * (1.0f / 255.0f);
	return Out;

}

#line 150 "/Engine/Private/PackUnpack.ush"
uint Pack10F(float Value)
{
	return (f32tof16(Value) >> 5) & 0x000003FF;
}

#line 164 "/Engine/Private/PackUnpack.ush"
uint PackR11G11B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 17) & 0xFFE00000;
	uint g = (f32tof16(rgb.g) << 6) & 0x001FFC00;
	uint b = (f32tof16(rgb.b) >> 5) & 0x000003FF;
	return r | g | b;
}

#line 184 "/Engine/Private/PackUnpack.ush"
uint PackR10G10B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 15) & 0x3FF00000;	
	uint g = (f32tof16(rgb.g) << 5) & 0x000FFC00;	
	uint b = (f32tof16(rgb.b) >> 5) & 0x000003FF;	
	return r | g | b;
}

#line 116 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 118 "/Engine/Private/Common.ush"
const static float Max11BitsFloat = 65024.0f;

#line 119 "/Engine/Private/Common.ush"
const static float Max10BitsFloat = 64512.0f;

#line 120 "/Engine/Private/Common.ush"
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 75 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }

#line 76 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }

#line 77 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }

#line 78 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }

#line 79 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 80 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 82 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 Make4x3Matrix(float4x4 M)
{
	
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

#line 93 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 145 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

#line 147 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }

#line 149 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }

#line 150 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }

#line 151 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }

#line 153 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }

#line 154 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }

#line 155 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }

#line 156 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }

#line 157 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }

#line 158 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }

#line 159 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 169 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 186 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}

#line 197 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }

#line 198 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 199 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 200 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 227 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }

#line 228 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 229 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 230 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 232 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 239 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 256 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }

#line 257 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(float2 Value) { return Value; }

#line 258 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(float3 Value) { return Value; }

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(float4 Value) { return Value; }

#line 260 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 263 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }

#line 264 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }

#line 265 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }

#line 266 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }

#line 267 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }

#line 268 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

#line 270 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }

#line 271 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }

#line 272 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }

#line 273 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }

#line 274 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }

#line 277 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}

#line 284 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}

#line 290 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

#line 296 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

#line 312 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}

#line 318 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}

#line 324 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNormalizeTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMakeIntTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile);
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float LWCSqrtUnscaled(FLWCScalar V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 48 "/Engine/Private/LWCOperations.ush"
float LWCDdx(FLWCScalar V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }

#line 49 "/Engine/Private/LWCOperations.ush"
float LWCDdy(FLWCScalar V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNegate(FLWCScalar V) { return MakeLWCScalar(- (( V ).Tile), -V.Offset); }

#line 91 "/Engine/Private/LWCOperations.ush"
float LWCFrac(FLWCScalar V)
{
	float FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCFloor(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float LWCSaturate(FLWCScalar V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float LWCFmodFloor(FLWCScalar Lhs, float Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float LWCFmodFloor2PI(FLWCScalar V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float LWCSin(FLWCScalar V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float LWCCos(FLWCScalar V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSquareScaled(FLWCScalar V)
{
	float OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCScalar( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCNormalizeTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMakeIntTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile);
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float2 LWCSqrtUnscaled(FLWCVector2 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 48 "/Engine/Private/LWCOperations.ush"
float2 LWCDdx(FLWCVector2 V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }

#line 49 "/Engine/Private/LWCOperations.ush"
float2 LWCDdy(FLWCVector2 V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCNegate(FLWCVector2 V) { return MakeLWCVector2(- (( V ).Tile), -V.Offset); }

#line 91 "/Engine/Private/LWCOperations.ush"
float2 LWCFrac(FLWCVector2 V)
{
	float2 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCFloor(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float2 LWCSaturate(FLWCVector2 V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float2 LWCFmodFloor(FLWCVector2 Lhs, float2 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float2 LWCFmodFloor2PI(FLWCVector2 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float2 LWCSin(FLWCVector2 V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float2 LWCCos(FLWCVector2 V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSquareScaled(FLWCVector2 V)
{
	float2 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector2( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCNormalizeTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMakeIntTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile);
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float3 LWCSqrtUnscaled(FLWCVector3 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 48 "/Engine/Private/LWCOperations.ush"
float3 LWCDdx(FLWCVector3 V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }

#line 49 "/Engine/Private/LWCOperations.ush"
float3 LWCDdy(FLWCVector3 V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCNegate(FLWCVector3 V) { return MakeLWCVector3(- (( V ).Tile), -V.Offset); }

#line 91 "/Engine/Private/LWCOperations.ush"
float3 LWCFrac(FLWCVector3 V)
{
	float3 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCFloor(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float3 LWCSaturate(FLWCVector3 V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float3 LWCFmodFloor(FLWCVector3 Lhs, float3 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float3 LWCFmodFloor2PI(FLWCVector3 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float3 LWCSin(FLWCVector3 V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float3 LWCCos(FLWCVector3 V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSquareScaled(FLWCVector3 V)
{
	float3 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector3( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCNormalizeTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMakeIntTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile);
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float4 LWCSqrtUnscaled(FLWCVector4 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 48 "/Engine/Private/LWCOperations.ush"
float4 LWCDdx(FLWCVector4 V) { return ddx( (( V ).Tile)) * 2097152.00f + ddx(V.Offset); }

#line 49 "/Engine/Private/LWCOperations.ush"
float4 LWCDdy(FLWCVector4 V) { return ddy( (( V ).Tile)) * 2097152.00f + ddy(V.Offset); }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 89 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCNegate(FLWCVector4 V) { return MakeLWCVector4(- (( V ).Tile), -V.Offset); }

#line 91 "/Engine/Private/LWCOperations.ush"
float4 LWCFrac(FLWCVector4 V)
{
	float4 FracTile = frac( (( V ).Tile) * 2097152.00f);
	return frac(FracTile + V.Offset);
}

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCFloor(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float4 LWCSaturate(FLWCVector4 V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float4 LWCFmodFloor(FLWCVector4 Lhs, float4 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float4 LWCFmodFloor2PI(FLWCVector4 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float4 LWCSin(FLWCVector4 V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float4 LWCCos(FLWCVector4 V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSquareScaled(FLWCVector4 V)
{
	float4 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector4( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 423 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }

#line 424 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }

#line 425 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }

#line 426 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }

#line 428 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }

#line 429 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }

#line 430 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 431 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 432 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 433 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 434 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 435 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 438 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

#line 443 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	return LWCAdd(X2, Y2);
}

#line 450 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

#line 458 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent( V , 3));
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}

#line 469 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 470 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 471 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 472 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer   View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 float3  View_ViewForward;
	 float  PrePadding_View_1004;
	 float3  View_ViewUp;
	 float  PrePadding_View_1020;
	 float3  View_ViewRight;
	 float  PrePadding_View_1036;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1052;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2196;
	 float  PrePadding_View_2200;
	 float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2284;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 482 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint4>  View_VolumetricLightmapIndirectionTexture;

#line 491 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_DirectionalLightShadowingBrickTexture;

#line 501 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldPageAtlasTexture;

#line 503 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture;

#line 514 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PerlinNoiseGradientTexture;

#line 515 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoiseGradientTextureSampler;

#line 516 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_PerlinNoise3DTexture;

#line 517 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoise3DTextureSampler;

#line 518 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<uint>  View_SobolSamplingTexture;

#line 522 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedBilinearClampedSampler;

#line 524 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearWrappedSampler;

#line 525 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearClampedSampler;

#line 526 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PreIntegratedBRDF;

#line 527 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PreIntegratedBRDFSampler;

#line 528 "/Engine/Generated/UniformBuffers/View.ush"
StructuredBuffer<float4>  View_SkyIrradianceEnvironmentMap;

#line 541 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_HairScatteringLUTTexture;

#line 542 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_HairScatteringLUTSampler;

#line 543 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCMatTexture;

#line 544 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCMatSampler;

#line 545 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCAmpTexture;

#line 546 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCAmpSampler;

#line 547 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SheenLTCTexture;

#line 548 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SheenLTCSampler;

#line 549 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyGGXSpecTexture;

#line 550 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float2>  View_ShadingEnergyGGXGlassTexture;

#line 551 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyClothSpecTexture;

#line 553 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_ShadingEnergySampler;

#line 556 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeTexture;

#line 557 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeTextureSampler;

#line 558 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeEnvTexture;

#line 559 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeEnvTextureSampler;

#line 560 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SSProfilesTexture;

#line 569 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float4>  View_RectLightAtlasTexture;

#line 3 "/Engine/Generated/UniformBuffers/Strata.ush"
cbuffer   Strata 
{
	 uint  Strata_MaxBytesPerPixel;
	 uint  Strata_bRoughDiffuse;
	 uint  Strata_PeelLayersAboveDepth;
	 uint  Strata_bRoughnessTracking;
	 int  Strata_SliceStoringDebugStrataTreeData;
	 int  Strata_FirstSliceStoringStrataSSSData;
	 uint  Strata_TileSize;
	 uint  Strata_TileSizeLog2;
	 int2  Strata_TileCount;
	 int2  Strata_TileOffset;
	 int2  Strata_OverflowTileCount;
	 int2  Strata_OverflowTileOffset;
	 uint BindlessResource_Strata_MaterialTextureArray ;
	 uint  PrePadding_Strata_68;
	 uint BindlessResource_Strata_TopLayerTexture ;
	 uint  PrePadding_Strata_76;
	 uint BindlessResource_Strata_OpaqueRoughRefractionTexture ;
	 uint  PrePadding_Strata_84;
	 uint BindlessResource_Strata_BSDFOffsetTexture ;
	 uint  PrePadding_Strata_92;
	 uint BindlessResource_Strata_BSDFTileTexture ;
	 uint  PrePadding_Strata_100;
	 uint BindlessResource_Strata_BSDFTileCountBuffer ;
}

#line 3 "/Engine/Generated/UniformBuffers/SingleLayerWater.ush"
cbuffer   SingleLayerWater 
{
	 uint BindlessResource_SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture ;
	 uint  PrePadding_SingleLayerWater_4;
	 uint BindlessSampler_SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler ;
	 uint  PrePadding_SingleLayerWater_12;
	 uint BindlessResource_SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture ;
	 uint  PrePadding_SingleLayerWater_20;
	 uint BindlessSampler_SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler ;
	 uint  PrePadding_SingleLayerWater_28;
	 uint BindlessResource_SingleLayerWater_CustomDepthTexture ;
	 uint  PrePadding_SingleLayerWater_36;
	 uint BindlessResource_SingleLayerWater_CustomStencilTexture ;
	 uint  PrePadding_SingleLayerWater_44;
	 uint BindlessSampler_SingleLayerWater_CustomDepthSampler ;
	 uint  PrePadding_SingleLayerWater_52;
	 uint  PrePadding_SingleLayerWater_56;
	 uint  PrePadding_SingleLayerWater_60;
	 float4  SingleLayerWater_SceneWithoutSingleLayerWaterMinMaxUV;
	 float4  SingleLayerWater_DistortionParams;
	 float2  SingleLayerWater_SceneWithoutSingleLayerWaterTextureSize;
	 float2  SingleLayerWater_SceneWithoutSingleLayerWaterInvTextureSize;
	 uint  SingleLayerWater_bMainDirectionalLightVSMFiltering;
	 uint  SingleLayerWater_bSeparateMainDirLightLuminance;
	 float  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_120;
	 float  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_124;
	 float4x4  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix;
	 float  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm;
	 float  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_196;
	 uint BindlessResource_SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture ;
	 uint  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_204;
	 uint BindlessSampler_SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler ;
	 uint  PrePadding_SingleLayerWater_ForwardDirLightCloudShadow_212;
	 float  SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapStrength;
	 float  PrePadding_SingleLayerWater_BlueNoise_220;
	 int3  SingleLayerWater_BlueNoise_Dimensions;
	 int  PrePadding_SingleLayerWater_BlueNoise_236;
	 int3  SingleLayerWater_BlueNoise_ModuloMasks;
	 int  PrePadding_SingleLayerWater_BlueNoise_252;
	 uint BindlessResource_SingleLayerWater_BlueNoise_ScalarTexture ;
	 uint  PrePadding_SingleLayerWater_BlueNoise_260;
	 uint BindlessResource_SingleLayerWater_BlueNoise_Vec2Texture ;
}

#line 50 "/Engine/Generated/UniformBuffers/SingleLayerWater.ush"
Texture2D  SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture;

#line 52 "/Engine/Generated/UniformBuffers/SingleLayerWater.ush"
Texture2D  SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture;

#line 3 "/Engine/Generated/UniformBuffers/Primitive.ush"
cbuffer   Primitive 
{
	 uint  Primitive_Flags;
	 uint  Primitive_InstanceSceneDataOffset;
	 uint  Primitive_NumInstanceSceneDataEntries;
	 int  Primitive_SingleCaptureIndex;
	 float3  Primitive_TilePosition;
	 uint  Primitive_PrimitiveComponentId;
	 float4x4  Primitive_LocalToRelativeWorld;
	 float4x4  Primitive_RelativeWorldToLocal;
	 float4x4  Primitive_PreviousLocalToRelativeWorld;
	 float4x4  Primitive_PreviousRelativeWorldToLocal;
	 float4x4  Primitive_WorldToPreviousWorld;
	 float3  Primitive_InvNonUniformScale;
	 float  Primitive_ObjectBoundsX;
	 float4  Primitive_ObjectRelativeWorldPositionAndRadius;
	 float3  Primitive_ActorRelativeWorldPosition;
	 uint  Primitive_LightmapUVIndex;
	 float3  Primitive_ObjectOrientation;
	 uint  Primitive_LightmapDataIndex;
	 float4  Primitive_NonUniformScale;
	 float3  Primitive_PreSkinnedLocalBoundsMin;
	 uint  Primitive_NaniteResourceID;
	 float3  Primitive_PreSkinnedLocalBoundsMax;
	 uint  Primitive_NaniteHierarchyOffset;
	 float3  Primitive_LocalObjectBoundsMin;
	 float  Primitive_ObjectBoundsY;
	 float3  Primitive_LocalObjectBoundsMax;
	 float  Primitive_ObjectBoundsZ;
	 float3  Primitive_InstanceLocalBoundsCenter;
	 uint  Primitive_InstancePayloadDataOffset;
	 float3  Primitive_InstanceLocalBoundsExtent;
	 uint  Primitive_InstancePayloadDataStride;
	 uint  Primitive_InstancePayloadExtensionSize;
	 uint  PrePadding_Primitive_532;
	 uint  PrePadding_Primitive_536;
	 uint  PrePadding_Primitive_540;
	 float3  Primitive_WireframeColor;
	 uint  Primitive_PackedNaniteFlags;
	 float3  Primitive_LevelColor;
	 int  Primitive_PersistentPrimitiveIndex;
	 float2  Primitive_InstanceDrawDistanceMinMaxSquared;
	 float  Primitive_InstanceWPODisableDistanceSquared;
	 uint  Primitive_NaniteRayTracingDataOffset;
	 float  Primitive_MaxWPOExtent;
	 float  Primitive_MinMaterialDisplacement;
	 float  Primitive_MaxMaterialDisplacement;
	 uint  Primitive_CustomStencilValueAndMask;
	 uint  Primitive_VisibilityFlags;
	 uint  PrePadding_Primitive_612;
	 uint  PrePadding_Primitive_616;
	 uint  PrePadding_Primitive_620;
	 float4  Primitive_CustomPrimitiveData[9];
}

#line 22 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;

#line 3 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
cbuffer   OpaqueBasePass 
{
	 uint  OpaqueBasePass_Shared_Forward_NumLocalLights;
	 uint  OpaqueBasePass_Shared_Forward_NumReflectionCaptures;
	 uint  OpaqueBasePass_Shared_Forward_HasDirectionalLight;
	 uint  OpaqueBasePass_Shared_Forward_NumGridCells;
	 int3  OpaqueBasePass_Shared_Forward_CulledGridSize;
	 uint  OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;
	 uint  OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_36;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_40;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_44;
	 float3  OpaqueBasePass_Shared_Forward_LightGridZParams;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_60;
	 float3  OpaqueBasePass_Shared_Forward_DirectionalLightDirection;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;
	 float3  OpaqueBasePass_Shared_Forward_DirectionalLightColor;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;
	 uint  OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_100;
	 float2  OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	 uint  OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;
	 int  OpaqueBasePass_Shared_Forward_DirectionalLightVSM;
	 int  PrePadding_OpaqueBasePass_Shared_Forward_120;
	 int  PrePadding_OpaqueBasePass_Shared_Forward_124;
	 float4  OpaqueBasePass_Shared_Forward_CascadeEndDepths;
	 float4x4  OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];
	 float4  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias;
	 uint  OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;
	 uint  OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex;
	 uint  OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;
	 uint  OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_500;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_504;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_508;
	 float4  OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;
	 float4x4  OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_596;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_600;
	 float  PrePadding_OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_604;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  OpaqueBasePass_Shared_Forward_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_644;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_648;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_652;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_660;
	 uint BindlessSampler_OpaqueBasePass_Shared_Forward_ShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_668;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_676;
	 uint BindlessSampler_OpaqueBasePass_Shared_Forward_StaticShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_684;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_692;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_NumCulledLightsGrid ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_700;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit ;
	 uint  PrePadding_OpaqueBasePass_Shared_Forward_708;
	 uint BindlessResource_OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit ;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_716;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumLocalLights;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures;
	 uint  OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumGridCells;
	 int3  OpaqueBasePass_Shared_ForwardISR_CulledGridSize;
	 uint  OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;
	 uint  OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_756;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_760;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_764;
	 float3  OpaqueBasePass_Shared_ForwardISR_LightGridZParams;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_780;
	 float3  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSourceRadius;
	 float3  OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_820;
	 float2  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;
	 uint  OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades;
	 int  OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM;
	 int  PrePadding_OpaqueBasePass_Shared_ForwardISR_840;
	 int  PrePadding_OpaqueBasePass_Shared_ForwardISR_844;
	 float4  OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths;
	 float4x4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	 float4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];
	 float4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;
	 uint  OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex;
	 uint  OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;
	 uint  OpaqueBasePass_Shared_ForwardISR_LumenSupportedStartIndex;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1220;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1224;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1228;
	 float4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;
	 float4x4  OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1316;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1320;
	 float  PrePadding_OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_1324;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_ScreenRayLength;
	 int  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayCount;
	 int  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTSamplesPerRay;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTRayLengthScale;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTCotMaxRayAngleFromLight;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTTexelDitherScale;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTExtrapolateSlope;
	 float  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTMaxSlopeBias;
	 uint  OpaqueBasePass_Shared_ForwardISR_DirectionalLightSMRTSettings_SMRTAdaptiveRayCount;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1364;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1368;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1372;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1380;
	 uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1388;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1396;
	 uint BindlessSampler_OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1404;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1412;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1420;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit ;
	 uint  PrePadding_OpaqueBasePass_Shared_ForwardISR_1428;
	 uint BindlessResource_OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit ;
	 float  PrePadding_OpaqueBasePass_Shared_Reflection_1436;
	 float4  OpaqueBasePass_Shared_Reflection_SkyLightParameters;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1460;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1468;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1476;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1484;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_ReflectionCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1492;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1500;
	 uint BindlessResource_OpaqueBasePass_Shared_Reflection_PreIntegratedGF ;
	 uint  PrePadding_OpaqueBasePass_Shared_Reflection_1508;
	 uint BindlessSampler_OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1516;
	 float4  OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane;
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;
	 float3x4  OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;
	 float3  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1644;
	 float2  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1656;
	 float  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1660;
	 float4x4  OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];
	 float4  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	 float2  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;
	 uint  OpaqueBasePass_Shared_PlanarReflection_bIsStereo;
	 uint  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1836;
	 uint BindlessResource_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture ;
	 uint  PrePadding_OpaqueBasePass_Shared_PlanarReflection_1844;
	 uint BindlessSampler_OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_Fog_1852;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogParameters;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogParameters2;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter;
	 float4  OpaqueBasePass_Shared_Fog_ExponentialFogParameters3;
	 float4  OpaqueBasePass_Shared_Fog_SkyAtmosphereAmbientContributionColorScale;
	 float4  OpaqueBasePass_Shared_Fog_InscatteringLightDirection;
	 float4  OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor;
	 float2  OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_OpaqueBasePass_Shared_Fog_1976;
	 float  PrePadding_OpaqueBasePass_Shared_Fog_1980;
	 float3  OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters;
	 float  OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;
	 float  OpaqueBasePass_Shared_Fog_VolumetricFogStartDistance;
	 float  OpaqueBasePass_Shared_Fog_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_Fog_2012;
	 uint BindlessSampler_OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_Fog_2020;
	 uint BindlessResource_OpaqueBasePass_Shared_Fog_IntegratedLightScattering ;
	 uint  PrePadding_OpaqueBasePass_Shared_Fog_2028;
	 uint BindlessSampler_OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2036;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2040;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2044;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogParameters;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter;
	 float4  OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3;
	 float4  OpaqueBasePass_Shared_FogISR_SkyAtmosphereAmbientContributionColorScale;
	 float4  OpaqueBasePass_Shared_FogISR_InscatteringLightDirection;
	 float4  OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor;
	 float2  OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2168;
	 float  PrePadding_OpaqueBasePass_Shared_FogISR_2172;
	 float3  OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters;
	 float  OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog;
	 float  OpaqueBasePass_Shared_FogISR_VolumetricFogStartDistance;
	 float  OpaqueBasePass_Shared_FogISR_VolumetricFogNearFadeInDistanceInv;
	 uint BindlessResource_OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap ;
	 uint  PrePadding_OpaqueBasePass_Shared_FogISR_2204;
	 uint BindlessSampler_OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler ;
	 uint  PrePadding_OpaqueBasePass_Shared_FogISR_2212;
	 uint BindlessResource_OpaqueBasePass_Shared_FogISR_IntegratedLightScattering ;
	 uint  PrePadding_OpaqueBasePass_Shared_FogISR_2220;
	 uint BindlessSampler_OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler ;
	 float  PrePadding_OpaqueBasePass_Shared_2228;
	 float  PrePadding_OpaqueBasePass_Shared_2232;
	 float  PrePadding_OpaqueBasePass_Shared_2236;
	 uint  OpaqueBasePass_Shared_UseBasePassSkylight;
	 float  PrePadding_OpaqueBasePass_Strata_2244;
	 float  PrePadding_OpaqueBasePass_Strata_2248;
	 float  PrePadding_OpaqueBasePass_Strata_2252;
	 uint  OpaqueBasePass_Strata_MaxBytesPerPixel;
	 uint  OpaqueBasePass_Strata_bRoughDiffuse;
	 uint  OpaqueBasePass_Strata_PeelLayersAboveDepth;
	 uint  OpaqueBasePass_Strata_bRoughnessTracking;
	 int  OpaqueBasePass_Strata_SliceStoringDebugStrataTreeDataWithoutMRT;
	 int  OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT;
	 uint BindlessResource_OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs ;
	 uint  PrePadding_OpaqueBasePass_Strata_2284;
	 uint BindlessResource_OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV ;
	 float  PrePadding_OpaqueBasePass_2292;
	 float  PrePadding_OpaqueBasePass_2296;
	 float  PrePadding_OpaqueBasePass_2300;
	 int  OpaqueBasePass_UseForwardScreenSpaceShadowMask;
	 int  PrePadding_OpaqueBasePass_2308;
	 uint BindlessResource_OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture ;
	 uint  PrePadding_OpaqueBasePass_2316;
	 uint BindlessResource_OpaqueBasePass_IndirectOcclusionTexture ;
	 uint  PrePadding_OpaqueBasePass_2324;
	 uint BindlessResource_OpaqueBasePass_ResolvedSceneDepthTexture ;
	 float  PrePadding_OpaqueBasePass_2332;
	 uint BindlessResource_OpaqueBasePass_DBufferATexture ;
	 uint  PrePadding_OpaqueBasePass_2340;
	 uint BindlessResource_OpaqueBasePass_DBufferBTexture ;
	 uint  PrePadding_OpaqueBasePass_2348;
	 uint BindlessResource_OpaqueBasePass_DBufferCTexture ;
	 uint  PrePadding_OpaqueBasePass_2356;
	 uint BindlessResource_OpaqueBasePass_DBufferRenderMask ;
	 uint  PrePadding_OpaqueBasePass_2364;
	 uint BindlessSampler_OpaqueBasePass_DBufferATextureSampler ;
	 uint  PrePadding_OpaqueBasePass_2372;
	 uint BindlessSampler_OpaqueBasePass_DBufferBTextureSampler ;
	 uint  PrePadding_OpaqueBasePass_2380;
	 uint BindlessSampler_OpaqueBasePass_DBufferCTextureSampler ;
	 uint  PrePadding_OpaqueBasePass_2388;
	 uint  PrePadding_OpaqueBasePass_2392;
	 uint  PrePadding_OpaqueBasePass_2396;
	 uint BindlessResource_OpaqueBasePass_PreIntegratedGFTexture ;
	 uint  PrePadding_OpaqueBasePass_2404;
	 uint BindlessSampler_OpaqueBasePass_PreIntegratedGFSampler ;
	 uint  PrePadding_OpaqueBasePass_2412;
	 int  OpaqueBasePass_Is24BitUnormDepthStencil;
	 int  PrePadding_OpaqueBasePass_2420;
	 uint BindlessResource_OpaqueBasePass_EyeAdaptationBuffer ;
}

#line 275 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture2D  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;

#line 276 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
SamplerState  OpaqueBasePass_Shared_Forward_ShadowmapSampler;

#line 279 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
StructuredBuffer<float4>  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer;

#line 280 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
StructuredBuffer<uint>  OpaqueBasePass_Shared_Forward_NumCulledLightsGrid;

#line 282 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Buffer<uint>  OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit;

#line 309 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
RWTexture2DArray<uint>  OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs;

#line 318 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture2D  OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture;

#line 321 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"
Texture2D  OpaqueBasePass_PreIntegratedGFTexture;

#line 3 "/Engine/Generated/UniformBuffers/IndirectLightingCache.ush"
cbuffer   IndirectLightingCache 
{
	 float3  IndirectLightingCache_IndirectLightingCachePrimitiveAdd;
	 float  PrePadding_IndirectLightingCache_12;
	 float3  IndirectLightingCache_IndirectLightingCachePrimitiveScale;
	 float  PrePadding_IndirectLightingCache_28;
	 float3  IndirectLightingCache_IndirectLightingCacheMinUV;
	 float  PrePadding_IndirectLightingCache_44;
	 float3  IndirectLightingCache_IndirectLightingCacheMaxUV;
	 float  PrePadding_IndirectLightingCache_60;
	 float4  IndirectLightingCache_PointSkyBentNormal;
	 float  IndirectLightingCache_DirectionalLightShadowing;
	 float  PrePadding_IndirectLightingCache_84;
	 float  PrePadding_IndirectLightingCache_88;
	 float  PrePadding_IndirectLightingCache_92;
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients0[3];
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients1[3];
	 float4  IndirectLightingCache_IndirectLightingSHCoefficients2;
	 float4  IndirectLightingCache_IndirectLightingSHSingleCoefficient;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture0 ;
	 uint  PrePadding_IndirectLightingCache_228;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture1 ;
	 uint  PrePadding_IndirectLightingCache_236;
	 uint BindlessResource_IndirectLightingCache_IndirectLightingCacheTexture2 ;
	 uint  PrePadding_IndirectLightingCache_244;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler0 ;
	 uint  PrePadding_IndirectLightingCache_252;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler1 ;
	 uint  PrePadding_IndirectLightingCache_260;
	 uint BindlessSampler_IndirectLightingCache_IndirectLightingCacheTextureSampler2 ;
}

#line 30 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
ByteAddressBuffer  VirtualShadowMap_ProjectionData;

#line 31 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
StructuredBuffer<uint>  VirtualShadowMap_PageTable;

#line 34 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"
Texture2DArray<uint>  VirtualShadowMap_PhysicalPagePool;

#line 3 "/Engine/Generated/UniformBuffers/MaterialCollection0.ush"
cbuffer   MaterialCollection0 
{
	 float4  MaterialCollection0_Vectors[5];
}

#line 3 "/Engine/Generated/UniformBuffers/Material.ush"
cbuffer   Material 
{
	 float4  Material_PreshaderBuffer[109];
	 uint BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint  PrePadding_Material_1748;
	 uint BindlessSampler_Material_Clamp_WorldGroupSettings ;
}

#line 12 "/Engine/Private/CommonViewUniformBuffer.ush"
float2 GetTanHalfFieldOfView()
{
	return View_TanAndInvTanHalfFOV.xy;
}

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 36 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView()
{
	return GetPrimaryView();
}

#line 337 "/Engine/Private/Common.ush"
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 353 "/Engine/Private/Common.ush"
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 595 "/Engine/Private/Common.ush"
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}

#line 600 "/Engine/Private/Common.ush"
float length2(float2 v)
{
	return dot(v, v);
}

#line 604 "/Engine/Private/Common.ush"
float length2(float3 v)
{
	return dot(v, v);
}

#line 608 "/Engine/Private/Common.ush"
float length2(float4 v)
{
	return dot(v, v);
}

#line 661 "/Engine/Private/Common.ush"
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}

#line 665 "/Engine/Private/Common.ush"
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}

#line 669 "/Engine/Private/Common.ush"
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}

#line 673 "/Engine/Private/Common.ush"
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}

#line 52 "/Engine/Private/FastMathThirdParty.ush"
float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}

#line 62 "/Engine/Private/FastMathThirdParty.ush"
float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}

#line 82 "/Engine/Private/FastMathThirdParty.ush"
float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

#line 108 "/Engine/Private/FastMathThirdParty.ush"
float acosFast(float inX) 
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

#line 116 "/Engine/Private/FastMathThirdParty.ush"
float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

#line 121 "/Engine/Private/FastMathThirdParty.ush"
float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

#line 126 "/Engine/Private/FastMathThirdParty.ush"
float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}

#line 134 "/Engine/Private/FastMathThirdParty.ush"
float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

#line 139 "/Engine/Private/FastMathThirdParty.ush"
float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

#line 144 "/Engine/Private/FastMathThirdParty.ush"
float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

#line 149 "/Engine/Private/FastMathThirdParty.ush"
float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}

#line 13 "/Engine/Private/FastMath.ush"
float FastExp( float x) { return exp2(1.442695f * x); }

#line 14 "/Engine/Private/FastMath.ush"
float2 FastExp( float2 x) { return exp2(1.442695f * x); }

#line 15 "/Engine/Private/FastMath.ush"
float3 FastExp( float3 x) { return exp2(1.442695f * x); }

#line 16 "/Engine/Private/FastMath.ush"
float4 FastExp( float4 x) { return exp2(1.442695f * x); }

#line 12 "/Engine/Private/Random.ush"
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);
	
	
	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}

#line 26 "/Engine/Private/Random.ush"
float InterleavedGradientNoise( float2 uv, float FrameId )
{
	
	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}

#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed / 4093);
	s = frac(s * s * 4093);
	s = frac(s * s * 4093);
	return s;
}

#line 71 "/Engine/Private/Random.ush"
uint3 Rand3DPCG16(int3 p)
{
	
	uint3 v = uint3(p);

	
	
	
	v = v * 1664525u + 1013904223u;

	
	
	
	
	
	
	
	
	
	
	
	
	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	
	return v >> 16u;
}

#line 239 "/Engine/Private/Random.ush"
float3 NoiseTileWrap(float3 v,  bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}

#line 247 "/Engine/Private/Random.ush"
float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10); 
}

#line 266 "/Engine/Private/Random.ush"
float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	return float4(direction, dot(direction, offset));
}

#line 279 "/Engine/Private/Random.ush"
float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{	
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{	
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}

#line 320 "/Engine/Private/Random.ush"
float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}

#line 466 "/Engine/Private/Random.ush"
float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;
	
	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;
	
	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}

#line 495 "/Engine/Private/Random.ush"
float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);
	
	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;	
	if (bTiling)						
	{
		OffsetB = iv1.z * ZShear;
	}

	
	float ts = 1 / 128.0f;

	
	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;

	
	float2 TexA1 = TexA0 + ts;	
	float2 TexB1 = TexB0 + ts;
	if (bTiling)				
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}


	
	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;
	
	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}

#line 557 "/Engine/Private/Random.ush"
float FastGradientPerlinNoise3D_TEX(float3 xyz)
{
	
	float Extent = 16;

	
	
	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);

	
	float3 uvw = frac(xyz);
	
	
	float3 p0 = xyz - uvw;

	
	float3 f = PerlinRamp(float4(uvw, 0)).xyz;	
	
	float3 p = p0 + f;
	
	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);		

	
	
	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}

#line 590 "/Engine/Private/Random.ush"
float3 VoronoiCornerSample(float3 pos, int Quality)
{
	
	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;

	
	
	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}

	
	
	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}

	
	return noise;
}

#line 620 "/Engine/Private/Random.ush"
float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}

#line 634 "/Engine/Private/Random.ush"
float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v),  fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);

	
	float4 mindist = float4(0,0,0,100);
	float3 p, offset;

	
	if (Quality == 3)
	{
		 [unroll( 3 )] for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			 [unroll( 3 )] for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				 [unroll( 3 )] for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}

	
	else
	{
		 [unroll( 2 )] for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					if (Quality == 2)
					{
						
						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}

	
	if (Quality >= 4)
	{
		 [unroll( 2 )] for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					
					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}

	
	return float4(mindist.xyz, sqrt(mindist.w));
}

#line 737 "/Engine/Private/Random.ush"
float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b = 
		  min(max(0, RG), max(0, RB))		
		+ min(max(0, -RG), max(0, GB))		
		+ min(max(0, -RB), max(0, -GB));	
	
	ret.a = 
		  min(max(0, -RG), max(0, -RB))		
		+ min(max(0, RG), max(0, -GB))		
		+ min(max(0, RB), max(0, GB));		

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

#line 774 "/Engine/Private/Random.ush"
float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;

	
	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

#line 783 "/Engine/Private/Random.ush"
float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

#line 793 "/Engine/Private/Random.ush"
float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}

#line 797 "/Engine/Private/Random.ush"
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}

#line 801 "/Engine/Private/Random.ush"
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}

#line 805 "/Engine/Private/Random.ush"
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}

#line 846 "/Engine/Private/Random.ush"
float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);

	
	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);
	
	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}

#line 904 "/Engine/Private/Common.ush"
float Square( float x )
{
	return x*x;
}

#line 909 "/Engine/Private/Common.ush"
float2 Square( float2 x )
{
	return x*x;
}

#line 914 "/Engine/Private/Common.ush"
float3 Square( float3 x )
{
	return x*x;
}

#line 919 "/Engine/Private/Common.ush"
float4 Square( float4 x )
{
	return x*x;
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 944 "/Engine/Private/Common.ush"
float Pow3( float x )
{
	return x*x*x;
}

#line 949 "/Engine/Private/Common.ush"
float2 Pow3( float2 x )
{
	return x*x*x;
}

#line 954 "/Engine/Private/Common.ush"
float3 Pow3( float3 x )
{
	return x*x*x;
}

#line 959 "/Engine/Private/Common.ush"
float4 Pow3( float4 x )
{
	return x*x*x;
}

#line 964 "/Engine/Private/Common.ush"
float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

#line 970 "/Engine/Private/Common.ush"
float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

#line 976 "/Engine/Private/Common.ush"
float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

#line 982 "/Engine/Private/Common.ush"
float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

#line 988 "/Engine/Private/Common.ush"
float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

#line 994 "/Engine/Private/Common.ush"
float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

#line 1000 "/Engine/Private/Common.ush"
float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

#line 1006 "/Engine/Private/Common.ush"
float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

#line 1059 "/Engine/Private/Common.ush"
float DecodeLightAttenuation(float InColor)
{
	return Square(InColor);
}

#line 1065 "/Engine/Private/Common.ush"
float4 DecodeLightAttenuation(float4 InColor)
{
	return Square(InColor);
}

#line 1179 "/Engine/Private/Common.ush"
float ConvertFromDeviceZ(float DeviceZ)
{
	
	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}

#line 1187 "/Engine/Private/Common.ush"
bool IsOrthoProjection(float4x4 ViewToClip)
{
	return asuint(ViewToClip._44);
}

#line 1193 "/Engine/Private/Common.ush"
bool IsOrthoProjection()
{
	return IsOrthoProjection(View_ViewToClip);
}

#line 1229 "/Engine/Private/Common.ush"
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

#line 1255 "/Engine/Private/Common.ush"
float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View_SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}

#line 1263 "/Engine/Private/Common.ush"
float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}

#line 1271 "/Engine/Private/Common.ush"
FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
}

#line 1293 "/Engine/Private/Common.ush"
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

#line 1456 "/Engine/Private/Common.ush"
float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{
	
	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}

#line 1479 "/Engine/Private/Common.ush"
float MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;
	
	[loop] for(uint i = 0; i < Levels; ++i)
	{
		
		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{
		
		Out = Out * 0.5f + 0.5f;
	}

	
	return lerp(OutputMin, OutputMax, Out);
}

#line 1605 "/Engine/Private/Common.ush"
float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

#line 1673 "/Engine/Private/Common.ush"
float3 TransformWorldVectorToView(float3 InTangentVector)
{
	
	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}

#line 1914 "/Engine/Private/Common.ush"
bool IsFinite( float In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; }

#line 1915 "/Engine/Private/Common.ush"
bool2 IsFinite( float2 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; }

#line 1916 "/Engine/Private/Common.ush"
bool3 IsFinite( float3 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; }

#line 1917 "/Engine/Private/Common.ush"
bool4 IsFinite( float4 In) {	return (asuint(In) & 0x7F800000) != 0x7F800000; }

#line 2050 "/Engine/Private/Common.ush"
struct FPixelShaderIn
{
	
	float4 SvPosition;

	
	uint Coverage;

	
	bool bIsFrontFace;
};

#line 2062 "/Engine/Private/Common.ush"
struct FPixelShaderOut
{
	
	float4 MRT[8];
	
	
	uint StrataOutput[3];
	uint StrataTopLayerData;

	
	uint Coverage;

	
	float Depth;
};

#line 38 "/Engine/Private/SHCommon.ush"
struct FThreeBandSHVector
{
	float4 V0;
	float4 V1;
	float V2;
};

#line 45 "/Engine/Private/SHCommon.ush"
struct FThreeBandSHVectorRGB
{
	FThreeBandSHVector R;
	FThreeBandSHVector G;
	FThreeBandSHVector B;
};

#line 173 "/Engine/Private/SHCommon.ush"
float DotSH3(FThreeBandSHVector A,FThreeBandSHVector B)
{
	float Result = dot(A.V0, B.V0);
	Result += dot(A.V1, B.V1);
	Result += A.V2 * B.V2;
	return Result;
}

#line 181 "/Engine/Private/SHCommon.ush"
float3 DotSH3(FThreeBandSHVectorRGB A,FThreeBandSHVector B)
{
	float3 Result = 0;
	Result.r = DotSH3(A.R,B);
	Result.g = DotSH3(A.G,B);
	Result.b = DotSH3(A.B,B);
	return Result;
}

#line 226 "/Engine/Private/SHCommon.ush"
FThreeBandSHVector SHBasisFunction3(float3 InputVector)
{
	FThreeBandSHVector Result;
	
	Result.V0.x = 0.282095f; 
	Result.V0.y = -0.488603f * InputVector.y;
	Result.V0.z = 0.488603f * InputVector.z;
	Result.V0.w = -0.488603f * InputVector.x;

	float3 VectorSquared = InputVector * InputVector;
	Result.V1.x = 1.092548f * InputVector.x * InputVector.y;
	Result.V1.y = -1.092548f * InputVector.y * InputVector.z;
	Result.V1.z = 0.315392f * (3.0f * VectorSquared.z - 1.0f);
	Result.V1.w = -1.092548f * InputVector.x * InputVector.z;
	Result.V2 = 0.546274f * (VectorSquared.x - VectorSquared.y);

	return Result;
}

#line 285 "/Engine/Private/SHCommon.ush"
FThreeBandSHVector CalcDiffuseTransferSH3(float3 Normal,float Exponent)
{
	FThreeBandSHVector Result = SHBasisFunction3(Normal);

	
	
	float L0 =					2 * PI / (1 + 1 * Exponent						);
	float L1 =					2 * PI / (2 + 1 * Exponent						);
	float L2 = Exponent *		2 * PI / (3 + 4 * Exponent + Exponent * Exponent);
	float L3 = (Exponent - 1) *	2 * PI / (8 + 6 * Exponent + Exponent * Exponent);

	







	Result.V0.x *= L0;
	Result.V0.yzw *= L1;
	Result.V1.xyzw *= L2;
	Result.V2 *= L2;

	return Result;
}

#line 24 "/Engine/Private/SobolRandom.ush"
uint2 SobolPixel(uint2 Pixel)
{
	
	int3 SobolLo = int3(Pixel & 0xfu, 0);
	int3 SobolHi = int3((Pixel >> 4u) & 0xfu, 0) + int3(16, 0, 0);
	uint Packed = View_SobolSamplingTexture.Load(SobolLo) ^ View_SobolSamplingTexture.Load(SobolHi);
	return uint2(Packed, Packed << 8u) & 0xff00u;
}

#line 38 "/Engine/Private/SobolRandom.ush"
uint2 SobolIndex(uint2 Base, int Index, int Bits = 10)
{
	uint2 SobolNumbers[10] = {
		uint2(0x8680u, 0x4c80u), uint2(0xf240u, 0x9240u), uint2(0x8220u, 0x0e20u), uint2(0x4110u, 0x1610u), uint2(0xa608u, 0x7608u),
		uint2(0x8a02u, 0x280au), uint2(0xe204u, 0x9e04u), uint2(0xa400u, 0x4682u), uint2(0xe300u, 0xa74du), uint2(0xb700u, 0x9817u),
	};

	uint2 Result = Base;
	[unroll] for (int b = 0; b < 10 && b < Bits; ++b)
	{
		Result ^= (Index & (1u << b)) ? SobolNumbers[b] : 0;
	}
	return Result;
}

#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}

#line 48 "/Engine/Private/MonteCarlo.ush"
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

#line 214 "/Engine/Private/MonteCarlo.ush"
float4 UniformSampleSphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = 1 - 2 * E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (4 * PI);

	return float4( H, PDF );
}

#line 248 "/Engine/Private/MonteCarlo.ush"
float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt(E.y);
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	float PDF = CosTheta * (1.0 / PI);

	return float4(H, PDF);
}

#line 274 "/Engine/Private/MonteCarlo.ush"
float4 CosineSampleHemisphere( float2 E, float3 N ) 
{
	float3 H = UniformSampleSphere( E ).xyz;
	H = normalize( N + H );

	float PDF = dot(H, N) * (1.0 /  PI);

	return float4( H, PDF );
}

#line 303 "/Engine/Private/MonteCarlo.ush"
float4 UniformSampleConeRobust(float2 E, float SinThetaMax2)
{
	float Phi = 2 * PI * E.x;
	
	
	
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

	float CosTheta = 1 - OneMinusCosThetaMax * E.y;
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 L;
	L.x = SinTheta * cos(Phi);
	L.y = SinTheta * sin(Phi);
	L.z = CosTheta;
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}

#line 323 "/Engine/Private/MonteCarlo.ush"
float UniformConeSolidAngle(float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	return 2 * PI * OneMinusCosThetaMax;
}

#line 347 "/Engine/Private/MonteCarlo.ush"
float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;
	
	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;

	return float4( H, PDF );
}

#line 365 "/Engine/Private/MonteCarlo.ush"
float VisibleGGXPDF(float3 V, float3 H, float a2)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);

	float d = (NoH * a2 - NoH) * NoH + 1;
	float D = a2 / (PI*d*d);

	float PDF = 2 * VoH * D / (NoV + sqrt(NoV * (NoV - NoV * a2) + a2));
	return PDF;
}

#line 378 "/Engine/Private/MonteCarlo.ush"
float VisibleGGXPDF_aniso(float3 V, float3 H, float2 Alpha)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);
	float a2 = Alpha.x * Alpha.y;
	float3 Hs = float3(Alpha.y * H.x, Alpha.x * H.y, a2 * NoH);
	float S = dot(Hs, Hs);
	float D = (1.0f / PI) * a2 * Square(a2 / S);
	float LenV = length(float3(V.x * Alpha.x, V.y * Alpha.y, NoV));
	float Pdf = (2 * D * VoH) / (NoV + LenV);
	return Pdf;
}

#line 516 "/Engine/Private/MonteCarlo.ush"
float RayPDFToReflectionRayPDF(float VoH, float RayPDF)
{
	float ReflectPDF = RayPDF / (4.0 * saturate(VoH));

	return ReflectPDF;
}

#line 104 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
struct FGlobalDistanceFieldPage
{
	uint PageIndex;
	bool bValid;
	bool bCoverage;
};

#line 111 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset;
	
	
	

	
	PageAtlasOffset.x = Page.PageIndex & 0x7F;
	PageAtlasOffset.y = (Page.PageIndex >> 7) & 0x7F;
	PageAtlasOffset.z = Page.PageIndex >> 14;

	return PageAtlasOffset;
}

#line 137 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
FGlobalDistanceFieldPage UnpackGlobalDistanceFieldPage(uint PackedPage)
{
	FGlobalDistanceFieldPage Page;
	Page.PageIndex = PackedPage & 0x00FFFFFF;
	Page.bCoverage = PackedPage & 0x80000000;
	Page.bValid = PackedPage < 0xFFFFFFFF;
	return Page;
}

#line 146 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
FGlobalDistanceFieldPage GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) * View_GlobalDistanceFieldClipmapSizeInPages + int3(0, 0, ClipmapIndex * View_GlobalDistanceFieldClipmapSizeInPages), 0);
	uint PackedPage = View_GlobalDistanceFieldPageTableTexture.Load(PageTableCoord);
	return UnpackGlobalDistanceFieldPage(PackedPage);
}

#line 153 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
void ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page, out float3 OutPageUV, out float3 OutCoveragePageUV)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View_GlobalDistanceFieldClipmapSizeInPages);

	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	OutPageUV = PageAtlasCoord * View_GlobalDistanceFieldInvPageAtlasSize;

	float3 CoveragePageAtlasCoord = PageAtlasOffset * 4 + VolumePageUV * (4 - 1) + 0.5f;
	OutCoveragePageUV = CoveragePageAtlasCoord * View_GlobalDistanceFieldInvCoverageAtlasSize;
}

#line 165 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View_GlobalDistanceFieldClipmapSizeInPages);
	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	float3 PageUV = PageAtlasCoord * View_GlobalDistanceFieldInvPageAtlasSize;
	return PageUV;
}

#line 188 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

#line 193 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 ComputeGlobalUV(float3 TranslatedWorldPosition, uint ClipmapIndex)
{
	
	float4 TranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul[ClipmapIndex];
	float3 UV = frac(TranslatedWorldPosition * TranslatedWorldToUVAddAndMul.www + TranslatedWorldToUVAddAndMul.xyz); 
	UV = frac(UV); 
	return UV;
}

#line 214 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GetDistanceToNearestSurfaceGlobal(float3 TranslatedWorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex < View_NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);
		const float ClipmapVoxelExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View_GlobalVolumeTexelSize;
		const float ClipmapInfluenceRange = 2.0f * 4 * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);

			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  View_SharedTrilinearWrappedSampler, PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

#line 274 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GlobalDistanceFieldSampleClipmap(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float DistanceFieldValue = 1.0f;

	
	ClipmapVolumeUV = frac(ClipmapVolumeUV);

	FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
	if (Page.bValid)
	{
		float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);
		DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  View_SharedTrilinearWrappedSampler, PageUV, 0).x;
	}

	return DistanceFieldValue;
}

#line 291 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 GlobalDistanceFieldPageCentralDiff(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float3 TexelOffset = 0.5f * View_GlobalVolumeTexelSize;

	float R = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(+TexelOffset.x, 0, 0), ClipmapIndex);
	float L = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(-TexelOffset.x, 0, 0), ClipmapIndex);
	float F = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, +TexelOffset.y, 0), ClipmapIndex);
	float B = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, -TexelOffset.y, 0), ClipmapIndex);
	float U = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, +TexelOffset.z), ClipmapIndex);
	float D = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, -TexelOffset.z), ClipmapIndex);

	return float3(R - L, F - B, U - D);
}

#line 316 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 GetDistanceFieldGradientGlobal(float3 TranslatedWorldPosition)
{
	float3 Gradient = float3(0, 0, 0.001f);

	for (uint ClipmapIndex = 0; ClipmapIndex < View_NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		const float ClipmapVoxelExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View_GlobalVolumeTexelSize;
		const float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);

		if (DistanceFromClipmap >= ClipmapVoxelExtent)
		{
			const float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);
			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  View_SharedTrilinearWrappedSampler, PageUV, 0).x;

				
				if (DistanceFieldValue < 0.9f)
				{
					float3 PageCentralDiff = GlobalDistanceFieldPageCentralDiff(ClipmapVolumeUV, ClipmapIndex);

					const float ClipmapInfluenceRange = 4 * 2.0f * ClipmapVoxelExtent;
					const float PageDistanceDecodeFactor = 2.0f * ClipmapInfluenceRange;
					float ClipmapExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w;

					
					const float BackwardsCompatibilityFactor = 128.0f * View_GlobalVolumeTexelSize;
					Gradient = PageDistanceDecodeFactor * PageCentralDiff / (ClipmapExtent * BackwardsCompatibilityFactor);

					break;
				}
			}
		}
	}

	return Gradient;
}

#line 418 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GetDistanceToNearestSurfaceGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceToNearestSurfaceGlobal(TranslatedWorldPosition);
}

#line 425 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 GetDistanceFieldGradientGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceFieldGradientGlobal(TranslatedWorldPosition);
}

#line 18 "/Engine/Private/OctahedralCommon.ush"
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

#line 28 "/Engine/Private/OctahedralCommon.ush"
float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}

#line 93 "/Engine/Private/SceneData.ush"
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		TilePosition;
	uint		PrimitiveComponentId; 
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		LevelColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9]; 
};

#line 211 "/Engine/Private/SceneData.ush"
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;








	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];

}

#line 228 "/Engine/Private/SceneData.ush"
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{





	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	
	
	uint PrimitiveIndex = PrimitiveId * 41;
	
	float3 TilePosition = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;

	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));

	float4 ObjectWorldPositionAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);

	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.TilePosition							= TilePosition; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeLWCMatrix4x3(TilePosition, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeLWCInverseMatrix4x3(TilePosition, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeLWCMatrix4x3(TilePosition, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeLWCInverseMatrix4x3(TilePosition, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectWorldPosition					= MakeLWCVector3(TilePosition, ObjectWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius							= ObjectWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition					= MakeLWCVector3(TilePosition, LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).xyz);
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w) >> 24;
	PrimitiveData.WireframeColor						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.LevelColor							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).x;
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).y;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);

	

	
	[unroll]
	for (int DataIndex = 0; DataIndex < 9; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  32 + DataIndex);
	}
	return PrimitiveData;

}

#line 363 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags & 0x100, 1.0f, 0.0f);
	const float CastContactShadow     = CondMask(Flags & 0x200,    1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}

#line 370 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}

#line 376 "/Engine/Private/SceneData.ush"
float GetPrimitive_PerObjectGBufferData(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(Primitive_Flags);
}

#line 382 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask_FromFlags(uint Flags)
{
	const uint Channel0 = CondMask(Flags & 0x800, 1u, 0u);
	const uint Channel1 = CondMask(Flags & 0x1000, 1u, 0u);
	const uint Channel2 = CondMask(Flags & 0x2000, 1u, 0u);
	return (Channel0 | (Channel1 << 1u) | (Channel2 << 2u));
}

#line 390 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask(uint PrimitiveId)
{
	return GetPrimitive_LightingChannelMask_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}

#line 396 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_LightingChannelMask_FromFlags(Primitive_Flags);
}

#line 404 "/Engine/Private/SceneData.ush"
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};

#line 434 "/Engine/Private/SceneData.ush"
struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;








	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;


	FInstanceSceneEditorData EditorData;

};

#line 1068 "/Engine/Private/SceneData.ush"
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};

#line 20 "/Engine/Private/HairShadingCommon.ush"
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;

	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

#line 33 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);

	return o;
}

#line 48 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairStrandsTransmittanceData(bool bMultipleScatterEnable = false)
{
	FHairTransmittanceData o = InitHairTransmittanceData(bMultipleScatterEnable);
	o.bUseLegacyAbsorption = false;
	o.bUseBacklit = true;
	return o;
}

#line 71 "/Engine/Private/HairShadingCommon.ush"
float3 HairColorToAbsorption(float3 C, float B = 0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return Pow2(log(C) / D);
}

#line 90 "/Engine/Private/ShadingCommon.ush"
bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID == 6;
}

#line 98 "/Engine/Private/ShadingCommon.ush"
float F0ToDielectricSpecular(float F0)
{
	return saturate(F0 / 0.08f);
}

#line 103 "/Engine/Private/ShadingCommon.ush"
float F0RGBToF0(float3 F0)
{
	return dot(0.3333333.xxx, F0);
}

#line 108 "/Engine/Private/ShadingCommon.ush"
float F0RGBToDielectricSpecular(float3 F0)
{
	return F0ToDielectricSpecular(F0RGBToF0(F0));
}

#line 113 "/Engine/Private/ShadingCommon.ush"
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}

#line 119 "/Engine/Private/ShadingCommon.ush"
float DielectricF0ToIor(float F0)
{
	return 2.0f / (1.0f - sqrt(min(F0,0.99))) - 1.0f;
}

#line 138 "/Engine/Private/ShadingCommon.ush"
float  F0ToMicroOcclusion(float F0)   { return saturate(50.0 * F0); }

#line 139 "/Engine/Private/ShadingCommon.ush"
float3 F0ToMicroOcclusion(float3 F0)  { return saturate(50.0 * F0); }

#line 141 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMicroOcclusion(float3 F0)
{
	return F0ToMicroOcclusion(max(F0.r, max(F0.g, F0.b)));
}

#line 146 "/Engine/Private/ShadingCommon.ush"
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 156 "/Engine/Private/ShadingCommon.ush"
float3 ComputeDiffuseAlbedo(float3 BaseColor, float Metallic)
{
	return BaseColor - BaseColor * Metallic;
}

#line 161 "/Engine/Private/ShadingCommon.ush"
float MakeRoughnessSafe(float Roughness, float MinRoughness=0.001f)
{
	return clamp(Roughness, MinRoughness, 1.0f);
}

#line 166 "/Engine/Private/ShadingCommon.ush"
float F0ToMetallic(float F0)
{
	
	const float FullMetalBeginF0 = 0.08f;	
	const float FullMetalEndF0   = 0.4f;	
	

	return saturate((F0 - FullMetalBeginF0) / (FullMetalEndF0 - FullMetalBeginF0));
}

#line 176 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMetallic(float3 F0)
{
	return F0ToMetallic(max(F0.r, max(F0.g, F0.b)));
}

#line 185 "/Engine/Private/ShadingCommon.ush"
struct FVerticalLayeringInfo
{
	float TransmittanceTopAndBottom;	
	float TransmittanceOnlyBottom;		
	float TransmittanceOnlyTop;			

	float SurfaceBottom;				
	float SurfaceTop;					

	float Coverage;						
	float NoSurface;					
};

#line 200 "/Engine/Private/ShadingCommon.ush"
FVerticalLayeringInfo GetVerticalLayeringInfo(const float TopCoverage, const float BottomCoverage)
{
	FVerticalLayeringInfo Info;

	Info.TransmittanceTopAndBottom	= TopCoverage * BottomCoverage;
	Info.TransmittanceOnlyBottom	= (1.0f - TopCoverage) * BottomCoverage;
	Info.TransmittanceOnlyTop		= (1.0f - BottomCoverage) * TopCoverage;

	Info.SurfaceBottom				= Info.TransmittanceOnlyBottom;
	Info.SurfaceTop					= TopCoverage;								

	Info.Coverage					= Info.SurfaceTop + Info.SurfaceBottom;		
	Info.NoSurface					= 1.0f - Info.Coverage;

	return Info;
}

#line 24 "/Engine/Private/LightAccumulator.ush"
struct FLightAccumulator
{
	float3 TotalLight;

	
	
	
	float ScatterableLightLuma;

	
	
	
	float3 ScatterableLight;

	
	
	float EstimatedCost;

	
	
	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;

};

#line 49 "/Engine/Private/LightAccumulator.ush"
struct FDeferredLightingSplit
{
	float4 DiffuseLighting;
	float4 SpecularLighting;
};

#line 56 "/Engine/Private/LightAccumulator.ush"
void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	
	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;

	
	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if (1 == 1)
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if (1 == 2)
		{
			
			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}

	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}

#line 82 "/Engine/Private/LightAccumulator.ush"
void LightAccumulator_Add(inout FLightAccumulator In, float3 TotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	LightAccumulator_AddSplit(In, TotalLight, 0.0f, ScatterableLight, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
}

#line 90 "/Engine/Private/LightAccumulator.ush"
float4 LightAccumulator_GetResult(FLightAccumulator In)
{
	float4 Ret;

	if (0 == 1)
	{
		
		Ret = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		Ret = float4(In.TotalLight, 0);

		if (1 == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				
				Ret.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			
			
			Ret.a = Luminance(In.ScatterableLight);
			
		}
	}

	return Ret;
}

#line 124 "/Engine/Private/LightAccumulator.ush"
FDeferredLightingSplit LightAccumulator_GetResultSplit(FLightAccumulator In)
{
	float4 RetDiffuse;
	float4 RetSpecular;

	if (0 == 1)
	{
		
		RetDiffuse = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
		RetSpecular = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		RetDiffuse = float4(In.TotalLightDiffuse, 0);
		RetSpecular = float4(In.TotalLightSpecular, 0);

		if (1 == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				
				RetDiffuse.a = In.ScatterableLightLuma;
			}
		}
		else if (1 == 2)
		{
			
			
			RetDiffuse.a = Luminance(In.ScatterableLight);
			
		}
	}

	FDeferredLightingSplit Ret;
	Ret.DiffuseLighting = RetDiffuse;
	Ret.SpecularLighting = RetSpecular;

	return Ret;
}

#line 206 "/Engine/Private/DeferredShadingCommon.ush"
float EncodeIndirectIrradiance(float IndirectIrradiance)
{
	float L = IndirectIrradiance;
	L *= View_PreExposure; 
	const float LogBlackPoint = 0.00390625;	
	return log2( L + LogBlackPoint ) / 16 + 0.5;
}

#line 280 "/Engine/Private/DeferredShadingCommon.ush"
float EncodeShadingModelIdAndSelectiveOutputMask(uint ShadingModelId, uint SelectiveOutputMask)
{
	uint Value = (ShadingModelId & 0xF) | SelectiveOutputMask;
	return (float)Value / (float)0xFF;
}

#line 306 "/Engine/Private/DeferredShadingCommon.ush"
bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel == 5 || ShadingModel == 9;
}

#line 329 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{
	
	float3 WorldNormal;
	
	float3 WorldTangent;
	
	float3 DiffuseColor;
	
	float3 SpecularColor;
	
	float3 BaseColor;
	
	float Metallic;
	
	float Specular;
	
	float4 CustomData;
	
	float GenericAO;
	
	float IndirectIrradiance;
	
	
	float4 PrecomputedShadowFactors;
	
	float Roughness;
	
	float Anisotropy;
	
	float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	float PerObjectGBufferData;
	
	float CustomDepth;
	
	uint CustomStencil;
	
	
	float Depth;
	
	float4 Velocity;

	
	float3 StoredBaseColor;
	
	float StoredSpecular;
	
	float StoredMetallic;

	
	float Curvature;
};

#line 389 "/Engine/Private/DeferredShadingCommon.ush"
bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;
	
	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID != 9);
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}

#line 398 "/Engine/Private/DeferredShadingCommon.ush"
bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}

#line 407 "/Engine/Private/DeferredShadingCommon.ush"
bool CheckerFromPixelPos(uint2 PixelPos)
{
	
	
	uint TemporalAASampleIndex = uint(View_TemporalAAParams.x);


	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;



}

#line 18 "/ShaderAutogen/PCD3D_SM5_Preview/AutogenShaderHeaders.ush"
void EncodeGBufferToMRT(inout FPixelShaderOut Out, FGBufferData GBuffer, float QuantizationBias)
{
	float4 MrtFloat1 = 0.0f;

	MrtFloat1.x = GBuffer.PrecomputedShadowFactors.x;
	MrtFloat1.y = GBuffer.PrecomputedShadowFactors.y;
	MrtFloat1.z = GBuffer.PrecomputedShadowFactors.z;
	MrtFloat1.w = GBuffer.PrecomputedShadowFactors.w;

	Out.MRT[1] = MrtFloat1;
	Out.MRT[2] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[3] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[4] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[5] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[6] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[7] = float4(0.0f, 0.0f, 0.0f, 0.0f);
}

#line 447 "/Engine/Private/DeferredShadingCommon.ush"
void SetGBufferForUnlit(out float4 OutGBufferB)
{
	OutGBufferB = 0;
	OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask(0, 0);
}

#line 1031 "/Engine/Private/DeferredShadingCommon.ush"
float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}

#line 1036 "/Engine/Private/DeferredShadingCommon.ush"
uint ExtractSubsurfaceProfileInt(float ProfileNormFloat)
{
	return uint(ProfileNormFloat * 255.0f + 0.5f);
}

#line 1041 "/Engine/Private/DeferredShadingCommon.ush"
uint ExtractSubsurfaceProfileInt(FGBufferData BufferData)
{
	return ExtractSubsurfaceProfileInt(BufferData.CustomData.r);
}

#line 1191 "/Engine/Private/DeferredShadingCommon.ush"
float3 AOMultiBounce(float3 BaseColor, float AO)
{
	if (0 && !0)
	{
		return AO;
	}
	else
	{
		float3 a = 2.0404 * BaseColor - 0.3324;
		float3 b = -4.7951 * BaseColor + 0.6417;
		float3 c = 2.7552 * BaseColor + 0.6903;
		return max(AO, ((AO * a + b) * AO + c) * AO);
	}
}

#line 33 "/Engine/Private/TextureSampling.ush"
struct FBilinearSampleInfos
{
	
	float2 TextureInvSize;

	
	float2 TopLeftPixelCoord;

	
	float2 BilinearInterp;
};

#line 47 "/Engine/Private/TextureSampling.ush"
FBilinearSampleInfos GetBilinearSampleLevelInfosEx(float2 SampleUV, float2 TextureSize, float2 TextureInvSize, float MipLevelPow2, float InvMipLevelPow2)
{
	FBilinearSampleInfos Infos;

	float2 HistoryBufferPixelCoord = SampleUV * TextureSize * InvMipLevelPow2;

	Infos.TextureInvSize = TextureInvSize * MipLevelPow2;
	Infos.TopLeftPixelCoord = floor(HistoryBufferPixelCoord - 0.5);
	Infos.BilinearInterp = frac(HistoryBufferPixelCoord - 0.5);
	return Infos;
}

#line 59 "/Engine/Private/TextureSampling.ush"
FBilinearSampleInfos GetBilinearSampleLevelInfos(float2 SampleUV, float2 TextureSize, float2 TextureInvSize, const uint MipLevel = 0)
{
	return GetBilinearSampleLevelInfosEx(SampleUV, TextureSize, TextureInvSize, float(1u << MipLevel), rcp(float(1u << MipLevel)));
}

#line 89 "/Engine/Private/TextureSampling.ush"
float GetBilinearInterpolation(FBilinearSampleInfos SampleInfos, float4 Samples)
{
	float4 BilinearSampleWeights;
	BilinearSampleWeights[0] = (1 - SampleInfos.BilinearInterp.x) * (1 - SampleInfos.BilinearInterp.y);
	BilinearSampleWeights[1] = (SampleInfos.BilinearInterp.x) * (1 - SampleInfos.BilinearInterp.y);
	BilinearSampleWeights[2] = (1 - SampleInfos.BilinearInterp.x) * (SampleInfos.BilinearInterp.y);
	BilinearSampleWeights[3] = (SampleInfos.BilinearInterp.x) * (SampleInfos.BilinearInterp.y);

	return dot(Samples, BilinearSampleWeights);
}

#line 37 "/Engine/Private/SingleLayerWaterCommon.ush"
bool WaterRefract(float3 V, float3 N, float Eta, out float3 R)
{
	const float CosThetaI = dot(V, N);
	const float CosThetaT2 = 1.f - Eta * Eta * (1.0f - CosThetaI * CosThetaI);
	if (CosThetaT2 < 0.0f)
	{
		
		R = reflect(-V, N);
		return false;
	}

	const float CosThetaT = -(CosThetaI >= 0.0f ? 1.0f : -1.0f) * sqrt(CosThetaT2);
	R = (Eta * CosThetaI + CosThetaT) * N - Eta * V;
	return true;
}

#line 53 "/Engine/Private/SingleLayerWaterCommon.ush"
float WaterSampleSceneDepthWithoutWater(Texture2D SceneDepthWithoutWaterTexture, SamplerState SceneDepthWithoutWaterSampler, float2 UV, float2 SceneDepthWithoutWaterTextureSize, float2 SceneDepthWithoutWaterTextureInvSize)
{






	
	return SceneDepthWithoutWaterTexture.SampleLevel(SceneDepthWithoutWaterSampler, UV, 0).x;

}

#line 42 "/Engine/Private/ShadingEnergyConservation.ush"
float2 GGXEnergyLookup(float Roughness, float NoV)
{

	return View_ShadingEnergyGGXSpecTexture.SampleLevel(View_ShadingEnergySampler, float2(NoV, Roughness), 0);









}

#line 57 "/Engine/Private/ShadingEnergyConservation.ush"
float GGXEnergyLookup(float Roughness, float NoV, float Eta)
{
	
	

	
	float2 E = View_ShadingEnergyGGXGlassTexture.SampleLevel(View_ShadingEnergySampler, float3(NoV, Roughness, max(Eta, rcp(Eta)) * 0.5 - 0.5), 0);
	return Eta >= 1.0 ? E.x : E.y;




}

#line 71 "/Engine/Private/ShadingEnergyConservation.ush"
float2 ClothEnergyLookup(float Roughness, float NoV)
{

	return View_ShadingEnergyClothSpecTexture.SampleLevel(View_ShadingEnergySampler, float2(NoV, Roughness), 0);












}

#line 89 "/Engine/Private/ShadingEnergyConservation.ush"
float DiffuseEnergyLookup(float Roughness, float NoV)
{

	
	
	
	
	return 1.0f;






}

#line 18 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3   GetF0F90RGB(float3 InF0)
{



	return InF0;

}

#line 27 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsRGB
{
	float3 W; 
	float3 E; 
};

#line 35 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeFresnelEnergyTermsRGB(float2 E, float3 InF0, float3 InF90)
{
	float3 F0  =   GetF0F90RGB(InF0);
	float3 F90 =   GetF0F90RGB(InF90);

	  FBxDFEnergyTermsRGB Result;
	
	

	Result.W = View_bShadingEnergyConservation ? (1.0 + F0 * ((1 - E.x) / E.x)) : 1.0f;



	
	
	
	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

#line 55 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsRGB Out;

	{
		Out =   ComputeFresnelEnergyTermsRGB(GGXEnergyLookup(Roughness, NoV), F0, F90);
}






	return Out;
}

#line 71 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); 
	return   ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, F0, F90);
}

#line 94 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeDiffuseEnergyTermsRGB(float Roughness, float NoV)
{
	  FBxDFEnergyTermsRGB Out;

	{
		Out.E = DiffuseEnergyLookup(Roughness, NoV);
	}





	Out.W = 1.0f;
	return Out;
}

#line 115 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsRGB EnergyTerms)
{


	return View_bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;






}

#line 129 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3 ComputeEnergyConservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return EnergyTerms.W;
}

#line 27 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsA
{
	float W; 
	float E; 
};

#line 77 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsA   ComputeClothEnergyTermsA(float Roughness, float NoV)
{
	  FBxDFEnergyTermsA Out;

	{
		Out.W = 1.f;
		Out.E = ClothEnergyLookup(Roughness, NoV).x;
	}






	return Out;
}

#line 115 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsA EnergyTerms)
{


	return View_bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;






}

#line 129 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyConservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return EnergyTerms.W;
}

#line 9 "/Engine/Private/BRDF.ush"
struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;

};

#line 25 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

#line 44 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 X, float3 Y, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}

#line 84 "/Engine/Private/BRDF.ush"
void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );
	
		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );





			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{
				
				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;

				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr; 





			Context.VoL = Context.VoL * CosAlpha + VoTr;

			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );





			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}

#line 278 "/Engine/Private/BRDF.ush"
float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}

#line 335 "/Engine/Private/BRDF.ush"
float3 Diffuse_Chan( float3 DiffuseColor, float a2, float NoV, float NoL, float VoH, float NoH, float RetroReflectivityWeight)
{
	
	NoV = saturate(NoV);
	NoL = saturate(NoL);
	VoH = saturate(VoH);
	NoH = saturate(NoH);

	
	float g = saturate( (1.0 / 18.0) * log2( 2 * rcpFast(a2) - 1 ) );

	float F0 = VoH + Pow5( 1 - VoH );
	float FdV = 1 - 0.75 * Pow5( 1 - NoV );
	float FdL = 1 - 0.75 * Pow5( 1 - NoL );

	
	float Fd = lerp( F0, FdV * FdL, saturate( 2.2 * g - 0.5 ) );

	
	float Fb = ( (34.5 * g - 59 ) * g + 24.5 ) * VoH * exp2( -max( 73.2 * g - 21.2, 8.9 ) * sqrtFast( NoH ) );
	
	Fb *= RetroReflectivityWeight;
	
	return DiffuseColor * ( (1 / PI) * ( Fd + Fb ) );
}

#line 377 "/Engine/Private/BRDF.ush"
float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}

#line 385 "/Engine/Private/BRDF.ush"
float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{


	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);

	return (1.0f / PI) * a2 * Square(a2 / S);




}

#line 439 "/Engine/Private/BRDF.ush"
float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}

#line 456 "/Engine/Private/BRDF.ush"
float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

#line 469 "/Engine/Private/BRDF.ush"
float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					
	
	
	
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

#line 478 "/Engine/Private/BRDF.ush"
float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

#line 503 "/Engine/Private/BRDF.ush"
float4 SheenLTC_Cofficients(float NoV, float Roughness, Texture2D InSheenLTCTexture, SamplerState InSheenSampler)
{
	const float Alpha = sqrt(Roughness);
	const float SatNoV = saturate(abs(NoV) + 1e-5);
	float2 UV = float2(Alpha, SatNoV);
	UV = UV * (31.0 / 32.0) + (0.5 / 32.0);
	return InSheenLTCTexture.SampleLevel(InSheenSampler, UV, 0);
}

#line 512 "/Engine/Private/BRDF.ush"
float SheenLTC_DirectionalAlbedo(float NoV, float Roughness, Texture2D InSheenLTCTexture, SamplerState InSheenSampler)
{
	return SheenLTC_Cofficients(NoV, Roughness, InSheenLTCTexture, InSheenSampler).z;
}

#line 534 "/Engine/Private/BRDF.ush"
float SheenLTC_Eval(float3 V, float3 L, float3 N, float NoV, float Roughness, Texture2D InSheenLTCTexture, SamplerState InSheenSampler, inout float OutDirectionalAlbedo)
{
	
	const float3 T1 = normalize(V - N * NoV);
	const float3 T2 = cross(N, T1);
	const float3x3 TangentBasis = float3x3(T1, T2, N);

	
	
	const float3 LocalL = mul(TangentBasis, L); 

	const float4 LTC = SheenLTC_Cofficients(NoV, Roughness, InSheenLTCTexture, InSheenSampler);
	const float aInv = LTC.x;
	const float bInv = LTC.y;
	OutDirectionalAlbedo = LTC.z;

	float3 WrappedLocalL = float3(
		aInv * LocalL.x + bInv * LocalL.z,
		aInv * LocalL.y,
		LocalL.z);

	const float LenWrappedLocalL = length(WrappedLocalL);
	
	const float Jacobian = Pow2(aInv) / Pow3(LenWrappedLocalL);

	
	WrappedLocalL /= LenWrappedLocalL;

	
	const float CosDistribution = WrappedLocalL.z / PI;
	const float Out = OutDirectionalAlbedo * CosDistribution * Jacobian; 

	return max(Out, 0.f);
}

#line 572 "/Engine/Private/BRDF.ush"
void ModifyGGXAnisotropicNormalRoughness(float3 WorldTangent, float Anisotropy, inout float Roughness, inout float3 N, float3 V)
{
	if (abs(Anisotropy) > 0.0f)
	{
		float3 X = WorldTangent;
		float3 Y = normalize(cross(N, X));

		float3 AnisotropicDir = Anisotropy >= 0.0f ? Y : X;
		float3 AnisotropicT   = cross(AnisotropicDir, V); 
		float3 AnisotropicN   = cross(AnisotropicT, AnisotropicDir);

		float AnisotropicStretch = abs(Anisotropy) * saturate(5.0f * Roughness);
		N = normalize(lerp(N, AnisotropicN, AnisotropicStretch));



	}
}

#line 592 "/Engine/Private/BRDF.ush"
void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{

	
	
	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);





}

#line 607 "/Engine/Private/BRDF.ush"
float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{
	
	
	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}

#line 633 "/Engine/Private/BRDF.ush"
float3 EnvBRDF( float3 SpecularColor, float Roughness, float NoV )
{
	
	float2 AB = Texture2DSampleLevel( OpaqueBasePass_PreIntegratedGFTexture, View_SharedBilinearClampedSampler, float2( NoV, Roughness ), 0 ).rg;

	
	float3 GF = SpecularColor * AB.x + saturate( 50.0 * SpecularColor.g ) * AB.y;
	return GF;
}

#line 643 "/Engine/Private/BRDF.ush"
float3 EnvBRDF(float3 F0, float3 F90, float Roughness, float NoV)
{
	
	float2 AB = Texture2DSampleLevel(OpaqueBasePass_PreIntegratedGFTexture, View_SharedBilinearClampedSampler, float2(NoV, Roughness), 0).rg;
	float3 GF = F0 * AB.x + F90 * AB.y;
	return GF;
}

#line 689 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}

#line 696 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}

#line 701 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}

#line 726 "/Engine/Private/BRDF.ush"
float D_InvGGX( float a2, float NoH )
{
	float A = 4;
	float d = ( NoH - a2 * NoH ) * NoH + a2;
	return rcp( PI * (1 + A*a2) ) * ( 1 + 4 * a2*a2 / ( d*d ) );
}

#line 733 "/Engine/Private/BRDF.ush"
float Vis_Cloth( float NoV, float NoL )
{
	return rcp( 4 * ( NoL + NoV - NoL * NoV ) );
}

#line 774 "/Engine/Private/BRDF.ush"
float3 SimpleClearCoatTransmittance(float NoL, float NoV, float Metallic, float3 BaseColor)
{
	float3 Transmittance = 1.0;

	float ClearCoatCoverage = Metallic;
	if (ClearCoatCoverage > 0.0)
	{
		float LayerThickness = 1.0;	

		
		
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));

		
		float3 TransmittanceColor = Diffuse_Lambert(BaseColor);
		
		
		float3 ExtinctionCoefficient = -log(max(TransmittanceColor,0.0001)) / (2.0 * LayerThickness);

		
		
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);

		
		Transmittance = exp(-OpticalDepth);
		
		Transmittance = lerp(1.0, Transmittance, ClearCoatCoverage);
	}

	
	
	
	

	return Transmittance;
}

#line 40 "/Engine/Private/ColorSpace.ush"
static const float3x3 XYZ_2_Linear_sRGB_MAT =
{
	 3.2409699419, -1.5373831776, -0.4986107603,
	-0.9692436363,  1.8759675015,  0.0415550574,
	 0.0556300797, -0.2039769589,  1.0569715142,
};

#line 47 "/Engine/Private/ColorSpace.ush"
static const float3x3 Linear_sRGB_2_XYZ_MAT =
{
	0.4123907993, 0.3575843394, 0.1804807884,
	0.2126390059, 0.7151686788, 0.0721923154,
	0.0193308187, 0.1191947798, 0.9505321522,
};

#line 54 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_XYZ( float3 LinearRGB )
{

	return mul(Linear_sRGB_2_XYZ_MAT, LinearRGB);



}

#line 63 "/Engine/Private/ColorSpace.ush"
float3 XYZ_2_LinearRGB( float3 XYZ )
{

	return mul(XYZ_2_Linear_sRGB_MAT, XYZ);



}

#line 78 "/Engine/Private/ColorSpace.ush"
float3 Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}

#line 92 "/Engine/Private/ColorSpace.ush"
static const float3 XYZ_WHITE_REF_NOMINAL = float3(0.9504559271, 1.0, 1.0890577508);

#line 97 "/Engine/Private/ColorSpace.ush"
static const float XYZ_2_LAB_DELTA_SQUARED = 0.04280618311;

#line 98 "/Engine/Private/ColorSpace.ush"
static const float XYZ_2_LAB_DELTA_CUBED = 0.00885645167;

#line 100 "/Engine/Private/ColorSpace.ush"
float xyz_otherwise(float t)
{
	return (t / (3.0 * XYZ_2_LAB_DELTA_SQUARED)) + 4.0 / 29.0;
}

#line 105 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_LAB( float3 LinearRGB )
{
	float3 XYZ = LinearRGB_2_XYZ(LinearRGB);

	float t_X = XYZ.x / XYZ_WHITE_REF_NOMINAL.x;
	float t_Y = XYZ.y / XYZ_WHITE_REF_NOMINAL.y;
	float t_Z = XYZ.z / XYZ_WHITE_REF_NOMINAL.z;

	float f_X = (t_X > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_X, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_X);
	float f_Y = (t_Y > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Y, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Y);
	float f_Z = (t_Z > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Z, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Z);

	float L = ( 116.0 * f_Y ) - 16.0;
	float a = 500.0 * ( f_X - f_Y );
	float b = 200.0 * ( f_Y - f_Z );

	return float3(L, a, b);
}

#line 124 "/Engine/Private/ColorSpace.ush"
float lab_otherwise(float t)
{
	return (3.0 * XYZ_2_LAB_DELTA_SQUARED) * (t - (4.0 / 29.0));
}

#line 129 "/Engine/Private/ColorSpace.ush"
float3 LAB_2_LinearRGB( float3 LAB )
{
	float L = LAB.x;
	float a = LAB.y;
	float b = LAB.z;

	float t_y = (L + 16.0) / 116.0;
	float t_x = t_y + (a / 500.0);
	float t_z = t_y - (b / 200.0);

	float f_x = pow(t_x, 3.0);
	float f_y = pow(t_y, 3.0);
	float f_z = pow(t_z, 3.0);

	if (f_x <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_x = lab_otherwise(t_x);
	}

	if (f_y <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_y = lab_otherwise(t_y);
	}

	if (f_z <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_z = lab_otherwise(t_z);
	}

	float X = XYZ_WHITE_REF_NOMINAL.x * f_x;
	float Y = XYZ_WHITE_REF_NOMINAL.y * f_y;
	float Z = XYZ_WHITE_REF_NOMINAL.z * f_z;

	return XYZ_2_LinearRGB(float3(X, Y, Z));
}

#line 177 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_YCoCg(float3 RGB)
{
	float Y = dot(RGB, float3(1, 2, 1));
	float Co = dot(RGB, float3(2, 0, -2));
	float Cg = dot(RGB, float3(-1, 2, -1));

	float3 YCoCg = float3(Y, Co, Cg);
	return YCoCg;
}

#line 224 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_NormalisedYCoCg(float3 RGB)
{
	return LinearRGB_2_YCoCg(RGB) * float3(1.0f / 4.0, 0.25f, 0.25f) + float3(0.0f, 0.5f, 0.5f);
}

#line 238 "/Engine/Private/ColorSpace.ush"
float3 HUE_2_LinearRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

#line 246 "/Engine/Private/ColorSpace.ush"
float3 HSV_2_LinearRGB(in float3 HSV)
{
	float3 RGB = HUE_2_LinearRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

#line 252 "/Engine/Private/ColorSpace.ush"
float3 RGB_2_HCV(in float3 RGB)
{
	
	float4 P = (RGB.g < RGB.b)	? float4(RGB.bg, -1.0f, 2.0f / 3.0f): float4(RGB.gb, 0.0f, -1.0f / 3.0f);
	float4 Q = (RGB.r < P.x)	? float4(P.xyw, RGB.r)				: float4(RGB.r, P.yzx);
	float Chroma = Q.x - min(Q.w, Q.y);
	float Hue = abs((Q.w - Q.y) / (6.0f * Chroma + 1e-10f) + Q.z);
	return float3(Hue, Chroma, Q.x);
}

#line 262 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_HSV(in float3 RGB)
{
	float3 HCV = RGB_2_HCV(RGB);
	float s = HCV.y / (HCV.z + 1e-10f);
	return float3(HCV.x, s, HCV.z);
}

#line 20 "/Engine/Private/ParticipatingMediaCommon.ush"
struct FParticipatingMedia
{
	float3 ScatteringCoef;	
	float3 AbsorptionCoef;	
	float3 ExtinctionCoef;	
	float3 MeanFreePath;	
	float3 Albedo;			
	float3 BaseColor;		
};

#line 40 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 GetAlbedoFromBaseColor(const float3 BaseColor, const float g = 0.0f)
{
	const float3 s = 4.09712 + 4.20863 * BaseColor - sqrt(9.59217 + 41.6808 * BaseColor + 17.7126 * BaseColor * BaseColor);
	const float3 Albedo = (1.0f - s * s) / (1.0f - g * s * s);
	return Albedo;
}

#line 61 "/Engine/Private/ParticipatingMediaCommon.ush"
FParticipatingMedia CreateMediumFromBaseColorMFP(float3 BaseColor, float3 MeanFreePathMeters)
{
	FParticipatingMedia PM = (FParticipatingMedia)0;
	PM.Albedo = GetAlbedoFromBaseColor(BaseColor);
	PM.BaseColor = BaseColor;
	PM.MeanFreePath = MeanFreePathMeters;
	PM.ExtinctionCoef = 1.0f / max(0.000000000001f, PM.MeanFreePath);
	PM.ScatteringCoef = PM.Albedo * PM.ExtinctionCoef;
	PM.AbsorptionCoef = max(0.0f, PM.ExtinctionCoef - PM.ScatteringCoef);
	return PM;
}

#line 79 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicPhase()
{
	return 1.0f / (4.0f * PI);
}

#line 101 "/Engine/Private/ParticipatingMediaCommon.ush"
float SchlickPhaseFromK(float K, float CosTheta)
{
	const float SchlickPhaseFactor = 1.0f + K * CosTheta;
	const float PhaseValue = (1.0f - K * K) / (4.0f * PI * SchlickPhaseFactor * SchlickPhaseFactor);
	return PhaseValue;
}

#line 107 "/Engine/Private/ParticipatingMediaCommon.ush"
float SchlickPhase(float G, float CosTheta)
{
	const float K = 1.55f * G - 0.55f * G * G * G;
	return SchlickPhaseFromK(K, CosTheta);
}

#line 164 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToExtinction(in float3 TransmittanceColor, in float ThicknessMeters)
{
	
	
	return -log(clamp(TransmittanceColor, 0.000000000001f, 1.0f)) / max(0.000000000001f, ThicknessMeters);
}

#line 171 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToMeanFreePath(in float3 TransmittanceColor, in float ThicknessMeters)
{
	return 1.0f / max(0.000000000001f, TransmittanceToExtinction(TransmittanceColor, ThicknessMeters));
}

#line 176 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 ExtinctionToTransmittance(in float3 Extinction, in float ThicknessMeters)
{
	return exp(-Extinction * ThicknessMeters);
}

#line 216 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicMediumSlabDirectionalAlbedoFadeLUT(float MFP)
{
	
	const float FitLastMeasuredSampleMFP = 10.0f;
	const float AlbedoIsZeroForMFP = 640.0f;	
	const float Fade = saturate(1.0f - (MFP - FitLastMeasuredSampleMFP) / (AlbedoIsZeroForMFP - FitLastMeasuredSampleMFP));
	return Fade;
}

#line 225 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicMediumSlabPunctualDirectionalAlbedoLUT(float MFP, float BaseColor, float NoV, float NoL)
{
	
	
	
	
	
	
	

	
	const float4 LUTDim = float4(11.0f, 11.0, 9.0f, 8.0f);
	const float4 LUTDimInv = 1.0f / LUTDim;
	const float4 LUTMin = 0.5f * LUTDimInv;
	const float4 LUTMax = (LUTDim - 0.5f) * LUTDimInv;
	const float4 LUTLen = (LUTDim - 1.0f) * LUTDimInv;

	const float PIOver2 = PI / 2.0f;
	const float LightAngleNorm = saturate(acosFast(saturate(NoL)) / PIOver2);
	const float ViewAngleNorm  = saturate(acosFast(saturate(NoV)) / PIOver2);

	float4 UVs = float4(MFP / 10.0f, BaseColor, LightAngleNorm, ViewAngleNorm);	
	UVs = LUTMin + LUTLen * UVs;												

	float FourthCoord = ViewAngleNorm * LUTDim.w;
	float FourthCoord0 = floor(FourthCoord);
	      FourthCoord0 = min(FourthCoord0, LUTDim.w - 1.0);
	float FourthCoord1 = FourthCoord0 + 1.0;
	      FourthCoord1 = min(FourthCoord1, LUTDim.w - 1.0);
	float FourthCoordLerp = saturate(FourthCoord - FourthCoord0);

	const float LUT3DDimZ    = LUTDim.z * LUTDim.w;
	const float LUT4DUvDimZ  = (LUTDim.z - 1.0) / LUT3DDimZ;	
	const float LUT4DUvStepW = (LUTDim.z      ) / LUT3DDimZ; 
	const float EdgeOffset = (0.5) / LUT3DDimZ;

	float3 UVW0 = float3(UVs.x, UVs.y, EdgeOffset + FourthCoord0 * LUT4DUvStepW + LightAngleNorm * LUT4DUvDimZ);
	float3 UVW1 = float3(UVs.x, UVs.y, EdgeOffset + FourthCoord1 * LUT4DUvStepW + LightAngleNorm * LUT4DUvDimZ);

	float Value0 = View_SimpleVolumeTexture.SampleLevel(View_SimpleVolumeTextureSampler, UVW0, 0);
	float Value1 = View_SimpleVolumeTexture.SampleLevel(View_SimpleVolumeTextureSampler, UVW1, 0);

	float DirectionalAlbedo = lerp(Value0, Value1, FourthCoordLerp);

	const float Fade = IsotropicMediumSlabDirectionalAlbedoFadeLUT(MFP);
	return DirectionalAlbedo * Fade;
}

#line 273 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 IsotropicMediumSlabPunctualDirectionalAlbedoLUT(FParticipatingMedia PM, float NoV, float NoL)
{
	return float3(
		IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM.MeanFreePath.r, PM.BaseColor.r, NoV, NoL),
		IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM.MeanFreePath.g, PM.BaseColor.g, NoV, NoL),
		IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM.MeanFreePath.b, PM.BaseColor.b, NoV, NoL)
	);
}

#line 296 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 IsotropicMediumSlabTransmittance(FParticipatingMedia PM, float SlabThickness, float NoV)
{
	const float3 SafeExtinctionThreshold = 0.000001f;
	const float3 SafeExtinctionCoefficients = max(SafeExtinctionThreshold, PM.ExtinctionCoef);

	const float PathLength = SlabThickness / max(0.0001f, abs(NoV));
	const float3 SafePathSegmentTransmittance = exp(-SafeExtinctionCoefficients * PathLength);

	return SafePathSegmentTransmittance;
}

#line 307 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicMediumSlabEnvDirectionalAlbedoLUT(float MFP, float BaseColor, float NoV)
{
	
	
	
	
	
	
	

	
	const float3 LUTDim = float3(11.0f, 11.0, 8.0f);
	const float3 LUTDimInv = 1.0f / LUTDim;
	const float3 LUTMin = 0.5f * LUTDimInv;
	const float3 LUTMax = (LUTDim - 0.5f) * LUTDimInv;
	const float3 LUTLen = (LUTDim - 1.0f) * LUTDimInv;

	const float PIOver2 = PI / 2.0f;
	const float ViewAngleNorm = saturate(acosFast(saturate(NoV)) / PIOver2);

	float3 UVs = float3(MFP / 10.0f, BaseColor, ViewAngleNorm);	
	UVs = LUTMin + LUTLen * UVs;								

	float EnvDirectionalAlbedo = View_SimpleVolumeEnvTexture.SampleLevel(View_SimpleVolumeEnvTextureSampler, UVs, 0);

	const float Fade = IsotropicMediumSlabDirectionalAlbedoFadeLUT(MFP);
	return EnvDirectionalAlbedo * Fade;
}

#line 336 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 IsotropicMediumSlabEnvDirectionalAlbedoLUT(FParticipatingMedia PM, float NoV)
{
	return float3(
		IsotropicMediumSlabEnvDirectionalAlbedoLUT(PM.MeanFreePath.r, PM.BaseColor.r, NoV),
		IsotropicMediumSlabEnvDirectionalAlbedoLUT(PM.MeanFreePath.g, PM.BaseColor.g, NoV),
		IsotropicMediumSlabEnvDirectionalAlbedoLUT(PM.MeanFreePath.b, PM.BaseColor.b, NoV)
	);
}

#line 62 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileTexture(uint SampleIndex, uint SubsurfaceProfileInt)
{
	



	return View_SSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

#line 72 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileTexture(Texture2D InSSProfilesTexture, SamplerState InSSProfilesSampler, float4 InSSProfilesTextureSizeAndInvSize, uint SampleIndex, uint SubsurfaceProfileInt)
{
	



	return InSSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

#line 82 "/Engine/Private/SubsurfaceProfileCommon.ush"
void GetSubsurfaceProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{
	const float4 Data = GetSubsurfaceProfileTexture((((((0+1)+1)+1)+1)+1), SubsurfaceProfileInt);

	
	
	float MaterialRoughnessToLobeRoughness0 = lerp(1.0f, Data.x * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	float MaterialRoughnessToLobeRoughness1 = lerp(1.0f, Data.y * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	LobeMix = Data.z;

	
	LobeRoughness0 = max(saturate(Roughness * MaterialRoughnessToLobeRoughness0), 0.02f);
	LobeRoughness1 = saturate(Roughness * MaterialRoughnessToLobeRoughness1);
}

#line 98 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileSurfaceAlbedo(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture((0+1), SubsurfaceProfileInt);
}

#line 103 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileDiffuseMeanFreePath(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(((0+1)+1), SubsurfaceProfileInt);
}

#line 108 "/Engine/Private/SubsurfaceProfileCommon.ush"
float GetSubsurfaceProfileWorldUnitScale(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(0, SubsurfaceProfileInt).a;
}

#line 113 "/Engine/Private/SubsurfaceProfileCommon.ush"
float DecodeWorldUnitScale(float EncodedWorldUnitScale)
{
	return EncodedWorldUnitScale * 1/0.02f;
}

#line 118 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 DecodeDiffuseMeanFreePath(float4 EncodedDiffuseMeanFreePath)
{
	return EncodedDiffuseMeanFreePath * 1/(0.01f*0.2f);
}

#line 161 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileDMFPInCm(int SubsurfaceProfileInt)
{
	const float4 DiffuseMeanFreePath = DecodeDiffuseMeanFreePath(GetSubsurfaceProfileDiffuseMeanFreePath(SubsurfaceProfileInt));
	const float WorldUnitScale = DecodeWorldUnitScale(GetSubsurfaceProfileWorldUnitScale(SubsurfaceProfileInt));
	return DiffuseMeanFreePath * WorldUnitScale; 
}

#line 63 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetPerpendicularScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}

#line 91 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetSearchLightDiffuseScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}

#line 105 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetMFPFromDMFPCoeff(float3 DMFPSurfaceAlbedo, float3 MFPSurfaceAlbedo, float Dmfp2MfpMagicNumber = 0.6f)
{
	return Dmfp2MfpMagicNumber * GetPerpendicularScalingFactor3D(MFPSurfaceAlbedo) / GetSearchLightDiffuseScalingFactor3D(DMFPSurfaceAlbedo);
}

#line 110 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetMFPFromDMFPApprox(float3 SurfaceAlbedo, float3 TargetSurfaceAlbedo, float3 DMFP)
{
	return GetMFPFromDMFPCoeff(SurfaceAlbedo, TargetSurfaceAlbedo) * DMFP;
}

#line 122 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float4 GetSubsurfaceProfileMFPInCm(int SubsurfaceProfileInt)
{
	float4 DMFP = GetSubsurfaceProfileDMFPInCm(SubsurfaceProfileInt);
	float4 SurfaceAlbedo = GetSubsurfaceProfileSurfaceAlbedo(SubsurfaceProfileInt);

	return float4(GetMFPFromDMFPApprox(SurfaceAlbedo.xyz, SurfaceAlbedo.xyz, DMFP.xyz),0.0f);
}

#line 25 "/Engine/Private/GammaCorrectionCommon.ush"
float LinearToSrgbBranchingChannel(float lin) 
{
	if(lin < 0.00313067) return lin * 12.92;
	return pow(lin, (1.0/2.4)) * 1.055 - 0.055;
}

#line 31 "/Engine/Private/GammaCorrectionCommon.ush"
float3 LinearToSrgbBranching(float3 lin) 
{
	return float3(
		LinearToSrgbBranchingChannel(lin.r),
		LinearToSrgbBranchingChannel(lin.g),
		LinearToSrgbBranchingChannel(lin.b));
}

#line 39 "/Engine/Private/GammaCorrectionCommon.ush"
float3 LinearToSrgb(float3 lin) 
{

	
	return LinearToSrgbBranching(lin);




}

#line 50 "/Engine/Private/GammaCorrectionCommon.ush"
float3 sRGBToLinear( float3 Color ) 
{
	Color = max(6.10352e-5, Color); 
	return  select_internal( Color > 0.04045 , pow( Color * (1.0 / 1.055) + 0.0521327, 2.4 ) , Color * (1.0 / 12.92) );
}

#line 10 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
struct FStrataLobeStatistic
{
	
	
	
	float3 Mu;

	
	float3 E;

	
	float Sigma;
};

#line 26 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
float StrataLobeRoughnessToVariance(float Roughness)
{
	
	const float SafeRoughness = clamp(Roughness, 0.0f, 0.999f);
	const float a11 = pow(SafeRoughness, 1.1f);
	return a11 / (1.0f - a11);
}

#line 34 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
float StrataLobeVarianceToRoughness(float Variance)
{
	
	return pow(Variance / (1.0f + Variance), 1.0f / 1.1f);
}

#line 57 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetDiracLobe(float3 Wi)
{
	FStrataLobeStatistic WiLobe;
	WiLobe.E = 1.0f;
	WiLobe.Mu = Wi;
	WiLobe.Sigma = 0.0f;
	return WiLobe;
}

#line 70 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataOppositeLobe(FStrataLobeStatistic LobeIn)
{
	FStrataLobeStatistic LobeOut = LobeIn;
	LobeOut.Mu = -LobeOut.Mu;
	return LobeOut;
}

#line 77 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetReflectedLobe(FStrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness)
{
	FStrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * InterfaceFDG;

	
	WoLobe.Mu = float3(-WiLobe.Mu.xy, WiLobe.Mu.z);

	WoLobe.Sigma = WiLobe.Sigma + StrataLobeRoughnessToVariance(InterfaceRoughness);

	return WoLobe;
}

#line 91 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetRefractedLobe(FStrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness, float InterfaceEta12)
{
	FStrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * (1.0f - InterfaceFDG);

	
	WoLobe.Mu.xy = -WiLobe.Mu.xy * InterfaceEta12;
	WoLobe.Mu.z  = -sign(WiLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 

	
	
	const float S = 1.0f;																			
	WoLobe.Sigma = (WiLobe.Sigma / InterfaceEta12) + StrataLobeRoughnessToVariance(S * InterfaceRoughness);

	return WoLobe;
}

#line 123 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataWeightLobe(FStrataLobeStatistic A, float Weight)
{
	
	
	
	
	FStrataLobeStatistic WoLobe = A;
	WoLobe.E *= Weight;
	WoLobe.Mu.xy = WoLobe.Mu.xy * Weight;
	WoLobe.Mu.z = sign(WoLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 
	WoLobe.Sigma *= Weight;
	return WoLobe;
}

#line 137 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataHorizontalMixLobes(FStrataLobeStatistic A, FStrataLobeStatistic B, float Mix)
{
	FStrataLobeStatistic WoLobe;
	WoLobe.E = lerp(A.E, B.E, Mix);
	WoLobe.Mu = lerp(A.Mu, B.Mu, Mix);
	WoLobe.Mu.z = sign(WoLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 
	WoLobe.Sigma = lerp(A.Sigma, B.Sigma, Mix);
	return WoLobe;
}

#line 70 "/Engine/Private/TransmissionCommon.ush"
float GetSubSurfaceTransmission( float OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }

#line 71 "/Engine/Private/TransmissionCommon.ush"
float4 GetSubSurfaceTransmission( float4 OccluderDistance, float SubsurfaceDensity) { return saturate(FastExp(-OccluderDistance * SubsurfaceDensity)); }

#line 8 "/Engine/Private/Strata/StrataSubsurface.ush"
uint PackColorLinearToGamma2AlphaLinear(float4 In);

#line 16 "/Engine/Private/Strata/StrataSubsurface.ush"
struct FStrataSubsurfaceHeader
{
	
	
	
	
	
	

	
	
	
	uint Bytes;
};

#line 47 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetSSSType(inout FStrataSubsurfaceHeader SSSHeader, uint SSSType)
{
	SSSHeader.Bytes &= (~(0x00000003));
	SSSHeader.Bytes |= SSSType & (0x00000003);
}

#line 53 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetProfile(inout FStrataSubsurfaceHeader SSSHeader, float RadiusScale, uint ProfileId)
{
	SSSHeader.Bytes &= (0x00000003);
	SSSHeader.Bytes |= ProfileId << 24;
	SSSHeader.Bytes |= PackR8(RadiusScale) << 16;
}

#line 60 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetNonProfile(inout FStrataSubsurfaceHeader SSSHeader, float3 MeanFreePath)
{
	SSSHeader.Bytes &= (0x00000003);
	SSSHeader.Bytes |= (Pack10F(MeanFreePath.x) << 22) | (Pack10F(MeanFreePath.y) << 12) | (Pack10F(MeanFreePath.z) << 2);
}

#line 66 "/Engine/Private/Strata/StrataSubsurface.ush"
float StrataSubSurfaceGetWrapOpacityFromAnisotropy(float PhaseAnisotropy)
{
	
	
	
	const float Opacity = 1.f - abs(PhaseAnisotropy);
	return Opacity;
}

#line 75 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetWrapOpacity(inout FStrataSubsurfaceHeader SSSHeader, float Opacity)
{
	SSSHeader.Bytes &= (0x00000003);
	SSSHeader.Bytes |= PackR8(Opacity) << 2;
}

#line 81 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetWrap(inout FStrataSubsurfaceHeader SSSHeader, float PhaseAnisotropy)
{
	const float Opacity = StrataSubSurfaceGetWrapOpacityFromAnisotropy(PhaseAnisotropy);
	StrataSubSurfaceHeaderSetWrapOpacity(SSSHeader, Opacity);
}

#line 87 "/Engine/Private/Strata/StrataSubsurface.ush"
bool StrataSubSurfaceHeaderGetIsValid(in FStrataSubsurfaceHeader SSSHeader)
{
	return  ( SSSHeader .Bytes & 0x3) != (0u);
}

#line 92 "/Engine/Private/Strata/StrataSubsurface.ush"
bool StrataSubSurfaceHeaderHasExtras(in FStrataSubsurfaceHeader SSSHeader)
{
	const uint SSSType =  ( SSSHeader .Bytes & 0x3);
	return SSSType == (2u) || SSSType == (3u);
}

#line 161 "/Engine/Private/Strata/StrataSubsurface.ush"
struct FStrataSubsurfaceExtras
{
	
	uint Bytes;
};

#line 166 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubsurfaceExtrasSetBaseColor(inout FStrataSubsurfaceExtras SSSExtras, float3 BaseColor)
{
	SSSExtras.Bytes = PackColorLinearToGamma2AlphaLinear(float4(BaseColor, 0.0f));
}

#line 175 "/Engine/Private/Strata/StrataSubsurface.ush"
struct FStrataSubsurfaceData
{
	FStrataSubsurfaceHeader Header;
	FStrataSubsurfaceExtras Extras;
};

#line 200 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataStoreSubsurfaceHeader(RWTexture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos, uint HeaderBytes)
{
	StrataBuffer[uint3(PixelPos, FirstSliceStoringStrataSSSData + 0)] = HeaderBytes;
}

#line 204 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataStoreSubsurfaceExtras(RWTexture2DArray<uint> StrataBuffer, uint FirstSliceStoringStrataSSSData, uint2 PixelPos, uint ExtraBytes)
{
	StrataBuffer[uint3(PixelPos, FirstSliceStoringStrataSSSData + 1)] = ExtraBytes;
}

#line 209 "/Engine/Private/Strata/StrataSubsurface.ush"
uint StrataSubsurfaceProfileIdTo8bits(float In)
{
	
	return uint(In * 255.0f + 0.5f);
}

#line 133 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelHeader;

#line 134 "/Engine/Private/Strata/Strata.ush"
struct FStrataIntegrationSettings;

#line 135 "/Engine/Private/Strata/Strata.ush"
struct FStrataAddressing;

#line 136 "/Engine/Private/Strata/Strata.ush"
struct FStrataDBuffer;

#line 137 "/Engine/Private/Strata/Strata.ush"
struct FStrataData;

#line 142 "/Engine/Private/Strata/Strata.ush"
struct FStrataBSDF
{
	uint				State;			

	
	int					OperatorIndex;
	float3				LuminanceWeightV;

	float				CoverageAboveAlongN;
	float3				TransmittanceAboveAlongN;	

	int					bIsBottom;
	int					bIsTop;



	float				Coverage;		

	float3				Emissive;		
	float				ThicknessCm;	
	float3				TmpMFP;			

	float				TopLayerDataWeight;


	
	

	float4 InlineVGPRs[3];





	float4 VGPRs[5];

	uint   Haziness;					


	void EnableSlabMFPComputationSpace();

	void EnableSlabBSDFSimpleVolumetric();

	void StrataSanitizeBSDF();

	void StrataSetBSDFRoughness(in float Roughness);

	void UnpackFastPathSlabBSDF(uint2 PackedData01);

	void PostProcessSlabBeforeLighting(bool bIsStrataOpaqueMaterial);

	void PostProcessBSDFBeforeLighting(bool bIsStrataOpaqueMaterial);

	
	bool HasScatteringData();

	
	bool HasBackScattering();
};

#line 602 "/Engine/Private/Strata/Strata.ush"
FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters);

#line 603 "/Engine/Private/Strata/Strata.ush"
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm);

#line 604 "/Engine/Private/Strata/Strata.ush"
void   StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index);

#line 607 "/Engine/Private/Strata/Strata.ush"
uint   PackR6(float Value, float Dither);

#line 609 "/Engine/Private/Strata/Strata.ush"
uint   PackR7(float Value, float Dither);

#line 611 "/Engine/Private/Strata/Strata.ush"
uint   PackR7G7B6Gamma2(float3 rgb, float Dither);

#line 612 "/Engine/Private/Strata/Strata.ush"
float3 UnpackR7G7B6Gamma2(uint rgb);

#line 615 "/Engine/Private/Strata/Strata.ush"
uint   PackColorLinearToGamma2AlphaLinear(float4 In);

#line 617 "/Engine/Private/Strata/Strata.ush"
uint   StrataPackNormal(in float3 Normal);

#line 621 "/Engine/Private/Strata/Strata.ush"
uint   StrataPackNormal22(in float3 Normal);

#line 623 "/Engine/Private/Strata/Strata.ush"
bool   IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF);

#line 630 "/Engine/Private/Strata/Strata.ush"
struct FHaziness
{
	bool  bSimpleClearCoat;
	float Roughness;
	float Weight;
};

#line 637 "/Engine/Private/Strata/Strata.ush"
FHaziness InitialiseHaziness()
{
	FHaziness Haziness = (FHaziness)0;
	return Haziness;
}

#line 644 "/Engine/Private/Strata/Strata.ush"
uint PackHaziness(FHaziness Haziness)
{
	uint High8Bits = (Haziness.bSimpleClearCoat ? 0x80 : 0x00) | uint(saturate(Haziness.Weight) * 127);
	uint Data = (High8Bits << 8) | PackR8(Haziness.Roughness);
	return Data;
}

#line 651 "/Engine/Private/Strata/Strata.ush"
FHaziness UnpackHaziness(uint Data)
{
	FHaziness Haziness;
	Haziness.bSimpleClearCoat	= Data & 0x8000;
	Haziness.Weight				= float(uint((Data>>8) & 0x7F)) * (1.0f / 127.0f);
	Haziness.Roughness			= UnpackR8(Data);
	return Haziness;
}

#line 675 "/Engine/Private/Strata/Strata.ush"
struct FStrataIrradianceAndOcclusion
{
	float MaterialAO;
	float IndirectIrradiance;
	uint  DiffuseIndirectSampleOcclusion;
};

#line 682 "/Engine/Private/Strata/Strata.ush"
FStrataIrradianceAndOcclusion InitIrradianceAndOcclusion(float InAO=1.0f)
{
	FStrataIrradianceAndOcclusion Out;
	Out.MaterialAO = 1.0f;
	Out.IndirectIrradiance = 1.0f;
	Out.DiffuseIndirectSampleOcclusion = 0x0u;
	return Out;
}

#line 691 "/Engine/Private/Strata/Strata.ush"
uint StrataPackIrradianceAndOcclusion(FStrataIrradianceAndOcclusion In, float QuantizationBias=0)
{



	
	return min(0xFFu, (EncodeIndirectIrradiance(In.IndirectIrradiance * In.MaterialAO) + QuantizationBias * (1.0 / 255.0)) * 0xFFu);



}

#line 730 "/Engine/Private/Strata/Strata.ush"
struct FStrataTopLayerData
{
	float3 BaseColor; 
	float3 WorldNormal;
	float  Roughness;
	uint   Material;
};

#line 738 "/Engine/Private/Strata/Strata.ush"
uint StrataPackTopLayerData(FStrataTopLayerData In)
{

	
	return (StrataPackNormal22(In.WorldNormal) << 10) | (PackR8(In.Roughness) << 2) | (In.Material);





}

#line 773 "/Engine/Private/Strata/Strata.ush"
bool IsStrataMaterial(FStrataTopLayerData In)
{
	return In.Material > 0;
}

#line 786 "/Engine/Private/Strata/Strata.ush"
struct FStrataOpaqueRoughRefractionData
{
	float	OpaqueRoughRefractionEnabled;
	float	Coverage;
	float	VarianceCm;
};

#line 824 "/Engine/Private/Strata/Strata.ush"
float GetVarianceFromRoughness(float Roughness)
{
	float Roughness2 = Roughness * Roughness;
	float Roughness3 = Roughness2 * Roughness;
	float Roughness4 = Roughness2 * Roughness2;

	return saturate(             - 0.000332564 * Roughness - 0.0168059 * Roughness2 + 0.115569 * Roughness3 - 0.0526336 * Roughness4);	
}

#line 836 "/Engine/Private/Strata/Strata.ush"
uint PackSSSProfile(float InProfileId, float InRadius, float InThickness)
{
	uint Out = 0; 	
	Out |= (PackR8(InProfileId));
	Out |= (PackR8(InRadius)<<8);
	Out |= (Pack10F(InThickness)<<16);
	return Out;
}

#line 909 "/Engine/Private/Strata/Strata.ush"
uint PackFuzz(float3 InColor, float InAmount, float InRoughness, float InDither)
{
	return PackR7G7B6Gamma2(InColor, InDither) | (PackR6(InAmount, InDither) << 20) | (PackR6(InRoughness, InDither) << 26);
}

#line 931 "/Engine/Private/Strata/Strata.ush"
bool StrataIsBSDFVisible(in FStrataBSDF BSDF)
{
	return any(BSDF.LuminanceWeightV > 0.0f);
}

#line 936 "/Engine/Private/Strata/Strata.ush"
bool StrataHasGreyScaleWeight(in float3 Weight)
{
	return Weight.x == Weight.y && Weight.y == Weight.z;
}

#line 994 "/Engine/Private/Strata/Strata.ush"
struct FStrataOperator
{
	
	int ParentIndex;
	uint LayerDepth;
	uint MaxDistanceFromLeaves;							
	uint Type;											
	int	LeftIndex;
	int RightIndex;
	float Weight;

	

	float  Coverage;									
	float3 ThroughputAlongV;							
	float3 TransmittanceAlongN;							

	float  VerticalTop_Coverage;						
	float3 VerticalTop_ThroughputAlongV;				
	float3 VerticalTop_TransmittanceAlongN;				

	float  VerticalBot_Coverage;						
	float3 VerticalBot_ThroughputAlongV;				
	float3 VerticalBot_TransmittanceAlongN;				

	
	float3				 TopDownRefractionWorldNormal;	
	FStrataLobeStatistic TopDownRefractionLobeStat;		
	FStrataLobeStatistic BottomUpRefractionLobeStat;	

	
	float				 OpaqueRoughRefractCoverage;	
	float				 OpaqueRoughRefractThicknessCm;	
	float				 OpaqueRoughRefractTopRoughness;

	
	FStrataLobeStatistic VerticalTop_TopDownRefractionLobeStat;	
	FStrataLobeStatistic VerticalTop_BottomUpRefractionLobeStat;
};

#line 1034 "/Engine/Private/Strata/Strata.ush"
FStrataOperator GetInitialisedStrataOperator()
{
	FStrataOperator StrataOp = (FStrataOperator)0;
	StrataOp.ParentIndex = -1;
	StrataOp.LeftIndex = -1;
	StrataOp.RightIndex = -1;
	return StrataOp;
}

#line 1044 "/Engine/Private/Strata/Strata.ush"
struct FStrataTree
{
	int BSDFCount;
	uint OperatorCount;

	FStrataBSDF BSDFs[8u];
	FStrataOperator Operators[15];

	void UpdateSingleBSDFOperatorCoverageTransmittance(
		FStrataPixelHeader StrataPixelHeader,
		int BSDFIndex,
		FStrataIntegrationSettings Settings,
		FStrataAddressing NullStrataAddressing,
		float3 V);

	void UpdateSingleOperatorCoverageTransmittance(
		int OpIndex);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Weight(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Horizontal(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Vertical(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	FStrataData StrataAdd(FStrataData A, FStrataData B, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataWeight(FStrataData A, float Weight, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataVerticalLayering(FStrataData Top, FStrataData Base, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom);
};

#line 1084 "/Engine/Private/Strata/Strata.ush"
FStrataTree GetInitialisedStrataTree()
{
	FStrataTree Out;
	Out.BSDFCount = 0;
	Out.OperatorCount = 0;
	return Out;
}

#line 1281 "/Engine/Private/Strata/Strata.ush"
struct FStrataData
{
	FStrataBSDF InlinedBSDF;

	int  OperatorIndex;		


	float3 PreviewColor;	

};

#line 1292 "/Engine/Private/Strata/Strata.ush"
FStrataData GetInitialisedStrataData()
{
	FStrataData StrataData = (FStrataData)0;
	return StrataData;
}

#line 1298 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelFootprint
{
	float PixelRadiusInWorldSpace;	
	float NormalCurvatureRoughness; 
};

#line 1304 "/Engine/Private/Strata/Strata.ush"
FStrataPixelFootprint StrataGetPixelFootprint(float3 dPdx, float3 dPdy, float InNormalCurvatureRoughness)
{
	const float dX = lengthFast(dPdx);
	const float dY = lengthFast(dPdy);

	FStrataPixelFootprint Out;
	Out.PixelRadiusInWorldSpace = min(dX, dY) * 0.5f;
	Out.NormalCurvatureRoughness = InNormalCurvatureRoughness;
	return Out;
}

#line 1315 "/Engine/Private/Strata/Strata.ush"
FStrataPixelFootprint StrataGetPixelFootprint(float3 InWorldPosition, float InNormalCurvatureRoughness)
{




	const float3 dPdx = ddx(InWorldPosition);
	const float3 dPdy = ddy(InWorldPosition);
	return StrataGetPixelFootprint(dPdx, dPdy, InNormalCurvatureRoughness);

}

#line 1330 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataSlabBSDF(
	FStrataPixelFootprint InPixelFootprint,
	float3 DiffuseAlbedo, float3 F0, float3 F90,
	float Roughness, float Anisotropy,
	float SSSProfileID, float3 SSSMFP, float SSSMFPScale, float SSSPhaseAnisotropy, float UseSSSDiffusion,
	float3 Emissive, 
	float SecondRoughness, float SecondRoughnessWeight, float SecondRoughnessAsSimpleClearCoat,
	float FuzzAmount, float3 FuzzColor, float FuzzRoughness,
	float GlintValue, float2 GlintUV,
	float SpecularProfileId,
	float ThicknessCm,
	bool bIsThinSurface,
	bool bIsAtTheBottomOfTopology,	
	uint SharedLocalBasisIndex, inout uint SharedLocalBasisTypes)
{
	
	Roughness		= max(Roughness, InPixelFootprint.NormalCurvatureRoughness);
	SecondRoughness = max(SecondRoughness, InPixelFootprint.NormalCurvatureRoughness);
	FuzzRoughness	= max(FuzzRoughness, InPixelFootprint.NormalCurvatureRoughness);
	

	FStrataData StrataData = GetInitialisedStrataData();

	SSSMFPScale = saturate(SSSMFPScale);
	const bool bSSSProfilePlugged = SSSProfileID > 0.0f;
	const bool bMFPPlugged = any(SSSMFP > 0);
	bool bIsThin		= bIsAtTheBottomOfTopology && (bMFPPlugged && bIsThinSurface); 
	bool bHasSSSWrap	= bIsAtTheBottomOfTopology && (bMFPPlugged && !UseSSSDiffusion);
	bool bHasSSSProfile	= bIsAtTheBottomOfTopology && (bSSSProfilePlugged && SSSMFPScale > 0.f);
	bool bHasSSS		= bIsAtTheBottomOfTopology && (bMFPPlugged || bHasSSSProfile || bHasSSSWrap);

	FHaziness Haziness = InitialiseHaziness();

	
	if (!0 && bSSSProfilePlugged)
	{
		
		const uint SubsurfaceProfileUInt = StrataSubsurfaceProfileIdTo8bits(SSSProfileID);

		GetSubsurfaceProfileDualSpecular(SubsurfaceProfileUInt, Roughness, SSSMFPScale, Roughness, Haziness.Roughness, Haziness.Weight);

		SSSMFP = GetSubsurfaceProfileMFPInCm(SubsurfaceProfileUInt).xyz * SSSMFPScale;
	}
	else
	{
		Haziness.Roughness = SecondRoughness;
		Haziness.Weight = SecondRoughnessWeight;
		Haziness.bSimpleClearCoat = SecondRoughnessAsSimpleClearCoat > 0.0f;
	}

	
#line 1392 "/Engine/Private/Strata/Strata.ush"


	
	if (!0 && bHasSSSWrap)
	{
		SSSMFP = RescaleMFPToComputationSpace(SSSMFP, ThicknessCm, 100.0f);
		ThicknessCm = 100.0f;
	}

	const bool bHasGlint = GlintValue > 0.0f;
	const uint bHasHaziness = (((Haziness.Roughness != Roughness || bHasGlint)  && Haziness.Weight > 0.0f) || Haziness.bSimpleClearCoat) ? 1 : 0;
	const uint bHasAnisotropy = Anisotropy != 0 ? 1 : 0;
	const uint bHasFuzz = FuzzAmount > 0.0f ? 1 : 0;
	if (!0 && bHasAnisotropy)
	{
		StrataRequestSharedLocalBasisTangent(SharedLocalBasisTypes, SharedLocalBasisIndex);
	}

	
	
	
	
	
	
	

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 0 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;


	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( bHasSSS ? (bHasSSSWrap ? (1u) : (bHasSSSProfile ? (3u) : (2u))) : (0u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( 0 )))) | ((( bHasAnisotropy ) &  ((1u<<( 1 ))-1)) << ( 0 ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( (0			+ 1) )))) | ((( 0 ) &  ((1u<<( 1 ))-1)) << ( (0			+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) | ((( bIsThin ? 1 : 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) )))) | ((( bMFPPlugged ? 1 : 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )))) | ((( bHasHaziness ) &  ((1u<<( 1 ))-1)) << ( ((((0			+ 1)			+ 1)			+ 3)		+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )))) | ((( bHasFuzz ) &  ((1u<<( 1 ))-1)) << ( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) ));
	  StrataData.InlinedBSDF .ThicknessCm = ThicknessCm ;


#line 1451 "/Engine/Private/Strata/Strata.ush"



	
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) )))) | ((( any(F90 < 1.0f) ) &  ((1u<<( 1 ))-1)) << ( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) ));


	  StrataData.InlinedBSDF .VGPRs[0].xyz			= DiffuseAlbedo;
	  StrataData.InlinedBSDF .VGPRs[1].xyz						= F0;
	  StrataData.InlinedBSDF .VGPRs[2].xyz					= F90;

	  StrataData.InlinedBSDF .VGPRs[0].w		= Roughness;


	  StrataData.InlinedBSDF .VGPRs[1].w		= Anisotropy;

	  StrataData.InlinedBSDF .Haziness					= PackHaziness(Haziness);

	if (bHasSSSProfile)
	{
		  StrataData.InlinedBSDF .VGPRs[3].x		= SSSProfileID;
		  StrataData.InlinedBSDF .VGPRs[3].y	= SSSMFPScale;
		  StrataData.InlinedBSDF .VGPRs[3].z	= ThicknessCm;
	}
	else
	{
		  StrataData.InlinedBSDF .VGPRs[3].xyz				= SSSMFP * SSSMFPScale;
	}

	  StrataData.InlinedBSDF .VGPRs[3].w			= SSSPhaseAnisotropy;

	  StrataData.InlinedBSDF .VGPRs[4].w		= FuzzAmount;
	  StrataData.InlinedBSDF .VGPRs[4].xyz		= FuzzColor;
	  StrataData.InlinedBSDF .VGPRs[2].w		= FuzzRoughness;




	
	StrataData.InlinedBSDF.TmpMFP = SSSMFP * SSSMFPScale;

	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor = lerp(DiffuseAlbedo, F0, F0RGBToMetallic(F0));


	return StrataData;
}

#line 1523 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataUnlitBSDF(float3 Emissive, float3 TransmittanceColor, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 2 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = TransmittanceColor;
	  StrataData.InlinedBSDF .VGPRs[1].xyz = Normal;


	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= Emissive;


	return StrataData;
}

#line 1543 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataHairBSDF(float3 BaseColor, float Scatter, float Specular, float Roughness, float Backlit, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	
	
	  


		
	  
	

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 3 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = BaseColor;
	  StrataData.InlinedBSDF .VGPRs[0].w = Scatter;
	  StrataData.InlinedBSDF .VGPRs[1].x = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].y = Specular;
	  StrataData.InlinedBSDF .VGPRs[1].z = Backlit;
	  StrataData.InlinedBSDF .VGPRs[1].w = 0;


	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= BaseColor;


	return StrataData;
}

#line 1577 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataEyeBSDF(float3 DiffuseAlbedo, float Roughness, float IrisMask, float IrisDistance, float3 IrisNormal, float3 IrisPlaneNormal, float SSSProfileId, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 5 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = DiffuseAlbedo;
	  StrataData.InlinedBSDF .VGPRs[0].w = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].x = IrisDistance;
	  StrataData.InlinedBSDF .VGPRs[1].y = IrisMask;
	  StrataData.InlinedBSDF .VGPRs[2].xyz = IrisNormal;
	  StrataData.InlinedBSDF .VGPRs[3].xyz = IrisPlaneNormal;
	  StrataData.InlinedBSDF .VGPRs[1].z = SSSProfileId;
	  StrataData.InlinedBSDF .VGPRs[2].w = 0.028f;
	  StrataData.InlinedBSDF .VGPRs[3].w = 1.0f;

	const bool bHasSSS = SSSProfileId != 0;
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( bHasSSS ? (3u) : (0u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));

	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= DiffuseAlbedo;


	return StrataData;
}

#line 1606 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataSingleLayerWaterBSDF(
	float3 BaseColor, float Metallic, float Specular, float Roughness, float3 Emissive, float TopMaterialOpacity,
	float3 WaterAlbedo, float3 WaterExtinction, float WaterPhaseG, float3 ColorScaleBehindWater, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 4 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = BaseColor;
	  StrataData.InlinedBSDF .VGPRs[1].x = Metallic;
	  StrataData.InlinedBSDF .VGPRs[1].y = Specular;
	  StrataData.InlinedBSDF .VGPRs[1].z = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].w = TopMaterialOpacity;

	  StrataData.InlinedBSDF .InlineVGPRs[0].xyz = WaterAlbedo;
	  StrataData.InlinedBSDF .InlineVGPRs[1].xyz = WaterExtinction;
	  StrataData.InlinedBSDF .InlineVGPRs[0].w = WaterPhaseG;
	  StrataData.InlinedBSDF .InlineVGPRs[2].xyz = ColorScaleBehindWater;



	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= lerp(WaterAlbedo, BaseColor, TopMaterialOpacity);


	return StrataData;
}

#line 1669 "/Engine/Private/Strata/Strata.ush"
struct FStrataAddressing
{
	uint  CurrentIndex;
	uint2 PixelCoords;
	uint  ReadBytes;
};

#line 1676 "/Engine/Private/Strata/Strata.ush"
FStrataAddressing GetStrataPixelDataByteOffset(uint2 PixelPos, uint2 ViewBufferSize, uint StrataMaxBytesPerPixel)
{
	FStrataAddressing StrataAddressing = (FStrataAddressing)0;
	StrataAddressing.CurrentIndex = 0;
	StrataAddressing.PixelCoords = PixelPos;
	StrataAddressing.ReadBytes = 0;
	return StrataAddressing;
}

#line 1698 "/Engine/Private/Strata/Strata.ush"
struct FRWStrataMaterialContainerStruct
{
	uint MaterialRenderTargets[3];

};

#line 1707 "/Engine/Private/Strata/Strata.ush"
FRWStrataMaterialContainerStruct InitialiseRWStrataMaterialContainer(RWTexture2DArray<uint> ExtraMaterialDataUAV)
{
	FRWStrataMaterialContainerStruct Out;
	[unroll]
	for (int i = 0; i < 3; ++i)
	{
		Out.MaterialRenderTargets[i] = 0;
	}

	return Out;
}

#line 1719 "/Engine/Private/Strata/Strata.ush"
void StrataStoreUint1(inout FRWStrataMaterialContainerStruct StrataBuffer, RWTexture2DArray<uint> ExtraMaterialDataUAV, inout FStrataAddressing StrataAddressing, uint Data)
{
  
	
	if (StrataAddressing.CurrentIndex < 3)
	{
		StrataBuffer.MaterialRenderTargets[0] = StrataAddressing.CurrentIndex == 0 ? Data : StrataBuffer.MaterialRenderTargets[0];
		StrataBuffer.MaterialRenderTargets[1] = StrataAddressing.CurrentIndex == 1 ? Data : StrataBuffer.MaterialRenderTargets[1];
		StrataBuffer.MaterialRenderTargets[2] = StrataAddressing.CurrentIndex == 2 ? Data : StrataBuffer.MaterialRenderTargets[2];
		


	}
	else
	{
		ExtraMaterialDataUAV[uint3(StrataAddressing.PixelCoords, StrataAddressing.CurrentIndex - 3)] = Data;
	}
	StrataAddressing.CurrentIndex++;
  
}

#line 1772 "/Engine/Private/Strata/Strata.ush"
void FinalizeWrites(inout FRWStrataMaterialContainerStruct StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	
}

#line 1878 "/Engine/Private/Strata/Strata.ush"
struct FSharedLocalBases
{
	uint Count;
	uint Types;
	float3 Normals[4];	
	float3 Tangents[4];
};

#line 1886 "/Engine/Private/Strata/Strata.ush"
FSharedLocalBases StrataInitialiseSharedLocalBases()
{
	FSharedLocalBases SharedLocalBases = (FSharedLocalBases)0;
	return SharedLocalBases;
}

#line 1892 "/Engine/Private/Strata/Strata.ush"
void StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index)
{
	Types = Types | (1u << Index);
}

#line 1897 "/Engine/Private/Strata/Strata.ush"
uint StrataGetSharedLocalBasisType(in uint Types, uint Index)
{
	return (Types >> Index) & 0x1 ? 1u : 0u;
}

#line 1905 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelHeader
{
	uint BSDFCount;

	uint State;


	
	FSharedLocalBases SharedLocalBases;
	
	FStrataTree StrataTree;
	FStrataIrradianceAndOcclusion IrradianceAO;

	
	void PreUpdateAllBSDFWithBottomUpOperatorVisit(FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllBSDFsOperatorCoverageTransmittance(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllOperatorsCoverageTransmittance();
	void UpdateAllBSDFWithBottomUpOperatorVisit();
	void PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllOperatorsCoverageTransmittance_FullySimplified();
	void UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified();

	void StrataUpdateTree(
		inout FStrataAddressing StrataAddressing,
		float3 V,
		FStrataIntegrationSettings Settings);

	void StrataUpdateTree(
		inout FStrataAddressing StrataAddressing,
		in FStrataData StrataData,
		float3 V,
		FStrataIntegrationSettings Settings,
		inout float OutCoverage,
		inout float3 OutTransmittancePreCoverage);










	
	FStrataDBuffer StrataConvertToDBuffer(in FStrataBSDF InBSDF);
	void StrataConvertFromDBuffer(in FStrataDBuffer In, inout FStrataData OutData);

	
	uint GetMaterialMode()										{ return (this.State & (0x7)); }
	bool IsSimpleMaterial()										{ return (this.State & (0x7)) == 1 || 0; }
	bool IsSingleMaterial()										{ return (this.State & (0x7)) == 2 || 0; }
	bool IsComplexMaterial()									{ return (this.State & (0x7)) == 3 && !0 && !0; }
	bool IsSingleLayerWater()									{ return (this.State & (0x7)) == 4; }
	bool IsHair()												{ return (this.State & (0x7)) == 5; }
	bool IsEye()												{ return (this.State & (0x7)) == 6; }
	uint StrataGetBSDFType()
	{
		switch (this.GetMaterialMode())
		{
		case 1:
		case 2:
		case 3:	return 0;
		case 4:		return 4;
		case 5:			return 3;
		case 6:			return 5;
		default:								return 0;
		}
	}

	bool HasPrecShadowMask()									{ return (this.State & (1u << 3)) != 0; }
	bool HasZeroPrecShadowMask()								{ return (this.State & (1u << 4)) != 0; }
	bool DoesCastContactShadow()								{ return (this.State & (1u << 5)) != 0; }
	bool HasSubsurface()										{ return (this.State & (1u << 7)) != 0; }
	bool HasDynamicIndirectShadowCasterRepresentation()			{ return (this.State & (1u << 6)) != 0; }

	void SetHasPrecShadowMask(bool bIn)							{ this.State |= (bIn ? (1u << 3) : 0u); }
	void SetZeroPrecShadowMask(bool bIn)						{ this.State |= (bIn ? (1u << 4) : 0u); }
	void SetCastContactShadow(bool bIn)							{ this.State |= (bIn ? (1u << 5) : 0u); }
	void SetHasSubsurface(bool bIn)								{ this.State |= (bIn ? (1u << 7) : 0u); }
	void SetDynamicIndirectShadowCasterRepresentation(bool bIn)	{ this.State |= (bIn ? (1u << 6) : 0u); }

	bool IsStrataMaterial()										{ return this.GetMaterialMode() != 0; }
	void SetMaterialMode(uint MaterialMode)						{ this.State = (this.State & ~(0x7)) | (MaterialMode & (0x7)); }

	bool GetUsesComplexSpecialRenderPath()						{ return (this.State &  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) ))) != 0; }
	void SetUsesComplexSpecialRenderPath(bool bIn)				{ this.State |= (bIn ?  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) )) : 0u); }
};

#line 2000 "/Engine/Private/Strata/Strata.ush"
FStrataPixelHeader InitialiseStrataPixelHeader()
{
	FStrataPixelHeader Out;
	Out.BSDFCount = 0;

	Out.SharedLocalBases = (FSharedLocalBases)0;
	Out.StrataTree = GetInitialisedStrataTree();
	Out.IrradianceAO = InitIrradianceAndOcclusion();









	Out.State = 0;
	Out.SetMaterialMode(1); 
	return Out;
}

#line 2022 "/Engine/Private/Strata/Strata.ush"
float3x3 StrataGetBSDFSharedBasis_InlineShading(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{

	
	float3 Normal  = StrataPixelHeader.SharedLocalBases.Normals[  uint(( BSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	float3 Tangent = StrataPixelHeader.SharedLocalBases.Tangents[  uint(( BSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	float3 Bitangent = cross(Normal, Tangent);
	return float3x3(Tangent, Bitangent, Normal);



}

#line 2068 "/Engine/Private/Strata/Strata.ush"
float3x3 StrataGetBSDFSharedBasis(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{

	return StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, BSDF, StrataAddressing);



}

#line 2080 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataAdd(FStrataData A, FStrataData B, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = A.PreviewColor + B.PreviewColor;


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 3;
	Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= B.OperatorIndex;

	Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;
	Operators[B.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

#line 2101 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataWeight(FStrataData A, float Weight, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float SafeWeight = saturate(Weight);

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = A.PreviewColor * SafeWeight;


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 0;
	Operators[OperatorIndex].Weight					= SafeWeight;
	Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;

	Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

#line 2123 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float ForegroundMixFactor = saturate(Mix);
	const float BackgroundMixFactor = 1.0 - ForegroundMixFactor;

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = lerp(Background.PreviewColor, Foreground.PreviewColor, Mix);


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 2;
	Operators[OperatorIndex].Weight					= Mix;
	Operators[OperatorIndex].LeftIndex				= Background.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= Foreground.OperatorIndex;

	Operators[Background.OperatorIndex].ParentIndex	= OperatorIndex;
	Operators[Foreground.OperatorIndex].ParentIndex	= OperatorIndex;

	return StrataData;
}

#line 2148 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataVerticalLayering(FStrataData Top, FStrataData Base, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = lerp(Top.PreviewColor, Base.PreviewColor, 0.5);


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 1;
	Operators[OperatorIndex].LeftIndex				= Top.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= Base.OperatorIndex;

	Operators[Top.OperatorIndex].ParentIndex		= OperatorIndex;
	Operators[Base.OperatorIndex].ParentIndex		= OperatorIndex;

	return StrataData;
}

#line 2170 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom)
{
	BSDFCount++;
	OperatorCount++;

	BSDFs[BSDFIndex] = StrataData.InlinedBSDF;
	
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].LayerDepth				= LayerDepth;
	Operators[OperatorIndex].MaxDistanceFromLeaves	= 0;
	Operators[OperatorIndex].Type					= 4;
	Operators[OperatorIndex].LeftIndex				= BSDFIndex;

	BSDFs[BSDFIndex].OperatorIndex					= OperatorIndex;
	BSDFs[BSDFIndex].bIsBottom						= bIsBottom;
	BSDFs[BSDFIndex].bIsTop							= LayerDepth == 0;

	StrataData.OperatorIndex = OperatorIndex;
	return StrataData;
}

#line 2637 "/Engine/Private/Strata/Strata.ush"
float SanitizeRoughness(float Roughness)
{



	
	
	
	Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	
	return saturate(max(View_MinRoughness, Roughness));

}

#line 2651 "/Engine/Private/Strata/Strata.ush"
float3 SanitizeDiffuseAlbedo(float3 DiffuseAlbedo)
{
	
	
	
	return saturate(DiffuseAlbedo) * ResolvedView.DiffuseOverrideParameter.www + ResolvedView.DiffuseOverrideParameter.xyz;
	


}

#line 2662 "/Engine/Private/Strata/Strata.ush"
float3 SanitizeF0(float3 F0)
{
	
	
	
	return saturate(F0) * ResolvedView.SpecularOverrideParameter.w + ResolvedView.SpecularOverrideParameter.xyz;
	


}

#line 2673 "/Engine/Private/Strata/Strata.ush"
float SanitizeF0(float F0)
{
	
	
	
	return saturate(F0) * ResolvedView.SpecularOverrideParameter.w + ResolvedView.SpecularOverrideParameter.x;
	


}

#line 2684 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::StrataSanitizeBSDF()
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
		case 0:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[1].xyz = SanitizeF0(  this .VGPRs[1].xyz);
			  this .VGPRs[2].xyz = saturate(  this .VGPRs[2].xyz);
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w);
			if (  uint(( this .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
			{
				FHaziness Haziness = UnpackHaziness(  this .Haziness);
				Haziness.Roughness = SanitizeRoughness(Haziness.Roughness);
				  this .Haziness = PackHaziness(Haziness);
			}
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w); 
			  this .VGPRs[1].w = clamp(  this .VGPRs[1].w, -1.f, 1.f);
			
		
			
			
			TmpMFP = clamp(TmpMFP, 0.0f, Max111110BitsFloat3);
		

			
			if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
			{
				  this .VGPRs[3].y = saturate(  this .VGPRs[3].y);
			}
			else if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u))
			{
				  this .VGPRs[3].xyz = clamp(  this .VGPRs[3].xyz, 0.0f, Max111110BitsFloat3);
			}

			  this .VGPRs[4].w = saturate(  this .VGPRs[4].w);
			  this .VGPRs[4].xyz = saturate(  this .VGPRs[4].xyz);
			  this .VGPRs[2].w = saturate(  this .VGPRs[2].w);
			break; 
		}
		case 3:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[0].w = saturate(  this .VGPRs[0].w);
			  this .VGPRs[1].x = SanitizeRoughness(  this .VGPRs[1].x);
			  this .VGPRs[1].y = SanitizeF0(  this .VGPRs[1].y);
			  this .VGPRs[1].z = saturate(  this .VGPRs[1].z);
			break;
		}
		case 5:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w);
			  this .VGPRs[1].x = saturate(  this .VGPRs[1].x);
			  this .VGPRs[1].y = saturate(  this .VGPRs[1].y);
			  this .VGPRs[2].xyz = normalize(  this .VGPRs[2].xyz);
			  this .VGPRs[3].xyz = normalize(  this .VGPRs[3].xyz);
			break;
		}
		case 4:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[1].x = saturate(  this .VGPRs[1].x);
			  this .VGPRs[1].y = SanitizeF0(  this .VGPRs[1].y);
			  this .VGPRs[1].z = SanitizeRoughness(  this .VGPRs[1].z);
			  this .VGPRs[1].w = saturate(  this .VGPRs[1].w);
		
			  this .InlineVGPRs[0].xyz = saturate(  this .InlineVGPRs[0].xyz);
			  this .InlineVGPRs[1].xyz = clamp(  this .InlineVGPRs[1].xyz, 0.0f, Max10BitsFloat);
			  this .InlineVGPRs[0].w = clamp(  this .InlineVGPRs[0].w, -1.0f, 1.0f);
			  this .InlineVGPRs[2].xyz = clamp(  this .InlineVGPRs[2].xyz, 0.0f, Max10BitsFloat);
		
			break;
		}
		case 2:
		{
		
			
			  this .Emissive = max(  this .Emissive, 0.0) ;
		
			  this .VGPRs[0].xyz = saturate(  this .VGPRs[0].xyz);
			  this .VGPRs[1].xyz = normalize(  this .VGPRs[1].xyz);
		}
	}
}

#line 2799 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::PostProcessSlabBeforeLighting(bool bIsStrataOpaqueMaterial)
{
	
	
	const bool bIsThin = this.bIsBottom &&   uint(( this .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) && bIsStrataOpaqueMaterial;

	
	
	
	const bool bIsSimpleVolume = !bIsThin &&   uint(( this .State >>( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) )) &  ((1u<<( 1 ))-1)) && (!bIsStrataOpaqueMaterial || (bIsStrataOpaqueMaterial && !this.bIsBottom));

	if (bIsSimpleVolume)
	{
		
		
		
		this.EnableSlabBSDFSimpleVolumetric();
	}
	else if (bIsThin)
	{
		
		
		if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
		{
			this.EnableSlabMFPComputationSpace();
		}
	}
	else
	{
		
		   this .State = ( this .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) | ((( 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) ));
	}
}

#line 2833 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::PostProcessBSDFBeforeLighting(bool bIsStrataOpaqueMaterial)
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0:
	{
		this.PostProcessSlabBeforeLighting(bIsStrataOpaqueMaterial);
		break;
	}
	}
}

#line 2845 "/Engine/Private/Strata/Strata.ush"
bool FStrataBSDF::HasScatteringData()
{
	const uint SSSType =   uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	return SSSType != (0u) && SSSType != (4u);
}

#line 2851 "/Engine/Private/Strata/Strata.ush"
bool FStrataBSDF::HasBackScattering()
{
	const uint SSSType =   uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	return SSSType != (0u) && SSSType != (4u);
}

#line 2858 "/Engine/Private/Strata/Strata.ush"
float IsNonZeroFast(float v)
{
	return float(min(asuint(v) & 0x7FFFFFFF, 1u));
}

#line 2863 "/Engine/Private/Strata/Strata.ush"
float3 IsNonZeroFast(float3 v)
{
	return float3(min(asuint(v) & 0x7FFFFFFF, 1u.xxx));
}

#line 2869 "/Engine/Private/Strata/Strata.ush"
float3 DitherIfNonBlack(float3 Input, float3 Dither)
{
	
	float3 NewInput = Input + Dither * IsNonZeroFast(Input);
	return saturate(NewInput);
}

#line 2875 "/Engine/Private/Strata/Strata.ush"
float DitherIfNonBlack(float Input, float Dither)
{
	
	float NewInput = Input + Dither * IsNonZeroFast(Input);
	return saturate(NewInput);
}

#line 2887 "/Engine/Private/Strata/Strata.ush"
FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters)
{
	const float3 MeanFreePathMeters = MeanFreePathCentimeters * (1.0f / 100.0f);
	return CreateMediumFromBaseColorMFP(DiffuseColor, MeanFreePathMeters);
}

#line 2893 "/Engine/Private/Strata/Strata.ush"
float StrataSlabDiffuseToVolumeBlend(FParticipatingMedia PM)
{
	
	
	const float MaxMeanFreePathMeters = max(PM.MeanFreePath.x, max(PM.MeanFreePath.y, PM.MeanFreePath.z));
	
	const float StartVolumeBlenMFP = 0.04f;
	
	const float Blend = saturate(max(0.0, MaxMeanFreePathMeters - StartVolumeBlenMFP) * 3.0f);
	

	
	return Blend * Blend;
}

#line 2908 "/Engine/Private/Strata/Strata.ush"
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm)
{
	
	
	
	
	return max(InMFPInCm * (InDstThicknessInCm / max(1e-10f, InSrcThicknessInCm)), 0.0f);
}

#line 2917 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::EnableSlabMFPComputationSpace()
{

	
	  this .VGPRs[3].xyz = this.TmpMFP;


	
	
	  this .VGPRs[3].xyz = RescaleMFPToComputationSpace(  this .VGPRs[3].xyz,   this .ThicknessCm, 100.0f);
}

#line 2929 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::EnableSlabBSDFSimpleVolumetric()
{
	this.EnableSlabMFPComputationSpace();

	
	
	
	   this .State = ( this .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( (4u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));
}

#line 2942 "/Engine/Private/Strata/Strata.ush"
uint StrataGetBSDFType(in FStrataBSDF BSDF)
{
	return   uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
}

#line 2947 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFBaseColor(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return lerp(  BSDF .VGPRs[0].xyz,   BSDF .VGPRs[1].xyz, F0RGBToMetallic(  BSDF .VGPRs[1].xyz));  
	case 3: 			return   BSDF .VGPRs[0].xyz;
	case 5: 				return   BSDF .VGPRs[0].xyz;
	case 4: return   BSDF .VGPRs[0].xyz;
	}
	return 0.f;
}

#line 2982 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularF0(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[1].xyz;
	case 3: 			return DielectricSpecularToF0(  BSDF .VGPRs[1].y);
	case 5: 				return   BSDF .VGPRs[2].w;
	case 4: return DielectricSpecularToF0(  BSDF .VGPRs[1].y);
	}
	return 0.f;
}

#line 2993 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularColor(in FStrataBSDF BSDF) { return StrataGetBSDFSpecularF0(BSDF);  }

#line 2995 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularF90(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[2].xyz;
	case 3: 			return 1.0f;
	case 5: 				return   BSDF .VGPRs[3].w;
	case 4: return 1.0f;
	}
	return 0.f;
}

#line 3053 "/Engine/Private/Strata/Strata.ush"
float StrataGetBSDFMetallic(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return F0RGBToMetallic(  BSDF .VGPRs[1].xyz); 
	case 3: 			return 0;
	case 5: 				return 0;
	case 4: return 0;
	}
	return 0.f;
}

#line 3065 "/Engine/Private/Strata/Strata.ush"
float StrataGetBSDFRoughness(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[0].w;
	case 3: 			return   BSDF .VGPRs[1].x;
	case 5: 				return   BSDF .VGPRs[0].w;
	case 4: return   BSDF .VGPRs[1].z;
	}
	return 0.f;
}

#line 3077 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::StrataSetBSDFRoughness(in float Roughness)
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			  this .VGPRs[0].w = Roughness; break;
	case 3: 			  this .VGPRs[1].x = Roughness; break;
	case 5: 				  this .VGPRs[0].w  = Roughness; break;
	case 4:   this .VGPRs[1].z  = Roughness; break;
	}
}

#line 3151 "/Engine/Private/Strata/Strata.ush"
float3 StrataLinearToSrgb(float3 In)
{

	return LinearToSrgb(In);



}

#line 3160 "/Engine/Private/Strata/Strata.ush"
float3 StrataSrgbToLinear(float3 In)
{

	return sRGBToLinear(In);



}

#line 3180 "/Engine/Private/Strata/Strata.ush"
uint PackColorLinearToGamma2AlphaLinear(float4 In)
{
	return PackRGBA8(float4(StrataLinearToSrgb(saturate(In.rgb)), In.a));
}

#line 3191 "/Engine/Private/Strata/Strata.ush"
uint PackR7G7B6Gamma2(float3 rgb, float Dither)
{
	
	const float CenteredDither = Dither - 0.5f;
	const float Dither8bits = CenteredDither * 1.0f / 255.0f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float Dither6bits = CenteredDither * 1.0f / 63.0f;
	const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

	
	const float3 dithered_rgb = DitherIfNonBlack(StrataLinearToSrgb(saturate(rgb)), Dither776);

	uint r = (uint(dithered_rgb.r * 127.0f) << 0);
	uint g = (uint(dithered_rgb.g * 127.0f) << 7);
	uint b = (uint(dithered_rgb.b *  63.0f) << 14);
	return r | g | b;
}

#line 3209 "/Engine/Private/Strata/Strata.ush"
float3 UnpackR7G7B6Gamma2(uint rgb)
{
	float3 Out;
	Out.r = float((rgb >> 0)  & 0x7F) * (1.0f / 127.0f);
	Out.g = float((rgb >> 7)  & 0x7F) * (1.0f / 127.0f);
	Out.b = float((rgb >> 14) & 0x3F) * (1.0f /  63.0f);

	return StrataSrgbToLinear(Out);
}

#line 3219 "/Engine/Private/Strata/Strata.ush"
uint PackR7G7B6Linear(float3 rgb, float Dither)
{
	
	const float CenteredDither = Dither - 0.5f;
	const float Dither8bits = CenteredDither * 1.0f / 255.0f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float Dither6bits = CenteredDither * 1.0f / 63.0f;
	const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

	
	const float3 dithered_rgb = DitherIfNonBlack(saturate(rgb), Dither776);

	uint r = (uint(dithered_rgb.r * 127.0f) << 0);
	uint g = (uint(dithered_rgb.g * 127.0f) << 7);
	uint b = (uint(dithered_rgb.b *  63.0f) << 14);
	return r | g | b;
}

#line 3246 "/Engine/Private/Strata/Strata.ush"
uint PackR7(float Value, float Dither)
{
	const float CenteredDither = Dither - 0.5f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float DitheredValue = DitherIfNonBlack(saturate(Value), Dither7bits);
	return uint(DitheredValue * 127.0f);
}

#line 3259 "/Engine/Private/Strata/Strata.ush"
uint PackR6(float Value, float Dither)
{
	const float CenteredDither = Dither - 0.5f;
	const float Dither7bits = CenteredDither * 1.0f / 63.0f;
	const float DitheredValue = DitherIfNonBlack(saturate(Value), Dither7bits);
	return uint(DitheredValue * 63.0f);
}

#line 3273 "/Engine/Private/Strata/Strata.ush"
float SignNotZero(in float k)
{
	return k >= 0.0 ? 1.0 : -1.0;
}

#line 3277 "/Engine/Private/Strata/Strata.ush"
float2 SignNotZero(in float2 v)
{
	return float2(SignNotZero(v.x), SignNotZero(v.y));
}

#line 3282 "/Engine/Private/Strata/Strata.ush"
uint StrataPackNormal(in float3 Normal)
{
	return PackFloat2ToUInt(UnitVectorToOctahedron(Normal));
}

#line 3306 "/Engine/Private/Strata/Strata.ush"
uint StrataPackNormal22(in float3 Normal)
{
	const float2 Result = UnitVectorToOctahedron(Normal);
	const uint2 PackedXY = uint2(clamp(Result * 1023.0f + 1024.0f, 0.0f, 2047.0f));
	return PackedXY.x | (PackedXY.y << 11);
}

#line 3322 "/Engine/Private/Strata/Strata.ush"
uint StrataPackNormalAndTangent(in float3 Normal, in float3 Tangent)
{
	uint X10Bits;
	uint Y10Bits;
	uint Z11Bits;
	uint W1Bit;

	
	{
		float l1norm = abs(Normal.x) + abs(Normal.y) + abs(Normal.z);
		float2 result = Normal.xy * (1.0 / l1norm);
		if (Normal.z < 0.0)
		{
			result = (1.0 - abs(result.yx)) * SignNotZero(result.xy);
		}
		X10Bits = uint(clamp(result.x * 511.0f + 512.0f, 0.0f, 1023.0f));
		Y10Bits = uint(clamp(result.y * 511.0f + 512.0f, 0.0f, 1023.0f));
	}

	
	{
		
		float x = float(int(X10Bits) - 512) / 511.0f;
		float y = float(int(Y10Bits) - 512) / 511.0f;
		Normal = float3(x, y, 1.0f - abs(x) - abs(y));
		if (Normal.z < 0.0f)
		{
			Normal.xy = (1.0f - abs(Normal.yx)) * SignNotZero(Normal.xy);
		}
		Normal = normalize(Normal);

		float3x3 LocalRef = GetTangentBasis(Normal);
		float2 ProjXY = float2(dot(LocalRef[0], Tangent), dot(LocalRef[1], Tangent));
	
		
		ProjXY = ProjXY.x >= 0 ? ProjXY : -ProjXY.xy;
	
		float l1norm = abs(ProjXY.x) + abs(ProjXY.y);
		float2 result = ProjXY.xy * (1.0 / l1norm);

	
		Z11Bits = uint(clamp(result.x * 2047.0f, 0.0f, 2047.0f));
	


		W1Bit   = ProjXY.y >= 0 ? 1u : 0u;
	}

	return
		 (0x3FF & X10Bits)        | 
		((0x3FF & Y10Bits) << 10) | 
		((0x7FF & Z11Bits) << 20) |
		((0x1   & W1Bit  ) << 31);
}

#line 3443 "/Engine/Private/Strata/Strata.ush"
struct FStrataDBuffer
{
	float3 WorldNormal;
	float  Roughness;
	float3 BaseColor;
	float  Specular;
	float3 Emissive;
	float  Metallic;
	float  Coverage;

	
	
	
	float  OneMinusCoverage;
	float  OneMinusCoverage_BaseColor;
	float  OneMinusCoverage_WorldNormal;
	float  OneMinusCoverage_Roughness;
};

#line 3500 "/Engine/Private/Strata/Strata.ush"
FStrataDBuffer FStrataPixelHeader::StrataConvertToDBuffer(
	in FStrataBSDF InBSDF)
{
	FStrataDBuffer Out = (FStrataDBuffer)0;



	const float3 DiffuseColor =   InBSDF .VGPRs[0].xyz;
	const float3 F0 =   InBSDF .VGPRs[1].xyz;

	Out.Roughness =   InBSDF .VGPRs[0].w;
	Out.Metallic = F0RGBToMetallic(F0);
	Out.Specular = F0RGBToDielectricSpecular(F0);
	Out.BaseColor = lerp(DiffuseColor, F0, Out.Metallic);
	Out.Emissive =   InBSDF .Emissive;
	Out.WorldNormal = this.SharedLocalBases.Normals[  uint(( InBSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	Out.Coverage = InBSDF.Coverage;





	return Out;
}

#line 3525 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataConvertFromDBuffer(
	in FStrataDBuffer In,
	inout FStrataData OutData)
{
	
	const uint SharedLocalBasisIndex = 0;
	uint SharedLocalBasisTypes = 0;
	this.BSDFCount = 1;

	this.SharedLocalBases = StrataInitialiseSharedLocalBases();
	this.SharedLocalBases.Normals[SharedLocalBasisIndex] = In.WorldNormal;
	this.SharedLocalBases.Tangents[SharedLocalBasisIndex] = 0.f;
	this.IrradianceAO = InitIrradianceAndOcclusion();

	this.State = 0;
	this.SetMaterialMode(1);

	
	const FStrataPixelFootprint PixelFootprint = (FStrataPixelFootprint)0;
	const float DefaultThicknessCm = 0.01f;
	OutData = GetStrataSlabBSDF(
		PixelFootprint,		
		ComputeDiffuseAlbedo(In.BaseColor, In.Metallic),
		ComputeF0(In.Specular, In.BaseColor, In.Metallic),
		1.0f,				
		In.Roughness,		
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		In.Roughness,		
		0.f,				
		0.f.xx,				
		0.f, 				
		DefaultThicknessCm,
		false,				
		false,				
		SharedLocalBasisIndex,
		SharedLocalBasisTypes);

	OutData.InlinedBSDF.Emissive = In.Emissive;
	OutData.InlinedBSDF.Coverage = In.Coverage;

}

#line 3581 "/Engine/Private/Strata/Strata.ush"
struct FStrataIntegrationSettings
{
	bool bForceFullyRough;
	bool bRoughDiffuseEnabled;
	bool bRoughnessTracking;

	
	int  SliceStoringDebugStrataTreeData;
	int  PeelLayersAboveDepth;
};

#line 3592 "/Engine/Private/Strata/Strata.ush"
FStrataIntegrationSettings InitStrataIntegrationSettings(bool bForceFullyRough, bool bRoughDiffuseEnabled, int PeelLayersAboveDepth, bool bRoughnessTracking)
{
	FStrataIntegrationSettings Out;
	Out.bForceFullyRough = bForceFullyRough;
	Out.bRoughDiffuseEnabled = bRoughDiffuseEnabled;
	Out.bRoughnessTracking = bRoughnessTracking;

	Out.PeelLayersAboveDepth = PeelLayersAboveDepth;
	Out.SliceStoringDebugStrataTreeData = -1;
	return Out;
}

#line 3604 "/Engine/Private/Strata/Strata.ush"
FStrataIntegrationSettings InitStrataIntegrationSettings()
{
	return InitStrataIntegrationSettings(false, true, -1, false);
}

#line 3615 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	float3 V,
	FStrataIntegrationSettings Settings)
{
	
#line 3643 "/Engine/Private/Strata/Strata.ush"

	{
		
		
		
		this.PreUpdateAllBSDFWithBottomUpOperatorVisit(StrataAddressing, V);

		
		
		
		this.UpdateAllBSDFsOperatorCoverageTransmittance(Settings, StrataAddressing, V);

		
		
		
		this.UpdateAllOperatorsCoverageTransmittance();

		
		
		
		this.UpdateAllBSDFWithBottomUpOperatorVisit();
	}

}

#line 3668 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	in FStrataData StrataData,		
	float3 V,
	FStrataIntegrationSettings Settings,
	inout float OutCoverage,
	inout float3 OutTransmittancePreCoverage)
{
	this.StrataUpdateTree(
		StrataAddressing,
		V,
		Settings);

	OutCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].Coverage);
	OutTransmittancePreCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].ThroughputAlongV);
}

#line 3691 "/Engine/Private/Strata/Strata.ush"
uint PackStrataHeader(uint InBSDFCount, FStrataPixelHeader InHeader)
{
	uint Out = 0;
	   Out = ( Out & (~ ( ((1u<<( 4 ))-1)<<( ((0					+ 8)			+ 8) )))) | ((( InBSDFCount ) &  ((1u<<( 4 ))-1)) << ( ((0					+ 8)			+ 8) ));


	   Out = ( Out & (~ ( ((1u<<( 3 ))-1)<<( (((0					+ 8)			+ 8)				+ 4) )))) | ((( InHeader.SharedLocalBases.Count ) &  ((1u<<( 3 ))-1)) << ( (((0					+ 8)			+ 8)				+ 4) ));
	   Out = ( Out & (~ ( ((1u<<( 4 ))-1)<<( ((((0					+ 8)			+ 8)				+ 4)	+ 3) )))) | ((( InHeader.SharedLocalBases.Types ) &  ((1u<<( 4 ))-1)) << ( ((((0					+ 8)			+ 8)				+ 4)	+ 3) ));



	Out |= InHeader.State &  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) ));


	   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( InHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

	return Out;
}

#line 3773 "/Engine/Private/Strata/Strata.ush"
bool IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF)
{
	return (BSDF.State & ( ( ((1u<<( 1 ))-1)<<( 0 ))| 								 ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) ))	| 								 ( ((1u<<( 1 ))-1)<<( ((((0			+ 1)			+ 1)			+ 3)		+ 1) ))	| 								 ( ((1u<<( 1 ))-1)<<( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) ))		| 								 ( ((1u<<( 1 ))-1)<<( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) ))	| 								 ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) == 0;
}

#line 3778 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::UnpackFastPathSlabBSDF(uint2 PackedData01)
{
	const uint PackedData8Bits		= PackedData01.y & 0xFF;
	const uint PackedData32Bits		= PackedData01.x;
	const uint PackedF020Bits		= ((PackedData8Bits << 12) & 0xFF000) | (PackedData32Bits & 0xFFF);
	const uint PackedDiffuse20Bits	= (PackedData32Bits >> 12) & 0xFFFFF;

	  this .VGPRs[0].xyz	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	  this .VGPRs[1].xyz				= UnpackR7G7B6Gamma2(PackedF020Bits);

	float4 Data1 = UnpackRGBA8(PackedData01.y);
	  this .VGPRs[0].w			= Data1.y;
	  this .VGPRs[1].w			= Data1.z * 2.f - 1.f;
	  this .VGPRs[3].w	= Data1.w * 2.f - 1.f;
}

#line 22 "/Engine/Private/CapsuleLight.ush"
struct FCapsuleLight
{
	float3	LightPos[2];
	float	Length;
	float	Radius;
	float	SoftRadius;
	float	DistBiasSqr;
};

#line 48 "/Engine/Private/CapsuleLight.ush"
float3 ClosestPointLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;

	
	float A = Square( Length );
	float B = dot( R, Line01 );
	float t = saturate( dot( Line0, B*R - Line01 ) / (A - B*B) );

	return Line0 + t * Line01;
}

#line 78 "/Engine/Private/CapsuleLight.ush"
float3 LineIrradiance( float3 N, float3 Line0, float3 Line1, float DistanceBiasSqr, out float CosSubtended, out float BaseIrradiance, out float NoL )
{
	float LengthSqr0 = dot( Line0, Line0 );
	float LengthSqr1 = dot( Line1, Line1 );
	float InvLength0 = rsqrt( LengthSqr0 );
	float InvLength1 = rsqrt( LengthSqr1 );
	float InvLength01 = InvLength0 * InvLength1;

	CosSubtended = dot( Line0, Line1 ) * InvLength01;
	BaseIrradiance = InvLength01 / ( CosSubtended * 0.5 + 0.5 + DistanceBiasSqr * InvLength01 );
	NoL = 0.5 * ( dot(N, Line0) * InvLength0 + dot(N, Line1) * InvLength1 );
	
	float3 VectorIrradiance = ( BaseIrradiance * 0.5 ) * ( Line0 * InvLength0 + Line1 * InvLength1 );
	return VectorIrradiance;
}

#line 95 "/Engine/Private/CapsuleLight.ush"
float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 115 "/Engine/Private/CapsuleLight.ush"

		
		
		
		
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}




	return NoL;
}

#line 23 "/Engine/Private/LightData.ush"
struct FRectTexture
{
	float2 AtlasUVOffset;
	float2 AtlasUVScale;
	float  AtlasMaxLevel;
};

#line 30 "/Engine/Private/LightData.ush"
FRectTexture InitRectTexture()
{
	FRectTexture Out;
	Out.AtlasUVOffset = 0;
	Out.AtlasUVScale  = 0;
	Out.AtlasMaxLevel = 32;
	return Out;
}

#line 39 "/Engine/Private/LightData.ush"
struct FRectLightData
{
	float		 BarnCosAngle;
	float		 BarnLength;
	FRectTexture AtlasData;
};

#line 46 "/Engine/Private/LightData.ush"
FRectLightData UnpackRectLightData(uint In0, uint In1, uint In2)
{
	FRectLightData Out;
	Out.AtlasData.AtlasUVOffset	= float2(f16tof32(In0 & 0xFFFF), f16tof32(In0 >> 16));
	Out.AtlasData.AtlasUVScale	= float2(f16tof32(In1 & 0xFFFF), f16tof32(In1 >> 16));
	Out.BarnLength				= f16tof32(In2 & 0xFFFF);			
	Out.BarnCosAngle			= ((In2 >> 16) & 0x3FF) / 1024.f;	
	Out.AtlasData.AtlasMaxLevel = float(In2 >> 26);					
	return Out;
}

#line 60 "/Engine/Private/LightData.ush"
struct FDirectionalLightData
{
	uint   HasDirectionalLight;
	uint   DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	float3 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float  DirectionalLightSourceRadius;
};

#line 72 "/Engine/Private/LightData.ush"
struct FLocalLightData
{
	
	float4 LightPositionAndInvRadius;
	float4 LightColorAndIdAndFalloffExponent;
	float4 SpotAnglesAndSourceRadiusPacked;
	float4 LightDirectionAndShadowMask;
	float4 LightTangentAndIESDataAndSpecularScale;
	float4 RectDataAndVirtualShadowMapId;

	
	
	bool bClusteredDeferredSupported;
	bool bLumenLightSupported;
	
	bool bIsSimpleLight;
	
	int  VirtualShadowMapId;
	
	int LightSceneId;
};

#line 112 "/Engine/Private/LightData.ush"
struct FLightShaderParameters
{
	float3 TranslatedWorldPosition;
	float  InvRadius;
	float3 Color;
	float  FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float2 SpotAngles;
	float  SpecularScale;
	float  SourceRadius;
	float  SoftSourceRadius;
	float  SourceLength;
	float  RectLightBarnCosAngle;
	float  RectLightBarnLength;
	float2 RectLightAtlasUVOffset;
	float2 RectLightAtlasUVScale;
	float  RectLightAtlasMaxLevel;
	float  IESAtlasIndex;
};

#line 142 "/Engine/Private/LightData.ush"
struct FDeferredLightData
{
	float3 TranslatedWorldPosition;
	float   InvRadius;
	
	float3 Color;
	float   FalloffExponent;
	float3 Direction;
	float3 Tangent;
	float  SoftSourceRadius;
	float2  SpotAngles;
	float  SourceRadius;
	float  SourceLength;
	float   SpecularScale;
	float  ContactShadowLength;
	
	float ContactShadowCastingIntensity;
	
	float ContactShadowNonCastingIntensity;
	float2 DistanceFadeMAD;
	float4  ShadowMapChannelMask;
	
	bool   ContactShadowLengthInWS;
	
	bool   bInverseSquared;
	
	bool   bRadialLight;
	
	bool   bSpotLight;
	bool   bRectLight;
	
	uint   ShadowedBits;
	
	FRectLightData RectLightData;
	
	float  IESAtlasIndex;
	
	FHairTransmittanceData HairTransmittance;
};

#line 188 "/Engine/Private/LightData.ush"
float3 UnpackLightColor(float2 In)
{
	float3 Dir = float3(
		((asuint(In.y) >> 0) & 0x3FF),
		((asuint(In.y) >> 10) & 0x3FF),
		((asuint(In.y) >> 20) & 0x3FF));
	return In.x * Dir;
}

#line 197 "/Engine/Private/LightData.ush"
float4 UnpackShadowMapChannelMask(uint In)
{
	
	return float4((In & 0x1), (In & 0x2) >> 1, (In & 0x4) >> 2, (In & 0x8) >> 3);
}

#line 203 "/Engine/Private/LightData.ush"
uint UnpackLightingChannelMask(uint In)
{
	return (In >> 8) & 0x7;
}

#line 208 "/Engine/Private/LightData.ush"
uint UnpackLightingChannelMask(FLocalLightData In)
{
	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	return UnpackLightingChannelMask(LightTypeAndPackedShadowMapChannelMask);
}

#line 214 "/Engine/Private/LightData.ush"
uint UnpackLightType(uint InShadowMapChannelMaskPacked)
{
	return (InShadowMapChannelMaskPacked >> 16) & 0x3;
}

#line 229 "/Engine/Private/LightData.ush"
float UnpackLightSourceRadius(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.z) & 0xFFFF);
}

#line 234 "/Engine/Private/LightData.ush"
float UnpackLightSoftSourceRadius(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.z) >> 16);
}

#line 239 "/Engine/Private/LightData.ush"
float UnpackLightSourceLength(FLocalLightData In)
{
	return f16tof32(asuint(In.SpotAnglesAndSourceRadiusPacked.w));
}

#line 249 "/Engine/Private/LightData.ush"
float2 GetLightSpotAngles(FLocalLightData In)
{
	return In.SpotAnglesAndSourceRadiusPacked.xy;
}

#line 254 "/Engine/Private/LightData.ush"
float UnpackLightSpecularScale(FLocalLightData In)
{
	return f16tof32(asuint(In.LightTangentAndIESDataAndSpecularScale.w) & 0xFFFF);
}

#line 259 "/Engine/Private/LightData.ush"
float UnpackLigthIESAtlasIndex(FLocalLightData In)
{
	return f16tof32(asuint(In.LightTangentAndIESDataAndSpecularScale.w) >> 16);
}

#line 267 "/Engine/Private/LightData.ush"
FRectTexture ConvertToRectTexture(FDeferredLightData In)
{
	FRectTexture Output;
	Output.AtlasUVOffset = In.RectLightData.AtlasData.AtlasUVOffset;
	Output.AtlasUVScale  = In.RectLightData.AtlasData.AtlasUVScale;
	Output.AtlasMaxLevel = In.RectLightData.AtlasData.AtlasMaxLevel;
	return Output;
}

#line 277 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(
	const FLocalLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint  OutLightingChannelMask)
{
	FDeferredLightData Out = (FDeferredLightData)0;

	const uint LightTypeAndPackedShadowMapChannelMask = asuint(In.LightDirectionAndShadowMask.w);
	const uint LightType = UnpackLightType(LightTypeAndPackedShadowMapChannelMask);

	Out.TranslatedWorldPosition = In.LightPositionAndInvRadius.xyz;
	Out.InvRadius				= In.LightPositionAndInvRadius.w;
	Out.Color					= UnpackLightColor(In.LightColorAndIdAndFalloffExponent.xy);
	Out.FalloffExponent			= In.LightColorAndIdAndFalloffExponent.w;
	Out.Direction				= In.LightDirectionAndShadowMask.xyz;
	Out.SpotAngles				= GetLightSpotAngles(In);
	Out.SourceRadius			= UnpackLightSourceRadius(In);
	Out.SourceLength			= UnpackLightSourceLength(In);
	Out.Tangent					= In.LightTangentAndIESDataAndSpecularScale.xyz;
	Out.SoftSourceRadius		= UnpackLightSoftSourceRadius(In);
	Out.bInverseSquared			= Out.FalloffExponent == 0;
	Out.SpecularScale			= UnpackLightSpecularScale(In) * InSpecularScale;
	Out.bRadialLight			= true;
	Out.bSpotLight				= LightType == 2;
	Out.bRectLight				= LightType == 3;
	Out.HairTransmittance		= InitHairTransmittanceData();
	Out.RectLightData			= UnpackRectLightData(
									asuint(In.RectDataAndVirtualShadowMapId.x),
									asuint(In.RectDataAndVirtualShadowMapId.y),
									asuint(In.RectDataAndVirtualShadowMapId.w));
	Out.IESAtlasIndex			= UnpackLigthIESAtlasIndex(In);

	
	
	
	
	
	
	
	Out.ShadowedBits				= (LightTypeAndPackedShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(LightTypeAndPackedShadowMapChannelMask);
	return Out;
}

#line 324 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(const FLocalLightData In)
{
	float4 OutPreviewShadowMapChannelMask = 0;
	uint OutLightingChannelMask = 0x7;
	return ConvertToDeferredLight(In, 1.0f, OutPreviewShadowMapChannelMask, OutLightingChannelMask);
}

#line 402 "/Engine/Private/LightData.ush"
FDeferredLightData ConvertToDeferredLight(
	FDirectionalLightData In, 
	float InSpecularScale, 
	inout float4 OutPreviewShadowMapChannelMask,
	inout uint OutLightingChannelMask)
{
	FDeferredLightData Out	= (FDeferredLightData)0;
	Out.Color				= In.DirectionalLightColor;
	Out.FalloffExponent		= 0;
	Out.Direction			= In.DirectionalLightDirection;
	Out.DistanceFadeMAD		= In.DirectionalLightDistanceFadeMAD;
	Out.bRadialLight		= false;
	Out.SpecularScale		= InSpecularScale;
	Out.ShadowedBits		= (In.DirectionalLightShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;
	Out.HairTransmittance	= InitHairTransmittanceData();
	Out.SourceRadius		= In.DirectionalLightSourceRadius;

	
	
	
	
	
	
	
	Out.ShadowMapChannelMask		= UnpackShadowMapChannelMask(In.DirectionalLightShadowMapChannelMask);
	OutPreviewShadowMapChannelMask	= UnpackShadowMapChannelMask(In.DirectionalLightShadowMapChannelMask >> 4);
	OutLightingChannelMask			= UnpackLightingChannelMask(In.DirectionalLightShadowMapChannelMask);

	return Out;
}

#line 14 "/Engine/Private/RectLight.ush"
struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};

#line 23 "/Engine/Private/RectLight.ush"
float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference = false)
{

	const bool bIsValid = RectTexture.AtlasMaxLevel < 32;
	const float2 RectTextureSize = RectTexture.AtlasUVScale * View_RectLightAtlasSizeAndInvSize.xy;
	Level += log2(min(RectTextureSize.x, RectTextureSize.y)) - 2.f;
	Level  = min(Level, RectTexture.AtlasMaxLevel);

	RectUV = saturate(RectUV) * RectTexture.AtlasUVScale + RectTexture.AtlasUVOffset;
	return bIsValid ? View_RectLightAtlasTexture.SampleLevel(View_SharedTrilinearClampedSampler, RectUV, bIsReference ? 0 : Level).rgb : 1.f;



}

#line 39 "/Engine/Private/RectLight.ush"
float3 RectIrradianceLambert( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{







	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );		
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );		
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );		
	

	float x0 = LocalPosition.x - Rect.Extent.x;
	float x1 = LocalPosition.x + Rect.Extent.x;
	float y0 = LocalPosition.y - Rect.Extent.y;
	float y1 = LocalPosition.y + Rect.Extent.y;
	float z0 = LocalPosition.z;
	float z0Sqr = z0 * z0;
	

	float3 v0 = float3( x0, y0, z0 );
	float3 v1 = float3( x1, y0, z0 );
	float3 v2 = float3( x1, y1, z0 );
	float3 v3 = float3( x0, y1, z0 );

	float3 L0 = v0 * rsqrt( dot( v0.xy, v0.xy ) + z0Sqr );	
	float3 L1 = v1 * rsqrt( dot( v1.xy, v1.xy ) + z0Sqr );	
	float3 L2 = v2 * rsqrt( dot( v2.xy, v2.xy ) + z0Sqr );	
	float3 L3 = v3 * rsqrt( dot( v3.xy, v3.xy ) + z0Sqr );	
	

	









	float c01 = dot( L0, L1 );
	float c12 = dot( L1, L2 );
	float c23 = dot( L2, L3 );
	float c30 = dot( L3, L0 );
	












	
	

	float w01 = ( 1.5708 - 0.175 * c01 ) * rsqrt( c01 + 1 );	
	float w12 = ( 1.5708 - 0.175 * c12 ) * rsqrt( c12 + 1 );	
	float w23 = ( 1.5708 - 0.175 * c23 ) * rsqrt( c23 + 1 );	
	float w30 = ( 1.5708 - 0.175 * c30 ) * rsqrt( c30 + 1 );	
	









	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	L = L.x * Rect.Axis[0] + L.y * Rect.Axis[1] + L.z * Rect.Axis[2];	

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	BaseIrradiance = 0.5 * Length;

	
	
	
	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

#line 278 "/Engine/Private/RectLight.ush"
float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{

	
	L += Rect.Axis[2] * saturate( 0.001 - dot( Rect.Axis[2], L ) );

	
	float DistToPlane = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * DistToPlane;

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

	
    float2 RectUV = (PointInRect + Rect.Offset) / max(0.0001f, Rect.FullExtent) * float2(0.5, -0.5) + 0.5;
	
	float Level = log2( DistToPlane * rsqrt( max(0.0001f, Rect.FullExtent.x * Rect.FullExtent.y) ) );

    return SampleRectTexture(RectTexture, RectUV, Level);



}

#line 303 "/Engine/Private/RectLight.ush"
float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );
	
	

	








	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );
	
	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( 1 - c01 * c01 ) - w01;


	return w01;
}

#line 328 "/Engine/Private/RectLight.ush"
float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );	
	float3 L1 = normalize( Poly[1] );	
	float3 L2 = normalize( Poly[2] );	
	float3 L3 = normalize( Poly[3] );	
	








	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );








	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	return L;
}

#line 365 "/Engine/Private/RectLight.ush"
struct FRectLTC
{
	float3x3 LTC;
	float3x3 InvLTC;
	float3 IrradianceScale;
};

#line 373 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_GGX( float Roughness, float3 SpecularColor, float NoV)
{
	
	const float3 F0  = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);

	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);
   
	float4 LTCMat = View_GGXLTCMatTexture.SampleLevel( View_GGXLTCMatSampler, UV, 0 );
	float4 LTCAmp = View_GGXLTCAmpTexture.SampleLevel( View_GGXLTCAmpSampler, UV, 0 );

	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3(        0, 1,        0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};

	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;

	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3(	          0, 1,           0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};

	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;
	return Out;
}

#line 408 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_Sheen( float Roughness, float NoV)
{	
	const float Alpha = sqrt(Roughness);
	const float SatNoV = saturate(abs(NoV) + 1e-5);
	float2 UV = float2(Alpha, SatNoV);
	UV = UV * (31.0 / 32.0) + (0.5 / 32.0);
	const float3 SheenLTC = View_SheenLTCTexture.SampleLevel(View_SheenLTCSampler, UV, 0).xyz;

	const float aInv = SheenLTC.x;
	const float bInv = SheenLTC.y;

	float3x3 LTC = {
		float3(1/aInv, 0,     -bInv/aInv),    
		float3(0,      1/aInv, 0),
		float3(0,      0,      1)
	};

	float3x3 InvLTC = {
		float3(aInv, 0,    bInv),
		float3(0,    aInv, 0),
		float3(0,    0,    1)
	};

	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = SheenLTC.z;
	return Out;
}

#line 440 "/Engine/Private/RectLight.ush"
float3 RectApproxLTC(FRectLTC In, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{	
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	
	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );

	In.LTC = mul( In.LTC, TangentBasis );
	In.InvLTC = mul( transpose( TangentBasis ), In.InvLTC );

	float3 Poly[4];
	Poly[0] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );

	
	float3 L = PolygonIrradiance( Poly );

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	
	
	
	float SinAlphaSqr = Length;

	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;

	
	Irradiance = -min(-Irradiance, 0.0);









	
	
	L = mul( In.InvLTC, L );
	OutMeanLightWorldDirection = L;

	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );
	
	return LightColor * Irradiance * In.IrradianceScale;
}

#line 499 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const FRectLTC LTC = GetRectLTC_GGX(Roughness, SpecularColor, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}

#line 510 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC(float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, SpecularColor, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 517 "/Engine/Private/RectLight.ush"
float3 RectSheenApproxLTC( float Roughness, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float DirectionalAlbedo)
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const FRectLTC LTC = GetRectLTC_Sheen(Roughness, NoV);
	DirectionalAlbedo = LTC.IrradianceScale.x;

	float3 MeanLightWorldDirection = 0.0f;
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 533 "/Engine/Private/RectLight.ush"
struct FSphericalRect
{
	float3x3	Axis;

	float		x0;
	float		x1;
	float		y0;
	float		y1;
	float		z0;

	float		b0;
	float		b1;
	float		k;
	float		SolidAngle;
};

#line 550 "/Engine/Private/RectLight.ush"
FSphericalRect BuildSphericalRect( FRect Rect )
{
	FSphericalRect SphericalRect;

	SphericalRect.Axis = Rect.Axis;

	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );

	SphericalRect.x0 = LocalPosition.x - Rect.Extent.x;
	SphericalRect.x1 = LocalPosition.x + Rect.Extent.x;
	SphericalRect.y0 = LocalPosition.y - Rect.Extent.y;
	SphericalRect.y1 = LocalPosition.y + Rect.Extent.y;
	SphericalRect.z0 = -abs( LocalPosition.z );

	SphericalRect.Axis[2] *= LocalPosition.z > 0 ? -1 : 1;

	float3 v0 = float3( SphericalRect.x0, SphericalRect.y0, SphericalRect.z0 );
	float3 v1 = float3( SphericalRect.x1, SphericalRect.y0, SphericalRect.z0 );
	float3 v2 = float3( SphericalRect.x1, SphericalRect.y1, SphericalRect.z0 );
	float3 v3 = float3( SphericalRect.x0, SphericalRect.y1, SphericalRect.z0 );

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( -dot( n0, n1 ) );
	float g1 = acos( -dot( n1, n2 ) );
	float g2 = acos( -dot( n2, n3 ) );
	float g3 = acos( -dot( n3, n0 ) );

	SphericalRect.b0 = n0.z;
	SphericalRect.b1 = n2.z;

	SphericalRect.k = 2*PI - g2 - g3;
	SphericalRect.SolidAngle = g0 + g1 - SphericalRect.k;

	return SphericalRect;
}

#line 593 "/Engine/Private/RectLight.ush"
struct FSphericalRectSample {
	float3 Direction;
	float2 UV;
};

#line 598 "/Engine/Private/RectLight.ush"
FSphericalRectSample UniformSampleSphericalRectWithUV(float2 E, FSphericalRect Rect)
{
	float au = E.x * Rect.SolidAngle + Rect.k;
	float fu = (cos(au) * Rect.b0 - Rect.b1) / sin(au);
	float cu = rsqrt(fu * fu + Rect.b0 * Rect.b0) * (fu > 0 ? 1 : -1);
	cu = clamp(cu, -1, 1);				

	float xu = -(cu * Rect.z0) * rsqrt(1 - cu * cu);
	xu = clamp(xu, Rect.x0, Rect.x1);	

	float d = sqrt(xu * xu + Rect.z0 * Rect.z0);
	float h0 = Rect.y0 * rsqrt(d * d + Rect.y0 * Rect.y0);
	float h1 = Rect.y1 * rsqrt(d * d + Rect.y1 * Rect.y1);
	float hv = h0 + E.y * (h1 - h0);
	float yv = (hv * hv < 1 - 1e-6) ? (hv * d) * rsqrt(1 - hv * hv) : Rect.y1;

	FSphericalRectSample Result;
	Result.Direction = mul(float3(xu, yv, Rect.z0), Rect.Axis);
	Result.UV = float2(xu - Rect.x0, yv - Rect.y0) / float2(Rect.x1 - Rect.x0, Rect.y1 - Rect.y0);

	return Result;
}

#line 621 "/Engine/Private/RectLight.ush"
float3 UniformSampleSphericalRect( float2 E, FSphericalRect Rect )
{
	return UniformSampleSphericalRectWithUV(E, Rect).Direction;
}

#line 651 "/Engine/Private/RectLight.ush"
FRect GetRect(
	float3 ToLight, 
	float3 LightDataDirection, 
	float3 LightDataTangent, 
	float LightDataSourceRadius, 
	float LightDataSourceLength, 
	float LightDataRectLightBarnCosAngle, 
	float LightDataRectLightBarnLength,
	bool bComputeVisibleRect)
{
	
	FRect Rect;
	Rect.Origin = ToLight;
	Rect.Axis[1] = LightDataTangent;
	Rect.Axis[2] = LightDataDirection;
	Rect.Axis[0] = cross( Rect.Axis[1], Rect.Axis[2] );
	Rect.Extent = float2(LightDataSourceRadius, LightDataSourceLength);
	Rect.FullExtent = Rect.Extent;
	Rect.Offset = 0;

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	if (bComputeVisibleRect && LightDataRectLightBarnCosAngle > 0.035f)
	{
		const float3 LightdPdv = -Rect.Axis[1];
		const float3 LightdPdu = -Rect.Axis[0];
		const float2 LightExtent = float2(LightDataSourceRadius, LightDataSourceLength);
		const float BarnLength = LightDataRectLightBarnLength;
	
		
		float3 S_Light = mul(Rect.Axis, ToLight);

		
		
		
		const float CosTheta = LightDataRectLightBarnCosAngle;
		const float SinTheta = sqrt(1 - CosTheta * CosTheta);
		const float BarnDepth = min(S_Light.z, CosTheta * BarnLength);
		const float S_ratio = BarnDepth / max(0.0001f, CosTheta * BarnLength);
		const float D_B = SinTheta * BarnLength * S_ratio;
		
		
		const float2 SignS = sign(S_Light.xy);
		S_Light.xy = SignS * max(abs(S_Light.xy), LightExtent + D_B.xx);
		
		
		const float3 C = float3(SignS * (LightExtent + D_B.xx), BarnDepth);
			
		
		
		const float3 SProj = S_Light - C;
		const float CosEta = max(SProj.z, 0.001f);
		const float2 SinEta = abs(SProj.xy);
		const float2 TanEta = abs(SProj.xy) / CosEta;
		const float2 D_S = BarnDepth * TanEta;

		
		
		
		const float2 MinXY = clamp(-LightExtent + (D_S - D_B.xx) * max(0, -SignS), -LightExtent, LightExtent);
		const float2 MaxXY = clamp( LightExtent - (D_S - D_B.xx) * max(0,  SignS), -LightExtent, LightExtent);
		const float2 RectOffset = 0.5f * (MinXY + MaxXY);

		Rect.Extent = 0.5f * (MaxXY - MinXY);
		Rect.Origin = Rect.Origin + LightdPdu * RectOffset.x + LightdPdv * RectOffset.y;
		Rect.Offset = -RectOffset;
		Rect.FullExtent = LightExtent;
	}

	return Rect;
}

#line 742 "/Engine/Private/RectLight.ush"
FRect GetRect(FLightShaderParameters In, float3 TranslatedWorldPosition)
{
	return GetRect(In.TranslatedWorldPosition - TranslatedWorldPosition,
		In.Direction,
		In.Tangent,
		In.SourceRadius,
		In.SourceLength,
		In.RectLightBarnCosAngle,
		In.RectLightBarnLength,
		true);
}

#line 754 "/Engine/Private/RectLight.ush"
bool IsRectVisible(FRect Rect)
{
	
	return Rect.Extent.x != 0 && Rect.Extent.y != 0;
}

#line 7 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLight
{
	float		SphereSinAlpha;
	float		SphereSinAlphaSoft;
	float		LineCosSubtended;

	float3		FalloffColor;

	FRect		Rect;
	FRectTexture Texture;

	uint		IsRectAndDiffuseMicroReflWeight;
};

#line 21 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};

#line 29 "/Engine/Private/AreaLightCommon.ush"
void SetIsRectLight(inout FAreaLight AreaLight, bool bIsRectLight)
{
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0xFFFFFFFE) | (bIsRectLight ? 0x1 : 0x0);
}

#line 34 "/Engine/Private/AreaLightCommon.ush"
bool IsRectLight(FAreaLight AreaLight)
{
	return (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) == 0x1;
}

#line 39 "/Engine/Private/AreaLightCommon.ush"
void SetAreaLightDiffuseMicroReflWeight(inout FAreaLight AreaLight, float Weight)
{
	
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) | (asuint(Weight) << 1);
}

#line 45 "/Engine/Private/AreaLightCommon.ush"
float GetAreaLightDiffuseMicroReflWeight(FAreaLight AreaLight)
{
	return asfloat(AreaLight.IsRectAndDiffuseMicroReflWeight >> 1);
}

#line 55 "/Engine/Private/AreaLightCommon.ush"
FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{
	
	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}

#line 10 "/Engine/Private/HairBsdf.ush"
float Hair_g(float B, float Theta)
{
	return exp(-0.5 * Pow2(Theta) / (B * B)) / (sqrt(2 * PI) * B);
}

#line 15 "/Engine/Private/HairBsdf.ush"
float Hair_F(float CosTheta)
{
	const float n = 1.55;
	const float F0 = Pow2((1 - n) / (1 + n));
	return F0 + (1 - F0) * Pow5(1 - CosTheta);
}

#line 22 "/Engine/Private/HairBsdf.ush"
float3 KajiyaKayDiffuseAttenuation(FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow)
{
	
	float KajiyaDiffuse = 1 - abs(dot(N, L));

	float3 FakeNormal = normalize(V - N * dot(V, N));
	
	N = FakeNormal;

	
	float MinValue = 0.0001f;
	float Wrap = 1;
	float NoL = saturate((dot(N, L) + Wrap) / Square(1 + Wrap));
	float DiffuseScatter = (1 / PI) * lerp(NoL, KajiyaDiffuse, 0.33) * GBuffer.Metallic;
	float Luma = Luminance(GBuffer.BaseColor);
    float3 BaseOverLuma = abs(GBuffer.BaseColor / max(Luma, MinValue));
	float3 ScatterTint = Shadow < 1 ? pow(BaseOverLuma, 1 - Shadow) : 1;
	return sqrt(abs(GBuffer.BaseColor)) * DiffuseScatter * ScatterTint;
}

#line 42 "/Engine/Private/HairBsdf.ush"
float3 EvaluateHairMultipleScattering(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float3 Fs)
{
	return TransmittanceData.GlobalScattering * (Fs + TransmittanceData.LocalScattering) * TransmittanceData.OpaqueVisibility;
}

#line 273 "/Engine/Private/HairBsdf.ush"
float3 HairShading( FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow, FHairTransmittanceData HairTransmittance, float InBacklit, float Area, uint2 Random )
{
	
	
	
	float ClampedRoughness = clamp(GBuffer.Roughness, 1/255.0f, 1.0f);

	
	const float Backlit	= min(InBacklit, HairTransmittance.bUseBacklit ? GBuffer.CustomData.z : 1);






	

	const float VoL       = dot(V,L);                                                      
	const float SinThetaL = clamp(dot(N,L), -1.f, 1.f);
	const float SinThetaV = clamp(dot(N,V), -1.f, 1.f);
	float CosThetaD = cos( 0.5 * abs( asinFast( SinThetaV ) - asinFast( SinThetaL ) ) );

	

	const float3 Lp = L - SinThetaL * N;
	const float3 Vp = V - SinThetaV * N;
	const float CosPhi = dot(Lp,Vp) * rsqrt( dot(Lp,Lp) * dot(Vp,Vp) + 1e-4 );
	const float CosHalfPhi = sqrt( saturate( 0.5 + 0.5 * CosPhi ) );
	

	float n = 1.55;
	
	float n_prime = 1.19 / CosThetaD + 0.36 * CosThetaD;

	float Shift = 0.035;
	float Alpha[] =
	{
		-Shift * 2,
		Shift,
		Shift * 4,
	};	
	float B[] =
	{
		Area + Pow2(ClampedRoughness),
		Area + Pow2(ClampedRoughness) / 2,
		Area + Pow2(ClampedRoughness) * 2,
	};

	float3 S = 0;
	if (HairTransmittance.ScatteringComponent & 0x1u)
	{
		const float sa = sin(Alpha[0]);
		const float ca = cos(Alpha[0]);
		float ShiftR = 2 * sa * (ca * CosHalfPhi * sqrt(1 - SinThetaV * SinThetaV) + sa * SinThetaV);
		float BScale = HairTransmittance.bUseSeparableR ? sqrt(2.0) * CosHalfPhi : 1;
		float Mp = Hair_g(B[0] * BScale, SinThetaL + SinThetaV - ShiftR);
		float Np = 0.25 * CosHalfPhi;
		float Fp = Hair_F(sqrt(saturate(0.5 + 0.5 * VoL)));
		S += Mp * Np * Fp * (GBuffer.Specular * 2) * lerp(1, Backlit, saturate(-VoL));
	}

	
	if (HairTransmittance.ScatteringComponent & 0x2u)
	{
		float Mp = Hair_g( B[1], SinThetaL + SinThetaV - Alpha[1] );

		float a = 1 / n_prime;
		
		
		float h = CosHalfPhi * ( 1 + a * ( 0.6 - 0.8 * CosPhi ) );
		
		
		
		
		float f = Hair_F( CosThetaD * sqrt( saturate( 1 - h*h ) ) );
		float Fp = Pow2(1 - f);
		
		
		float3 Tp = 0;
		if (HairTransmittance.bUseLegacyAbsorption)
		{
			Tp = pow(abs(GBuffer.BaseColor), 0.5 * sqrt(1 - Pow2(h * a)) / CosThetaD);
		}
		else
		{
			
			const float3 AbsorptionColor = HairColorToAbsorption(GBuffer.BaseColor);
			Tp = exp(-AbsorptionColor * 2 * abs(1 - Pow2(h * a) / CosThetaD));
		}

		
		
		
		
		
		
		float Np = exp( -3.65 * CosPhi - 3.98 );

		S += Mp * Np * Fp * Tp * Backlit;
	}

	
	if (HairTransmittance.ScatteringComponent & 0x4u)
	{
		float Mp = Hair_g( B[2], SinThetaL + SinThetaV - Alpha[2] );
		
		
		float f = Hair_F( CosThetaD * 0.5 );
		float Fp = Pow2(1 - f) * f;
		
		float3 Tp = pow(abs(GBuffer.BaseColor), 0.8 / CosThetaD );

		
		
		float Np = exp( 17 * CosPhi - 16.78 );

		S += Mp * Np * Fp * Tp;
	}


	if (HairTransmittance.ScatteringComponent & 0x20u)
	{
		S  = EvaluateHairMultipleScattering(HairTransmittance, ClampedRoughness, S);
		S += KajiyaKayDiffuseAttenuation(GBuffer, L, V, N, Shadow);
	}

	S = -min(-S, 0.0);
	return S;
}

#line 131 "/Engine/Private/ShadingModels.ush"
struct FDirectLighting
{
	float3	Diffuse;
	float3	Specular;
	float3	Transmission;
};

#line 138 "/Engine/Private/ShadingModels.ush"
struct FShadowTerms
{
	float	SurfaceShadow;
	float	TransmissionShadow;
	float	TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};

#line 145 "/Engine/Private/ShadingModels.ush"
FDirectLighting HairBxDF(FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)
{
	const float3 BsdfValue = HairShading(GBuffer, L, V, N, Shadow.TransmissionShadow, Shadow.HairTransmittance, 1, 0, uint2(0, 0));

	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * BsdfValue;
	return Lighting;
}

#line 156 "/Engine/Private/ShadingModels.ush"
float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );
	
	
}

#line 163 "/Engine/Private/ShadingModels.ush"
float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{
		
		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}

	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}

	if( AreaLight.LineCosSubtended < 1 )
	{

		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / Line_a2 );






	}

	return Energy;
}

#line 197 "/Engine/Private/ShadingModels.ush"
float3 SpecularGGX(float Roughness, float Anisotropy, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float Alpha = Roughness * Roughness;
	float a2 = Alpha * Alpha;

	FAreaLight Punctual = AreaLight;
	Punctual.SphereSinAlpha = 0;
	Punctual.SphereSinAlphaSoft = 0;
	Punctual.LineCosSubtended = 1;
	Punctual.Rect = (FRect)0;
	Punctual.IsRectAndDiffuseMicroReflWeight = 0;

	float Energy = EnergyNormalization(a2, Context.VoH, Punctual);

	float ax = 0;
	float ay = 0;
	GetAnisotropicRoughness(Alpha, Anisotropy, ax, ay);

	
	float3 D = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH) * Energy;
	float3 Vis = Vis_SmithJointAniso(ax, ay, Context.NoV, NoL, Context.XoV, Context.XoL, Context.YoV, Context.YoL);
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;
}

#line 223 "/Engine/Private/ShadingModels.ush"
float3 SpecularGGX( float Roughness, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight )
{
	float a2 = Pow4( Roughness );
	float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );
	




	
	float D = D_GGX( a2, Context.NoH ) * Energy;
	float Vis = Vis_SmithJointApprox( a2, Context.NoV, NoL );
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;

}

#line 241 "/Engine/Private/ShadingModels.ush"
float3 DualSpecularGGX(float AverageRoughness, float Lobe0Roughness, float Lobe1Roughness, float LobeMix, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float AverageAlpha2 = Pow4(AverageRoughness);
	float Lobe0Alpha2 = Pow4(Lobe0Roughness);
	float Lobe1Alpha2 = Pow4(Lobe1Roughness);

	float Lobe0Energy = EnergyNormalization(Lobe0Alpha2, Context.VoH, AreaLight);
	float Lobe1Energy = EnergyNormalization(Lobe1Alpha2, Context.VoH, AreaLight);






	
	float D = lerp(D_GGX(Lobe0Alpha2, Context.NoH) * Lobe0Energy, D_GGX(Lobe1Alpha2, Context.NoH) * Lobe1Energy, LobeMix);
	float Vis = Vis_SmithJointApprox(AverageAlpha2, Context.NoV, NoL); 
	float3 F = F_Schlick(SpecularColor, Context.VoH);

	return (D * Vis) * F;

}

#line 264 "/Engine/Private/ShadingModels.ush"
FDirectLighting DefaultLitBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	FDirectLighting Lighting;




	bool bHasAnisotropy = false;


	float NoV, VoH, NoH;
	[branch]
	if (bHasAnisotropy)
	{
		float3 X = GBuffer.WorldTangent;
		float3 Y = normalize(cross(N, X));
		Init(Context, N, X, Y, V, L);

		NoV = Context.NoV;
		VoH = Context.VoH;
		NoH = Context.NoH;
	}
	else
	{



		Init(Context, N, V, L);


		NoV = Context.NoV;
		VoH = Context.VoH;
		NoH = Context.NoH;

		SphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);
	}

	Context.NoV = saturate(abs( Context.NoV ) + 1e-5);


	
	
	Lighting.Diffuse = Diffuse_Chan(GBuffer.DiffuseColor, Pow4(GBuffer.Roughness), NoV, NoL, VoH, NoH, GetAreaLightDiffuseMicroReflWeight(AreaLight));



	Lighting.Diffuse *= AreaLight.FalloffColor * (Falloff * NoL);

	[branch]
	if (bHasAnisotropy)
	{
		
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.Anisotropy, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}
	else
	{
		if( IsRectLight(AreaLight) )
		{
			Lighting.Specular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		}
		else
		{
			Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);
		}
	}

	FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);

	
	Lighting.Diffuse *= ComputeEnergyPreservation(EnergyTerms);

	
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

	Lighting.Transmission = 0;
	return Lighting;
}

#line 369 "/Engine/Private/ShadingModels.ush"
float RefractBlendClearCoatApprox(float VoH)
{
	
	return (0.63 - 0.22 * VoH) * VoH - 0.745;
}

#line 382 "/Engine/Private/ShadingModels.ush"
BxDFContext RefractClearCoatContext(BxDFContext Context)
{
	
	
	
	
	
	
	

	BxDFContext RefractedContext = Context;
	float Eta = 1.0 / 1.5;
	float RefractionBlendFactor = RefractBlendClearCoatApprox(Context.VoH);
	float RefractionProjectionTerm = RefractionBlendFactor * Context.NoH;
	RefractedContext.NoV = clamp(Eta * Context.NoV - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.NoL = clamp(Eta * Context.NoL - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.VoH = saturate(Eta * Context.VoH - RefractionBlendFactor);
	RefractedContext.VoL = 2.0 * RefractedContext.VoH * RefractedContext.VoH - 1.0;
	RefractedContext.NoH = Context.NoH;
	return RefractedContext;
}

#line 404 "/Engine/Private/ShadingModels.ush"
FDirectLighting ClearCoatBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float ClearCoat			= GBuffer.CustomData.x;
	const float ClearCoatRoughness	= max(GBuffer.CustomData.y, 0.02f);

	FDirectLighting Lighting = {
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0)
	};
	
	BxDFContext Context;
	float3 Nspec = N;

	if (0)
	{
		Nspec = GBuffer.WorldNormal;
	}




	bool bHasAnisotropy = false;


	float3 X = 0;
	float3 Y = 0;

	
	
	

	
	Init(Context, Nspec, V, L);
	
	
	
	float SphereSinAlpha = AreaLight.SphereSinAlpha;
	float RoughnessCompensation = 1 - Pow2(GBuffer.Roughness);
	float Alpha = ClearCoatRoughness * ClearCoatRoughness;
	RoughnessCompensation = RoughnessCompensation > 0.0 ? (1 - Alpha) / RoughnessCompensation : 0.0;
	AreaLight.SphereSinAlpha = saturate(AreaLight.SphereSinAlpha * RoughnessCompensation);

	SphereMaxNoH(Context, AreaLight.SphereSinAlpha, 0 == 0);
	Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;

	
	float F0 = 0.04;
	float Fc = Pow5(1 - Context.VoH);
	float F = Fc + (1 - Fc) * F0;

	FBxDFEnergyTermsRGB EnergyTermsCoat   = ComputeGGXSpecEnergyTermsRGB(ClearCoatRoughness, Context.NoV, F0);

	if (bIsRect)
	{
		Lighting.Specular = ClearCoat * RectGGXApproxLTC(ClearCoatRoughness, F0, Nspec, V, AreaLight.Rect, AreaLight.Texture);
	}
	else
	{
		
		float a2 = Pow2(Alpha);
		float ClearCoatEnergy = EnergyNormalization(a2, Context.VoH, AreaLight);
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);




		float D = D_GGX(a2, Context.NoH) * ClearCoatEnergy;

		float Fr1 = (D * Vis) * F;
		Lighting.Specular = ClearCoat * AreaLight.FalloffColor * (Falloff * NoL * Fr1);
	}
	Lighting.Specular *= ComputeEnergyConservation(EnergyTermsCoat);

	
	
	AreaLight.SphereSinAlpha = SphereSinAlpha;
	Alpha = Pow2(GBuffer.Roughness);

	
	
	
	float3 FresnelCoeff = ComputeEnergyPreservation(EnergyTermsCoat); 
	



	FresnelCoeff *= FresnelCoeff;

	
	
	

	if (0)
	{
		BxDFContext TempContext;

		[branch]
		if (bHasAnisotropy)
		{
			Init(TempContext, N, X, Y, V, L);
		}
		else
		{
			Init(TempContext, Nspec, V, L);
		}

		
		float3 H = normalize(V + L);
		Context.NoH = saturate(dot(N, H));
		Context.NoV = saturate(dot(N, V));
		Context.NoL = saturate(dot(N, L));
		Context.VoL = saturate(dot(V, L));
		Context.VoH = saturate(dot(V, H));

		Context.XoV = TempContext.XoV;
		Context.XoL = TempContext.XoL;
		Context.XoH = TempContext.XoH;
		Context.YoV = TempContext.YoV;
		Context.YoL = TempContext.YoL;
		Context.YoH = TempContext.YoH;

		if (!bHasAnisotropy)
		{
			bool bNewtonIteration = true;
			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, bNewtonIteration);
		}

		Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	}

	
	
	
	
	
	
	
	
	
	if (bHasAnisotropy)
	{
		
		X = GBuffer.WorldTangent;
		Y = normalize(cross(N, X));
		Init(Context, Nspec, X, Y, V, L);
	}
	BxDFContext BottomContext = RefractClearCoatContext(Context);
	BottomContext.VoH = bIsRect ? BottomContext.NoV : BottomContext.VoH;

	FBxDFEnergyTermsRGB EnergyTermsBottom = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, BottomContext.NoV, GBuffer.SpecularColor);

	
	float3 Transmission = SimpleClearCoatTransmittance(BottomContext.NoL, BottomContext.NoV, GBuffer.Metallic, GBuffer.BaseColor);

	
	float3 DefaultDiffuse = (Falloff * NoL) * AreaLight.FalloffColor * Diffuse_Lambert(GBuffer.DiffuseColor) * ComputeEnergyPreservation(EnergyTermsBottom);
	float3 RefractedDiffuse = FresnelCoeff * Transmission * DefaultDiffuse;
	Lighting.Diffuse = lerp(DefaultDiffuse, RefractedDiffuse, ClearCoat);

	if (!bHasAnisotropy && bIsRect)
	{
		
		float3 DefaultSpecular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 RefractedSpecular = FresnelCoeff * Transmission * DefaultSpecular;
		Lighting.Specular += lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}
	else
	{
		float a2 = Pow4(GBuffer.Roughness);
		float D2 = 0;
		float Vis2 = 0;

		[branch]
		if (bHasAnisotropy)
		{
			float ax = 0;
			float ay = 0;
			GetAnisotropicRoughness(Alpha, GBuffer.Anisotropy, ax, ay); 

			D2 = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH);
			Vis2 = Vis_SmithJointAniso(ax, ay, BottomContext.NoV, BottomContext.NoL, BottomContext.XoV, BottomContext.XoL, BottomContext.YoV, BottomContext.YoL);
		}
		else
		{
			
			Vis2 = Vis_SmithJointApprox(a2, BottomContext.NoV, NoL);




			D2 = D_GGX(a2, BottomContext.NoH);

		}
		float3 F_Bot = F_Schlick(GBuffer.SpecularColor, BottomContext.VoH);
		float3 F_DefaultLit = F_Schlick(GBuffer.SpecularColor, Context.VoH);
		
		float Energy = 0;

		[branch]
		if (bHasAnisotropy)
		{
			FAreaLight Punctual = AreaLight;
			Punctual.SphereSinAlpha = 0;
			Punctual.SphereSinAlphaSoft = 0;
			Punctual.LineCosSubtended = 1;
			Punctual.Rect = (FRect)0;
			Punctual.IsRectAndDiffuseMicroReflWeight = 0;
			
			Energy = EnergyNormalization(a2, Context.VoH, Punctual);
		}
		else
		{
			Energy = EnergyNormalization(a2, Context.VoH, AreaLight);
		}

		
		float3 CommonSpecular = (Energy * Falloff * NoL * D2 * Vis2) * AreaLight.FalloffColor;
		float3 DefaultSpecular = F_DefaultLit;
		float3 RefractedSpecular = FresnelCoeff * Transmission * F_Bot;
		Lighting.Specular += CommonSpecular * lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}

	return Lighting;
}

#line 644 "/Engine/Private/ShadingModels.ush"
void GetProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{

	GetSubsurfaceProfileDualSpecular(SubsurfaceProfileInt, Roughness, Opacity, LobeRoughness0, LobeRoughness1, LobeMix);






}

#line 656 "/Engine/Private/ShadingModels.ush"
FDirectLighting SubsurfaceProfileBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;



	Init( Context, N, V, L );

	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	uint SubsurfaceProfileId = ExtractSubsurfaceProfileInt(GBuffer);
	float Opacity = GBuffer.CustomData.a;
	float Roughness = GBuffer.Roughness;

	float Lobe0Roughness = 0;
	float Lobe1Roughness = 0;
	float LobeMix = 0;

	GetProfileDualSpecular(SubsurfaceProfileId, Roughness, Opacity, Lobe0Roughness, Lobe1Roughness, LobeMix);
	float AverageRoughness = lerp(Lobe0Roughness, Lobe1Roughness, LobeMix);

	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(AverageRoughness, Context.NoV, GBuffer.SpecularColor);

	FDirectLighting Lighting;
#line 694 "/Engine/Private/ShadingModels.ush"



	
	const float3 DiffuseReflection = Diffuse_Chan(GBuffer.DiffuseColor, Pow4(GBuffer.Roughness), Context.NoV, NoL, Context.VoH, Context.NoH, GetAreaLightDiffuseMicroReflWeight(AreaLight));




	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * DiffuseReflection;


	if (IsRectLight(AreaLight))
	{
		float3 Lobe0Specular = RectGGXApproxLTC(Lobe0Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 Lobe1Specular = RectGGXApproxLTC(Lobe1Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		Lighting.Specular = lerp(Lobe0Specular, Lobe1Specular, LobeMix);
	}
	else
	{
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * DualSpecularGGX(AverageRoughness, Lobe0Roughness, Lobe1Roughness, LobeMix, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}

	Lighting.Diffuse  *= ComputeEnergyPreservation(EnergyTerms);
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

#line 734 "/Engine/Private/ShadingModels.ush"


	Lighting.Transmission = 0;



	return Lighting;
}

#line 743 "/Engine/Private/ShadingModels.ush"
FDirectLighting ClothBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float3 FuzzColor	= ExtractSubsurfaceColor(GBuffer);
	const float  Cloth		= saturate(GBuffer.CustomData.a);

	BxDFContext Context;



	Init( Context, N, V, L );

	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	float3 Spec1;
	if(IsRectLight(AreaLight))
		Spec1 = RectGGXApproxLTC( GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture );
	else
		Spec1 = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX( GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight );

	const FBxDFEnergyTermsRGB EnergyTerms1 = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);
	Spec1 *= ComputeEnergyConservation(EnergyTerms1);

	
	float D2 = D_InvGGX( Pow4( GBuffer.Roughness ), Context.NoH );
	float Vis2 = Vis_Cloth( Context.NoV, NoL );



	float3 F2 = F_Schlick( FuzzColor, Context.VoH );
	float3 Spec2 = AreaLight.FalloffColor * (Falloff * NoL) * (D2 * Vis2) * F2;
	
	const FBxDFEnergyTermsA EnergyTerms2 = ComputeClothEnergyTermsA(GBuffer.Roughness, Context.NoV);
	Spec2 *= ComputeEnergyConservation(EnergyTerms2);

	FDirectLighting Lighting;
	Lighting.Diffuse  = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert( GBuffer.DiffuseColor ); 
	Lighting.Specular = lerp( Spec1, Spec2, Cloth );
	Lighting.Transmission = 0;

	Lighting.Diffuse *= lerp(ComputeEnergyPreservation(EnergyTerms1), ComputeEnergyPreservation(EnergyTerms2), Cloth);

	return Lighting;
}

#line 788 "/Engine/Private/ShadingModels.ush"
FDirectLighting SubsurfaceBxDF(FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow);

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;

	
	
	float InScatter = pow(saturate(dot(L, -V)), 12) * lerp(3, .1f, Opacity);

	
	
	
	
	
	
	const float WrappedDiffuse = pow(saturate(dot(N, L) * (1.f / 1.5f) + (0.5f / 1.5f)), 1.5f) * (2.5f / 1.5f);
	const float NormalContribution = lerp(1.f, WrappedDiffuse, Opacity);
	const float BackScatter = GBuffer.GBufferAO * NormalContribution / (PI * 2);

	
	
	
	
	
	const float3 ExtinctionCoefficients = TransmittanceToExtinction(SubsurfaceColor, View_SubSurfaceColorAsTransmittanceAtDistanceInMeters);
	const float3 RawTransmittedColor = ExtinctionToTransmittance(ExtinctionCoefficients, 1.0f );
	const float3 TransmittedColor = HSV_2_LinearRGB(float3(LinearRGB_2_HSV(RawTransmittedColor).xy, LinearRGB_2_HSV(SubsurfaceColor).z));

	
	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * lerp(BackScatter, 1, InScatter)) * lerp(TransmittedColor, SubsurfaceColor, Shadow.TransmissionThickness);

	return Lighting;
}

#line 824 "/Engine/Private/ShadingModels.ush"
FDirectLighting TwoSidedBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);

	
	float Wrap = 0.5;
	float WrapNoL = saturate( ( -dot(N, L) + Wrap ) / Square( 1 + Wrap ) );

	
	float VoL = dot(V, L);



	float Scatter = D_GGX( 0.6*0.6, saturate( -VoL ) );


	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * WrapNoL * Scatter) * SubsurfaceColor;

	return Lighting;
}

#line 847 "/Engine/Private/ShadingModels.ush"
FDirectLighting EyeBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{









	const float3 IrisNormal		= OctahedronToUnitVector( GBuffer.CustomData.yz * 2 - 1 );
	const float  IrisDistance	= GBuffer.StoredMetallic;
	const float  IrisMask		= 1.0f - GBuffer.CustomData.w;

	
	
	
	
	const float3 CausticNormal = normalize(lerp(IrisNormal, -N, IrisMask*IrisDistance));


	BxDFContext Context;



	Init( Context, N, V, L );

	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, false );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;
	
	
	float F0 = GBuffer.Specular * 0.08;
	float Fc = Pow5( 1 - Context.VoH );
	float F = Fc + (1 - Fc) * F0;
	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(GBuffer.Roughness, Context.NoV, F0);

	FDirectLighting Lighting;

	if( bIsRect )
	{
		Lighting.Specular = RectGGXApproxLTC( GBuffer.Roughness, F0, N, V, AreaLight.Rect, AreaLight.Texture );
	}
	else
	{
		float a2 = Pow4( GBuffer.Roughness );
		float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );
		
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);




		float D = D_GGX(a2, Context.NoH) * Energy;

		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * D * Vis * F;
	}

	float IrisNoL = saturate( dot( IrisNormal, L ) );
	float Power = lerp( 12, 1, IrisNoL );
	float Caustic = 0.8 + 0.2 * ( Power + 1 ) * pow( saturate( dot( CausticNormal, L ) ), Power );
	float Iris = IrisNoL * Caustic;
	float Sclera = NoL;
	
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);


	const float3 EnergyPreservation = ComputeEnergyPreservation(EnergyTerms);





	Lighting.Diffuse = 0;
	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp( Sclera, Iris, IrisMask ) * EnergyPreservation ) * Diffuse_Lambert( GBuffer.DiffuseColor );
#line 944 "/Engine/Private/ShadingModels.ush"

	return Lighting;
}

#line 948 "/Engine/Private/ShadingModels.ush"
FDirectLighting PreintegratedSkinBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
	
	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;

	float3 PreintegratedBRDF = Texture2DSampleLevel(View_PreIntegratedBRDF, View_PreIntegratedBRDFSampler, float2(saturate(dot(N, L) * .5 + .5), 1 - Opacity), 0).rgb;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * PreintegratedBRDF * SubsurfaceColor;

	return Lighting;
}

#line 961 "/Engine/Private/ShadingModels.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	switch( GBuffer.ShadingModelID )
	{
		case 1:
		case 10:
		case 11:
			return DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 2:
			return SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 3:
			return PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 4:
			return ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 5:
			return SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 6:
			return TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 7:
			return HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 8:
			return ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case 9:
			return EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		default:
			return (FDirectLighting)0;
	}
}

#line 990 "/Engine/Private/ShadingModels.ush"
FDirectLighting EvaluateBxDF( FGBufferData GBuffer, float3 N, float3 V, float3 L, float NoL, FShadowTerms Shadow )
{
	FAreaLight AreaLight;
	AreaLight.SphereSinAlpha = 0;
	AreaLight.SphereSinAlphaSoft = 0;
	AreaLight.LineCosSubtended = 1;
	AreaLight.FalloffColor = 1;
	AreaLight.Rect = (FRect)0;
	AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	AreaLight.Texture = InitRectTexture();

	return IntegrateBxDF( GBuffer, N, V, L, 1, NoL, AreaLight, Shadow );
}

#line 12 "/Engine/Private/HairStrands/HairStrandsCommon.ush"
struct FHairAverageScattering
{
	float3 A_front;	
	float3 A_back;	
};

#line 18 "/Engine/Private/HairStrands/HairStrandsCommon.ush"
float3 FromLinearAbsorption(float3 In) { return sqrt(In);  }

#line 21 "/Engine/Private/HairStrands/HairStrandsCommon.ush"
FHairAverageScattering SampleHairLUT(Texture3D<float4> LUTTexture, SamplerState LUTSampler, float3 InAbsorption, float Roughness, float SinViewAngle)
{
	const float3 RemappedAbsorption = FromLinearAbsorption(InAbsorption);
	const float2 LUTValue_R = LUTTexture.SampleLevel(LUTSampler, float3(saturate(abs(SinViewAngle)), saturate(Roughness), saturate(RemappedAbsorption.x)), 0).xy;
	const float2 LUTValue_G = LUTTexture.SampleLevel(LUTSampler, float3(saturate(abs(SinViewAngle)), saturate(Roughness), saturate(RemappedAbsorption.y)), 0).xy;
	const float2 LUTValue_B = LUTTexture.SampleLevel(LUTSampler, float3(saturate(abs(SinViewAngle)), saturate(Roughness), saturate(RemappedAbsorption.z)), 0).xy;

	FHairAverageScattering Output;
	Output.A_front = float3(LUTValue_R.x, LUTValue_G.x, LUTValue_B.x);
	Output.A_back  = float3(LUTValue_R.y, LUTValue_G.y, LUTValue_B.y);
	return Output;
}

#line 7 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceCommon.ush"
struct FHairTransmittanceMask
{
	float HairCount;
	float Visibility;
};

#line 13 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceCommon.ush"
FHairTransmittanceMask InitHairTransmittanceMask()
{
	FHairTransmittanceMask Out;
	Out.HairCount = 0;
	Out.Visibility = 1;
	return Out;
}

#line 21 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceCommon.ush"
FHairTransmittanceMask InitHairTransmittanceMask(float HairCount, float Visibility)
{
	FHairTransmittanceMask Out;
	Out.HairCount = HairCount;
	Out.Visibility = Visibility;
	return Out;
}

#line 12 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
float Hair_g2(float Variance,float Theta)
{
	
	const float A = 1.f;
	return A * exp(-0.5 * Pow2(Theta) / Variance);
}

#line 20 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
FHairTransmittanceData ComputeDualScatteringTerms(
	const FHairTransmittanceMask TransmittanceMask,
	const FHairAverageScattering AverageScattering,
	float Roughness,
	const float Backlit,
	const float3 V,
	const float3 L,
	const float3 T,
	const uint HairComponents)
{
	const float SinThetaL = clamp(dot(T, L), -1, 1);
	const float SinThetaV = clamp(dot(T, V), -1, 1);
	const float CosThetaL = sqrt(1 - SinThetaL * SinThetaL);
	const float MaxAverageScatteringValue = 0.99f;

	
	const float3 af	 = min(MaxAverageScatteringValue.xxx, AverageScattering.A_front);
	const float3 af2 = Pow2(af);
	const float3 ab  = min(MaxAverageScatteringValue.xxx, AverageScattering.A_back);
	const float3 ab2 = Pow2(ab);
	const float3 OneMinusAf2 = 1 - af2;

	const float3 A1 = ab * af2 / OneMinusAf2;
	const float3 A3 = ab * ab2 * af2 / (OneMinusAf2*Pow2(OneMinusAf2));
	const float3 Ab = A1 + A3;

	
	
	
	Roughness = clamp(Roughness, 0.18f, 0.6f);
	const float Beta_R	 = Pow2( Roughness );
	const float Beta_TT	 = Pow2( Roughness / 2 ); 
	const float Beta_TRT = Pow2( Roughness * 2 ); 

	const float Shift     = 0.035;
	const float Shift_R   =-0.035*2;
	const float Shift_TT  = 0.035;
	const float Shift_TRT = 0.035*4;

	
	const float df = 0.7f;
	const float db = 0.7f;

	
	
	const float HairCount = max(0, TransmittanceMask.HairCount - 1);

	
	
	const float3 af_weights = af / (af.r + af.g + af.b);
	const float3 Beta_f  = dot(float3(Beta_R, Beta_TT, Beta_TRT), af_weights);
	const float3 Beta_f2 = Beta_f*Beta_f;
	const float3 sigma_f2 = Beta_f2 * max(1.f, HairCount);

	const float Theta_d = asin(SinThetaL) + asin(SinThetaV);
	const float Theta_h = Theta_d * 0.5f;

	
	float3 Sf = float3(	Hair_g2(sigma_f2.r, Theta_h), 
						Hair_g2(sigma_f2.g, Theta_h), 
						Hair_g2(sigma_f2.b, Theta_h)) / PI;
	const float3 Tf = pow(AverageScattering.A_front, HairCount);

	
	const float3 shift_f = dot(float3(Shift_R, Shift_TT, Shift_TRT), af_weights);
	const float3 shift_b = shift_f;
	const float3 delta_b = shift_b * (1 - 2*ab2 / Pow2(1 - af2)) * shift_f * (2 * Pow2(1 - af2) + 4*af2*ab2)/Pow3(1-af2);

	const float3 ab_weights = ab / (ab.r + ab.g + ab.b);
	const float3 Beta_b  = dot(float3(Beta_R, Beta_TT, Beta_TRT), ab_weights);
	const float3 Beta_b2 = Beta_b * Beta_b;

	const float3 sigma_b = (1 + db*af2) * (ab*sqrt(2*Beta_f2 + Beta_b2) + ab*ab2*sqrt(2*Beta_f2 + Beta_b2)) / (ab + ab*ab2*(2*Beta_f + 3*Beta_b));
	const float3 sigma_b2 = sigma_b * sigma_b;

	
	
	float3 Sb = float3(	Hair_g2(sigma_f2.r + sigma_b2.r, Theta_h - delta_b.r),
						Hair_g2(sigma_f2.g + sigma_b2.g, Theta_h - delta_b.g),
						Hair_g2(sigma_f2.b + sigma_b2.b, Theta_h - delta_b.b)) / PI;


	
	const float3 GlobalScattering = lerp(1, Tf * Sf * df, saturate(HairCount));
	const float3 LocalScattering  = 2 * Ab * Sb * db;
	
	
	FHairTransmittanceData Out = InitHairStrandsTransmittanceData();
	Out.ScatteringComponent = HairComponents | 0x20u;
	Out.GlobalScattering = (HairComponents & 0x10u) > 0 ? GlobalScattering : 1;
	Out.LocalScattering  = (HairComponents & 0x8u) > 0 ? LocalScattering : 0;
	Out.bUseLegacyAbsorption = (HairComponents & 0x40u) == 0;
	Out.OpaqueVisibility = TransmittanceMask.Visibility;
	return Out;
	
	
}

#line 186 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
FHairTransmittanceData EvaluateDualScattering(inout float3 BaseColor, float3 WorldNormal, float Roughness, float3 V, float3 L)
{
	
	BaseColor = max(0.0001f, BaseColor);

	
	const float SinLightAngle = dot(L, WorldNormal);
	const FHairAverageScattering AverageScattering = SampleHairLUT(View_HairScatteringLUTTexture, View_HairScatteringLUTSampler, BaseColor, Roughness, SinLightAngle);

	return ComputeDualScatteringTerms(
		InitHairTransmittanceMask(),
		AverageScattering,
		Roughness,
		1, 
		V,
		L,
		WorldNormal,
		View_HairComponents);
}

#line 206 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
FHairTransmittanceData EvaluateDualScattering(inout FGBufferData GBuffer, float3 V, float3 L)
{
	 { };
	return EvaluateDualScattering(GBuffer.BaseColor, GBuffer.WorldNormal, GBuffer.Roughness, V, L);
}

#line 72 "/Engine/Private/HairStrands/HairStrandsEnvironmentLightingCommon.ush"
float3 EvaluateEnvHair(FGBufferData GBuffer, float3 V, float3 N, inout float3 OutL)
{
	const float Shadow = 1;
	const float Backlit = 0;
	const float Area = 0.2f;
	const uint2 Random = uint2(0, 0);

	
	
	
	OutL = normalize(V - N * dot(V, N));

	FHairTransmittanceData TransmittanceData = InitHairTransmittanceData(true);






	return min(1.f, 2 * PI * HairShading(GBuffer, OutL, V, N, Shadow, TransmittanceData, Backlit, Area, Random));
}

#line 79 "/Engine/Private/Strata/StrataEvaluation.ush"
float3 StrataGetOffSpecularPeakReflectionDir(float3 Normal, float3 ReflectionVector, float Roughness)
{
	
	

	float a = Square(Roughness);
	return lerp(Normal, ReflectionVector, (1 - a) * (sqrt(1 - a) + a));



}

#line 94 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataBSDFContext
{
	FStrataBSDF BSDF;

	float3 N;
	float3 X;
	float3 Y;
	float3 V;
	float3 R;
	float3 H;
	float3 B;

	float3 L;	

	BxDFContext Context;
	float SatNoL;
	float SatNoV;

	float3x3 TangentBasis;
	float3 TangentV;
	float3 TangentH;
	float3 TangentB; 
	float3 TangentL;
	
	uint2 PixelCoord; 

	void StrataUpdateBSDFContext(float3 NewL);
};

#line 123 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(float3x3 TangentBasis, FStrataBSDF BSDF, float3 V, float3 L, bool bHasValidL=true, uint2 InPixelCoord=0)
{
	FStrataBSDFContext BSDFContext = (FStrataBSDFContext)0;

	BSDFContext.BSDF = BSDF;

	BSDFContext.X = TangentBasis[0]; 
	BSDFContext.Y = TangentBasis[1];
	BSDFContext.N = TangentBasis[2]; 
	BSDFContext.V = V;
	BSDFContext.R = 2 * dot(BSDFContext.V, BSDFContext.N) * BSDFContext.N - BSDFContext.V;
	BSDFContext.L = bHasValidL ? L : BSDFContext.R;
	BSDFContext.H = normalize(BSDFContext.V + BSDFContext.L);
	BSDFContext.B = normalize(BSDFContext.R + BSDFContext.L);

	BSDFContext.Context = (BxDFContext)0;

	if (  uint(( BSDF .State >>( 0 )) &  ((1u<<( 1 ))-1)) != 0)
	{
		Init(BSDFContext.Context, BSDFContext.N, BSDFContext.X, BSDFContext.Y, BSDFContext.V, BSDFContext.L);
	}
	else

	{
		Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, BSDFContext.L);
	}
	BSDFContext.TangentBasis = float3x3(BSDFContext.X, BSDFContext.Y, BSDFContext.N);

	BSDFContext.TangentV = mul(BSDFContext.TangentBasis, BSDFContext.V);
	BSDFContext.TangentH = mul(BSDFContext.TangentBasis, BSDFContext.H);
	BSDFContext.TangentB = mul(BSDFContext.TangentBasis, BSDFContext.B);
	BSDFContext.TangentL = normalize(mul(BSDFContext.TangentBasis, BSDFContext.L));

	BSDFContext.SatNoL = saturate(BSDFContext.Context.NoL);
	BSDFContext.SatNoV = saturate(BSDFContext.Context.NoV);








	BSDFContext.PixelCoord = InPixelCoord;

	return BSDFContext;
}

#line 171 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(FStrataPixelHeader StrataPixelHeader, FStrataBSDF BSDF, const FStrataAddressing StrataAddressing, float3 V)
{
	float3 UnusedL = float3(0, 0, 1);
	float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
	return StrataCreateBSDFContext(TangentBasis, BSDF, V, UnusedL, false, StrataAddressing.PixelCoords);
}

#line 178 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(FStrataPixelHeader StrataPixelHeader, FStrataBSDF BSDF, const FStrataAddressing StrataAddressing, float3 V, float3 L)
{
	float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
	return StrataCreateBSDFContext(TangentBasis, BSDF, V, L, true, StrataAddressing.PixelCoords);
}

#line 184 "/Engine/Private/Strata/StrataEvaluation.ush"
void FStrataBSDFContext::StrataUpdateBSDFContext(float3 NewL)
{
	
	this.L = NewL;
	Init(this.Context, this.N, this.V, this.L);
	this.R		 = 2 * dot(this.V, this.N) * this.N - this.V;
	this.H		 = normalize(this.V + this.L);
	this.B		 = normalize(this.R + this.L);

	this.TangentH = mul(this.TangentBasis, this.H);
	this.TangentB = mul(this.TangentBasis, this.B);
	this.TangentL = normalize(mul(this.TangentBasis, this.L));

	this.SatNoL	 = saturate(this.Context.NoL);
	this.SatNoV	 = saturate(this.Context.NoV);
}

#line 204 "/Engine/Private/Strata/StrataEvaluation.ush"
float3 LuminanceWeight(in float SatNoL, in FStrataBSDF InBSDF)
{

	
	
	
	
	
	
	
	
	const float DistanceL = rcp(max(SatNoL, 0.001f));
	const float3 TransmittanceAboveAlongL = any(InBSDF.TransmittanceAboveAlongN < 1.f) ? pow(max(InBSDF.TransmittanceAboveAlongN, 0.0001f), DistanceL) : InBSDF.TransmittanceAboveAlongN;
	return InBSDF.LuminanceWeightV * lerp(1.0f, TransmittanceAboveAlongL, InBSDF.CoverageAboveAlongN);



}

#line 223 "/Engine/Private/Strata/StrataEvaluation.ush"
float3 LuminanceWeight(in FStrataBSDFContext InContext, in FStrataBSDF InBSDF)
{
	return LuminanceWeight(InContext.SatNoL, InBSDF);
}

#line 228 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_D_GGX(float Roughness, float a2, float NoH)
{



	return D_GGX(a2, NoH);

}

#line 237 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_D_GGX_Aniso(float ax, float ay, float NoH, float XoH, float YoH)
{
	return D_GGXaniso(ax, ay, NoH, XoH, YoH);
}

#line 242 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_Vis_GGX(float Roughness, float a2, float NoV, float NoL)
{





	return Vis_SmithJointApprox(a2, NoV, NoL);

}

#line 253 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_Vis_GGX_Aniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	
	return Vis_SmithJointAniso(ax, ay, NoV, NoL, XoV, XoL, YoV, YoL);
}

#line 259 "/Engine/Private/Strata/StrataEvaluation.ush"
float3 Strata_F_GGX(float3 F0, float3 F90, float VoH)
{




	return F_Schlick(F0, F90, VoH);

}

#line 272 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataEvaluateResult
{
	float3 IntegratedDiffuseValue;
	float3 IntegratedSpecularValue;

	
	float3 DiffuseColor;

	float3 EmissivePathValue;

	float3 DiffusePathValue;
	float3 SpecularPathValue;
	float3 SpecularHazePathValue;
	float3 TransmissionPathValue;

	
	
	float SpecularPathProbability;
	float SpecularHazePathProbability;

	float  DiffusePDF;
	float  SpecularPDF;
	float  SpecularHazePDF;
	float  TransmissionPDF;

	float3 ThroughputV;					
	float3 TransmittanceAlongN;			
	bool   bSubsurface;					
	bool   bApplyProjectedSolidAngle;	
};

#line 309 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEvaluateResult StrataEvaluateBSDFCommon(FStrataBSDFContext BSDFContext, FShadowTerms ShadowTerms, FAreaLightIntegrateContext AreaLightContext, FStrataIntegrationSettings Settings, int IntegrationType)
{
	FStrataEvaluateResult Sample = (FStrataEvaluateResult)0;

	const float OpaqueBSDFThroughput = 0.0f;

	const uint BSDFType =   uint(( BSDFContext.BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	switch (BSDFType)
	{
		case 0:
		{
			float3 DiffuseColor			=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0					=   BSDFContext.BSDF .VGPRs[1].xyz;
			float3 F90					=   BSDFContext.BSDF .VGPRs[2].xyz;
			const float SafeRoughness	= MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);
			const bool bHasAnisotropy	=   uint(( BSDFContext.BSDF .State >>( 0 )) &  ((1u<<( 1 ))-1));
			const bool bHaziness		=   uint(( BSDFContext.BSDF .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1));

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			float Alpha2Spec = Pow4(SafeRoughness);

			float NoV, VoH, NoH;
		
			[branch]
			if (bHasAnisotropy)
			{
				Init(BSDFContext.Context, BSDFContext.N, BSDFContext.X, BSDFContext.Y, BSDFContext.V, AreaLightContext.L);

				NoV = BSDFContext.Context.NoV;
				VoH = BSDFContext.Context.VoH;
				NoH = BSDFContext.Context.NoH;
			}
			else
		
			{
				Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, AreaLightContext.L);

				NoV = BSDFContext.Context.NoV;
				VoH = BSDFContext.Context.VoH;
				NoH = BSDFContext.Context.NoH;

				SphereMaxNoH(BSDFContext.Context, AreaLightContext.AreaLight.SphereSinAlpha, true);
			}
			BSDFContext.Context.NoV = saturate(max(abs(BSDFContext.Context.NoV), 1e-10f));

			
			
			

			if (Settings.bRoughDiffuseEnabled && any(DiffuseColor > 0))
			{
				
				
				
				
				Sample.DiffusePathValue = Diffuse_Chan(DiffuseColor, Alpha2Spec, NoV, AreaLightContext.NoL, VoH, NoH, GetAreaLightDiffuseMicroReflWeight(AreaLightContext.AreaLight));
			}
			else

			{
				Sample.DiffusePathValue = Diffuse_Lambert(DiffuseColor);
			}
			Sample.IntegratedDiffuseValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * Sample.DiffusePathValue * AreaLightContext.AreaLight.FalloffColor;
			Sample.DiffuseColor		= DiffuseColor;
			Sample.DiffusePDF		= BSDFContext.SatNoL / PI;
			Sample.bSubsurface		=   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u) ||   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);




			
			
			
			
			

			const bool bIsRectLight = IntegrationType == 2;

			
			float PDF = 0;
			float DirectionalAlbedo_SpecularTransmission = 1.0f;
			{
				float3 MSScale = 1.0f;
				{
					FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
					DirectionalAlbedo_SpecularTransmission = ComputeEnergyPreservation(EnergyTerms);
					MSScale = ComputeEnergyConservation(EnergyTerms);
				}
				
				
				
				Sample.DiffusePathValue *= DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue *= DirectionalAlbedo_SpecularTransmission;
			
				float D = 0;
				float Vis = 0;

				float3 RectLightSpec = 0;
				
				[branch]
				if (bHasAnisotropy)
				{
					
					{
						float  Alpha  = Square(SafeRoughness);
						float2 AlphaXY = 0;
						GetAnisotropicRoughness(Alpha,   BSDFContext.BSDF .VGPRs[1].w, AlphaXY.x, AlphaXY.y);

					











						{
							D = Strata_D_GGX_Aniso(AlphaXY.x, AlphaXY.y, BSDFContext.Context.NoH, BSDFContext.Context.XoH, BSDFContext.Context.YoH);
						}

						Vis = Strata_Vis_GGX_Aniso(AlphaXY.x, AlphaXY.y, BSDFContext.Context.NoV, BSDFContext.SatNoL, BSDFContext.Context.XoV, BSDFContext.Context.XoL, BSDFContext.Context.YoV, BSDFContext.Context.YoL);
						const float H_PDF = VisibleGGXPDF_aniso(BSDFContext.TangentV, BSDFContext.TangentH, AlphaXY);
						PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
					}
				}
				else
				
				{
					[branch]
					if (bIsRectLight)
					{
						
						{
							float3 MeanLightWorldDirection = 0.0f;
							RectLightSpec = RectGGXApproxLTC(SafeRoughness, F0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture, MeanLightWorldDirection);
							
							
						
#line 470 "/Engine/Private/Strata/StrataEvaluation.ush"


							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
							PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
					else
					{
						

						
						{
							if(IntegrationType == 0)
							{
							









								{
									D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
								}
							}
							else
							{
								const float Energy = EnergyNormalization(Alpha2Spec, BSDFContext.Context.VoH, AreaLightContext.AreaLight);

							









								{
									D = Energy * Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
								}
							}

							Vis = Strata_Vis_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoV, AreaLightContext.NoL);
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
							PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
				}

				if (bIsRectLight)
				{
					Sample.SpecularPathValue = MSScale * RectLightSpec;
				}
				else
				{
					const float3 FresnelTerm = Strata_F_GGX(F0, F90, BSDFContext.Context.VoH);
					Sample.SpecularPathValue = D * Vis * MSScale * FresnelTerm;
				}

				Sample.SpecularPathProbability     = 1.0f;
				Sample.SpecularHazePathProbability = 0.0f;
				Sample.IntegratedSpecularValue = Sample.SpecularPathValue;
			}

			
			float HazePDF = 0;
			
			[branch]
			if (bHaziness)
			{
				
				float3 HazeF0 = F0;
				float3 HazeF90= F90;
			
				const FHaziness Haziness = UnpackHaziness(  BSDFContext.BSDF .Haziness);
				const float HazeWeight = Haziness.Weight;
				const float HazeSafeRoughness = MakeRoughnessSafe(Haziness.Roughness);
				const bool bHazeAsSimpleClearCoat = Haziness.bSimpleClearCoat;

				if (bHazeAsSimpleClearCoat)
				{
					HazeF0 = 0.04f;
					HazeF90 = 1.0f;
					
				}

				FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(HazeSafeRoughness, BSDFContext.Context.NoV, HazeF0, HazeF90);
				float3 HazeMSScale = ComputeEnergyConservation(EnergyTerms);

				float HazeD = 0;
				float HazeVis = 0;

				float3 RectLightSpecHaze = 0;
				
				[branch]
				if (bHasAnisotropy)
				{
					{
						float2 HazeAlpha = 0;
						GetAnisotropicRoughness(HazeSafeRoughness,   BSDFContext.BSDF .VGPRs[1].w, HazeAlpha.x, HazeAlpha.y);

						HazeD   = Strata_D_GGX_Aniso(HazeAlpha.x, HazeAlpha.y, BSDFContext.Context.NoH, BSDFContext.Context.XoH, BSDFContext.Context.YoH);
						HazeVis = Strata_Vis_GGX_Aniso(HazeAlpha.x, HazeAlpha.y, BSDFContext.Context.NoV, BSDFContext.Context.NoL, BSDFContext.Context.XoV, BSDFContext.Context.XoL, BSDFContext.Context.YoV, BSDFContext.Context.YoL);
						const float H_PDF = VisibleGGXPDF_aniso(BSDFContext.TangentV, BSDFContext.TangentH, HazeAlpha);
						HazePDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
					}
				}
				else
				
				{
					if (bIsRectLight)
					{
						{
							RectLightSpecHaze = RectGGXApproxLTC(HazeSafeRoughness, HazeF0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture);
					
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Pow4(HazeSafeRoughness));
							HazePDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
					else
					{
						
						{
							float Alpha2SpecHaze = Pow4(HazeSafeRoughness);
							if (IntegrationType == 0)
							{
								HazeD = Strata_D_GGX(HazeSafeRoughness, Alpha2SpecHaze, BSDFContext.Context.NoH);
							}
							else
							{
								const float Energy = EnergyNormalization(Alpha2SpecHaze, BSDFContext.Context.VoH, AreaLightContext.AreaLight);
								HazeD = Strata_D_GGX(HazeSafeRoughness, Alpha2SpecHaze, BSDFContext.Context.NoH) * Energy;
							}
							HazeVis = Strata_Vis_GGX(HazeSafeRoughness, Alpha2SpecHaze, BSDFContext.Context.NoV, AreaLightContext.NoL);
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2SpecHaze);
							HazePDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
				}

				const float3 HazeFresnelTerm = Strata_F_GGX(HazeF0, HazeF90, BSDFContext.Context.VoH);
				if (bIsRectLight)
				{					
					Sample.SpecularHazePathValue = RectLightSpecHaze * HazeMSScale;
				}
				else
				{
					Sample.SpecularHazePathValue = HazeD * HazeVis * HazeMSScale * HazeFresnelTerm;
				}

				
				
				
				[branch]
				if (bHazeAsSimpleClearCoat)
				{
					const BxDFContext ClearCoatContext = RefractClearCoatContext(BSDFContext.Context);
					const float3 HazeClearCoatTransmittance = SimpleClearCoatTransmittance(ClearCoatContext.NoL, ClearCoatContext.NoV, StrataGetBSDFMetallic(BSDFContext.BSDF), StrataGetBSDFBaseColor(BSDFContext.BSDF));

					const float TopLayerCoverage = HazeWeight;
					const float TopLayerSpecularTransmittionApprox = saturate(1.0f - HazeFresnelTerm.x); 
					const float3 TopLayerThrouput = lerp(1.0f, HazeClearCoatTransmittance * TopLayerSpecularTransmittionApprox, TopLayerCoverage);

					const float TopLayerThrouputGrey = dot(TopLayerThrouput, (1.0 / 3.0).xxx);
					Sample.SpecularPathProbability = TopLayerThrouputGrey / (TopLayerCoverage + TopLayerThrouputGrey);
					Sample.SpecularHazePathProbability = TopLayerCoverage / (TopLayerCoverage + TopLayerThrouputGrey);

					
					Sample.DiffusePathValue *= TopLayerThrouput;
					Sample.IntegratedDiffuseValue *= TopLayerThrouput;
					
					Sample.IntegratedSpecularValue = Sample.SpecularPathValue * TopLayerThrouput + Sample.SpecularHazePathValue * TopLayerCoverage;
				}
				else
				{
					Sample.SpecularPathProbability     = (1.0f - HazeWeight);
					Sample.SpecularHazePathProbability = HazeWeight;
					Sample.IntegratedSpecularValue = lerp(Sample.SpecularPathValue, Sample.SpecularHazePathValue, HazeWeight);
				}
			}
			

			
			







			{
				float3 CommonTerm = 0.0f;
				if (bIsRectLight)
				{
					CommonTerm = ShadowTerms.SurfaceShadow; 
				}
				else
				{
					CommonTerm = (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor;
				}
				Sample.IntegratedSpecularValue *= CommonTerm;
			}

			Sample.SpecularPDF = PDF * Sample.SpecularPathProbability;
			Sample.SpecularHazePDF = HazePDF * Sample.SpecularHazePathProbability;


			
			
			
			
			
			Sample.EmissivePathValue =   BSDFContext.BSDF .Emissive;

			Sample.ThroughputV			= OpaqueBSDFThroughput;
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;

			
			
			

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
			{
				const float  FuzzAmount =   BSDFContext.BSDF .VGPRs[4].w;
				const float3 FuzzF0  =   BSDFContext.BSDF .VGPRs[4].xyz;
				const float  FuzzRoughness = MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[2].w, 0.02f);

				
				FBxDFEnergyTermsA EnergyTerms = (FBxDFEnergyTermsA)1.f;
				float3 ClothSpecularPathValueNoL = 0;

				
				
				{
					float DirectionalAlbedo = 1;
					[branch]
					if (bIsRectLight)
					{
						ClothSpecularPathValueNoL = FuzzF0 * RectSheenApproxLTC(FuzzRoughness, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture, DirectionalAlbedo);
					}
					else
					{
						ClothSpecularPathValueNoL = FuzzF0 * SheenLTC_Eval(BSDFContext.V, AreaLightContext.L, BSDFContext.N, BSDFContext.Context.NoV, FuzzRoughness, View_SheenLTCTexture, View_SheenLTCSampler, DirectionalAlbedo);
					}
					EnergyTerms.E = DirectionalAlbedo;
					EnergyTerms.W = 1.f;
				}
				
#line 737 "/Engine/Private/Strata/StrataEvaluation.ush"


				
				const float3 Cloth_DirectionalAlbedo_SpecularTransmission = lerp(1.0, ComputeEnergyPreservation(EnergyTerms), FuzzAmount);

				
				float3 ClothIntegratedSpecularValue = (ShadowTerms.SurfaceShadow * AreaLightContext.Falloff * FuzzAmount) * AreaLightContext.AreaLight.FalloffColor * ClothSpecularPathValueNoL;
				
				
				Sample.DiffusePathValue			*= Cloth_DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue	*= Cloth_DirectionalAlbedo_SpecularTransmission;
				Sample.SpecularPathValue		*= Cloth_DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedSpecularValue	*= Cloth_DirectionalAlbedo_SpecularTransmission;
				
				Sample.SpecularPathValue		+= ClothSpecularPathValueNoL;
				Sample.IntegratedSpecularValue  += ClothIntegratedSpecularValue;

				
				
				
				
				

				if (bHaziness)
				{
					Sample.SpecularHazePathValue*= Cloth_DirectionalAlbedo_SpecularTransmission;
					Sample.SpecularHazePathValue+= ClothSpecularPathValueNoL;

					
					
				}

				Sample.ThroughputV *= Cloth_DirectionalAlbedo_SpecularTransmission;
				
				break;
			}
			

			
			
			

			
			if (  uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
			{
				
				
				const bool bIsThin =   uint(( BSDFContext.BSDF .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1));
				const float TransmittanceNoL = 1.0f;
				const float3 SlabDiffuseColor = bIsThin ? DiffuseColor : float3(1, 1, 1);
				const FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(SlabDiffuseColor,   BSDFContext.BSDF .VGPRs[3].xyz);
				const float3 SubSurfaceColor = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), TransmittanceNoL);
				const float Opacity = 1.f - abs(  BSDFContext.BSDF .VGPRs[3].w);

				float3 TransmissionThroughput = 0;
				if (bIsThin)
				{
					
					
					
					const float Wrap = 0.5;
					const float WrapNoL = saturate((-dot(BSDFContext.N, BSDFContext.L) + Wrap) / Square(1 + Wrap));
					
					const float VoL = dot(BSDFContext.V, BSDFContext.L);
					const float Scatter = Strata_D_GGX(0.6, 0.6 * 0.6, saturate(-VoL));

					TransmissionThroughput = (WrapNoL * Scatter) * SubSurfaceColor;
				}
				else
				{
					
					 
					
					const float InScatter = pow(saturate(dot(BSDFContext.L, -BSDFContext.V)), 12) * lerp(3, .1f, Opacity);
					
					
					
					
					
					
					const float WrappedDiffuse = pow(saturate(AreaLightContext.NoL * (1.f / 1.5f) + (0.5f / 1.5f)), 1.5f) * (2.5f / 1.5f);
					const float NormalContribution = lerp(1.f, WrappedDiffuse, Opacity);
					const float BackScatter =  NormalContribution / (PI * 2);

					
					
					
					
					
					const float3 ExtinctionCoefficients = TransmittanceToExtinction(SubSurfaceColor, View_SubSurfaceColorAsTransmittanceAtDistanceInMeters);
					const float3 RawTransmittedColor = ExtinctionToTransmittance(ExtinctionCoefficients, 1.0f );
					const float3 TransmittedColor = HSV_2_LinearRGB(float3(LinearRGB_2_HSV(RawTransmittedColor).xy, LinearRGB_2_HSV(SubSurfaceColor).z));

					
					TransmissionThroughput = lerp(BackScatter, 1, InScatter) * lerp(TransmittedColor, SubSurfaceColor, ShadowTerms.TransmissionShadow);
				}

				Sample.TransmissionPDF = 1.0f / (4.0f * PI); 
				Sample.TransmissionPathValue = TransmissionThroughput * DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue += (ShadowTerms.TransmissionShadow * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.TransmissionPathValue;
			}
			

			
			
			
			
#line 884 "/Engine/Private/Strata/StrataEvaluation.ush"


			
			
			
			

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u))
			{
				FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(DiffuseColor,   BSDFContext.BSDF .VGPRs[3].xyz);
				const float DiffuseToVolumeBlend = StrataSlabDiffuseToVolumeBlend(PM);

			
				const float3 SlabDirectionalAlbedo = IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM, BSDFContext.Context.NoV, BSDFContext.Context.NoL);
			



				
				const float3 SlabTransmittanceV = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), BSDFContext.Context.NoV);
				const float SpecularTransmissionV = DirectionalAlbedo_SpecularTransmission;

				
				
				const float3 SlabTransmittanceN = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), 1.f );
				

				const float Phase = IsotropicPhase();

				
				
				Sample.DiffusePathValue		= lerp(Sample.DiffusePathValue,		SlabDirectionalAlbedo * SpecularTransmissionV,		DiffuseToVolumeBlend);
				Sample.DiffusePDF			= lerp(Sample.DiffusePDF,			Phase,												DiffuseToVolumeBlend);
				Sample.ThroughputV			= lerp(Sample.ThroughputV,			SlabTransmittanceV    * SpecularTransmissionV,		DiffuseToVolumeBlend);
				Sample.TransmittanceAlongN	= lerp(Sample.TransmittanceAlongN,	SlabTransmittanceN,									DiffuseToVolumeBlend);

				Sample.bSubsurface = false;	

				
				


				const float MediumNoL = saturate(BSDFContext.Context.NoL);
				

				Sample.IntegratedDiffuseValue = lerp(
					Sample.IntegratedDiffuseValue, 
					(ShadowTerms.SurfaceShadow * MediumNoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * SlabDirectionalAlbedo * DirectionalAlbedo_SpecularTransmission,
					DiffuseToVolumeBlend);
				Sample.DiffuseColor		= SlabDirectionalAlbedo;
			}
			

			break;
		}

		
		case 3:
		{
			FGBufferData GBuffer	= (FGBufferData)0;
			GBuffer.BaseColor		=   BSDFContext.BSDF .VGPRs[0].xyz;
			GBuffer.Specular		=   BSDFContext.BSDF .VGPRs[1].y;
			GBuffer.Roughness		=   BSDFContext.BSDF .VGPRs[1].x;
			GBuffer.Metallic		=   BSDFContext.BSDF .VGPRs[0].w;
			GBuffer.CustomData.z	=   BSDFContext.BSDF .VGPRs[1].z;
			GBuffer.ShadingModelID	= 7;
			GBuffer.WorldNormal		= BSDFContext.N;

			FHairTransmittanceData HairTransmittance = InitHairTransmittanceData();
			if (  BSDFContext.BSDF .VGPRs[1].w)
			{
				HairTransmittance = EvaluateDualScattering(GBuffer.BaseColor, BSDFContext.N, GBuffer.Roughness, BSDFContext.V, BSDFContext.L);
				HairTransmittance.OpaqueVisibility = ShadowTerms.SurfaceShadow;
			}

			float BacklitEnabled = 1.0f;
			float Area = 0.0f;
			uint2 Random = uint2(0, 0);
			Sample.SpecularPathValue	= HairShading(GBuffer, BSDFContext.L, BSDFContext.V, BSDFContext.N, ShadowTerms.TransmissionShadow, HairTransmittance, BacklitEnabled, Area, Random);
			Sample.SpecularPDF			= 1.0f / (4.0f * PI);		
			Sample.ThroughputV			= OpaqueBSDFThroughput; 
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;
			Sample.IntegratedSpecularValue = (ShadowTerms.TransmissionShadow * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.SpecularPathValue;
		}
		break;
		
		case 5:
		{
			float3 DiffuseColor	=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0			=   BSDFContext.BSDF .VGPRs[2].w;
			float3 F90			=   BSDFContext.BSDF .VGPRs[3].w;
			const float SafeRoughness	= MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			float Alpha2 = Pow4(SafeRoughness);

			Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, AreaLightContext.L);
			SphereMaxNoH(BSDFContext.Context, AreaLightContext.AreaLight.SphereSinAlpha, true);

			BSDFContext.Context.NoV = saturate(max(abs(BSDFContext.Context.NoV), 1e-10f));

			
			
			

			const float IrisNoL = saturate(dot(  BSDFContext.BSDF .VGPRs[2].xyz, BSDFContext.L));

			
			
			
			
			const float3 CausticNormal = normalize(lerp(  BSDFContext.BSDF .VGPRs[3].xyz, -BSDFContext.N,   BSDFContext.BSDF .VGPRs[1].y *   BSDFContext.BSDF .VGPRs[1].x));

			
			const float Power = lerp(12, 1, IrisNoL);
			const float Caustic = 0.8 + 0.2 * (Power + 1) * pow(saturate(dot(CausticNormal, BSDFContext.L)), Power);

			const float Iris   = IrisNoL * Caustic;
			const float Sclera = BSDFContext.Context.NoL;

			Sample.DiffusePathValue = Diffuse_Lambert(DiffuseColor) * lerp(Sclera, Iris,   BSDFContext.BSDF .VGPRs[1].y);
			Sample.IntegratedDiffuseValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.DiffusePathValue;

			Sample.DiffuseColor		= DiffuseColor;
			Sample.DiffusePDF		= BSDFContext.SatNoL / PI;
			Sample.bSubsurface		=   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u) ||   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);

			
			
			
			
			float3 MSScale = 1;
			float DirectionalAlbedo_SpecularTransmission = 1.0f;
			{
				FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
				DirectionalAlbedo_SpecularTransmission = ComputeEnergyPreservation(EnergyTerms);
				MSScale = ComputeEnergyConservation(EnergyTerms);
			}
			
			Sample.DiffusePathValue *= DirectionalAlbedo_SpecularTransmission;
			Sample.IntegratedDiffuseValue *= DirectionalAlbedo_SpecularTransmission;

			
			
			
			
			

			float3 RectLightSpec = 0;
			float3 RectLightSpecHaze = 0;
			float D = 0;
			float Vis = 0;
			float PDF = 0;
			const bool bIsRectLight = IntegrationType == 2;

			if (bIsRectLight)
			{
				
				RectLightSpec = RectGGXApproxLTC(SafeRoughness, F0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture);

				const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2);
				PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
			}
			else
			{
				

				
				float Alpha2Spec = Alpha2;
				if(IntegrationType == 0)
				{
					D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
				}
				else
				{
					const float Energy = EnergyNormalization(Alpha2Spec, BSDFContext.Context.VoH, AreaLightContext.AreaLight);
					D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH) * Energy;
				}
				Vis = Strata_Vis_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoV, AreaLightContext.NoL);
				const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
				PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
			}

			const float3 FresnelTerm = Strata_F_GGX(F0, F90, BSDFContext.Context.VoH);

			Sample.SpecularPathProbability	= 1.0f;
			Sample.SpecularPDF				= PDF * Sample.SpecularPathProbability;

			if (bIsRectLight)
			{
				Sample.SpecularPathValue       = RectLightSpec * MSScale;
				Sample.IntegratedSpecularValue = (ShadowTerms.SurfaceShadow *  Sample.SpecularPathProbability) * Sample.SpecularPathValue;
			}
			else
			{
				Sample.SpecularPathValue        = D * Vis * MSScale * FresnelTerm;
				Sample.IntegratedSpecularValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.SpecularPathValue * Sample.SpecularPathProbability;
			}

			
			
			
			
			
			Sample.EmissivePathValue =   BSDFContext.BSDF .Emissive;

			Sample.ThroughputV			= OpaqueBSDFThroughput;
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;

			break;
		}
		break;

		
		
		
		
		
		
	}

	return Sample;
}

#line 1119 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEvaluateResult StrataEvaluateBSDF(FStrataBSDFContext BSDFContext, FStrataIntegrationSettings Settings)
{
	FShadowTerms IdentityShadow = { 1, 1, 1, InitHairTransmittanceData() };
	FAreaLightIntegrateContext DummyAreaLightContext = InitAreaLightIntegrateContext();
	DummyAreaLightContext.L = BSDFContext.L;
	DummyAreaLightContext.NoL = BSDFContext.Context.NoL;
	DummyAreaLightContext.Falloff = 1;
	return StrataEvaluateBSDFCommon(BSDFContext, IdentityShadow, DummyAreaLightContext, Settings, 0);
}

#line 1381 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataEnvLightResult
{
	float3 DiffuseNormal;
	float3 DiffuseWeight;
	float3 DiffuseBackFaceWeight;

	float3 DiffuseColor;
	float3 SpecularColor;

	float3 SpecularDirection;
	float3 SpecularWeight;
	float  SpecularSafeRoughness;

	float3 SpecularHazeDirection;	
	float3 SpecularHazeWeight;
	float  SpecularHazeSafeRoughness;
	float  SSRReduction;

	
	float3 SSRSpecularWeight;

	bool   bSubsurface; 
};

#line 1405 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEnvLightResult StrataEvaluateForEnvLight(FStrataBSDFContext BSDFContext, bool bEnableSpecular, FStrataIntegrationSettings Settings)
{
	FStrataEnvLightResult StrataEnvLightResult = (FStrataEnvLightResult)0;

	const uint BSDFType =   uint(( BSDFContext.BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	switch (BSDFType)
	{
		case 0:
		{
			float3 DiffuseColor		=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0 				=   BSDFContext.BSDF .VGPRs[1].xyz;
			float3 F90 				=   BSDFContext.BSDF .VGPRs[2].xyz;

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			StrataEnvLightResult.DiffuseNormal = BSDFContext.N;
			StrataEnvLightResult.bSubsurface =   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (0u);

			float SafeRoughness = MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);

			float3 EvalEnvBRDF = 0;
			float DirectionalAlbedo_SpecularTransmission = 0;
			{
				FBxDFEnergyTermsRGB SpecularEnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
				FBxDFEnergyTermsRGB DiffuseEnergyTerms  = ComputeDiffuseEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV);
				EvalEnvBRDF									= SpecularEnergyTerms.E;
				DirectionalAlbedo_SpecularTransmission		= ComputeEnergyPreservation(SpecularEnergyTerms);
				StrataEnvLightResult.DiffuseWeight			= DiffuseColor * DiffuseEnergyTerms.E * DirectionalAlbedo_SpecularTransmission;
				StrataEnvLightResult.DiffuseColor			= DiffuseColor;
			}

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u))
			{
				FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(DiffuseColor,   BSDFContext.BSDF .VGPRs[3].xyz);
				const float DiffuseToVolumeBlend = StrataSlabDiffuseToVolumeBlend(PM);

			
				float3 SlabDirectionalAlbedo = IsotropicMediumSlabEnvDirectionalAlbedoLUT(PM, BSDFContext.Context.NoV);
			










			
				
				
				
				const float MaxDiffuseWeight = max3(StrataEnvLightResult.DiffuseWeight.x, StrataEnvLightResult.DiffuseWeight.y, StrataEnvLightResult.DiffuseWeight.z);
				const float MaxSlabDirectionalAlbedo = max3(SlabDirectionalAlbedo.x, SlabDirectionalAlbedo.y, SlabDirectionalAlbedo.z);
				if (MaxDiffuseWeight < MaxSlabDirectionalAlbedo)
				{
					
					SlabDirectionalAlbedo *= MaxDiffuseWeight / MaxSlabDirectionalAlbedo;
				}
			

				
				SlabDirectionalAlbedo *= DirectionalAlbedo_SpecularTransmission;

				StrataEnvLightResult.DiffuseWeight = lerp(StrataEnvLightResult.DiffuseWeight, SlabDirectionalAlbedo, DiffuseToVolumeBlend);
				
				StrataEnvLightResult.bSubsurface = false;
			}
			
			

			[branch]
			if (bEnableSpecular)
			{
				
				const bool bHasAnisotropy =   uint(( BSDFContext.BSDF .State >>( 0 )) &  ((1u<<( 1 ))-1));
				if (bHasAnisotropy)
				{
					
					const float Anisotropy =   BSDFContext.BSDF .VGPRs[1].w;			
					ModifyGGXAnisotropicNormalRoughness(BSDFContext.X, Anisotropy, SafeRoughness, BSDFContext.N, BSDFContext.V);

					
					BSDFContext.Context.NoL = dot(BSDFContext.N, BSDFContext.L);
					BSDFContext.SatNoL = saturate(BSDFContext.Context.NoL);
					BSDFContext.R = 2 * dot(BSDFContext.V, BSDFContext.N) * BSDFContext.N - BSDFContext.V;
				}
				

				StrataEnvLightResult.SpecularDirection = StrataGetOffSpecularPeakReflectionDir(BSDFContext.N, BSDFContext.R, SafeRoughness);
				StrataEnvLightResult.SpecularWeight = EvalEnvBRDF;
				StrataEnvLightResult.SpecularSafeRoughness = SafeRoughness;
				StrataEnvLightResult.SpecularColor = F0;

				
			
#line 1548 "/Engine/Private/Strata/StrataEvaluation.ush"


				StrataEnvLightResult.SSRSpecularWeight = StrataEnvLightResult.SpecularWeight;

				
				const bool bHasHaziness =   uint(( BSDFContext.BSDF .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1));
				if (bHasHaziness)
				{
					FHaziness Haziness = UnpackHaziness(  BSDFContext.BSDF .Haziness);
					const float HazeWeight = Haziness.Weight;
					const float HazeSafeRoughness = MakeRoughnessSafe(Haziness.Roughness);
					const bool  bHazeAsSimpleClearCoat = Haziness.bSimpleClearCoat;

					StrataEnvLightResult.SpecularHazeDirection = StrataGetOffSpecularPeakReflectionDir(BSDFContext.N, BSDFContext.R, HazeSafeRoughness);

					[branch]
					if (bHazeAsSimpleClearCoat)
					{
						BxDFContext ClearCoatContext = RefractClearCoatContext(BSDFContext.Context);
						const float3 HazeClearCoatTransmittance = SimpleClearCoatTransmittance(ClearCoatContext.NoL, ClearCoatContext.NoV, StrataGetBSDFMetallic(BSDFContext.BSDF), StrataGetBSDFBaseColor(BSDFContext.BSDF));

						const float HazeF0 = 0.04f;
						const float HazeF90= 1.0f;
						FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(HazeSafeRoughness, BSDFContext.Context.NoV, HazeF0, HazeF90);
						const float3 EvalEnvBRDFHaze = EnergyTerms.E;
						const float3 TopLayerSpecularTransmittionApprox = saturate(1.0f - EvalEnvBRDFHaze); 

						const float TopLayerCoverage = HazeWeight;
						const float3 BottomLayerFactors = lerp(1.0, HazeClearCoatTransmittance * TopLayerSpecularTransmittionApprox, TopLayerCoverage);

						StrataEnvLightResult.SpecularWeight *= BottomLayerFactors;
						StrataEnvLightResult.DiffuseWeight  *= BottomLayerFactors;

						StrataEnvLightResult.SpecularHazeWeight = TopLayerCoverage * EvalEnvBRDFHaze;
						StrataEnvLightResult.SpecularHazeSafeRoughness = HazeSafeRoughness;

						StrataEnvLightResult.SSRSpecularWeight = lerp(StrataEnvLightResult.SpecularWeight, StrataEnvLightResult.SpecularHazeWeight, TopLayerCoverage);
					}
					else
					{
						
						const float HazinessFadeIn = saturate(HazeWeight / 0.1f);
						StrataEnvLightResult.SSRReduction = lerp(0.0f, HazeWeight, HazinessFadeIn);

						
						const float BlendFactor = lerp(1.0f, (1.0f - HazeWeight), HazinessFadeIn);
						StrataEnvLightResult.SpecularWeight *= BlendFactor;
						StrataEnvLightResult.SSRSpecularWeight *= BlendFactor;

						
						FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(HazeSafeRoughness, BSDFContext.Context.NoV, F0, F90);
						const float3 EvalEnvBRDFHaze = EnergyTerms.E;
						StrataEnvLightResult.SpecularHazeWeight = lerp(0.0f, HazeWeight, HazinessFadeIn) * EvalEnvBRDFHaze;
						StrataEnvLightResult.SpecularHazeSafeRoughness = HazeSafeRoughness;
					}
				}
				
			}

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
			{
				FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(DiffuseColor,   BSDFContext.BSDF .VGPRs[3].xyz);

				
				
				const float TransmittanceNoL = 1.0f;
				const float3 SlabTransmittance = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), TransmittanceNoL);

				
				
				
				const float3 BackFaceWhiteDiffuseColor = float3(1.0f, 1.0f, 1.0f);

				
				StrataEnvLightResult.DiffuseBackFaceWeight = Diffuse_Lambert(BackFaceWhiteDiffuseColor) * SlabTransmittance * DirectionalAlbedo_SpecularTransmission;

				
				StrataEnvLightResult.bSubsurface = false;
			}
			

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
			{
				const float  FuzzAmount =   BSDFContext.BSDF .VGPRs[4].w;
				const float3 FuzzF0 =   BSDFContext.BSDF .VGPRs[4].xyz;
				const float  FuzzRoughness = MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[2].w, 0.02f);

				FBxDFEnergyTermsA ClothEnergyTerms = (FBxDFEnergyTermsA)1.0f;
				
				{
					const float DirectionalAlbedo = SheenLTC_DirectionalAlbedo(BSDFContext.Context.NoV, FuzzRoughness, View_SheenLTCTexture, View_SheenLTCSampler);
					ClothEnergyTerms.E = DirectionalAlbedo;
					ClothEnergyTerms.W = 1.f;
				}
				






				
				const float Cloth_DirectionalAlbedo_SpecularTransmission = lerp(1.0, ComputeEnergyPreservation(ClothEnergyTerms), FuzzAmount);

				StrataEnvLightResult.DiffuseColor		*= Cloth_DirectionalAlbedo_SpecularTransmission;
				StrataEnvLightResult.DiffuseWeight		*= Cloth_DirectionalAlbedo_SpecularTransmission;
				StrataEnvLightResult.SpecularWeight		*= Cloth_DirectionalAlbedo_SpecularTransmission;
				StrataEnvLightResult.SpecularHazeWeight *= Cloth_DirectionalAlbedo_SpecularTransmission;
				StrataEnvLightResult.SSRSpecularWeight	*= Cloth_DirectionalAlbedo_SpecularTransmission;
				
				
				
				StrataEnvLightResult.DiffuseColor		+= FuzzF0 * ClothEnergyTerms.E * FuzzAmount;
				StrataEnvLightResult.DiffuseWeight		+= FuzzF0 * ClothEnergyTerms.E * FuzzAmount;
				break;
			}
			

			break;
		}



		case 3:
		{
			FGBufferData GBuffer	= (FGBufferData)0;
			GBuffer.BaseColor		=   BSDFContext.BSDF .VGPRs[0].xyz;
			GBuffer.Specular		=   BSDFContext.BSDF .VGPRs[1].y;
			GBuffer.Roughness		=   BSDFContext.BSDF .VGPRs[1].x;
			GBuffer.Metallic		=   BSDFContext.BSDF .VGPRs[0].w;
			GBuffer.CustomData.z	=   BSDFContext.BSDF .VGPRs[1].z;
			GBuffer.ShadingModelID	= 7;
			GBuffer.WorldNormal		= BSDFContext.N;
			
			const float3 N = BSDFContext.N;
			const float3 V = BSDFContext.V;
			float3 L = 0;
			StrataEnvLightResult.DiffuseWeight = EvaluateEnvHair(GBuffer, V, N, L );
			StrataEnvLightResult.DiffuseNormal = L;
			
			
			break;
		}

		case 5:	
		{
			float3 DiffuseColor		=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0 				=   BSDFContext.BSDF .VGPRs[2].w;
			float3 F90 				=   BSDFContext.BSDF .VGPRs[3].w;

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			StrataEnvLightResult.DiffuseNormal = BSDFContext.N;
			StrataEnvLightResult.bSubsurface =   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (0u); 

			float SafeRoughness = MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);

			float3 EvalEnvBRDF = 0;
			float3 DirectionalAlbedo_SpecularTransmission = 0;
			{
				FBxDFEnergyTermsRGB SpecularEnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
				const float DiffuseDirectionalAlbedo = 1.0f;
				EvalEnvBRDF									= SpecularEnergyTerms.E;
				DirectionalAlbedo_SpecularTransmission		= ComputeEnergyPreservation(SpecularEnergyTerms);
				StrataEnvLightResult.DiffuseWeight			= DiffuseColor * DiffuseDirectionalAlbedo * DirectionalAlbedo_SpecularTransmission;
				StrataEnvLightResult.DiffuseColor			= DiffuseColor;
			}

			[branch]
			if (bEnableSpecular)
			{
				StrataEnvLightResult.SpecularDirection = StrataGetOffSpecularPeakReflectionDir(BSDFContext.N, BSDFContext.R, SafeRoughness);
				StrataEnvLightResult.SpecularWeight = EvalEnvBRDF;
				StrataEnvLightResult.SpecularSafeRoughness = SafeRoughness;
				StrataEnvLightResult.SpecularColor = F0;
			}

			break;
		}

		
		
		
		
		

	}

	return StrataEnvLightResult;
}

#line 22 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateSingleBSDFOperatorCoverageTransmittance(
	FStrataPixelHeader StrataPixelHeader,
	int BSDFIndex,
	FStrataIntegrationSettings Settings,
	FStrataAddressing NullStrataAddressing,
	float3 V)
{


	



	

	
	this.BSDFs[BSDFIndex].Coverage = int(this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].LayerDepth) < Settings.PeelLayersAboveDepth && !this.BSDFs[BSDFIndex].bIsBottom ? 0.0f : this.BSDFs[BSDFIndex].Coverage;


	float CurrentBSDFCoverage = this.BSDFs[BSDFIndex].Coverage;
	float Roughness = StrataGetBSDFRoughness(this.BSDFs[BSDFIndex]);
	float3x3 TangentBasis = StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, this.BSDFs[BSDFIndex], NullStrataAddressing);


	Roughness = Settings.bRoughnessTracking ? Roughness : 0.0;


	
	this.BSDFs[BSDFIndex].StrataSanitizeBSDF();

	


	
	
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractThicknessCm  = this.BSDFs[BSDFIndex].bIsBottom ? 0.0f					: this.BSDFs[BSDFIndex].ThicknessCm;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractCoverage	  = this.BSDFs[BSDFIndex].bIsTop    ? this.BSDFs[BSDFIndex].Coverage	: 0.0f;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractTopRoughness = this.BSDFs[BSDFIndex].bIsTop    ? Roughness				: 0.0f;

	const bool bIsStrataOpaqueMaterial = ((1 && 1) && ((!(0 > 0) && (0 || 0 || 0 || 0 || 0 || 0)<=0) || ((0 > 0) && (0 == 0)))) > 0;
	this.BSDFs[BSDFIndex].PostProcessBSDFBeforeLighting(bIsStrataOpaqueMaterial);

	
	float3 LEqualN = TangentBasis[2];
	FStrataBSDFContext StrataBSDFContext = StrataCreateBSDFContext(StrataPixelHeader, this.BSDFs[BSDFIndex], NullStrataAddressing, V, LEqualN);
	FStrataEvaluateResult BSDFEvaluate = StrataEvaluateBSDF(StrataBSDFContext, Settings);

	
	
	
	
	this.BSDFs[BSDFIndex].LuminanceWeightV = float3(1.0f, 1.0f, 1.0f) * CurrentBSDFCoverage;

	
	this.BSDFs[BSDFIndex].CoverageAboveAlongN = 0.0f;
	this.BSDFs[BSDFIndex].TransmittanceAboveAlongN = float3(1.0f, 1.0f, 1.0f);

	
	this.BSDFs[BSDFIndex].TopLayerDataWeight = 1.0f;

	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].Coverage				= CurrentBSDFCoverage;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].ThroughputAlongV		= BSDFEvaluate.ThroughputV;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TransmittanceAlongN	= BSDFEvaluate.TransmittanceAlongN;

	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(Roughness, StrataBSDFContext.SatNoV, StrataGetBSDFSpecularColor(this.BSDFs[BSDFIndex]), StrataGetBSDFSpecularF90(this.BSDFs[BSDFIndex]));
	{
		const float TopDownInterfaceEta = this.BSDFs[BSDFIndex].bIsTop ? 1.0f / 1.0f : 1.0f;
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataGetDiracLobe(V), EnergyTerms.E, Roughness, TopDownInterfaceEta);
		
		RefractedLobe.E *= BSDFEvaluate.ThroughputV;
		
		RefractedLobe = StrataWeightLobe(RefractedLobe, CurrentBSDFCoverage);
		this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TopDownRefractionLobeStat = RefractedLobe;
	}

	
	{
		const float BottomUpInterfaceEta = this.BSDFs[BSDFIndex].bIsTop ? 1.0f / 1.0f : 1.0f;
		const float3 NormalDown = float3(0, 0, -1);
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataGetDiracLobe(NormalDown), EnergyTerms.E, Roughness, BottomUpInterfaceEta);
		
		RefractedLobe.E *= BSDFEvaluate.ThroughputV;
		
		RefractedLobe = StrataWeightLobe(RefractedLobe, CurrentBSDFCoverage);
		this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].BottomUpRefractionLobeStat = RefractedLobe;
	}

#line 128 "/Engine/Private/Strata/StrataTree.ush"

	
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TopDownRefractionWorldNormal = TangentBasis[2];





}

#line 139 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateSingleOperatorCoverageTransmittance(int OpIndex)
{






	
	
	
	
	this.Operators[OpIndex].LayerDepth = this.Operators[this.Operators[OpIndex].LeftIndex].LayerDepth;

	switch (this.Operators[OpIndex].Type)
	{

	case 0:
	{
		const float Weight = saturate(this.Operators[OpIndex].Weight);
		this.Operators[OpIndex].Coverage				= Weight * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		this.Operators[OpIndex].ThroughputAlongV		= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		this.Operators[OpIndex].TransmittanceAlongN	= this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataWeightLobe(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, Weight);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal * Weight;

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataWeightLobe(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, Weight);

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm;
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage * Weight;
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness;
		break;
	}

	case 1:
	{
		const float3 TopThroughputAlongV	= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		const float3 TopTransmittanceAlongN = this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;
		const float3 BotThroughputAlongV	= this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV;
		const float3 BotTransmittanceAlongN = this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN;
		const float TopCoverage = this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		const float BotCoverage = this.Operators[this.Operators[OpIndex].RightIndex].Coverage;

#line 200 "/Engine/Private/Strata/StrataTree.ush"

		FVerticalLayeringInfo Info = GetVerticalLayeringInfo(TopCoverage, BotCoverage);

		this.Operators[OpIndex].Coverage				= Info.Coverage;
		this.Operators[OpIndex].ThroughputAlongV		= Info.TransmittanceOnlyTop * TopThroughputAlongV +		Info.TransmittanceOnlyBottom * BotThroughputAlongV +	Info.TransmittanceTopAndBottom * TopThroughputAlongV * BotThroughputAlongV;
		this.Operators[OpIndex].TransmittanceAlongN  = Info.TransmittanceOnlyTop* TopTransmittanceAlongN + Info.TransmittanceOnlyBottom * BotTransmittanceAlongN + Info.TransmittanceTopAndBottom * TopTransmittanceAlongN * BotTransmittanceAlongN;


		this.Operators[OpIndex].VerticalTop_Coverage				= this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		this.Operators[OpIndex].VerticalTop_ThroughputAlongV		= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		this.Operators[OpIndex].VerticalTop_TransmittanceAlongN  = this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;

		this.Operators[OpIndex].VerticalBot_Coverage				= this.Operators[this.Operators[OpIndex].RightIndex].Coverage;
		this.Operators[OpIndex].VerticalBot_ThroughputAlongV		= this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV;
		this.Operators[OpIndex].VerticalBot_TransmittanceAlongN	= this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN;

		
		{
			const float TopDownInterfaceEta = 1.0f;
			this.Operators[OpIndex].TopDownRefractionLobeStat = StrataGetRefractedLobe(StrataOppositeLobe(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat), 
				0.0f, StrataLobeVarianceToRoughness(this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat.Sigma), TopDownInterfaceEta);
			this.Operators[OpIndex].TopDownRefractionLobeStat.E *= saturate(this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV + (1.0f - this.Operators[this.Operators[OpIndex].RightIndex].Coverage)); 

			
			const float RefractionNormalMix = saturate((Info.SurfaceBottom + 0.5f * Info.TransmittanceTopAndBottom * dot(TopThroughputAlongV, 0.33.xxx)) / max(1e-10f, Info.Coverage));
			this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, RefractionNormalMix);
		}

		
		{
			const bool bIsTop = this.Operators[OpIndex].LayerDepth == 0;
			const float BottomUpInterfaceEta = bIsTop ? 1.0f / 1.0f : 1.0f;
			this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataGetRefractedLobe(StrataOppositeLobe(this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat), 
				0.0f, StrataLobeVarianceToRoughness(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat.Sigma), BottomUpInterfaceEta);
			this.Operators[OpIndex].BottomUpRefractionLobeStat.E *= saturate(this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV + (1.0f - this.Operators[this.Operators[OpIndex].LeftIndex].Coverage)); 
		}

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm + this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm;
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage;
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness;

		this.Operators[OpIndex].VerticalTop_TopDownRefractionLobeStat = this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat;
		this.Operators[OpIndex].VerticalTop_BottomUpRefractionLobeStat = this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat;
		break;
	}

	case 2:
	{
		const float Mix = saturate(this.Operators[OpIndex].Weight);
		const float AMix = 1.0 - Mix;
		const float BMix = Mix;

		this.Operators[OpIndex].Coverage = AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage;
		this.Operators[OpIndex].ThroughputAlongV    = (AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage * this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV    + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage * this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV)    / max(1e-10f, AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		this.Operators[OpIndex].TransmittanceAlongN = (AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage * this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage * this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN) / max(1e-10f, AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage);

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat, BMix);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, BMix);

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat, BMix);

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm,  this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm,  BMix);
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage,     this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractCoverage,     BMix);
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness, this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractTopRoughness, BMix);
		break;
	}

	case 3:
	{
		const float SafeABSDFCoverage = saturate(this.Operators[this.Operators[OpIndex].LeftIndex].Coverage);
		const float SafeBBSDFCoverage = saturate(this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		const float AMixFactor = SafeABSDFCoverage / max(1e-10f, SafeABSDFCoverage + SafeBBSDFCoverage);

		this.Operators[OpIndex].Coverage = saturate(this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		this.Operators[OpIndex].ThroughputAlongV    = lerp(this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV,    this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV,    AMixFactor);
		this.Operators[OpIndex].TransmittanceAlongN = lerp(this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN, this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN, AMixFactor);

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat, 0.5f);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, 0.5f);

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat, 0.5f);

		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm,  this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm,  0.5f);
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage,     this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractCoverage,     0.5f);
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness, this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractTopRoughness, 0.5f);
		break;
	}

	}






}

#line 305 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Weight(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	const float Weight = saturate(this.Operators[OpIndex].Weight);
	this.BSDFs[BSDFIndex].LuminanceWeightV *= Weight;
	this.BSDFs[BSDFIndex].Coverage *= Weight;

	this.BSDFs[BSDFIndex].TopLayerDataWeight *= Weight;


}

#line 321 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Horizontal(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	const float Mix = saturate(this.Operators[OpIndex].Weight);
	const float AMix = 1.0 - Mix;
	const float BMix = Mix;
	const float Weight = PreviousIsInputA > 0 ? AMix : BMix;
	this.BSDFs[BSDFIndex].LuminanceWeightV *= Weight;
	this.BSDFs[BSDFIndex].Coverage *= Weight;

	this.BSDFs[BSDFIndex].TopLayerDataWeight *= Weight;


}

#line 340 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Vertical(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	
	const bool bBSDFComesFromTopLayer = PreviousIsInputA > 0;

	
	this.BSDFs[BSDFIndex].LuminanceWeightV		 *= bBSDFComesFromTopLayer ? 1.0f : saturate(1.0f - this.Operators[OpIndex].VerticalTop_Coverage) + saturate(this.Operators[OpIndex].VerticalTop_Coverage) * this.Operators[OpIndex].VerticalTop_ThroughputAlongV;

	
	const float BotCover  = this.BSDFs[BSDFIndex].CoverageAboveAlongN;
	const float TopCover  = this.Operators[OpIndex].VerticalTop_Coverage;
	const float3 BotTrans = this.BSDFs[BSDFIndex].TransmittanceAboveAlongN;
	const float3 TopTrans = this.Operators[OpIndex].VerticalTop_TransmittanceAlongN;
	FVerticalLayeringInfo Info = GetVerticalLayeringInfo(this.Operators[OpIndex].VerticalTop_Coverage, this.BSDFs[BSDFIndex].CoverageAboveAlongN);
	
	const float3 PreCoverageTransmittance = saturate((Info.TransmittanceOnlyTop * TopTrans + Info.TransmittanceOnlyBottom * BotTrans + Info.TransmittanceTopAndBottom * (TopTrans * BotTrans)) / max(1e-10f, Info.Coverage));
	this.BSDFs[BSDFIndex].CoverageAboveAlongN		  = bBSDFComesFromTopLayer ? this.BSDFs[BSDFIndex].CoverageAboveAlongN		: Info.Coverage;			
	this.BSDFs[BSDFIndex].TransmittanceAboveAlongN  = bBSDFComesFromTopLayer ? this.BSDFs[BSDFIndex].TransmittanceAboveAlongN	: PreCoverageTransmittance;	

	
	this.BSDFs[BSDFIndex].TopLayerDataWeight *= bBSDFComesFromTopLayer ? 1.0 : saturate(1.0f - this.Operators[OpIndex].VerticalTop_Coverage);

	if (!bBSDFComesFromTopLayer)	
	{
		
		
		

		
		const float3 DummyWi = float3(0, 0, 1);
		const float DummyInterfaceDFG = 0.5f;
		FStrataLobeStatistic ReflectedLobe = StrataGetReflectedLobe(StrataGetDiracLobe(DummyWi), DummyInterfaceDFG, StrataGetBSDFRoughness(this.BSDFs[BSDFIndex]));

		
		
		
		const float DiracLobeSigma = 0.0f;
		const float TopLayerSigma = lerp(DiracLobeSigma, this.Operators[OpIndex].VerticalTop_BottomUpRefractionLobeStat.Sigma, this.Operators[OpIndex].VerticalTop_Coverage * dot(this.Operators[OpIndex].VerticalTop_TransmittanceAlongN, (1.0f/3.0f).xxx));
		const bool bIsTop = this.Operators[OpIndex].LayerDepth == 0;
		const float BottomUpInterfaceEta = bIsTop ? 1.0f / 1.0f : 1.0f;
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataOppositeLobe(ReflectedLobe), DummyInterfaceDFG, StrataLobeVarianceToRoughness(TopLayerSigma), BottomUpInterfaceEta);

		this.BSDFs[BSDFIndex].StrataSetBSDFRoughness(StrataLobeVarianceToRoughness(RefractedLobe.Sigma));
	}


}

#line 10 "/Engine/Private/Strata/StrataLegacyConversion.ush"
void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal);

#line 21 "/Engine/Private/Strata/StrataLegacyConversion.ush"
struct FStrataLegacyParameters
{
	FStrataPixelFootprint PixelFootprint;
	bool UseMetalness;
	float3 DiffuseAlbedo;
	float3 F0;
	float3 F90;

	float3 BaseColor;
	float  Specular;
	float  Metallic;
	float  Roughness;
	float  Anisotropy;
	float  SSSProfileID;
	float3 SSSMFP;
	float  SSSMFPScale;
	float  SSSPhaseAniso;
	bool   UseSSSDiffusion;
	float3 Emissive;
	float  SecondRoughness;
	float  SecondRoughnessWeight;
	bool   SecondRoughnessAsSimpleClearCoat;
	float  FuzzAmount;
	float3 FuzzColor;
	float  Thickness;
	bool   bIsThinSurface;
	uint   SharedLocalBasisIndex;

	float Weight;
};

#line 52 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataLegacyParameters InitStrataLegacyParameters(FStrataPixelFootprint InPixelFootprint, uint InSharedLocalBasisIndex, float InWeight)
{
	const float3 Zeros = float3(0, 0, 0);

	FStrataLegacyParameters Out;

	Out.UseMetalness = true;
	Out.DiffuseAlbedo = Zeros;
	Out.F0 = Zeros;
	Out.F90 = Zeros;

	Out.BaseColor = Zeros;
	Out.Specular = 0.5f;
	Out.Metallic = 0.f;
	Out.Roughness = 0.5f;
	Out.Anisotropy = 0.f;
	Out.SSSProfileID = 0.f;
	Out.SSSMFP = Zeros;
	Out.SSSMFPScale = 1.f;
	Out.SSSPhaseAniso = 0.f;
	Out.UseSSSDiffusion = false;
	Out.Emissive = Zeros;
	Out.SecondRoughness = 0.0f;
	Out.SecondRoughnessWeight = 0.0f;
	Out.SecondRoughnessAsSimpleClearCoat = false;
	Out.FuzzAmount = 0.f;
	Out.FuzzColor = Zeros;
	Out.Thickness = 0.01f;
	Out.bIsThinSurface = false;
	Out.SharedLocalBasisIndex = InSharedLocalBasisIndex;
	Out.Weight = InWeight;
	Out.PixelFootprint = InPixelFootprint;
	return Out;
}

#line 87 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData CreateLegacySlab(
	FStrataLegacyParameters In, inout uint SharedLocalBasisTypes)
{
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones  = float3(1, 1, 1);

	float3 DiffuseAlbedo = In.DiffuseAlbedo;
	float3 F0 = In.F0;
	float3 F90 = In.F90;
	if (In.UseMetalness > 0.0f)
	{
		DiffuseAlbedo = ComputeDiffuseAlbedo(In.BaseColor, In.Metallic);
		F0 = ComputeF0(In.Specular, In.BaseColor, In.Metallic);
		F90 = Ones;
	}

	
	return GetStrataSlabBSDF(
		In.PixelFootprint,
		DiffuseAlbedo,										
		F0,													
		F90,												
		In.Roughness,										
		In.Anisotropy,										
		In.SSSProfileID,									
		In.SSSMFP,											
		In.SSSMFPScale,										
		In.SSSPhaseAniso,									
		In.UseSSSDiffusion,									
		In.Emissive,										
		In.SecondRoughness,									
		In.SecondRoughnessWeight,							
		In.SecondRoughnessAsSimpleClearCoat ? 1.0f : 0.0f,	
		In.FuzzAmount,										
		In.FuzzColor,										
		In.Roughness,										
		0.0f, 0.0f.xx,										
		0.0f,												
		In.Thickness,
		In.bIsThinSurface,
		true,												
		In.SharedLocalBasisIndex, SharedLocalBasisTypes);
}

#line 136 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData StrataConvertLegacyMaterialDynamic(
	FStrataPixelFootprint PixelFootprint,
	float3 BaseColor, float Specular, float Metallic,
	float Roughness, float Anisotropy,
	float3 SubSurfaceColor, float SubSurfaceProfileId,
	float ClearCoat, float ClearCoatRoughness,
	float3 Emissive,
	float Opacity,
	float3 TransmittanceColor,
	float3 WaterScatteringCoefficients, float3 WaterAbsorptionCoefficients, float WaterPhaseG, float3 ColorScaleBehindWater,
	uint ShadingModel,
	float3 RawNormal,
	float3 RawTangent,
	float3 RawClearCoatNormal,
	float3 RawCustomTangent,
	uint SharedLocalBasisIndex,
	uint ClearCoatBottomNormal_SharedLocalBasisIndex,
	inout uint SharedLocalBasisTypes)
{
	const float DefaultThickness = 0.01f;
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones  = float3(1, 1, 1);

	

	
	
	if (ShadingModel == 10)
	{
		const float3 WaterExtinction = WaterScatteringCoefficients + WaterAbsorptionCoefficients;
		const float3 WaterAlbedo = WaterScatteringCoefficients / WaterExtinction;

		return GetStrataSingleLayerWaterBSDF(
			BaseColor, 				
			Metallic, 				
			Specular, 				
			Roughness, 				
			Emissive, 				
			Opacity,				
			WaterAlbedo, 			
			WaterExtinction, 		
			WaterPhaseG, 			
			ColorScaleBehindWater,	
			SharedLocalBasisIndex);
	}
	
	
#line 194 "/Engine/Private/Strata/StrataLegacyConversion.ush"

	
#line 216 "/Engine/Private/Strata/StrataLegacyConversion.ush"


	FStrataLegacyParameters LegacySlab = InitStrataLegacyParameters(PixelFootprint, SharedLocalBasisIndex, 1.0f);

	float FinalWeight = 1.0f;

	if (ShadingModel == 0)
	{
		
		LegacySlab.BaseColor = Zeros;
		LegacySlab.Specular = 0.f;
		LegacySlab.Metallic = 0.f;
		LegacySlab.Roughness = 0.f;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 1)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 2)
	{
		const float ThicknessInCm = 100.0f;
		const float3 MFPInCm = TransmittanceToMeanFreePath(SubSurfaceColor, ThicknessInCm * (1.0f / 100.0f)) * 100.0f;

		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSPhaseAniso = saturate(1.f - Opacity); 
		LegacySlab.Emissive = Emissive;
		LegacySlab.UseSSSDiffusion = false;
		LegacySlab.Thickness = ThicknessInCm;

		FinalWeight = 1.0f;













	}
	else if (ShadingModel == 3)
	{
		
		const float3 MFPInCm = float3(1.0f, 0.088964f, 0.072095f) * 2.6748f * 0.1f;

		
		
		LegacySlab.BaseColor = max(SubSurfaceColor, BaseColor); 
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFPScale = 1.f - Opacity;
		LegacySlab.SSSPhaseAniso = 0.93f;
		LegacySlab.UseSSSDiffusion = true;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 5)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = SubSurfaceProfileId;
		LegacySlab.SSSMFPScale = Opacity;
		LegacySlab.SSSPhaseAniso = 0.93f;
		LegacySlab.UseSSSDiffusion = true;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 4)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = Zeros;
		LegacySlab.SSSMFPScale = 0.f;
		LegacySlab.SecondRoughnessWeight = ClearCoat;
		LegacySlab.SecondRoughness = ClearCoatRoughness;
		LegacySlab.SecondRoughnessAsSimpleClearCoat = ClearCoat > 0.0f; 
		LegacySlab.Emissive = Zeros;
		LegacySlab.Weight = 1.f;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 6)
	{
		
		const float Thickness = 0.01f;
		const float3 MFPInCm = TransmittanceToMeanFreePath(SubSurfaceColor , Thickness * (1.0f / 100.0f)) * 100.0f;

		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSPhaseAniso = 1.0f - saturate(Opacity); 
		LegacySlab.Emissive = Emissive;
		LegacySlab.UseSSSDiffusion = false;
		LegacySlab.Thickness = Thickness;
		LegacySlab.bIsThinSurface = true;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 8)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = 0.f;
		LegacySlab.SSSMFPScale = 0.f;
		LegacySlab.Emissive = Emissive;
		LegacySlab.FuzzAmount = ClearCoat;
		LegacySlab.FuzzColor = SubSurfaceColor;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 11)	
	{
		const float Thickness = DefaultThickness;

		
		Opacity = lerp(1.f - Square(1.f - Opacity), Opacity, Metallic);

		
		
		
		const float3 BaseColor_LAB			= LinearRGB_2_LAB(BaseColor);
		const float3 TransmittanceColor_LAB = LinearRGB_2_LAB(TransmittanceColor);
		const float3 Color_LAB			    = lerp(TransmittanceColor_LAB, BaseColor_LAB, Opacity);
		const float3 Color					= LAB_2_LinearRGB(Color_LAB);

		
		const float3 MFP = TransmittanceToMeanFreePath(lerp(Color, Zeros, Opacity), Thickness * (1.0f / 100.0f)) * 100.0f;

		const float F0Dieletrict = DielectricSpecularToF0(Specular);

		const float3 TopF0     = lerp(F0Dieletrict, BaseColor, Metallic);
		const float3 TopAlbedo = Color * (1.f - Metallic);
		const float3 TopMFP    = 0;

		const float3 BotF0     = F0Dieletrict;
		const float3 BotAlbedo = Zeros;
		const float3 BotMFP    = MFP;

		LegacySlab.DiffuseAlbedo	= lerp(BotAlbedo, TopAlbedo, Opacity);
		LegacySlab.SSSMFP			= lerp(BotMFP,    TopMFP,    Opacity);
		LegacySlab.F0				= lerp(BotF0,     TopF0,     Opacity);
		LegacySlab.F90				= Ones;
		LegacySlab.UseMetalness	= false;
		LegacySlab.Roughness 		= Roughness;
		LegacySlab.Anisotropy 		= 0.f;
		LegacySlab.SSSProfileID 	= 0.f;
		LegacySlab.SSSMFPScale 	= 1.f;
		LegacySlab.Emissive 		= Emissive;
		LegacySlab.Thickness 		= Thickness;
		LegacySlab.SharedLocalBasisIndex = SharedLocalBasisIndex;

		
		FinalWeight = 1.0f;
	}

	
	FStrataData Slab = CreateLegacySlab(LegacySlab, SharedLocalBasisTypes);

	Slab.InlinedBSDF.Coverage = LegacySlab.Weight * FinalWeight;	


	return Slab;
}

#line 449 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData StrataConvertLegacyMaterialStatic(
	FStrataPixelFootprint PixelFootprint,
	float3 BaseColor, float Specular, float Metallic,
	float Roughness, float Anisotropy,
	float3 SubSurfaceColor, float SubSurfaceProfileId,
	float ClearCoat, float ClearCoatRoughness,
	float3 Emissive,
	float Opacity,
	float3 TransmittanceColor,
	float3 WaterScatteringCoefficients, float3 WaterAbsorptionCoefficients, float WaterPhaseG, float3 ColorScaleBehindWater,
	uint ShadingModel,
	float3 RawNormal,
	float3 RawTangent,
	float3 RawClearCoatNormal,
	float3 RawCustomTangent,
	uint SharedLocalBasisIndex,
	uint ClearCoatBottomNormal_SharedLocalBasisIndex,
	inout uint SharedLocalBasisTypes)
{
	FStrataData Out = GetInitialisedStrataData();

	const float DefaultThickness = 0.01f;
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones = float3(1, 1, 1);







	if (ShadingModel == 0)
	{
		const float GreyTransmittance = saturate(1.0f - Opacity);
	
		
		Out = GetStrataUnlitBSDF(Emissive, 0.0f, RawNormal);
	
#line 510 "/Engine/Private/Strata/StrataLegacyConversion.ush"

	}
	else if (ShadingModel == 7)
	{
		Out = GetStrataHairBSDF(
				BaseColor,	   
				Metallic,	   
				Specular,	   
				Roughness,	   
				ClearCoat,	   
				Emissive,	   
				SharedLocalBasisIndex);
	}
	else if (ShadingModel == 9)
	{
		const float IrisMask = ClearCoat;
		const float IrisDistance = ClearCoatRoughness;

		float3 IrisNormal = RawNormal;
		float3 IrisPlaneNormal = RawNormal;
		GetEyeNormals(IrisMask, IrisDistance, RawNormal, RawClearCoatNormal, RawCustomTangent, IrisNormal, IrisPlaneNormal);

		Out = GetStrataEyeBSDF(
				BaseColor,	         
				Roughness,	         
				IrisMask,	         
				IrisDistance,        
				IrisNormal,	         
				IrisPlaneNormal,	 
				SubSurfaceProfileId, 
				Emissive,	         
				SharedLocalBasisIndex);
	}
	else if (ShadingModel == 10)
	{
		const float3 WaterExtinction= WaterScatteringCoefficients + WaterAbsorptionCoefficients;
		const float3 WaterAlbedo	= WaterScatteringCoefficients / WaterExtinction;

		Out = GetStrataSingleLayerWaterBSDF(
				BaseColor, 				
				Metallic, 				
				Specular, 				
				Roughness, 				
				Emissive, 				
				Opacity,				
				WaterAlbedo, 			
				WaterExtinction, 		
				WaterPhaseG, 			
				ColorScaleBehindWater,	
				SharedLocalBasisIndex);
	}
	else
	{
		Out = StrataConvertLegacyMaterialDynamic(
			PixelFootprint,
			BaseColor, Specular, Metallic,
			Roughness, Anisotropy,
			SubSurfaceColor, SubSurfaceProfileId,
			ClearCoat, ClearCoatRoughness,
			Emissive,
			Opacity,
			TransmittanceColor,
			WaterScatteringCoefficients, WaterAbsorptionCoefficients, WaterPhaseG, ColorScaleBehindWater,
			ShadingModel,
			RawNormal,
			RawTangent,
			RawClearCoatNormal,
			RawCustomTangent,
			SharedLocalBasisIndex,
			ClearCoatBottomNormal_SharedLocalBasisIndex,
			SharedLocalBasisTypes);
	}

	return Out;
}

#line 186 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{
	
	float RelativeTime;
	
	float MotionBlurFade;
	
	float Random;
	
	float4 Velocity;
	
	float4 Color;
	
	float4 TranslatedWorldPositionAndSize;
	
	float4 MacroUV;

	



	float4 DynamicParameter;













	
	FLWCMatrix ParticleToWorld;

	
	FLWCInverseMatrix WorldToParticle;








	
	float2 Size;

	
	float SpriteRotation;
};

#line 296 "/Engine/Generated/Material.ush"
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};

#line 373 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	float SurfaceThickness;
	float Displacement;
	





FStrataData GetFrontStrataData()
{



	return FrontMaterial;

}

};

#line 414 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{




	
	float4 VertexColor;

	
	float3 WorldNormal;
	
	
	float3 WorldTangent;

	
	float3 ReflectionVector;

	
	float3 CameraVector;

	
	float3 LightVector;

	




	float4 SvPosition;
		
	
	float4 ScreenPosition;

	



	float2 ViewBufferUV;





	float UnMirrored;

	float TwoSidedSign;

	



	float3x3 TangentToWorld;






	



	FLWCVector3 AbsoluteWorldPosition;

	


	float3 WorldPosition_CamRelative;

	



	FLWCVector3 WorldPosition_NoOffsets;

	



	float3 WorldPosition_NoOffsets_CamRelative;

	
	float3 LightingPositionOffset;

	
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	





	float AOMaterialMask;















	
	uint PrimitiveId;










	


















	
	FMaterialParticleParameters Particle;











	
	
	
	uint Dummy;






















	FSharedLocalBases SharedLocalBases;
	FStrataTree StrataTree;






	FStrataPixelFootprint StrataPixelFootprint;

	FStrataPixelHeader GetFrontStrataHeader()
	{
		FStrataPixelHeader StrataPixelHeader = InitialiseStrataPixelHeader();





		StrataPixelHeader.StrataTree = StrataTree;
		StrataPixelHeader.BSDFCount = StrataTree.BSDFCount;
		StrataPixelHeader.SharedLocalBases = SharedLocalBases;

		StrataPixelHeader.IrradianceAO = InitIrradianceAndOcclusion();
		return StrataPixelHeader;
	}


	FMaterialAttributes MaterialAttributes;
};

#line 642 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}

#line 654 "/Engine/Generated/Material.ush"
struct FMaterialVertexParameters
{
	
	
	
	float3 WorldPosition;
	
	float3x3 TangentToWorld;










	













	
	
	FLWCMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	float4 VertexColor;












	
	FMaterialParticleParameters Particle;





	FMaterialAttributes MaterialAttributes;

	
	FSceneDataIntermediates SceneData;

	
	
	uint PrimitiveId;

	bool bEvaluateWorldPositionOffset;
};

#line 754 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}

#line 759 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}

#line 865 "/Engine/Generated/Material.ush"
float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}

#line 880 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetTranslatedWorldPosition(Parameters), ResolvedView.PreViewTranslation);
}

#line 890 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.AbsoluteWorldPosition;
}

#line 895 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition_NoMaterialOffsets(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_NoOffsets;
}

#line 900 "/Engine/Generated/Material.ush"
float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}

#line 2099 "/Engine/Generated/Material.ush"
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}

#line 3258 "/Engine/Generated/Material.ush"
void  FStrataPixelHeader::PreUpdateAllBSDFWithBottomUpOperatorVisit(FStrataAddressing NullStrataAddressing, float3 V)
{
	{
	}
}

#line 3263 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFsOperatorCoverageTransmittance(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V)
{
	 StrataTree.UpdateSingleBSDFOperatorCoverageTransmittance(this, 0, Settings, NullStrataAddressing, V);
}

#line 3267 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllOperatorsCoverageTransmittance()
{
}

#line 3270 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFWithBottomUpOperatorVisit()
{
}

#line 3273 "/Engine/Generated/Material.ush"
void  FStrataPixelHeader::PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(FStrataAddressing NullStrataAddressing, float3 V)
{
	{
	}
}

#line 3278 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V)
{
	 StrataTree.UpdateSingleBSDFOperatorCoverageTransmittance(this, 0, Settings, NullStrataAddressing, V);
}

#line 3282 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllOperatorsCoverageTransmittance_FullySimplified()
{
}

#line 3285 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified()
{
}

#line 3382 "/Engine/Generated/Material.ush"
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

#line 3387 "/Engine/Generated/Material.ush"
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
		
	
	{
		
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;

		
			OverrideNormal = Parameters.TangentToWorld[2] * (1 - ResolvedView.NormalOverrideParameter.w);
		

		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	

	return RetNormal;
}

#line 3543 "/Engine/Generated/Material.ush"
float GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}

#line 3582 "/Engine/Generated/Material.ush"
float GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}

#line 3589 "/Engine/Generated/Material.ush"
float GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}

#line 11275 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

#line 11280 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

#line 11285 "/Engine/Generated/Material.ush"
struct FMaterialRefractionData
{
	float2 Data;
	float  RefractionDepthBias;
};

#line 11291 "/Engine/Generated/Material.ush"
float GetMaterialRefractionIOR(in FMaterialRefractionData RefractionData)
{

	return RefractionData.Data.x;



}

#line 11318 "/Engine/Generated/Material.ush"
FMaterialRefractionData GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	FMaterialRefractionData Data;
	Data.Data					= PixelMaterialInputs.Refraction.xy;
	Data.RefractionDepthBias	= PixelMaterialInputs.Refraction.z;
	return Data;
}

#line 11400 "/Engine/Generated/Material.ush"
float GetRoughnessFromNormalCurvature(FMaterialPixelParameters InMaterialParameters)
{









	return 0.f;

}

#line 11421 "/Engine/Generated/Material.ush"
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	

	
	PixelMaterialInputs.Normal = Parameters.TangentToWorld[2];



	Parameters.StrataPixelFootprint = StrataGetPixelFootprint(Parameters.WorldPosition_CamRelative, GetRoughnessFromNormalCurvature(Parameters));
	Parameters.SharedLocalBases = StrataInitialiseSharedLocalBases();
	Parameters.StrataTree = GetInitialisedStrataTree();






	
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);














	Parameters.WorldNormal = normalize(MaterialNormal);








	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


	
	float3 Local0 = lerp(float3(0.00000000,0.00000000,0.00000000),Material_PreshaderBuffer[1].yzw,Material_PreshaderBuffer[1].x);
	float4 Local1 = MaterialCollection0_Vectors[4];
	FLWCVector3 Local2 = GetWorldPosition(Parameters);
	FLWCVector3 Local3 = LWCMultiply(  Local2 , LWCPromote(float3(1.00000000,1.00000000,0.00000000)));
	FLWCVector3 Local4 = LWCSubtract(LWCPromote(float3(float2(Local1.rgba.xyz.r,Local1.rgba.xyz.g),Local1.rgba.xyz.b)),   Local3 );
	FLWCScalar Local5 = LWCLength(  Local4 );
	float4 Local6 = MaterialCollection0_Vectors[1];
	float Local7 = max(0.00001000,Local6.r);
	float Local8 = (1.00000000 / Local7);
	FLWCScalar Local9 = LWCMultiply(  Local5 , LWCPromote(Local8));
	FLWCScalar Local10 = LWCSubtract(LWCPromote(1.00000000),   Local9 );
	FLWCScalar Local11 = LWCMultiply(  Local10 , LWCPromote(100000.00000000));
	float Local12 = LWCSaturate(  Local11 );
	float Local13 = lerp(1.00000000,0.00000000,  Local12 );
	FLWCVector3 Local2713 = LWCMultiply(  Local2 , LWCPromote(((float3)Material_PreshaderBuffer[86].z)));
	float3 Local2714 = LWCNormalizeTile(  Local2713 ).Offset;
	float Local2715 = MaterialExpressionNoise(Local2714,1.00000000,1.00000000,2.00000000,1.00000000,6.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2716 = saturate(Local2715);
	FLWCVector3 Local2717 = ResolvedView.WorldCameraOrigin;
	FLWCVector3 Local2718 = LWCMultiply(Local2717, LWCPromote(float3(1.00000000,1.00000000,0.00000000)));
	FLWCVector3 Local2719 = LWCSubtract(Local2718,   Local3 );
	float3 Local2720 = LWCToFloat(  Local2719 );
	float Local2721 = length(  Local2720 );
	float4 Local2722 = MaterialCollection0_Vectors[0];
	float Local2723 = (Local2722.r * Material_PreshaderBuffer[85].y);
	float Local2724 = max(0.00001000,Local2723);
	float Local2725 = (1.00000000 / Local2724);
	float Local2726 = (  Local2721  * Local2725);
	float Local2727 = (1.00000000 -   Local2726 );
	float Local2728 = (  Local2727  * Material_PreshaderBuffer[86].y);
	float Local2729 = saturate(  Local2728 );
	float Local2730 = lerp(Local2716,1.00000000,  Local2729 );
	float Local2731 = GetDistanceToNearestSurfaceGlobal(  Local2 );
	float Local2732 = (Local2731 * Material_PreshaderBuffer[87].x);
	float Local2733 = (Local2732 - Material_PreshaderBuffer[87].y);
	float Local2734 = (Local2733 * Material_PreshaderBuffer[88].x);
	float Local2735 = (Local2734 * (0.00000000 - 1.00000000));
	float Local2736 = (Local2735 + 1.00000000);
	float Local2737 = saturate(Local2736);
	FLWCVector3 Local2738 = GetWorldPosition_NoMaterialOffsets(Parameters);
	float3 Local2739 = GetDistanceFieldGradientGlobal(  Local2 );
	float3 Local2740 = (Local2739 * ((float3)Material_PreshaderBuffer[88].z));
	FLWCVector3 Local2741 = LWCAdd(  Local2738 , LWCPromote(Local2740));
	FLWCVector3 Local2742 = LWCMultiply(Local2741, LWCPromote(((float3)Material_PreshaderBuffer[88].w)));
	float Local2743 = lerp(View_GameTime,Local2722.b,Local2722.a);
	float Local2744 = (Local2743 * Material_PreshaderBuffer[89].y);
	float2 Local2745 = (float2(Local2744,Local2744) + float2(1.00000000,0.00000000));
	float3 Local2746 = LWCNormalizeTile(MakeLWCVector(LWCPromote(MakeLWCVector(LWCPromote( LWCGetComponent( Local2742 , 0)),LWCPromote( LWCGetComponent( Local2742 , 1)))),LWCPromote(Local2745.r))).Offset;
	float Local2747 = MaterialExpressionNoise(Local2746,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2748 = (Local2737 * Material_PreshaderBuffer[89].z);
	float Local2749 = (Local2747 - Local2748);
	float Local2750 = (Local2748 + 1.00000000);
	float Local2751 = (Local2750 - Local2748);
	float Local2752 = (Local2749 / Local2751);
	float Local2753 = (Local2752 * (0.00000000 - 1.00000000));
	float Local2754 = (Local2753 + 1.00000000);
	float Local2755 = saturate(Local2754);
	float Local2756 = PositiveClampedPow(Local2755,2.00000000);
	float Local2757 = lerp(Material_PreshaderBuffer[90].x,Material_PreshaderBuffer[89].w,Local2756);
	float Local2758 = saturate(Local2757);
	float Local2759 = (Local2737 * Local2758.r);
	FLWCVector3 Local2760 = LWCMultiply(  Local2738 , LWCPromote(((float3)Material_PreshaderBuffer[90].y)));
	float3 Local2761 = LWCNormalizeTile(  Local2760 ).Offset;
	float Local2762 = MaterialExpressionNoise(Local2761,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2763 = saturate(Local2762);
	FLWCVector3 Local2764 = LWCMultiply(  Local2760 , LWCPromote(((float3)1.20000005)));
	float3 Local2765 = LWCNormalizeTile(  Local2764 ).Offset;
	float Local2766 = MaterialExpressionNoise(Local2765,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2767 = saturate(Local2766);
	float Local2768 = (Local2763 + Local2767);
	float Local2769 = (Local2759 - Local2768);
	float Local2770 = (Local2769 * Material_PreshaderBuffer[90].z);
	float Local2771 =  select_internal( (abs(Material_PreshaderBuffer[2].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[2].x >= -1.00000000) , Material_PreshaderBuffer[2].x , Material_PreshaderBuffer[2].y ) , Material_PreshaderBuffer[2].x );
	float Local2772 =  select_internal( (abs(Local2771 - 1.00000000) > 0.00001000) ,  select_internal( (Local2771 >= 1.00000000) , Material_PreshaderBuffer[2].z , Material_PreshaderBuffer[2].x ) , Material_PreshaderBuffer[2].x );
	float Local2773 =  select_internal( (abs(Local2772 - 0.00000000) > 0.00001000) ,  select_internal( (Local2772 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local2774 = max(Local2773,-1.00000000);
	float Local2775 = min(Local2774,1.00000000);
	float3 Local2776 = (float3(float2(Local2775,Material_PreshaderBuffer[4].w),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local2777 = max(Local2776,((float3)-1.00000000));
	float3 Local2778 = min(Local2777,((float3)1.00000000));
	FLWCScalar Local2779 =  LWCGetComponent(   Local2738  , 0);
	FLWCScalar Local2780 =  LWCGetComponent(   Local2738  , 1);
	FLWCVector2 Local2781 = MakeLWCVector(LWCPromote(  Local2779 ),LWCPromote(  Local2780 ));
	FLWCScalar Local2782 =  LWCGetComponent(   Local2738  , 2);
	FLWCVector3 Local2783 = MakeLWCVector(LWCPromote(  Local2781 ),LWCPromote(  Local2782 ));
	FLWCVector2 Local2784 = MakeLWCVector( LWCGetComponent(   Local2783  , 0),  LWCGetComponent(   Local2783  , 1));
	FLWCScalar Local2785 = LWCDot(LWCPromote(float2(Local2778.r,Local2778.g)),   Local2784 );
	FLWCScalar Local2786 = LWCMultiply(  Local2785 , LWCPromote(Material_PreshaderBuffer[9].x));
	float Local2787 = (Local2743 - Material_PreshaderBuffer[9].z);
	FLWCVector3 Local2788 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[9].w)),   Local2738 );
	FLWCVector3 Local2789 = LWCMultiply(  Local2788 , LWCPromote(((float3)Material_PreshaderBuffer[10].x)));
	FLWCVector3 Local2790 = LWCMultiply(  Local2789 , LWCPromote(((float3)Local2722.g)));
	FLWCVector3 Local2791 = LWCMultiply(  Local2790 , LWCPromote(((float3)0.10000000)));
	FLWCScalar Local2792 =  LWCGetComponent(   Local2791  , 0);
	FLWCScalar Local2793 =  LWCGetComponent(   Local2791  , 1);
	FLWCVector2 Local2794 = MakeLWCVector(LWCPromote(  Local2792 ),LWCPromote(  Local2793 ));
	float Local2795 = (Local2743 * Material_PreshaderBuffer[10].z);
	FLWCScalar Local2796 =  LWCGetComponent(   Local2791  , 2);
	FLWCVector2 Local2797 = LWCAdd(LWCPromote(float2(Local2795,Local2795)), MakeLWCVector(LWCGetComponent(  Local2796 , 0),LWCGetComponent(  Local2796 , 0)));
	FLWCScalar Local2798 = MakeLWCVector(LWCGetComponent(  Local2797 , 0));
	FLWCVector3 Local2799 = MakeLWCVector(LWCPromote(  Local2794 ),LWCPromote(  Local2798 ));
	float3 Local2800 = LWCNormalizeTile(  Local2799 ).Offset;
	float Local2801 = MaterialExpressionNoise(Local2800,1.00000000,1.00000000,3.00000000,0.00000000,6.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2802 = (Local2801 - 0.00000000);
	float Local2803 = (Local2802 + 0.00000000);
	float Local2804 = saturate(Local2803);
	float Local2805 = lerp(Local2743,Local2787,Local2804);
	float Local2806 = (Material_PreshaderBuffer[10].w * Local2805);
	FLWCScalar Local2807 = LWCAdd(  Local2786 , LWCPromote(Local2806));
	FLWCScalar Local2808 = LWCMultiply(Local2807, LWCPromote(6.28318548));
	float Local2809 = LWCCos(Local2808);
	float Local2810 = (Local2809 * Local2778.r);
	FLWCVector3 Local2811 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[12].x)),   Local2738 );
	FLWCVector3 Local2812 = LWCMultiply(  Local2811 , LWCPromote(((float3)Material_PreshaderBuffer[12].y)));
	FLWCVector3 Local2813 = LWCMultiply(  Local2812 , LWCPromote(((float3)0.00100000)));
	FLWCVector3 Local2814 = LWCMultiply(  Local2813 , LWCPromote(((float3)0.10000000)));
	FLWCScalar Local2815 =  LWCGetComponent(   Local2814  , 0);
	FLWCScalar Local2816 =  LWCGetComponent(   Local2814  , 1);
	FLWCVector2 Local2817 = MakeLWCVector(LWCPromote(  Local2815 ),LWCPromote(  Local2816 ));
	float Local2818 = (Local2743 * Material_PreshaderBuffer[12].w);
	FLWCScalar Local2819 =  LWCGetComponent(   Local2814  , 2);
	FLWCVector2 Local2820 = LWCAdd(LWCPromote(float2(Local2818,Local2818)), MakeLWCVector(LWCGetComponent(  Local2819 , 0),LWCGetComponent(  Local2819 , 0)));
	FLWCScalar Local2821 = MakeLWCVector(LWCGetComponent(  Local2820 , 0));
	FLWCVector3 Local2822 = MakeLWCVector(LWCPromote(  Local2817 ),LWCPromote(  Local2821 ));
	float3 Local2823 = LWCNormalizeTile(  Local2822 ).Offset;
	float Local2824 = MaterialExpressionNoise(Local2823,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	FLWCVector3 Local2825 = LWCMultiply(  Local2812 , LWCPromote(((float3)0.00200000)));
	FLWCVector3 Local2826 = LWCMultiply(  Local2825 , LWCPromote(((float3)0.10000000)));
	FLWCScalar Local2827 =  LWCGetComponent(   Local2826  , 0);
	FLWCScalar Local2828 =  LWCGetComponent(   Local2826  , 1);
	FLWCVector2 Local2829 = MakeLWCVector(LWCPromote(  Local2827 ),LWCPromote(  Local2828 ));
	FLWCScalar Local2830 =  LWCGetComponent(   Local2826  , 2);
	FLWCVector2 Local2831 = LWCAdd(LWCPromote(float2(Local2818,Local2818)), MakeLWCVector(LWCGetComponent(  Local2830 , 0),LWCGetComponent(  Local2830 , 0)));
	FLWCScalar Local2832 = MakeLWCVector(LWCGetComponent(  Local2831 , 0));
	FLWCVector3 Local2833 = MakeLWCVector(LWCPromote(  Local2829 ),LWCPromote(  Local2832 ));
	float3 Local2834 = LWCNormalizeTile(  Local2833 ).Offset;
	float Local2835 = MaterialExpressionNoise(Local2834,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2836 = (Local2835 - 0.00000000);
	float Local2837 = (Local2836 * Material_PreshaderBuffer[13].y);
	float Local2838 = (Local2837 + Material_PreshaderBuffer[13].x);
	float Local2839 = (Local2824 * Local2838);
	float Local2840 = lerp(Material_PreshaderBuffer[11].w,Material_PreshaderBuffer[13].z,Local2839);
	float Local2841 = (Material_PreshaderBuffer[9].x * Local2840);
	float Local2842 = (Material_PreshaderBuffer[13].w * Local2841);
	float Local2843 = (Material_PreshaderBuffer[14].x / Local2842);
	float Local2844 = (Local2843 * Local2840);
	float Local2845 = (Local2810 * Local2844);
	float Local2846 = (Local2809 * Local2778.g);
	float Local2847 = (Local2846 * Local2844);
	float Local2848 = LWCSin(Local2808);
	float Local2849 = (Local2848 * Local2840);
	float3 Local2850 = (float3(float2(Local2775,Material_PreshaderBuffer[4].w),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local2851 = max(Local2850,((float3)-1.00000000));
	float3 Local2852 = min(Local2851,((float3)1.00000000));
	FLWCScalar Local2853 = LWCDot(LWCPromote(float2(Local2852.r,Local2852.g)),   Local2784 );
	FLWCScalar Local2854 = LWCMultiply(  Local2853 , LWCPromote(Material_PreshaderBuffer[16].y));
	float Local2855 = (Material_PreshaderBuffer[17].x * Local2805);
	FLWCScalar Local2856 = LWCAdd(  Local2854 , LWCPromote(Local2855));
	FLWCScalar Local2857 = LWCMultiply(Local2856, LWCPromote(6.28318548));
	float Local2858 = LWCCos(Local2857);
	float Local2859 = (Local2858 * Local2852.r);
	float Local2860 = (Local2840 * Material_PreshaderBuffer[17].z);
	float Local2861 = (Material_PreshaderBuffer[16].y * Local2860);
	float Local2862 = (Material_PreshaderBuffer[13].w * Local2861);
	float Local2863 = (Material_PreshaderBuffer[17].w / Local2862);
	float Local2864 = (Local2863 * Local2860);
	float Local2865 = (Local2859 * Local2864);
	float Local2866 = (Local2858 * Local2852.g);
	float Local2867 = (Local2866 * Local2864);
	float Local2868 = LWCSin(Local2857);
	float Local2869 = (Local2868 * Local2860);
	float3 Local2870 = (float3(float2(Local2845,Local2847),Local2849) + float3(float2(Local2865,Local2867),Local2869));
	float3 Local2871 = (float3(float2(Local2775,Material_PreshaderBuffer[4].w),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local2872 = max(Local2871,((float3)-1.00000000));
	float3 Local2873 = min(Local2872,((float3)1.00000000));
	FLWCScalar Local2874 = LWCDot(LWCPromote(float2(Local2873.r,Local2873.g)),   Local2784 );
	FLWCScalar Local2875 = LWCMultiply(  Local2874 , LWCPromote(Material_PreshaderBuffer[18].y));
	float Local2876 = (Material_PreshaderBuffer[18].w * Local2805);
	FLWCScalar Local2877 = LWCAdd(  Local2875 , LWCPromote(Local2876));
	FLWCScalar Local2878 = LWCMultiply(Local2877, LWCPromote(6.28318548));
	float Local2879 = LWCCos(Local2878);
	float Local2880 = (Local2879 * Local2873.r);
	float Local2881 = (Local2860 * Material_PreshaderBuffer[17].z);
	float Local2882 = (Material_PreshaderBuffer[18].y * Local2881);
	float Local2883 = (Material_PreshaderBuffer[13].w * Local2882);
	float Local2884 = (Material_PreshaderBuffer[19].x / Local2883);
	float Local2885 = (Local2884 * Local2881);
	float Local2886 = (Local2880 * Local2885);
	float Local2887 = (Local2879 * Local2873.g);
	float Local2888 = (Local2887 * Local2885);
	float Local2889 = LWCSin(Local2878);
	float Local2890 = (Local2889 * Local2881);
	float3 Local2891 = (Local2870 + float3(float2(Local2886,Local2888),Local2890));
	float3 Local2892 = (float3(float2(Local2775,Material_PreshaderBuffer[4].w),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local2893 = max(Local2892,((float3)-1.00000000));
	float3 Local2894 = min(Local2893,((float3)1.00000000));
	FLWCScalar Local2895 = LWCDot(LWCPromote(float2(Local2894.r,Local2894.g)),   Local2784 );
	FLWCScalar Local2896 = LWCMultiply(  Local2895 , LWCPromote(Material_PreshaderBuffer[19].z));
	float Local2897 = (Material_PreshaderBuffer[20].x * Local2805);
	FLWCScalar Local2898 = LWCAdd(  Local2896 , LWCPromote(Local2897));
	FLWCScalar Local2899 = LWCMultiply(Local2898, LWCPromote(6.28318548));
	float Local2900 = LWCCos(Local2899);
	float Local2901 = (Local2900 * Local2894.r);
	float Local2902 = (Local2881 * Material_PreshaderBuffer[17].z);
	float Local2903 = (Material_PreshaderBuffer[19].z * Local2902);
	float Local2904 = (Material_PreshaderBuffer[13].w * Local2903);
	float Local2905 = (Material_PreshaderBuffer[20].y / Local2904);
	float Local2906 = (Local2905 * Local2902);
	float Local2907 = (Local2901 * Local2906);
	float Local2908 = (Local2900 * Local2894.g);
	float Local2909 = (Local2908 * Local2906);
	float Local2910 = LWCSin(Local2899);
	float Local2911 = (Local2910 * Local2902);
	float3 Local2912 = (Local2891 + float3(float2(Local2907,Local2909),Local2911));
	float Local2913 =  select_internal( (abs(Material_PreshaderBuffer[20].w - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[20].w >= -1.00000000) , Material_PreshaderBuffer[20].w , Material_PreshaderBuffer[21].x ) , Material_PreshaderBuffer[20].w );
	float Local2914 =  select_internal( (abs(Local2913 - 1.00000000) > 0.00001000) ,  select_internal( (Local2913 >= 1.00000000) , Material_PreshaderBuffer[21].y , Material_PreshaderBuffer[20].w ) , Material_PreshaderBuffer[20].w );
	float Local2915 =  select_internal( (abs(Local2914 - 0.00000000) > 0.00001000) ,  select_internal( (Local2914 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local2916 = max(Local2915,-1.00000000);
	float Local2917 = min(Local2916,1.00000000);
	float3 Local2918 = (float3(float2(Local2917,Material_PreshaderBuffer[22].z),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local2919 = max(Local2918,((float3)-1.00000000));
	float3 Local2920 = min(Local2919,((float3)1.00000000));
	FLWCScalar Local2921 = LWCDot(LWCPromote(float2(Local2920.r,Local2920.g)),   Local2784 );
	FLWCScalar Local2922 = LWCMultiply(  Local2921 , LWCPromote(Material_PreshaderBuffer[24].w));
	float Local2923 = (Material_PreshaderBuffer[25].z * Local2805);
	FLWCScalar Local2924 = LWCAdd(  Local2922 , LWCPromote(Local2923));
	FLWCScalar Local2925 = LWCMultiply(Local2924, LWCPromote(6.28318548));
	float Local2926 = LWCCos(Local2925);
	float Local2927 = (Local2926 * Local2920.r);
	float Local2928 = (Local2840 * Material_PreshaderBuffer[25].w);
	float Local2929 = (Material_PreshaderBuffer[24].w * Local2928);
	float Local2930 = (Material_PreshaderBuffer[13].w * Local2929);
	float Local2931 = (Material_PreshaderBuffer[14].x / Local2930);
	float Local2932 = (Local2931 * Local2928);
	float Local2933 = (Local2927 * Local2932);
	float Local2934 = (Local2926 * Local2920.g);
	float Local2935 = (Local2934 * Local2932);
	float Local2936 = LWCSin(Local2925);
	float Local2937 = (Local2936 * Local2928);
	float3 Local2938 = (float3(float2(Local2917,Material_PreshaderBuffer[22].z),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local2939 = max(Local2938,((float3)-1.00000000));
	float3 Local2940 = min(Local2939,((float3)1.00000000));
	FLWCScalar Local2941 = LWCDot(LWCPromote(float2(Local2940.r,Local2940.g)),   Local2784 );
	FLWCScalar Local2942 = LWCMultiply(  Local2941 , LWCPromote(Material_PreshaderBuffer[26].y));
	float Local2943 = (Material_PreshaderBuffer[26].w * Local2805);
	FLWCScalar Local2944 = LWCAdd(  Local2942 , LWCPromote(Local2943));
	FLWCScalar Local2945 = LWCMultiply(Local2944, LWCPromote(6.28318548));
	float Local2946 = LWCCos(Local2945);
	float Local2947 = (Local2946 * Local2940.r);
	float Local2948 = (Local2928 * Material_PreshaderBuffer[17].z);
	float Local2949 = (Material_PreshaderBuffer[26].y * Local2948);
	float Local2950 = (Material_PreshaderBuffer[13].w * Local2949);
	float Local2951 = (Material_PreshaderBuffer[17].w / Local2950);
	float Local2952 = (Local2951 * Local2948);
	float Local2953 = (Local2947 * Local2952);
	float Local2954 = (Local2946 * Local2940.g);
	float Local2955 = (Local2954 * Local2952);
	float Local2956 = LWCSin(Local2945);
	float Local2957 = (Local2956 * Local2948);
	float3 Local2958 = (float3(float2(Local2933,Local2935),Local2937) + float3(float2(Local2953,Local2955),Local2957));
	float3 Local2959 = (float3(float2(Local2917,Material_PreshaderBuffer[22].z),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local2960 = max(Local2959,((float3)-1.00000000));
	float3 Local2961 = min(Local2960,((float3)1.00000000));
	FLWCScalar Local2962 = LWCDot(LWCPromote(float2(Local2961.r,Local2961.g)),   Local2784 );
	FLWCScalar Local2963 = LWCMultiply(  Local2962 , LWCPromote(Material_PreshaderBuffer[27].y));
	float Local2964 = (Material_PreshaderBuffer[27].w * Local2805);
	FLWCScalar Local2965 = LWCAdd(  Local2963 , LWCPromote(Local2964));
	FLWCScalar Local2966 = LWCMultiply(Local2965, LWCPromote(6.28318548));
	float Local2967 = LWCCos(Local2966);
	float Local2968 = (Local2967 * Local2961.r);
	float Local2969 = (Local2948 * Material_PreshaderBuffer[17].z);
	float Local2970 = (Material_PreshaderBuffer[27].y * Local2969);
	float Local2971 = (Material_PreshaderBuffer[13].w * Local2970);
	float Local2972 = (Material_PreshaderBuffer[19].x / Local2971);
	float Local2973 = (Local2972 * Local2969);
	float Local2974 = (Local2968 * Local2973);
	float Local2975 = (Local2967 * Local2961.g);
	float Local2976 = (Local2975 * Local2973);
	float Local2977 = LWCSin(Local2966);
	float Local2978 = (Local2977 * Local2969);
	float3 Local2979 = (Local2958 + float3(float2(Local2974,Local2976),Local2978));
	float3 Local2980 = (float3(float2(Local2917,Material_PreshaderBuffer[22].z),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local2981 = max(Local2980,((float3)-1.00000000));
	float3 Local2982 = min(Local2981,((float3)1.00000000));
	FLWCScalar Local2983 = LWCDot(LWCPromote(float2(Local2982.r,Local2982.g)),   Local2784 );
	FLWCScalar Local2984 = LWCMultiply(  Local2983 , LWCPromote(Material_PreshaderBuffer[28].y));
	float Local2985 = (Material_PreshaderBuffer[28].w * Local2805);
	FLWCScalar Local2986 = LWCAdd(  Local2984 , LWCPromote(Local2985));
	FLWCScalar Local2987 = LWCMultiply(Local2986, LWCPromote(6.28318548));
	float Local2988 = LWCCos(Local2987);
	float Local2989 = (Local2988 * Local2982.r);
	float Local2990 = (Local2969 * Material_PreshaderBuffer[17].z);
	float Local2991 = (Material_PreshaderBuffer[28].y * Local2990);
	float Local2992 = (Material_PreshaderBuffer[13].w * Local2991);
	float Local2993 = (Material_PreshaderBuffer[20].y / Local2992);
	float Local2994 = (Local2993 * Local2990);
	float Local2995 = (Local2989 * Local2994);
	float Local2996 = (Local2988 * Local2982.g);
	float Local2997 = (Local2996 * Local2994);
	float Local2998 = LWCSin(Local2987);
	float Local2999 = (Local2998 * Local2990);
	float3 Local3000 = (Local2979 + float3(float2(Local2995,Local2997),Local2999));
	float3 Local3001 = (Local2912 + Local3000);
	float Local3002 =  select_internal( (abs(Material_PreshaderBuffer[29].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[29].x >= -1.00000000) , Material_PreshaderBuffer[29].x , Material_PreshaderBuffer[29].y ) , Material_PreshaderBuffer[29].x );
	float Local3003 =  select_internal( (abs(Local3002 - 1.00000000) > 0.00001000) ,  select_internal( (Local3002 >= 1.00000000) , Material_PreshaderBuffer[29].z , Material_PreshaderBuffer[29].x ) , Material_PreshaderBuffer[29].x );
	float Local3004 =  select_internal( (abs(Local3003 - 0.00000000) > 0.00001000) ,  select_internal( (Local3003 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3005 = max(Local3004,-1.00000000);
	float Local3006 = min(Local3005,1.00000000);
	float3 Local3007 = (float3(float2(Local3006,Material_PreshaderBuffer[30].w),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3008 = max(Local3007,((float3)-1.00000000));
	float3 Local3009 = min(Local3008,((float3)1.00000000));
	FLWCScalar Local3010 = LWCDot(LWCPromote(float2(Local3009.r,Local3009.g)),   Local2784 );
	FLWCScalar Local3011 = LWCMultiply(  Local3010 , LWCPromote(Material_PreshaderBuffer[32].z));
	float Local3012 = (Material_PreshaderBuffer[32].w * Local2805);
	FLWCScalar Local3013 = LWCAdd(  Local3011 , LWCPromote(Local3012));
	FLWCScalar Local3014 = LWCMultiply(Local3013, LWCPromote(6.28318548));
	float Local3015 = LWCCos(Local3014);
	float Local3016 = (Local3015 * Local3009.r);
	float Local3017 = (Material_PreshaderBuffer[32].z * Local2928);
	float Local3018 = (Material_PreshaderBuffer[13].w * Local3017);
	float Local3019 = (Material_PreshaderBuffer[14].x / Local3018);
	float Local3020 = (Local3019 * Local2928);
	float Local3021 = (Local3016 * Local3020);
	float Local3022 = (Local3015 * Local3009.g);
	float Local3023 = (Local3022 * Local3020);
	float Local3024 = LWCSin(Local3014);
	float Local3025 = (Local3024 * Local2928);
	float3 Local3026 = (float3(float2(Local3006,Material_PreshaderBuffer[30].w),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3027 = max(Local3026,((float3)-1.00000000));
	float3 Local3028 = min(Local3027,((float3)1.00000000));
	FLWCScalar Local3029 = LWCDot(LWCPromote(float2(Local3028.r,Local3028.g)),   Local2784 );
	FLWCScalar Local3030 = LWCMultiply(  Local3029 , LWCPromote(Material_PreshaderBuffer[33].y));
	float Local3031 = (Material_PreshaderBuffer[33].z * Local2805);
	FLWCScalar Local3032 = LWCAdd(  Local3030 , LWCPromote(Local3031));
	FLWCScalar Local3033 = LWCMultiply(Local3032, LWCPromote(6.28318548));
	float Local3034 = LWCCos(Local3033);
	float Local3035 = (Local3034 * Local3028.r);
	float Local3036 = (Material_PreshaderBuffer[33].y * Local2948);
	float Local3037 = (Material_PreshaderBuffer[13].w * Local3036);
	float Local3038 = (Material_PreshaderBuffer[17].w / Local3037);
	float Local3039 = (Local3038 * Local2948);
	float Local3040 = (Local3035 * Local3039);
	float Local3041 = (Local3034 * Local3028.g);
	float Local3042 = (Local3041 * Local3039);
	float Local3043 = LWCSin(Local3033);
	float Local3044 = (Local3043 * Local2948);
	float3 Local3045 = (float3(float2(Local3021,Local3023),Local3025) + float3(float2(Local3040,Local3042),Local3044));
	float3 Local3046 = (float3(float2(Local3006,Material_PreshaderBuffer[30].w),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3047 = max(Local3046,((float3)-1.00000000));
	float3 Local3048 = min(Local3047,((float3)1.00000000));
	FLWCScalar Local3049 = LWCDot(LWCPromote(float2(Local3048.r,Local3048.g)),   Local2784 );
	FLWCScalar Local3050 = LWCMultiply(  Local3049 , LWCPromote(Material_PreshaderBuffer[34].x));
	float Local3051 = (Material_PreshaderBuffer[34].y * Local2805);
	FLWCScalar Local3052 = LWCAdd(  Local3050 , LWCPromote(Local3051));
	FLWCScalar Local3053 = LWCMultiply(Local3052, LWCPromote(6.28318548));
	float Local3054 = LWCCos(Local3053);
	float Local3055 = (Local3054 * Local3048.r);
	float Local3056 = (Material_PreshaderBuffer[34].x * Local2969);
	float Local3057 = (Material_PreshaderBuffer[13].w * Local3056);
	float Local3058 = (Material_PreshaderBuffer[19].x / Local3057);
	float Local3059 = (Local3058 * Local2969);
	float Local3060 = (Local3055 * Local3059);
	float Local3061 = (Local3054 * Local3048.g);
	float Local3062 = (Local3061 * Local3059);
	float Local3063 = LWCSin(Local3053);
	float Local3064 = (Local3063 * Local2969);
	float3 Local3065 = (Local3045 + float3(float2(Local3060,Local3062),Local3064));
	float3 Local3066 = (float3(float2(Local3006,Material_PreshaderBuffer[30].w),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3067 = max(Local3066,((float3)-1.00000000));
	float3 Local3068 = min(Local3067,((float3)1.00000000));
	FLWCScalar Local3069 = LWCDot(LWCPromote(float2(Local3068.r,Local3068.g)),   Local2784 );
	FLWCScalar Local3070 = LWCMultiply(  Local3069 , LWCPromote(Material_PreshaderBuffer[34].w));
	float Local3071 = (Material_PreshaderBuffer[35].x * Local2805);
	FLWCScalar Local3072 = LWCAdd(  Local3070 , LWCPromote(Local3071));
	FLWCScalar Local3073 = LWCMultiply(Local3072, LWCPromote(6.28318548));
	float Local3074 = LWCCos(Local3073);
	float Local3075 = (Local3074 * Local3068.r);
	float Local3076 = (Material_PreshaderBuffer[34].w * Local2990);
	float Local3077 = (Material_PreshaderBuffer[13].w * Local3076);
	float Local3078 = (Material_PreshaderBuffer[20].y / Local3077);
	float Local3079 = (Local3078 * Local2990);
	float Local3080 = (Local3075 * Local3079);
	float Local3081 = (Local3074 * Local3068.g);
	float Local3082 = (Local3081 * Local3079);
	float Local3083 = LWCSin(Local3073);
	float Local3084 = (Local3083 * Local2990);
	float3 Local3085 = (Local3065 + float3(float2(Local3080,Local3082),Local3084));
	float3 Local3086 = (Local3001 + Local3085);
	float Local3087 =  select_internal( (abs(Material_PreshaderBuffer[35].y - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[35].y >= -1.00000000) , Material_PreshaderBuffer[35].y , Material_PreshaderBuffer[35].z ) , Material_PreshaderBuffer[35].y );
	float Local3088 =  select_internal( (abs(Local3087 - 1.00000000) > 0.00001000) ,  select_internal( (Local3087 >= 1.00000000) , Material_PreshaderBuffer[35].w , Material_PreshaderBuffer[35].y ) , Material_PreshaderBuffer[35].y );
	float Local3089 =  select_internal( (abs(Local3088 - 0.00000000) > 0.00001000) ,  select_internal( (Local3088 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3090 = max(Local3089,-1.00000000);
	float Local3091 = min(Local3090,1.00000000);
	float3 Local3092 = (float3(float2(Local3091,Material_PreshaderBuffer[37].x),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3093 = max(Local3092,((float3)-1.00000000));
	float3 Local3094 = min(Local3093,((float3)1.00000000));
	FLWCScalar Local3095 = LWCDot(LWCPromote(float2(Local3094.r,Local3094.g)),   Local2784 );
	FLWCScalar Local3096 = LWCMultiply(  Local3095 , LWCPromote(Material_PreshaderBuffer[38].w));
	float Local3097 = (Material_PreshaderBuffer[39].x * Local2805);
	FLWCScalar Local3098 = LWCAdd(  Local3096 , LWCPromote(Local3097));
	FLWCScalar Local3099 = LWCMultiply(Local3098, LWCPromote(6.28318548));
	float Local3100 = LWCCos(Local3099);
	float Local3101 = (Local3100 * Local3094.r);
	float Local3102 = (Material_PreshaderBuffer[38].w * Local2840);
	float Local3103 = (Material_PreshaderBuffer[13].w * Local3102);
	float Local3104 = (Material_PreshaderBuffer[14].x / Local3103);
	float Local3105 = (Local3104 * Local2840);
	float Local3106 = (Local3101 * Local3105);
	float Local3107 = (Local3100 * Local3094.g);
	float Local3108 = (Local3107 * Local3105);
	float Local3109 = LWCSin(Local3099);
	float Local3110 = (Local3109 * Local2840);
	float3 Local3111 = (float3(float2(Local3091,Material_PreshaderBuffer[37].x),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3112 = max(Local3111,((float3)-1.00000000));
	float3 Local3113 = min(Local3112,((float3)1.00000000));
	FLWCScalar Local3114 = LWCDot(LWCPromote(float2(Local3113.r,Local3113.g)),   Local2784 );
	FLWCScalar Local3115 = LWCMultiply(  Local3114 , LWCPromote(Material_PreshaderBuffer[39].z));
	float Local3116 = (Material_PreshaderBuffer[39].w * Local2805);
	FLWCScalar Local3117 = LWCAdd(  Local3115 , LWCPromote(Local3116));
	FLWCScalar Local3118 = LWCMultiply(Local3117, LWCPromote(6.28318548));
	float Local3119 = LWCCos(Local3118);
	float Local3120 = (Local3119 * Local3113.r);
	float Local3121 = (Material_PreshaderBuffer[39].z * Local2860);
	float Local3122 = (Material_PreshaderBuffer[13].w * Local3121);
	float Local3123 = (Material_PreshaderBuffer[17].w / Local3122);
	float Local3124 = (Local3123 * Local2860);
	float Local3125 = (Local3120 * Local3124);
	float Local3126 = (Local3119 * Local3113.g);
	float Local3127 = (Local3126 * Local3124);
	float Local3128 = LWCSin(Local3118);
	float Local3129 = (Local3128 * Local2860);
	float3 Local3130 = (float3(float2(Local3106,Local3108),Local3110) + float3(float2(Local3125,Local3127),Local3129));
	float3 Local3131 = (float3(float2(Local3091,Material_PreshaderBuffer[37].x),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3132 = max(Local3131,((float3)-1.00000000));
	float3 Local3133 = min(Local3132,((float3)1.00000000));
	FLWCScalar Local3134 = LWCDot(LWCPromote(float2(Local3133.r,Local3133.g)),   Local2784 );
	FLWCScalar Local3135 = LWCMultiply(  Local3134 , LWCPromote(Material_PreshaderBuffer[40].y));
	float Local3136 = (Material_PreshaderBuffer[40].z * Local2805);
	FLWCScalar Local3137 = LWCAdd(  Local3135 , LWCPromote(Local3136));
	FLWCScalar Local3138 = LWCMultiply(Local3137, LWCPromote(6.28318548));
	float Local3139 = LWCCos(Local3138);
	float Local3140 = (Local3139 * Local3133.r);
	float Local3141 = (Material_PreshaderBuffer[40].y * Local2881);
	float Local3142 = (Material_PreshaderBuffer[13].w * Local3141);
	float Local3143 = (Material_PreshaderBuffer[19].x / Local3142);
	float Local3144 = (Local3143 * Local2881);
	float Local3145 = (Local3140 * Local3144);
	float Local3146 = (Local3139 * Local3133.g);
	float Local3147 = (Local3146 * Local3144);
	float Local3148 = LWCSin(Local3138);
	float Local3149 = (Local3148 * Local2881);
	float3 Local3150 = (Local3130 + float3(float2(Local3145,Local3147),Local3149));
	float3 Local3151 = (float3(float2(Local3091,Material_PreshaderBuffer[37].x),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3152 = max(Local3151,((float3)-1.00000000));
	float3 Local3153 = min(Local3152,((float3)1.00000000));
	FLWCScalar Local3154 = LWCDot(LWCPromote(float2(Local3153.r,Local3153.g)),   Local2784 );
	FLWCScalar Local3155 = LWCMultiply(  Local3154 , LWCPromote(Material_PreshaderBuffer[41].x));
	float Local3156 = (Material_PreshaderBuffer[41].y * Local2805);
	FLWCScalar Local3157 = LWCAdd(  Local3155 , LWCPromote(Local3156));
	FLWCScalar Local3158 = LWCMultiply(Local3157, LWCPromote(6.28318548));
	float Local3159 = LWCCos(Local3158);
	float Local3160 = (Local3159 * Local3153.r);
	float Local3161 = (Material_PreshaderBuffer[41].x * Local2902);
	float Local3162 = (Material_PreshaderBuffer[13].w * Local3161);
	float Local3163 = (Material_PreshaderBuffer[20].y / Local3162);
	float Local3164 = (Local3163 * Local2902);
	float Local3165 = (Local3160 * Local3164);
	float Local3166 = (Local3159 * Local3153.g);
	float Local3167 = (Local3166 * Local3164);
	float Local3168 = LWCSin(Local3158);
	float Local3169 = (Local3168 * Local2902);
	float3 Local3170 = (Local3150 + float3(float2(Local3165,Local3167),Local3169));
	float Local3171 =  select_internal( (abs(Material_PreshaderBuffer[41].z - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[41].z >= -1.00000000) , Material_PreshaderBuffer[41].z , Material_PreshaderBuffer[41].w ) , Material_PreshaderBuffer[41].z );
	float Local3172 =  select_internal( (abs(Local3171 - 1.00000000) > 0.00001000) ,  select_internal( (Local3171 >= 1.00000000) , Material_PreshaderBuffer[42].x , Material_PreshaderBuffer[41].z ) , Material_PreshaderBuffer[41].z );
	float Local3173 =  select_internal( (abs(Local3172 - 0.00000000) > 0.00001000) ,  select_internal( (Local3172 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3174 = max(Local3173,-1.00000000);
	float Local3175 = min(Local3174,1.00000000);
	float3 Local3176 = (float3(float2(Local3175,Material_PreshaderBuffer[43].y),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3177 = max(Local3176,((float3)-1.00000000));
	float3 Local3178 = min(Local3177,((float3)1.00000000));
	FLWCScalar Local3179 = LWCDot(LWCPromote(float2(Local3178.r,Local3178.g)),   Local2784 );
	FLWCScalar Local3180 = LWCMultiply(  Local3179 , LWCPromote(Material_PreshaderBuffer[45].x));
	float Local3181 = (Material_PreshaderBuffer[45].y * Local2805);
	FLWCScalar Local3182 = LWCAdd(  Local3180 , LWCPromote(Local3181));
	FLWCScalar Local3183 = LWCMultiply(Local3182, LWCPromote(6.28318548));
	float Local3184 = LWCCos(Local3183);
	float Local3185 = (Local3184 * Local3178.r);
	float Local3186 = (Material_PreshaderBuffer[45].x * Local2928);
	float Local3187 = (Material_PreshaderBuffer[13].w * Local3186);
	float Local3188 = (Material_PreshaderBuffer[14].x / Local3187);
	float Local3189 = (Local3188 * Local2928);
	float Local3190 = (Local3185 * Local3189);
	float Local3191 = (Local3184 * Local3178.g);
	float Local3192 = (Local3191 * Local3189);
	float Local3193 = LWCSin(Local3183);
	float Local3194 = (Local3193 * Local2928);
	float3 Local3195 = (float3(float2(Local3175,Material_PreshaderBuffer[43].y),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3196 = max(Local3195,((float3)-1.00000000));
	float3 Local3197 = min(Local3196,((float3)1.00000000));
	FLWCScalar Local3198 = LWCDot(LWCPromote(float2(Local3197.r,Local3197.g)),   Local2784 );
	FLWCScalar Local3199 = LWCMultiply(  Local3198 , LWCPromote(Material_PreshaderBuffer[45].w));
	float Local3200 = (Material_PreshaderBuffer[46].x * Local2805);
	FLWCScalar Local3201 = LWCAdd(  Local3199 , LWCPromote(Local3200));
	FLWCScalar Local3202 = LWCMultiply(Local3201, LWCPromote(6.28318548));
	float Local3203 = LWCCos(Local3202);
	float Local3204 = (Local3203 * Local3197.r);
	float Local3205 = (Material_PreshaderBuffer[45].w * Local2948);
	float Local3206 = (Material_PreshaderBuffer[13].w * Local3205);
	float Local3207 = (Material_PreshaderBuffer[17].w / Local3206);
	float Local3208 = (Local3207 * Local2948);
	float Local3209 = (Local3204 * Local3208);
	float Local3210 = (Local3203 * Local3197.g);
	float Local3211 = (Local3210 * Local3208);
	float Local3212 = LWCSin(Local3202);
	float Local3213 = (Local3212 * Local2948);
	float3 Local3214 = (float3(float2(Local3190,Local3192),Local3194) + float3(float2(Local3209,Local3211),Local3213));
	float3 Local3215 = (float3(float2(Local3175,Material_PreshaderBuffer[43].y),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3216 = max(Local3215,((float3)-1.00000000));
	float3 Local3217 = min(Local3216,((float3)1.00000000));
	FLWCScalar Local3218 = LWCDot(LWCPromote(float2(Local3217.r,Local3217.g)),   Local2784 );
	FLWCScalar Local3219 = LWCMultiply(  Local3218 , LWCPromote(Material_PreshaderBuffer[46].z));
	float Local3220 = (Material_PreshaderBuffer[46].w * Local2805);
	FLWCScalar Local3221 = LWCAdd(  Local3219 , LWCPromote(Local3220));
	FLWCScalar Local3222 = LWCMultiply(Local3221, LWCPromote(6.28318548));
	float Local3223 = LWCCos(Local3222);
	float Local3224 = (Local3223 * Local3217.r);
	float Local3225 = (Material_PreshaderBuffer[46].z * Local2969);
	float Local3226 = (Material_PreshaderBuffer[13].w * Local3225);
	float Local3227 = (Material_PreshaderBuffer[19].x / Local3226);
	float Local3228 = (Local3227 * Local2969);
	float Local3229 = (Local3224 * Local3228);
	float Local3230 = (Local3223 * Local3217.g);
	float Local3231 = (Local3230 * Local3228);
	float Local3232 = LWCSin(Local3222);
	float Local3233 = (Local3232 * Local2969);
	float3 Local3234 = (Local3214 + float3(float2(Local3229,Local3231),Local3233));
	float3 Local3235 = (float3(float2(Local3175,Material_PreshaderBuffer[43].y),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3236 = max(Local3235,((float3)-1.00000000));
	float3 Local3237 = min(Local3236,((float3)1.00000000));
	FLWCScalar Local3238 = LWCDot(LWCPromote(float2(Local3237.r,Local3237.g)),   Local2784 );
	FLWCScalar Local3239 = LWCMultiply(  Local3238 , LWCPromote(Material_PreshaderBuffer[47].y));
	float Local3240 = (Material_PreshaderBuffer[47].z * Local2805);
	FLWCScalar Local3241 = LWCAdd(  Local3239 , LWCPromote(Local3240));
	FLWCScalar Local3242 = LWCMultiply(Local3241, LWCPromote(6.28318548));
	float Local3243 = LWCCos(Local3242);
	float Local3244 = (Local3243 * Local3237.r);
	float Local3245 = (Material_PreshaderBuffer[47].y * Local2990);
	float Local3246 = (Material_PreshaderBuffer[13].w * Local3245);
	float Local3247 = (Material_PreshaderBuffer[20].y / Local3246);
	float Local3248 = (Local3247 * Local2990);
	float Local3249 = (Local3244 * Local3248);
	float Local3250 = (Local3243 * Local3237.g);
	float Local3251 = (Local3250 * Local3248);
	float Local3252 = LWCSin(Local3242);
	float Local3253 = (Local3252 * Local2990);
	float3 Local3254 = (Local3234 + float3(float2(Local3249,Local3251),Local3253));
	float3 Local3255 = (Local3170 + Local3254);
	float Local3256 =  select_internal( (abs(Material_PreshaderBuffer[47].w - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[47].w >= -1.00000000) , Material_PreshaderBuffer[47].w , Material_PreshaderBuffer[48].x ) , Material_PreshaderBuffer[47].w );
	float Local3257 =  select_internal( (abs(Local3256 - 1.00000000) > 0.00001000) ,  select_internal( (Local3256 >= 1.00000000) , Material_PreshaderBuffer[48].y , Material_PreshaderBuffer[47].w ) , Material_PreshaderBuffer[47].w );
	float Local3258 =  select_internal( (abs(Local3257 - 0.00000000) > 0.00001000) ,  select_internal( (Local3257 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3259 = max(Local3258,-1.00000000);
	float Local3260 = min(Local3259,1.00000000);
	float3 Local3261 = (float3(float2(Local3260,Material_PreshaderBuffer[49].z),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3262 = max(Local3261,((float3)-1.00000000));
	float3 Local3263 = min(Local3262,((float3)1.00000000));
	FLWCScalar Local3264 = LWCDot(LWCPromote(float2(Local3263.r,Local3263.g)),   Local2784 );
	FLWCScalar Local3265 = LWCMultiply(  Local3264 , LWCPromote(Material_PreshaderBuffer[51].y));
	float Local3266 = (Material_PreshaderBuffer[51].z * Local2805);
	FLWCScalar Local3267 = LWCAdd(  Local3265 , LWCPromote(Local3266));
	FLWCScalar Local3268 = LWCMultiply(Local3267, LWCPromote(6.28318548));
	float Local3269 = LWCCos(Local3268);
	float Local3270 = (Local3269 * Local3263.r);
	float Local3271 = (Material_PreshaderBuffer[51].y * Local2928);
	float Local3272 = (Material_PreshaderBuffer[13].w * Local3271);
	float Local3273 = (Material_PreshaderBuffer[14].x / Local3272);
	float Local3274 = (Local3273 * Local2928);
	float Local3275 = (Local3270 * Local3274);
	float Local3276 = (Local3269 * Local3263.g);
	float Local3277 = (Local3276 * Local3274);
	float Local3278 = LWCSin(Local3268);
	float Local3279 = (Local3278 * Local2928);
	float3 Local3280 = (float3(float2(Local3260,Material_PreshaderBuffer[49].z),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3281 = max(Local3280,((float3)-1.00000000));
	float3 Local3282 = min(Local3281,((float3)1.00000000));
	FLWCScalar Local3283 = LWCDot(LWCPromote(float2(Local3282.r,Local3282.g)),   Local2784 );
	FLWCScalar Local3284 = LWCMultiply(  Local3283 , LWCPromote(Material_PreshaderBuffer[52].x));
	float Local3285 = (Material_PreshaderBuffer[52].y * Local2805);
	FLWCScalar Local3286 = LWCAdd(  Local3284 , LWCPromote(Local3285));
	FLWCScalar Local3287 = LWCMultiply(Local3286, LWCPromote(6.28318548));
	float Local3288 = LWCCos(Local3287);
	float Local3289 = (Local3288 * Local3282.r);
	float Local3290 = (Material_PreshaderBuffer[52].x * Local2948);
	float Local3291 = (Material_PreshaderBuffer[13].w * Local3290);
	float Local3292 = (Material_PreshaderBuffer[17].w / Local3291);
	float Local3293 = (Local3292 * Local2948);
	float Local3294 = (Local3289 * Local3293);
	float Local3295 = (Local3288 * Local3282.g);
	float Local3296 = (Local3295 * Local3293);
	float Local3297 = LWCSin(Local3287);
	float Local3298 = (Local3297 * Local2948);
	float3 Local3299 = (float3(float2(Local3275,Local3277),Local3279) + float3(float2(Local3294,Local3296),Local3298));
	float3 Local3300 = (float3(float2(Local3260,Material_PreshaderBuffer[49].z),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3301 = max(Local3300,((float3)-1.00000000));
	float3 Local3302 = min(Local3301,((float3)1.00000000));
	FLWCScalar Local3303 = LWCDot(LWCPromote(float2(Local3302.r,Local3302.g)),   Local2784 );
	FLWCScalar Local3304 = LWCMultiply(  Local3303 , LWCPromote(Material_PreshaderBuffer[52].w));
	float Local3305 = (Material_PreshaderBuffer[53].x * Local2805);
	FLWCScalar Local3306 = LWCAdd(  Local3304 , LWCPromote(Local3305));
	FLWCScalar Local3307 = LWCMultiply(Local3306, LWCPromote(6.28318548));
	float Local3308 = LWCCos(Local3307);
	float Local3309 = (Local3308 * Local3302.r);
	float Local3310 = (Material_PreshaderBuffer[52].w * Local2969);
	float Local3311 = (Material_PreshaderBuffer[13].w * Local3310);
	float Local3312 = (Material_PreshaderBuffer[19].x / Local3311);
	float Local3313 = (Local3312 * Local2969);
	float Local3314 = (Local3309 * Local3313);
	float Local3315 = (Local3308 * Local3302.g);
	float Local3316 = (Local3315 * Local3313);
	float Local3317 = LWCSin(Local3307);
	float Local3318 = (Local3317 * Local2969);
	float3 Local3319 = (Local3299 + float3(float2(Local3314,Local3316),Local3318));
	float3 Local3320 = (float3(float2(Local3260,Material_PreshaderBuffer[49].z),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3321 = max(Local3320,((float3)-1.00000000));
	float3 Local3322 = min(Local3321,((float3)1.00000000));
	FLWCScalar Local3323 = LWCDot(LWCPromote(float2(Local3322.r,Local3322.g)),   Local2784 );
	FLWCScalar Local3324 = LWCMultiply(  Local3323 , LWCPromote(Material_PreshaderBuffer[53].z));
	float Local3325 = (Material_PreshaderBuffer[53].w * Local2805);
	FLWCScalar Local3326 = LWCAdd(  Local3324 , LWCPromote(Local3325));
	FLWCScalar Local3327 = LWCMultiply(Local3326, LWCPromote(6.28318548));
	float Local3328 = LWCCos(Local3327);
	float Local3329 = (Local3328 * Local3322.r);
	float Local3330 = (Material_PreshaderBuffer[53].z * Local2990);
	float Local3331 = (Material_PreshaderBuffer[13].w * Local3330);
	float Local3332 = (Material_PreshaderBuffer[20].y / Local3331);
	float Local3333 = (Local3332 * Local2990);
	float Local3334 = (Local3329 * Local3333);
	float Local3335 = (Local3328 * Local3322.g);
	float Local3336 = (Local3335 * Local3333);
	float Local3337 = LWCSin(Local3327);
	float Local3338 = (Local3337 * Local2990);
	float3 Local3339 = (Local3319 + float3(float2(Local3334,Local3336),Local3338));
	float3 Local3340 = (Local3255 + Local3339);
	float3 Local3341 = (Local3086 + Local3340);
	float3 Local3342 = (Local3341 * ((float3)Material_PreshaderBuffer[54].x));
	float Local3343 =  select_internal( (abs(Material_PreshaderBuffer[54].y - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[54].y >= -1.00000000) , Material_PreshaderBuffer[54].y , Material_PreshaderBuffer[54].z ) , Material_PreshaderBuffer[54].y );
	float Local3344 =  select_internal( (abs(Local3343 - 1.00000000) > 0.00001000) ,  select_internal( (Local3343 >= 1.00000000) , Material_PreshaderBuffer[54].w , Material_PreshaderBuffer[54].y ) , Material_PreshaderBuffer[54].y );
	float Local3345 =  select_internal( (abs(Local3344 - 0.00000000) > 0.00001000) ,  select_internal( (Local3344 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3346 = max(Local3345,-1.00000000);
	float Local3347 = min(Local3346,1.00000000);
	float3 Local3348 = (float3(float2(Local3347,Material_PreshaderBuffer[56].x),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3349 = max(Local3348,((float3)-1.00000000));
	float3 Local3350 = min(Local3349,((float3)1.00000000));
	FLWCScalar Local3351 = LWCDot(LWCPromote(float2(Local3350.r,Local3350.g)),   Local2784 );
	float Local3352 = (Material_PreshaderBuffer[57].y * Local2722.g);
	float Local3353 = (Material_PreshaderBuffer[57].z * Local3352);
	float Local3354 = (2.00000000 / Local3353);
	FLWCScalar Local3355 = LWCMultiply(  Local3351 , LWCPromote(Local3354));
	float Local3356 = (Local3354 * Material_PreshaderBuffer[57].w);
	FLWCVector3 Local3357 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[58].x)),   Local2738 );
	FLWCVector3 Local3358 = LWCMultiply(  Local3357 , LWCPromote(((float3)Material_PreshaderBuffer[58].y)));
	float Local3359 = (1.00000000 / Local2722.g);
	FLWCVector3 Local3360 = LWCMultiply(  Local3358 , LWCPromote(((float3)Local3359)));
	FLWCScalar Local3361 =  LWCGetComponent(   Local3360  , 0);
	FLWCScalar Local3362 =  LWCGetComponent(   Local3360  , 1);
	FLWCVector2 Local3363 = MakeLWCVector(LWCPromote(  Local3361 ),LWCPromote(  Local3362 ));
	float Local3364 = (Local2743 * Material_PreshaderBuffer[58].w);
	FLWCScalar Local3365 =  LWCGetComponent(   Local3360  , 2);
	FLWCVector2 Local3366 = LWCAdd(LWCPromote(float2(Local3364,Local3364)), MakeLWCVector(LWCGetComponent(  Local3365 , 0),LWCGetComponent(  Local3365 , 0)));
	FLWCScalar Local3367 = MakeLWCVector(LWCGetComponent(  Local3366 , 0));
	FLWCVector3 Local3368 = MakeLWCVector(LWCPromote(  Local3363 ),LWCPromote(  Local3367 ));
	float3 Local3369 = LWCNormalizeTile(  Local3368 ).Offset;
	float Local3370 = MaterialExpressionNoise(Local3369,1.00000000,1.00000000,3.00000000,0.00000000,6.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local3371 = (Local3370 - 0.00000000);
	float Local3372 = (Local3371 + 0.00000000);
	float Local3373 = saturate(Local3372);
	float Local3374 = lerp(Local2743,Local2787,Local3373);
	float Local3375 = (Local3356 * Local3374);
	FLWCScalar Local3376 = LWCAdd(  Local3355 , LWCPromote(Local3375));
	FLWCScalar Local3377 = LWCMultiply(Local3376, LWCPromote(6.28318548));
	float Local3378 = LWCCos(Local3377);
	float Local3379 = (Local3378 * Local3350.r);
	float Local3380 = (Material_PreshaderBuffer[59].x * Local2722.g);
	float Local3381 = (Material_PreshaderBuffer[59].y * Local2722.g);
	float Local3382 = (Local3380 - Local3381);
	FLWCVector3 Local3383 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[59].z)),   Local2738 );
	FLWCVector3 Local3384 = LWCMultiply(  Local3383 , LWCPromote(((float3)Material_PreshaderBuffer[59].w)));
	FLWCVector3 Local3385 = LWCMultiply(  Local3384 , LWCPromote(((float3)Local3359)));
	FLWCScalar Local3386 =  LWCGetComponent(   Local3385  , 0);
	FLWCScalar Local3387 =  LWCGetComponent(   Local3385  , 1);
	FLWCVector2 Local3388 = MakeLWCVector(LWCPromote(  Local3386 ),LWCPromote(  Local3387 ));
	float Local3389 = (Local2743 * Material_PreshaderBuffer[60].y);
	FLWCScalar Local3390 =  LWCGetComponent(   Local3385  , 2);
	FLWCVector2 Local3391 = LWCAdd(LWCPromote(float2(Local3389,Local3389)), MakeLWCVector(LWCGetComponent(  Local3390 , 0),LWCGetComponent(  Local3390 , 0)));
	FLWCScalar Local3392 = MakeLWCVector(LWCGetComponent(  Local3391 , 0));
	FLWCVector3 Local3393 = MakeLWCVector(LWCPromote(  Local3388 ),LWCPromote(  Local3392 ));
	float3 Local3394 = LWCNormalizeTile(  Local3393 ).Offset;
	float Local3395 = MaterialExpressionNoise(Local3394,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	FLWCVector3 Local3396 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[60].z)),   Local2738 );
	FLWCVector3 Local3397 = LWCMultiply(  Local3396 , LWCPromote(((float3)Material_PreshaderBuffer[60].w)));
	FLWCVector3 Local3398 = LWCMultiply(  Local3397 , LWCPromote(((float3)Local3359)));
	FLWCScalar Local3399 =  LWCGetComponent(   Local3398  , 0);
	FLWCScalar Local3400 =  LWCGetComponent(   Local3398  , 1);
	FLWCVector2 Local3401 = MakeLWCVector(LWCPromote(  Local3399 ),LWCPromote(  Local3400 ));
	float Local3402 = (Local2743 * Material_PreshaderBuffer[61].y);
	FLWCScalar Local3403 =  LWCGetComponent(   Local3398  , 2);
	FLWCVector2 Local3404 = LWCAdd(LWCPromote(float2(Local3402,Local3402)), MakeLWCVector(LWCGetComponent(  Local3403 , 0),LWCGetComponent(  Local3403 , 0)));
	FLWCScalar Local3405 = MakeLWCVector(LWCGetComponent(  Local3404 , 0));
	FLWCVector3 Local3406 = MakeLWCVector(LWCPromote(  Local3401 ),LWCPromote(  Local3405 ));
	float3 Local3407 = LWCNormalizeTile(  Local3406 ).Offset;
	float Local3408 = MaterialExpressionNoise(Local3407,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local3409 = (Local3408 - 0.00000000);
	float Local3410 = (Local3409 * Material_PreshaderBuffer[61].w);
	float Local3411 = (Local3410 + Material_PreshaderBuffer[61].z);
	float Local3412 = (Local3395 * Local3411);
	float Local3413 = lerp(Local3380,Local3382,Local3412);
	float Local3414 = (Local3354 * Local3413);
	float Local3415 = (Material_PreshaderBuffer[13].w * Local3414);
	float Local3416 = (Material_PreshaderBuffer[62].x / Local3415);
	float Local3417 = (Local3416 * Local3413);
	float Local3418 = (Local3379 * Local3417);
	float Local3419 = (Local3378 * Local3350.g);
	float Local3420 = (Local3419 * Local3417);
	float Local3421 = LWCSin(Local3377);
	float Local3422 = (Local3421 * Local3413);
	float3 Local3423 = (float3(float2(Local3347,Material_PreshaderBuffer[56].x),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3424 = max(Local3423,((float3)-1.00000000));
	float3 Local3425 = min(Local3424,((float3)1.00000000));
	FLWCScalar Local3426 = LWCDot(LWCPromote(float2(Local3425.r,Local3425.g)),   Local2784 );
	float Local3427 = (Local3353 * Material_PreshaderBuffer[15].w);
	float Local3428 = (2.00000000 / Local3427);
	FLWCScalar Local3429 = LWCMultiply(  Local3426 , LWCPromote(Local3428));
	float Local3430 = (Local3428 * Material_PreshaderBuffer[62].y);
	float Local3431 = (Local3430 * Local3374);
	FLWCScalar Local3432 = LWCAdd(  Local3429 , LWCPromote(Local3431));
	FLWCScalar Local3433 = LWCMultiply(Local3432, LWCPromote(6.28318548));
	float Local3434 = LWCCos(Local3433);
	float Local3435 = (Local3434 * Local3425.r);
	float Local3436 = (Local3413 * Material_PreshaderBuffer[17].z);
	float Local3437 = (Local3428 * Local3436);
	float Local3438 = (Material_PreshaderBuffer[13].w * Local3437);
	float Local3439 = (Material_PreshaderBuffer[62].z / Local3438);
	float Local3440 = (Local3439 * Local3436);
	float Local3441 = (Local3435 * Local3440);
	float Local3442 = (Local3434 * Local3425.g);
	float Local3443 = (Local3442 * Local3440);
	float Local3444 = LWCSin(Local3433);
	float Local3445 = (Local3444 * Local3436);
	float3 Local3446 = (float3(float2(Local3418,Local3420),Local3422) + float3(float2(Local3441,Local3443),Local3445));
	float3 Local3447 = (float3(float2(Local3347,Material_PreshaderBuffer[56].x),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3448 = max(Local3447,((float3)-1.00000000));
	float3 Local3449 = min(Local3448,((float3)1.00000000));
	FLWCScalar Local3450 = LWCDot(LWCPromote(float2(Local3449.r,Local3449.g)),   Local2784 );
	float Local3451 = (Local3427 * Material_PreshaderBuffer[15].w);
	float Local3452 = (2.00000000 / Local3451);
	FLWCScalar Local3453 = LWCMultiply(  Local3450 , LWCPromote(Local3452));
	float Local3454 = (Local3452 * Material_PreshaderBuffer[62].w);
	float Local3455 = (Local3454 * Local3374);
	FLWCScalar Local3456 = LWCAdd(  Local3453 , LWCPromote(Local3455));
	FLWCScalar Local3457 = LWCMultiply(Local3456, LWCPromote(6.28318548));
	float Local3458 = LWCCos(Local3457);
	float Local3459 = (Local3458 * Local3449.r);
	float Local3460 = (Local3436 * Material_PreshaderBuffer[17].z);
	float Local3461 = (Local3452 * Local3460);
	float Local3462 = (Material_PreshaderBuffer[13].w * Local3461);
	float Local3463 = (Material_PreshaderBuffer[63].x / Local3462);
	float Local3464 = (Local3463 * Local3460);
	float Local3465 = (Local3459 * Local3464);
	float Local3466 = (Local3458 * Local3449.g);
	float Local3467 = (Local3466 * Local3464);
	float Local3468 = LWCSin(Local3457);
	float Local3469 = (Local3468 * Local3460);
	float3 Local3470 = (Local3446 + float3(float2(Local3465,Local3467),Local3469));
	float3 Local3471 = (float3(float2(Local3347,Material_PreshaderBuffer[56].x),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3472 = max(Local3471,((float3)-1.00000000));
	float3 Local3473 = min(Local3472,((float3)1.00000000));
	FLWCScalar Local3474 = LWCDot(LWCPromote(float2(Local3473.r,Local3473.g)),   Local2784 );
	float Local3475 = (Local3451 * Material_PreshaderBuffer[15].w);
	float Local3476 = (2.00000000 / Local3475);
	FLWCScalar Local3477 = LWCMultiply(  Local3474 , LWCPromote(Local3476));
	float Local3478 = (Local3476 * Material_PreshaderBuffer[63].y);
	float Local3479 = (Local3478 * Local3374);
	FLWCScalar Local3480 = LWCAdd(  Local3477 , LWCPromote(Local3479));
	FLWCScalar Local3481 = LWCMultiply(Local3480, LWCPromote(6.28318548));
	float Local3482 = LWCCos(Local3481);
	float Local3483 = (Local3482 * Local3473.r);
	float Local3484 = (Local3460 * Material_PreshaderBuffer[17].z);
	float Local3485 = (Local3476 * Local3484);
	float Local3486 = (Material_PreshaderBuffer[13].w * Local3485);
	float Local3487 = (Material_PreshaderBuffer[63].z / Local3486);
	float Local3488 = (Local3487 * Local3484);
	float Local3489 = (Local3483 * Local3488);
	float Local3490 = (Local3482 * Local3473.g);
	float Local3491 = (Local3490 * Local3488);
	float Local3492 = LWCSin(Local3481);
	float Local3493 = (Local3492 * Local3484);
	float3 Local3494 = (Local3470 + float3(float2(Local3489,Local3491),Local3493));
	float Local3495 =  select_internal( (abs(Material_PreshaderBuffer[64].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[64].x >= -1.00000000) , Material_PreshaderBuffer[64].x , Material_PreshaderBuffer[64].y ) , Material_PreshaderBuffer[64].x );
	float Local3496 =  select_internal( (abs(Local3495 - 1.00000000) > 0.00001000) ,  select_internal( (Local3495 >= 1.00000000) , Material_PreshaderBuffer[64].z , Material_PreshaderBuffer[64].x ) , Material_PreshaderBuffer[64].x );
	float Local3497 =  select_internal( (abs(Local3496 - 0.00000000) > 0.00001000) ,  select_internal( (Local3496 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3498 = max(Local3497,-1.00000000);
	float Local3499 = min(Local3498,1.00000000);
	float3 Local3500 = (float3(float2(Local3499,Material_PreshaderBuffer[65].w),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3501 = max(Local3500,((float3)-1.00000000));
	float3 Local3502 = min(Local3501,((float3)1.00000000));
	FLWCScalar Local3503 = LWCDot(LWCPromote(float2(Local3502.r,Local3502.g)),   Local2784 );
	float Local3504 = (Local3352 * Material_PreshaderBuffer[23].w);
	float Local3505 = (Material_PreshaderBuffer[67].x * Local3504);
	float Local3506 = (2.00000000 / Local3505);
	FLWCScalar Local3507 = LWCMultiply(  Local3503 , LWCPromote(Local3506));
	float Local3508 = (Local3506 * Material_PreshaderBuffer[67].y);
	float Local3509 = (Local3508 * Local3374);
	FLWCScalar Local3510 = LWCAdd(  Local3507 , LWCPromote(Local3509));
	FLWCScalar Local3511 = LWCMultiply(Local3510, LWCPromote(6.28318548));
	float Local3512 = LWCCos(Local3511);
	float Local3513 = (Local3512 * Local3502.r);
	float Local3514 = (Local3413 * Material_PreshaderBuffer[25].w);
	float Local3515 = (Local3506 * Local3514);
	float Local3516 = (Material_PreshaderBuffer[13].w * Local3515);
	float Local3517 = (Material_PreshaderBuffer[62].x / Local3516);
	float Local3518 = (Local3517 * Local3514);
	float Local3519 = (Local3513 * Local3518);
	float Local3520 = (Local3512 * Local3502.g);
	float Local3521 = (Local3520 * Local3518);
	float Local3522 = LWCSin(Local3511);
	float Local3523 = (Local3522 * Local3514);
	float3 Local3524 = (float3(float2(Local3499,Material_PreshaderBuffer[65].w),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3525 = max(Local3524,((float3)-1.00000000));
	float3 Local3526 = min(Local3525,((float3)1.00000000));
	FLWCScalar Local3527 = LWCDot(LWCPromote(float2(Local3526.r,Local3526.g)),   Local2784 );
	float Local3528 = (Local3505 * Material_PreshaderBuffer[15].w);
	float Local3529 = (2.00000000 / Local3528);
	FLWCScalar Local3530 = LWCMultiply(  Local3527 , LWCPromote(Local3529));
	float Local3531 = (Local3529 * Material_PreshaderBuffer[67].z);
	float Local3532 = (Local3531 * Local3374);
	FLWCScalar Local3533 = LWCAdd(  Local3530 , LWCPromote(Local3532));
	FLWCScalar Local3534 = LWCMultiply(Local3533, LWCPromote(6.28318548));
	float Local3535 = LWCCos(Local3534);
	float Local3536 = (Local3535 * Local3526.r);
	float Local3537 = (Local3514 * Material_PreshaderBuffer[17].z);
	float Local3538 = (Local3529 * Local3537);
	float Local3539 = (Material_PreshaderBuffer[13].w * Local3538);
	float Local3540 = (Material_PreshaderBuffer[62].z / Local3539);
	float Local3541 = (Local3540 * Local3537);
	float Local3542 = (Local3536 * Local3541);
	float Local3543 = (Local3535 * Local3526.g);
	float Local3544 = (Local3543 * Local3541);
	float Local3545 = LWCSin(Local3534);
	float Local3546 = (Local3545 * Local3537);
	float3 Local3547 = (float3(float2(Local3519,Local3521),Local3523) + float3(float2(Local3542,Local3544),Local3546));
	float3 Local3548 = (float3(float2(Local3499,Material_PreshaderBuffer[65].w),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3549 = max(Local3548,((float3)-1.00000000));
	float3 Local3550 = min(Local3549,((float3)1.00000000));
	FLWCScalar Local3551 = LWCDot(LWCPromote(float2(Local3550.r,Local3550.g)),   Local2784 );
	float Local3552 = (Local3528 * Material_PreshaderBuffer[15].w);
	float Local3553 = (2.00000000 / Local3552);
	FLWCScalar Local3554 = LWCMultiply(  Local3551 , LWCPromote(Local3553));
	float Local3555 = (Local3553 * Material_PreshaderBuffer[67].w);
	float Local3556 = (Local3555 * Local3374);
	FLWCScalar Local3557 = LWCAdd(  Local3554 , LWCPromote(Local3556));
	FLWCScalar Local3558 = LWCMultiply(Local3557, LWCPromote(6.28318548));
	float Local3559 = LWCCos(Local3558);
	float Local3560 = (Local3559 * Local3550.r);
	float Local3561 = (Local3537 * Material_PreshaderBuffer[17].z);
	float Local3562 = (Local3553 * Local3561);
	float Local3563 = (Material_PreshaderBuffer[13].w * Local3562);
	float Local3564 = (Material_PreshaderBuffer[63].x / Local3563);
	float Local3565 = (Local3564 * Local3561);
	float Local3566 = (Local3560 * Local3565);
	float Local3567 = (Local3559 * Local3550.g);
	float Local3568 = (Local3567 * Local3565);
	float Local3569 = LWCSin(Local3558);
	float Local3570 = (Local3569 * Local3561);
	float3 Local3571 = (Local3547 + float3(float2(Local3566,Local3568),Local3570));
	float3 Local3572 = (float3(float2(Local3499,Material_PreshaderBuffer[65].w),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3573 = max(Local3572,((float3)-1.00000000));
	float3 Local3574 = min(Local3573,((float3)1.00000000));
	FLWCScalar Local3575 = LWCDot(LWCPromote(float2(Local3574.r,Local3574.g)),   Local2784 );
	float Local3576 = (Local3552 * Material_PreshaderBuffer[15].w);
	float Local3577 = (2.00000000 / Local3576);
	FLWCScalar Local3578 = LWCMultiply(  Local3575 , LWCPromote(Local3577));
	float Local3579 = (Local3577 * Material_PreshaderBuffer[68].x);
	float Local3580 = (Local3579 * Local3374);
	FLWCScalar Local3581 = LWCAdd(  Local3578 , LWCPromote(Local3580));
	FLWCScalar Local3582 = LWCMultiply(Local3581, LWCPromote(6.28318548));
	float Local3583 = LWCCos(Local3582);
	float Local3584 = (Local3583 * Local3574.r);
	float Local3585 = (Local3561 * Material_PreshaderBuffer[17].z);
	float Local3586 = (Local3577 * Local3585);
	float Local3587 = (Material_PreshaderBuffer[13].w * Local3586);
	float Local3588 = (Material_PreshaderBuffer[63].z / Local3587);
	float Local3589 = (Local3588 * Local3585);
	float Local3590 = (Local3584 * Local3589);
	float Local3591 = (Local3583 * Local3574.g);
	float Local3592 = (Local3591 * Local3589);
	float Local3593 = LWCSin(Local3582);
	float Local3594 = (Local3593 * Local3585);
	float3 Local3595 = (Local3571 + float3(float2(Local3590,Local3592),Local3594));
	float3 Local3596 = (Local3494 + Local3595);
	float Local3597 =  select_internal( (abs(Material_PreshaderBuffer[68].y - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[68].y >= -1.00000000) , Material_PreshaderBuffer[68].y , Material_PreshaderBuffer[68].z ) , Material_PreshaderBuffer[68].y );
	float Local3598 =  select_internal( (abs(Local3597 - 1.00000000) > 0.00001000) ,  select_internal( (Local3597 >= 1.00000000) , Material_PreshaderBuffer[68].w , Material_PreshaderBuffer[68].y ) , Material_PreshaderBuffer[68].y );
	float Local3599 =  select_internal( (abs(Local3598 - 0.00000000) > 0.00001000) ,  select_internal( (Local3598 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local3600 = max(Local3599,-1.00000000);
	float Local3601 = min(Local3600,1.00000000);
	float3 Local3602 = (float3(float2(Local3601,Material_PreshaderBuffer[70].x),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local3603 = max(Local3602,((float3)-1.00000000));
	float3 Local3604 = min(Local3603,((float3)1.00000000));
	FLWCScalar Local3605 = LWCDot(LWCPromote(float2(Local3604.r,Local3604.g)),   Local2784 );
	float Local3606 = (Material_PreshaderBuffer[71].y * Local3504);
	float Local3607 = (2.00000000 / Local3606);
	FLWCScalar Local3608 = LWCMultiply(  Local3605 , LWCPromote(Local3607));
	float Local3609 = (Local3607 * Material_PreshaderBuffer[67].y);
	float Local3610 = (Local3609 * Local3374);
	FLWCScalar Local3611 = LWCAdd(  Local3608 , LWCPromote(Local3610));
	FLWCScalar Local3612 = LWCMultiply(Local3611, LWCPromote(6.28318548));
	float Local3613 = LWCCos(Local3612);
	float Local3614 = (Local3613 * Local3604.r);
	float Local3615 = (Local3607 * Local3514);
	float Local3616 = (Material_PreshaderBuffer[13].w * Local3615);
	float Local3617 = (Material_PreshaderBuffer[62].x / Local3616);
	float Local3618 = (Local3617 * Local3514);
	float Local3619 = (Local3614 * Local3618);
	float Local3620 = (Local3613 * Local3604.g);
	float Local3621 = (Local3620 * Local3618);
	float Local3622 = LWCSin(Local3612);
	float Local3623 = (Local3622 * Local3514);
	float3 Local3624 = (float3(float2(Local3601,Material_PreshaderBuffer[70].x),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local3625 = max(Local3624,((float3)-1.00000000));
	float3 Local3626 = min(Local3625,((float3)1.00000000));
	FLWCScalar Local3627 = LWCDot(LWCPromote(float2(Local3626.r,Local3626.g)),   Local2784 );
	float Local3628 = (Local3606 * Material_PreshaderBuffer[15].w);
	float Local3629 = (2.00000000 / Local3628);
	FLWCScalar Local3630 = LWCMultiply(  Local3627 , LWCPromote(Local3629));
	float Local3631 = (Local3629 * Material_PreshaderBuffer[67].z);
	float Local3632 = (Local3631 * Local3374);
	FLWCScalar Local3633 = LWCAdd(  Local3630 , LWCPromote(Local3632));
	FLWCScalar Local3634 = LWCMultiply(Local3633, LWCPromote(6.28318548));
	float Local3635 = LWCCos(Local3634);
	float Local3636 = (Local3635 * Local3626.r);
	float Local3637 = (Local3629 * Local3537);
	float Local3638 = (Material_PreshaderBuffer[13].w * Local3637);
	float Local3639 = (Material_PreshaderBuffer[62].z / Local3638);
	float Local3640 = (Local3639 * Local3537);
	float Local3641 = (Local3636 * Local3640);
	float Local3642 = (Local3635 * Local3626.g);
	float Local3643 = (Local3642 * Local3640);
	float Local3644 = LWCSin(Local3634);
	float Local3645 = (Local3644 * Local3537);
	float3 Local3646 = (float3(float2(Local3619,Local3621),Local3623) + float3(float2(Local3641,Local3643),Local3645));
	float3 Local3647 = (float3(float2(Local3601,Material_PreshaderBuffer[70].x),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local3648 = max(Local3647,((float3)-1.00000000));
	float3 Local3649 = min(Local3648,((float3)1.00000000));
	FLWCScalar Local3650 = LWCDot(LWCPromote(float2(Local3649.r,Local3649.g)),   Local2784 );
	float Local3651 = (Local3628 * Material_PreshaderBuffer[15].w);
	float Local3652 = (2.00000000 / Local3651);
	FLWCScalar Local3653 = LWCMultiply(  Local3650 , LWCPromote(Local3652));
	float Local3654 = (Local3652 * Material_PreshaderBuffer[67].w);
	float Local3655 = (Local3654 * Local3374);
	FLWCScalar Local3656 = LWCAdd(  Local3653 , LWCPromote(Local3655));
	FLWCScalar Local3657 = LWCMultiply(Local3656, LWCPromote(6.28318548));
	float Local3658 = LWCCos(Local3657);
	float Local3659 = (Local3658 * Local3649.r);
	float Local3660 = (Local3652 * Local3561);
	float Local3661 = (Material_PreshaderBuffer[13].w * Local3660);
	float Local3662 = (Material_PreshaderBuffer[63].x / Local3661);
	float Local3663 = (Local3662 * Local3561);
	float Local3664 = (Local3659 * Local3663);
	float Local3665 = (Local3658 * Local3649.g);
	float Local3666 = (Local3665 * Local3663);
	float Local3667 = LWCSin(Local3657);
	float Local3668 = (Local3667 * Local3561);
	float3 Local3669 = (Local3646 + float3(float2(Local3664,Local3666),Local3668));
	float3 Local3670 = (float3(float2(Local3601,Material_PreshaderBuffer[70].x),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local3671 = max(Local3670,((float3)-1.00000000));
	float3 Local3672 = min(Local3671,((float3)1.00000000));
	FLWCScalar Local3673 = LWCDot(LWCPromote(float2(Local3672.r,Local3672.g)),   Local2784 );
	float Local3674 = (Local3651 * Material_PreshaderBuffer[15].w);
	float Local3675 = (2.00000000 / Local3674);
	FLWCScalar Local3676 = LWCMultiply(  Local3673 , LWCPromote(Local3675));
	float Local3677 = (Local3675 * Material_PreshaderBuffer[68].x);
	float Local3678 = (Local3677 * Local3374);
	FLWCScalar Local3679 = LWCAdd(  Local3676 , LWCPromote(Local3678));
	FLWCScalar Local3680 = LWCMultiply(Local3679, LWCPromote(6.28318548));
	float Local3681 = LWCCos(Local3680);
	float Local3682 = (Local3681 * Local3672.r);
	float Local3683 = (Local3675 * Local3585);
	float Local3684 = (Material_PreshaderBuffer[13].w * Local3683);
	float Local3685 = (Material_PreshaderBuffer[63].z / Local3684);
	float Local3686 = (Local3685 * Local3585);
	float Local3687 = (Local3682 * Local3686);
	float Local3688 = (Local3681 * Local3672.g);
	float Local3689 = (Local3688 * Local3686);
	float Local3690 = LWCSin(Local3680);
	float Local3691 = (Local3690 * Local3585);
	float3 Local3692 = (Local3669 + float3(float2(Local3687,Local3689),Local3691));
	float3 Local3693 = (Local3596 + Local3692);
	float Local3694 = (Local3352 * 0.80000001);
	float Local3695 = (Material_PreshaderBuffer[57].z * Local3694);
	float Local3696 = (2.00000000 / Local3695);
	FLWCScalar Local3697 = LWCMultiply(  Local3351 , LWCPromote(Local3696));
	float Local3698 = (Local3696 * Material_PreshaderBuffer[71].z);
	float Local3699 = (Local3698 * Local3374);
	FLWCScalar Local3700 = LWCAdd(  Local3697 , LWCPromote(Local3699));
	FLWCScalar Local3701 = LWCMultiply(Local3700, LWCPromote(6.28318548));
	float Local3702 = LWCCos(Local3701);
	float Local3703 = (Local3702 * Local3350.r);
	float Local3704 = (Local3413 * 0.80000001);
	float Local3705 = (Local3696 * Local3704);
	float Local3706 = (Material_PreshaderBuffer[13].w * Local3705);
	float Local3707 = (Material_PreshaderBuffer[62].x / Local3706);
	float Local3708 = (Local3707 * Local3704);
	float Local3709 = (Local3703 * Local3708);
	float Local3710 = (Local3702 * Local3350.g);
	float Local3711 = (Local3710 * Local3708);
	float Local3712 = LWCSin(Local3701);
	float Local3713 = (Local3712 * Local3704);
	float Local3714 = (Local3695 * Material_PreshaderBuffer[15].w);
	float Local3715 = (2.00000000 / Local3714);
	FLWCScalar Local3716 = LWCMultiply(  Local3426 , LWCPromote(Local3715));
	float Local3717 = (Local3715 * Material_PreshaderBuffer[71].w);
	float Local3718 = (Local3717 * Local3374);
	FLWCScalar Local3719 = LWCAdd(  Local3716 , LWCPromote(Local3718));
	FLWCScalar Local3720 = LWCMultiply(Local3719, LWCPromote(6.28318548));
	float Local3721 = LWCCos(Local3720);
	float Local3722 = (Local3721 * Local3425.r);
	float Local3723 = (Local3704 * Material_PreshaderBuffer[17].z);
	float Local3724 = (Local3715 * Local3723);
	float Local3725 = (Material_PreshaderBuffer[13].w * Local3724);
	float Local3726 = (Material_PreshaderBuffer[62].z / Local3725);
	float Local3727 = (Local3726 * Local3723);
	float Local3728 = (Local3722 * Local3727);
	float Local3729 = (Local3721 * Local3425.g);
	float Local3730 = (Local3729 * Local3727);
	float Local3731 = LWCSin(Local3720);
	float Local3732 = (Local3731 * Local3723);
	float3 Local3733 = (float3(float2(Local3709,Local3711),Local3713) + float3(float2(Local3728,Local3730),Local3732));
	float Local3734 = (Local3714 * Material_PreshaderBuffer[15].w);
	float Local3735 = (2.00000000 / Local3734);
	FLWCScalar Local3736 = LWCMultiply(  Local3450 , LWCPromote(Local3735));
	float Local3737 = (Local3735 * Material_PreshaderBuffer[72].x);
	float Local3738 = (Local3737 * Local3374);
	FLWCScalar Local3739 = LWCAdd(  Local3736 , LWCPromote(Local3738));
	FLWCScalar Local3740 = LWCMultiply(Local3739, LWCPromote(6.28318548));
	float Local3741 = LWCCos(Local3740);
	float Local3742 = (Local3741 * Local3449.r);
	float Local3743 = (Local3723 * Material_PreshaderBuffer[17].z);
	float Local3744 = (Local3735 * Local3743);
	float Local3745 = (Material_PreshaderBuffer[13].w * Local3744);
	float Local3746 = (Material_PreshaderBuffer[63].x / Local3745);
	float Local3747 = (Local3746 * Local3743);
	float Local3748 = (Local3742 * Local3747);
	float Local3749 = (Local3741 * Local3449.g);
	float Local3750 = (Local3749 * Local3747);
	float Local3751 = LWCSin(Local3740);
	float Local3752 = (Local3751 * Local3743);
	float3 Local3753 = (Local3733 + float3(float2(Local3748,Local3750),Local3752));
	float Local3754 = (Local3734 * Material_PreshaderBuffer[15].w);
	float Local3755 = (2.00000000 / Local3754);
	FLWCScalar Local3756 = LWCMultiply(  Local3474 , LWCPromote(Local3755));
	float Local3757 = (Local3755 * Material_PreshaderBuffer[72].y);
	float Local3758 = (Local3757 * Local3374);
	FLWCScalar Local3759 = LWCAdd(  Local3756 , LWCPromote(Local3758));
	FLWCScalar Local3760 = LWCMultiply(Local3759, LWCPromote(6.28318548));
	float Local3761 = LWCCos(Local3760);
	float Local3762 = (Local3761 * Local3473.r);
	float Local3763 = (Local3743 * Material_PreshaderBuffer[17].z);
	float Local3764 = (Local3755 * Local3763);
	float Local3765 = (Material_PreshaderBuffer[13].w * Local3764);
	float Local3766 = (Material_PreshaderBuffer[63].z / Local3765);
	float Local3767 = (Local3766 * Local3763);
	float Local3768 = (Local3762 * Local3767);
	float Local3769 = (Local3761 * Local3473.g);
	float Local3770 = (Local3769 * Local3767);
	float Local3771 = LWCSin(Local3760);
	float Local3772 = (Local3771 * Local3763);
	float3 Local3773 = (Local3753 + float3(float2(Local3768,Local3770),Local3772));
	float Local3774 = (Local3694 * Material_PreshaderBuffer[23].w);
	float Local3775 = (Material_PreshaderBuffer[67].x * Local3774);
	float Local3776 = (2.00000000 / Local3775);
	FLWCScalar Local3777 = LWCMultiply(  Local3503 , LWCPromote(Local3776));
	float Local3778 = (Local3776 * Material_PreshaderBuffer[72].z);
	float Local3779 = (Local3778 * Local3374);
	FLWCScalar Local3780 = LWCAdd(  Local3777 , LWCPromote(Local3779));
	FLWCScalar Local3781 = LWCMultiply(Local3780, LWCPromote(6.28318548));
	float Local3782 = LWCCos(Local3781);
	float Local3783 = (Local3782 * Local3502.r);
	float Local3784 = (Local3704 * Material_PreshaderBuffer[25].w);
	float Local3785 = (Local3776 * Local3784);
	float Local3786 = (Material_PreshaderBuffer[13].w * Local3785);
	float Local3787 = (Material_PreshaderBuffer[62].x / Local3786);
	float Local3788 = (Local3787 * Local3784);
	float Local3789 = (Local3783 * Local3788);
	float Local3790 = (Local3782 * Local3502.g);
	float Local3791 = (Local3790 * Local3788);
	float Local3792 = LWCSin(Local3781);
	float Local3793 = (Local3792 * Local3784);
	float Local3794 = (Local3775 * Material_PreshaderBuffer[15].w);
	float Local3795 = (2.00000000 / Local3794);
	FLWCScalar Local3796 = LWCMultiply(  Local3527 , LWCPromote(Local3795));
	float Local3797 = (Local3795 * Material_PreshaderBuffer[72].w);
	float Local3798 = (Local3797 * Local3374);
	FLWCScalar Local3799 = LWCAdd(  Local3796 , LWCPromote(Local3798));
	FLWCScalar Local3800 = LWCMultiply(Local3799, LWCPromote(6.28318548));
	float Local3801 = LWCCos(Local3800);
	float Local3802 = (Local3801 * Local3526.r);
	float Local3803 = (Local3784 * Material_PreshaderBuffer[17].z);
	float Local3804 = (Local3795 * Local3803);
	float Local3805 = (Material_PreshaderBuffer[13].w * Local3804);
	float Local3806 = (Material_PreshaderBuffer[62].z / Local3805);
	float Local3807 = (Local3806 * Local3803);
	float Local3808 = (Local3802 * Local3807);
	float Local3809 = (Local3801 * Local3526.g);
	float Local3810 = (Local3809 * Local3807);
	float Local3811 = LWCSin(Local3800);
	float Local3812 = (Local3811 * Local3803);
	float3 Local3813 = (float3(float2(Local3789,Local3791),Local3793) + float3(float2(Local3808,Local3810),Local3812));
	float Local3814 = (Local3794 * Material_PreshaderBuffer[15].w);
	float Local3815 = (2.00000000 / Local3814);
	FLWCScalar Local3816 = LWCMultiply(  Local3551 , LWCPromote(Local3815));
	float Local3817 = (Local3815 * Material_PreshaderBuffer[73].x);
	float Local3818 = (Local3817 * Local3374);
	FLWCScalar Local3819 = LWCAdd(  Local3816 , LWCPromote(Local3818));
	FLWCScalar Local3820 = LWCMultiply(Local3819, LWCPromote(6.28318548));
	float Local3821 = LWCCos(Local3820);
	float Local3822 = (Local3821 * Local3550.r);
	float Local3823 = (Local3803 * Material_PreshaderBuffer[17].z);
	float Local3824 = (Local3815 * Local3823);
	float Local3825 = (Material_PreshaderBuffer[13].w * Local3824);
	float Local3826 = (Material_PreshaderBuffer[63].x / Local3825);
	float Local3827 = (Local3826 * Local3823);
	float Local3828 = (Local3822 * Local3827);
	float Local3829 = (Local3821 * Local3550.g);
	float Local3830 = (Local3829 * Local3827);
	float Local3831 = LWCSin(Local3820);
	float Local3832 = (Local3831 * Local3823);
	float3 Local3833 = (Local3813 + float3(float2(Local3828,Local3830),Local3832));
	float Local3834 = (Local3814 * Material_PreshaderBuffer[15].w);
	float Local3835 = (2.00000000 / Local3834);
	FLWCScalar Local3836 = LWCMultiply(  Local3575 , LWCPromote(Local3835));
	float Local3837 = (Local3835 * Material_PreshaderBuffer[73].y);
	float Local3838 = (Local3837 * Local3374);
	FLWCScalar Local3839 = LWCAdd(  Local3836 , LWCPromote(Local3838));
	FLWCScalar Local3840 = LWCMultiply(Local3839, LWCPromote(6.28318548));
	float Local3841 = LWCCos(Local3840);
	float Local3842 = (Local3841 * Local3574.r);
	float Local3843 = (Local3823 * Material_PreshaderBuffer[17].z);
	float Local3844 = (Local3835 * Local3843);
	float Local3845 = (Material_PreshaderBuffer[13].w * Local3844);
	float Local3846 = (Material_PreshaderBuffer[63].z / Local3845);
	float Local3847 = (Local3846 * Local3843);
	float Local3848 = (Local3842 * Local3847);
	float Local3849 = (Local3841 * Local3574.g);
	float Local3850 = (Local3849 * Local3847);
	float Local3851 = LWCSin(Local3840);
	float Local3852 = (Local3851 * Local3843);
	float3 Local3853 = (Local3833 + float3(float2(Local3848,Local3850),Local3852));
	float3 Local3854 = (Local3773 + Local3853);
	float Local3855 = (Material_PreshaderBuffer[71].y * Local3774);
	float Local3856 = (2.00000000 / Local3855);
	FLWCScalar Local3857 = LWCMultiply(  Local3605 , LWCPromote(Local3856));
	float Local3858 = (Local3856 * Material_PreshaderBuffer[72].z);
	float Local3859 = (Local3858 * Local3374);
	FLWCScalar Local3860 = LWCAdd(  Local3857 , LWCPromote(Local3859));
	FLWCScalar Local3861 = LWCMultiply(Local3860, LWCPromote(6.28318548));
	float Local3862 = LWCCos(Local3861);
	float Local3863 = (Local3862 * Local3604.r);
	float Local3864 = (Local3856 * Local3784);
	float Local3865 = (Material_PreshaderBuffer[13].w * Local3864);
	float Local3866 = (Material_PreshaderBuffer[62].x / Local3865);
	float Local3867 = (Local3866 * Local3784);
	float Local3868 = (Local3863 * Local3867);
	float Local3869 = (Local3862 * Local3604.g);
	float Local3870 = (Local3869 * Local3867);
	float Local3871 = LWCSin(Local3861);
	float Local3872 = (Local3871 * Local3784);
	float Local3873 = (Local3855 * Material_PreshaderBuffer[15].w);
	float Local3874 = (2.00000000 / Local3873);
	FLWCScalar Local3875 = LWCMultiply(  Local3627 , LWCPromote(Local3874));
	float Local3876 = (Local3874 * Material_PreshaderBuffer[72].w);
	float Local3877 = (Local3876 * Local3374);
	FLWCScalar Local3878 = LWCAdd(  Local3875 , LWCPromote(Local3877));
	FLWCScalar Local3879 = LWCMultiply(Local3878, LWCPromote(6.28318548));
	float Local3880 = LWCCos(Local3879);
	float Local3881 = (Local3880 * Local3626.r);
	float Local3882 = (Local3874 * Local3803);
	float Local3883 = (Material_PreshaderBuffer[13].w * Local3882);
	float Local3884 = (Material_PreshaderBuffer[62].z / Local3883);
	float Local3885 = (Local3884 * Local3803);
	float Local3886 = (Local3881 * Local3885);
	float Local3887 = (Local3880 * Local3626.g);
	float Local3888 = (Local3887 * Local3885);
	float Local3889 = LWCSin(Local3879);
	float Local3890 = (Local3889 * Local3803);
	float3 Local3891 = (float3(float2(Local3868,Local3870),Local3872) + float3(float2(Local3886,Local3888),Local3890));
	float Local3892 = (Local3873 * Material_PreshaderBuffer[15].w);
	float Local3893 = (2.00000000 / Local3892);
	FLWCScalar Local3894 = LWCMultiply(  Local3650 , LWCPromote(Local3893));
	float Local3895 = (Local3893 * Material_PreshaderBuffer[73].x);
	float Local3896 = (Local3895 * Local3374);
	FLWCScalar Local3897 = LWCAdd(  Local3894 , LWCPromote(Local3896));
	FLWCScalar Local3898 = LWCMultiply(Local3897, LWCPromote(6.28318548));
	float Local3899 = LWCCos(Local3898);
	float Local3900 = (Local3899 * Local3649.r);
	float Local3901 = (Local3893 * Local3823);
	float Local3902 = (Material_PreshaderBuffer[13].w * Local3901);
	float Local3903 = (Material_PreshaderBuffer[63].x / Local3902);
	float Local3904 = (Local3903 * Local3823);
	float Local3905 = (Local3900 * Local3904);
	float Local3906 = (Local3899 * Local3649.g);
	float Local3907 = (Local3906 * Local3904);
	float Local3908 = LWCSin(Local3898);
	float Local3909 = (Local3908 * Local3823);
	float3 Local3910 = (Local3891 + float3(float2(Local3905,Local3907),Local3909));
	float Local3911 = (Local3892 * Material_PreshaderBuffer[15].w);
	float Local3912 = (2.00000000 / Local3911);
	FLWCScalar Local3913 = LWCMultiply(  Local3673 , LWCPromote(Local3912));
	float Local3914 = (Local3912 * Material_PreshaderBuffer[73].y);
	float Local3915 = (Local3914 * Local3374);
	FLWCScalar Local3916 = LWCAdd(  Local3913 , LWCPromote(Local3915));
	FLWCScalar Local3917 = LWCMultiply(Local3916, LWCPromote(6.28318548));
	float Local3918 = LWCCos(Local3917);
	float Local3919 = (Local3918 * Local3672.r);
	float Local3920 = (Local3912 * Local3843);
	float Local3921 = (Material_PreshaderBuffer[13].w * Local3920);
	float Local3922 = (Material_PreshaderBuffer[63].z / Local3921);
	float Local3923 = (Local3922 * Local3843);
	float Local3924 = (Local3919 * Local3923);
	float Local3925 = (Local3918 * Local3672.g);
	float Local3926 = (Local3925 * Local3923);
	float Local3927 = LWCSin(Local3917);
	float Local3928 = (Local3927 * Local3843);
	float3 Local3929 = (Local3910 + float3(float2(Local3924,Local3926),Local3928));
	float3 Local3930 = (Local3854 + Local3929);
	float Local3931 = (Local3352 * 4.00000000);
	float Local3932 = (Material_PreshaderBuffer[57].z * Local3931);
	float Local3933 = (2.00000000 / Local3932);
	FLWCScalar Local3934 = LWCMultiply(  Local3351 , LWCPromote(Local3933));
	float Local3935 = (Local3933 * Material_PreshaderBuffer[73].z);
	float Local3936 = (Local3935 * Local3374);
	FLWCScalar Local3937 = LWCAdd(  Local3934 , LWCPromote(Local3936));
	FLWCScalar Local3938 = LWCMultiply(Local3937, LWCPromote(6.28318548));
	float Local3939 = LWCCos(Local3938);
	float Local3940 = (Local3939 * Local3350.r);
	float Local3941 = (Local3933 * Local3704);
	float Local3942 = (Material_PreshaderBuffer[13].w * Local3941);
	float Local3943 = (Material_PreshaderBuffer[62].x / Local3942);
	float Local3944 = (Local3943 * Local3704);
	float Local3945 = (Local3940 * Local3944);
	float Local3946 = (Local3939 * Local3350.g);
	float Local3947 = (Local3946 * Local3944);
	float Local3948 = LWCSin(Local3938);
	float Local3949 = (Local3948 * Local3704);
	float Local3950 = (Local3932 * Material_PreshaderBuffer[15].w);
	float Local3951 = (2.00000000 / Local3950);
	FLWCScalar Local3952 = LWCMultiply(  Local3426 , LWCPromote(Local3951));
	float Local3953 = (Local3951 * Material_PreshaderBuffer[73].w);
	float Local3954 = (Local3953 * Local3374);
	FLWCScalar Local3955 = LWCAdd(  Local3952 , LWCPromote(Local3954));
	FLWCScalar Local3956 = LWCMultiply(Local3955, LWCPromote(6.28318548));
	float Local3957 = LWCCos(Local3956);
	float Local3958 = (Local3957 * Local3425.r);
	float Local3959 = (Local3951 * Local3723);
	float Local3960 = (Material_PreshaderBuffer[13].w * Local3959);
	float Local3961 = (Material_PreshaderBuffer[62].z / Local3960);
	float Local3962 = (Local3961 * Local3723);
	float Local3963 = (Local3958 * Local3962);
	float Local3964 = (Local3957 * Local3425.g);
	float Local3965 = (Local3964 * Local3962);
	float Local3966 = LWCSin(Local3956);
	float Local3967 = (Local3966 * Local3723);
	float3 Local3968 = (float3(float2(Local3945,Local3947),Local3949) + float3(float2(Local3963,Local3965),Local3967));
	float Local3969 = (Local3950 * Material_PreshaderBuffer[15].w);
	float Local3970 = (2.00000000 / Local3969);
	FLWCScalar Local3971 = LWCMultiply(  Local3450 , LWCPromote(Local3970));
	float Local3972 = (Local3970 * Material_PreshaderBuffer[74].x);
	float Local3973 = (Local3972 * Local3374);
	FLWCScalar Local3974 = LWCAdd(  Local3971 , LWCPromote(Local3973));
	FLWCScalar Local3975 = LWCMultiply(Local3974, LWCPromote(6.28318548));
	float Local3976 = LWCCos(Local3975);
	float Local3977 = (Local3976 * Local3449.r);
	float Local3978 = (Local3970 * Local3743);
	float Local3979 = (Material_PreshaderBuffer[13].w * Local3978);
	float Local3980 = (Material_PreshaderBuffer[63].x / Local3979);
	float Local3981 = (Local3980 * Local3743);
	float Local3982 = (Local3977 * Local3981);
	float Local3983 = (Local3976 * Local3449.g);
	float Local3984 = (Local3983 * Local3981);
	float Local3985 = LWCSin(Local3975);
	float Local3986 = (Local3985 * Local3743);
	float3 Local3987 = (Local3968 + float3(float2(Local3982,Local3984),Local3986));
	float Local3988 = (Local3969 * Material_PreshaderBuffer[15].w);
	float Local3989 = (2.00000000 / Local3988);
	FLWCScalar Local3990 = LWCMultiply(  Local3474 , LWCPromote(Local3989));
	float Local3991 = (Local3989 * Material_PreshaderBuffer[74].y);
	float Local3992 = (Local3991 * Local3374);
	FLWCScalar Local3993 = LWCAdd(  Local3990 , LWCPromote(Local3992));
	FLWCScalar Local3994 = LWCMultiply(Local3993, LWCPromote(6.28318548));
	float Local3995 = LWCCos(Local3994);
	float Local3996 = (Local3995 * Local3473.r);
	float Local3997 = (Local3989 * Local3763);
	float Local3998 = (Material_PreshaderBuffer[13].w * Local3997);
	float Local3999 = (Material_PreshaderBuffer[63].z / Local3998);
	float Local4000 = (Local3999 * Local3763);
	float Local4001 = (Local3996 * Local4000);
	float Local4002 = (Local3995 * Local3473.g);
	float Local4003 = (Local4002 * Local4000);
	float Local4004 = LWCSin(Local3994);
	float Local4005 = (Local4004 * Local3763);
	float3 Local4006 = (Local3987 + float3(float2(Local4001,Local4003),Local4005));
	float Local4007 = (Local3931 * Material_PreshaderBuffer[23].w);
	float Local4008 = (Material_PreshaderBuffer[67].x * Local4007);
	float Local4009 = (2.00000000 / Local4008);
	FLWCScalar Local4010 = LWCMultiply(  Local3503 , LWCPromote(Local4009));
	float Local4011 = (Local4009 * Material_PreshaderBuffer[74].z);
	float Local4012 = (Local4011 * Local3374);
	FLWCScalar Local4013 = LWCAdd(  Local4010 , LWCPromote(Local4012));
	FLWCScalar Local4014 = LWCMultiply(Local4013, LWCPromote(6.28318548));
	float Local4015 = LWCCos(Local4014);
	float Local4016 = (Local4015 * Local3502.r);
	float Local4017 = (Local4009 * Local3784);
	float Local4018 = (Material_PreshaderBuffer[13].w * Local4017);
	float Local4019 = (Material_PreshaderBuffer[62].x / Local4018);
	float Local4020 = (Local4019 * Local3784);
	float Local4021 = (Local4016 * Local4020);
	float Local4022 = (Local4015 * Local3502.g);
	float Local4023 = (Local4022 * Local4020);
	float Local4024 = LWCSin(Local4014);
	float Local4025 = (Local4024 * Local3784);
	float Local4026 = (Local4008 * Material_PreshaderBuffer[15].w);
	float Local4027 = (2.00000000 / Local4026);
	FLWCScalar Local4028 = LWCMultiply(  Local3527 , LWCPromote(Local4027));
	float Local4029 = (Local4027 * Material_PreshaderBuffer[74].w);
	float Local4030 = (Local4029 * Local3374);
	FLWCScalar Local4031 = LWCAdd(  Local4028 , LWCPromote(Local4030));
	FLWCScalar Local4032 = LWCMultiply(Local4031, LWCPromote(6.28318548));
	float Local4033 = LWCCos(Local4032);
	float Local4034 = (Local4033 * Local3526.r);
	float Local4035 = (Local4027 * Local3803);
	float Local4036 = (Material_PreshaderBuffer[13].w * Local4035);
	float Local4037 = (Material_PreshaderBuffer[62].z / Local4036);
	float Local4038 = (Local4037 * Local3803);
	float Local4039 = (Local4034 * Local4038);
	float Local4040 = (Local4033 * Local3526.g);
	float Local4041 = (Local4040 * Local4038);
	float Local4042 = LWCSin(Local4032);
	float Local4043 = (Local4042 * Local3803);
	float3 Local4044 = (float3(float2(Local4021,Local4023),Local4025) + float3(float2(Local4039,Local4041),Local4043));
	float Local4045 = (Local4026 * Material_PreshaderBuffer[15].w);
	float Local4046 = (2.00000000 / Local4045);
	FLWCScalar Local4047 = LWCMultiply(  Local3551 , LWCPromote(Local4046));
	float Local4048 = (Local4046 * Material_PreshaderBuffer[75].x);
	float Local4049 = (Local4048 * Local3374);
	FLWCScalar Local4050 = LWCAdd(  Local4047 , LWCPromote(Local4049));
	FLWCScalar Local4051 = LWCMultiply(Local4050, LWCPromote(6.28318548));
	float Local4052 = LWCCos(Local4051);
	float Local4053 = (Local4052 * Local3550.r);
	float Local4054 = (Local4046 * Local3823);
	float Local4055 = (Material_PreshaderBuffer[13].w * Local4054);
	float Local4056 = (Material_PreshaderBuffer[63].x / Local4055);
	float Local4057 = (Local4056 * Local3823);
	float Local4058 = (Local4053 * Local4057);
	float Local4059 = (Local4052 * Local3550.g);
	float Local4060 = (Local4059 * Local4057);
	float Local4061 = LWCSin(Local4051);
	float Local4062 = (Local4061 * Local3823);
	float3 Local4063 = (Local4044 + float3(float2(Local4058,Local4060),Local4062));
	float Local4064 = (Local4045 * Material_PreshaderBuffer[15].w);
	float Local4065 = (2.00000000 / Local4064);
	FLWCScalar Local4066 = LWCMultiply(  Local3575 , LWCPromote(Local4065));
	float Local4067 = (Local4065 * Material_PreshaderBuffer[75].y);
	float Local4068 = (Local4067 * Local3374);
	FLWCScalar Local4069 = LWCAdd(  Local4066 , LWCPromote(Local4068));
	FLWCScalar Local4070 = LWCMultiply(Local4069, LWCPromote(6.28318548));
	float Local4071 = LWCCos(Local4070);
	float Local4072 = (Local4071 * Local3574.r);
	float Local4073 = (Local4065 * Local3843);
	float Local4074 = (Material_PreshaderBuffer[13].w * Local4073);
	float Local4075 = (Material_PreshaderBuffer[63].z / Local4074);
	float Local4076 = (Local4075 * Local3843);
	float Local4077 = (Local4072 * Local4076);
	float Local4078 = (Local4071 * Local3574.g);
	float Local4079 = (Local4078 * Local4076);
	float Local4080 = LWCSin(Local4070);
	float Local4081 = (Local4080 * Local3843);
	float3 Local4082 = (Local4063 + float3(float2(Local4077,Local4079),Local4081));
	float3 Local4083 = (Local4006 + Local4082);
	float Local4084 = (Material_PreshaderBuffer[71].y * Local4007);
	float Local4085 = (2.00000000 / Local4084);
	FLWCScalar Local4086 = LWCMultiply(  Local3605 , LWCPromote(Local4085));
	float Local4087 = (Local4085 * Material_PreshaderBuffer[74].z);
	float Local4088 = (Local4087 * Local3374);
	FLWCScalar Local4089 = LWCAdd(  Local4086 , LWCPromote(Local4088));
	FLWCScalar Local4090 = LWCMultiply(Local4089, LWCPromote(6.28318548));
	float Local4091 = LWCCos(Local4090);
	float Local4092 = (Local4091 * Local3604.r);
	float Local4093 = (Local4085 * Local3784);
	float Local4094 = (Material_PreshaderBuffer[13].w * Local4093);
	float Local4095 = (Material_PreshaderBuffer[62].x / Local4094);
	float Local4096 = (Local4095 * Local3784);
	float Local4097 = (Local4092 * Local4096);
	float Local4098 = (Local4091 * Local3604.g);
	float Local4099 = (Local4098 * Local4096);
	float Local4100 = LWCSin(Local4090);
	float Local4101 = (Local4100 * Local3784);
	float Local4102 = (Local4084 * Material_PreshaderBuffer[15].w);
	float Local4103 = (2.00000000 / Local4102);
	FLWCScalar Local4104 = LWCMultiply(  Local3627 , LWCPromote(Local4103));
	float Local4105 = (Local4103 * Material_PreshaderBuffer[74].w);
	float Local4106 = (Local4105 * Local3374);
	FLWCScalar Local4107 = LWCAdd(  Local4104 , LWCPromote(Local4106));
	FLWCScalar Local4108 = LWCMultiply(Local4107, LWCPromote(6.28318548));
	float Local4109 = LWCCos(Local4108);
	float Local4110 = (Local4109 * Local3626.r);
	float Local4111 = (Local4103 * Local3803);
	float Local4112 = (Material_PreshaderBuffer[13].w * Local4111);
	float Local4113 = (Material_PreshaderBuffer[62].z / Local4112);
	float Local4114 = (Local4113 * Local3803);
	float Local4115 = (Local4110 * Local4114);
	float Local4116 = (Local4109 * Local3626.g);
	float Local4117 = (Local4116 * Local4114);
	float Local4118 = LWCSin(Local4108);
	float Local4119 = (Local4118 * Local3803);
	float3 Local4120 = (float3(float2(Local4097,Local4099),Local4101) + float3(float2(Local4115,Local4117),Local4119));
	float Local4121 = (Local4102 * Material_PreshaderBuffer[15].w);
	float Local4122 = (2.00000000 / Local4121);
	FLWCScalar Local4123 = LWCMultiply(  Local3650 , LWCPromote(Local4122));
	float Local4124 = (Local4122 * Material_PreshaderBuffer[75].x);
	float Local4125 = (Local4124 * Local3374);
	FLWCScalar Local4126 = LWCAdd(  Local4123 , LWCPromote(Local4125));
	FLWCScalar Local4127 = LWCMultiply(Local4126, LWCPromote(6.28318548));
	float Local4128 = LWCCos(Local4127);
	float Local4129 = (Local4128 * Local3649.r);
	float Local4130 = (Local4122 * Local3823);
	float Local4131 = (Material_PreshaderBuffer[13].w * Local4130);
	float Local4132 = (Material_PreshaderBuffer[63].x / Local4131);
	float Local4133 = (Local4132 * Local3823);
	float Local4134 = (Local4129 * Local4133);
	float Local4135 = (Local4128 * Local3649.g);
	float Local4136 = (Local4135 * Local4133);
	float Local4137 = LWCSin(Local4127);
	float Local4138 = (Local4137 * Local3823);
	float3 Local4139 = (Local4120 + float3(float2(Local4134,Local4136),Local4138));
	float Local4140 = (Local4121 * Material_PreshaderBuffer[15].w);
	float Local4141 = (2.00000000 / Local4140);
	FLWCScalar Local4142 = LWCMultiply(  Local3673 , LWCPromote(Local4141));
	float Local4143 = (Local4141 * Material_PreshaderBuffer[75].y);
	float Local4144 = (Local4143 * Local3374);
	FLWCScalar Local4145 = LWCAdd(  Local4142 , LWCPromote(Local4144));
	FLWCScalar Local4146 = LWCMultiply(Local4145, LWCPromote(6.28318548));
	float Local4147 = LWCCos(Local4146);
	float Local4148 = (Local4147 * Local3672.r);
	float Local4149 = (Local4141 * Local3843);
	float Local4150 = (Material_PreshaderBuffer[13].w * Local4149);
	float Local4151 = (Material_PreshaderBuffer[63].z / Local4150);
	float Local4152 = (Local4151 * Local3843);
	float Local4153 = (Local4148 * Local4152);
	float Local4154 = (Local4147 * Local3672.g);
	float Local4155 = (Local4154 * Local4152);
	float Local4156 = LWCSin(Local4146);
	float Local4157 = (Local4156 * Local3843);
	float3 Local4158 = (Local4139 + float3(float2(Local4153,Local4155),Local4157));
	float3 Local4159 = (Local4083 + Local4158);
	float Local4160 = (Local3352 * 0.75000000);
	float Local4161 = (Material_PreshaderBuffer[57].z * Local4160);
	float Local4162 = (2.00000000 / Local4161);
	FLWCScalar Local4163 = LWCMultiply(  Local3351 , LWCPromote(Local4162));
	float Local4164 = (Local4162 * Material_PreshaderBuffer[71].z);
	float Local4165 = (Local4164 * Local3374);
	FLWCScalar Local4166 = LWCAdd(  Local4163 , LWCPromote(Local4165));
	FLWCScalar Local4167 = LWCMultiply(Local4166, LWCPromote(6.28318548));
	float Local4168 = LWCCos(Local4167);
	float Local4169 = (Local4168 * Local3350.r);
	float Local4170 = (Local3413 * 0.50000000);
	float Local4171 = (Local4162 * Local4170);
	float Local4172 = (Material_PreshaderBuffer[13].w * Local4171);
	float Local4173 = (Material_PreshaderBuffer[62].x / Local4172);
	float Local4174 = (Local4173 * Local4170);
	float Local4175 = (Local4169 * Local4174);
	float Local4176 = (Local4168 * Local3350.g);
	float Local4177 = (Local4176 * Local4174);
	float Local4178 = LWCSin(Local4167);
	float Local4179 = (Local4178 * Local4170);
	float Local4180 = (Local4161 * Material_PreshaderBuffer[15].w);
	float Local4181 = (2.00000000 / Local4180);
	FLWCScalar Local4182 = LWCMultiply(  Local3426 , LWCPromote(Local4181));
	float Local4183 = (Local4181 * Material_PreshaderBuffer[71].w);
	float Local4184 = (Local4183 * Local3374);
	FLWCScalar Local4185 = LWCAdd(  Local4182 , LWCPromote(Local4184));
	FLWCScalar Local4186 = LWCMultiply(Local4185, LWCPromote(6.28318548));
	float Local4187 = LWCCos(Local4186);
	float Local4188 = (Local4187 * Local3425.r);
	float Local4189 = (Local4170 * Material_PreshaderBuffer[17].z);
	float Local4190 = (Local4181 * Local4189);
	float Local4191 = (Material_PreshaderBuffer[13].w * Local4190);
	float Local4192 = (Material_PreshaderBuffer[62].z / Local4191);
	float Local4193 = (Local4192 * Local4189);
	float Local4194 = (Local4188 * Local4193);
	float Local4195 = (Local4187 * Local3425.g);
	float Local4196 = (Local4195 * Local4193);
	float Local4197 = LWCSin(Local4186);
	float Local4198 = (Local4197 * Local4189);
	float3 Local4199 = (float3(float2(Local4175,Local4177),Local4179) + float3(float2(Local4194,Local4196),Local4198));
	float Local4200 = (Local4180 * Material_PreshaderBuffer[15].w);
	float Local4201 = (2.00000000 / Local4200);
	FLWCScalar Local4202 = LWCMultiply(  Local3450 , LWCPromote(Local4201));
	float Local4203 = (Local4201 * Material_PreshaderBuffer[72].x);
	float Local4204 = (Local4203 * Local3374);
	FLWCScalar Local4205 = LWCAdd(  Local4202 , LWCPromote(Local4204));
	FLWCScalar Local4206 = LWCMultiply(Local4205, LWCPromote(6.28318548));
	float Local4207 = LWCCos(Local4206);
	float Local4208 = (Local4207 * Local3449.r);
	float Local4209 = (Local4189 * Material_PreshaderBuffer[17].z);
	float Local4210 = (Local4201 * Local4209);
	float Local4211 = (Material_PreshaderBuffer[13].w * Local4210);
	float Local4212 = (Material_PreshaderBuffer[63].x / Local4211);
	float Local4213 = (Local4212 * Local4209);
	float Local4214 = (Local4208 * Local4213);
	float Local4215 = (Local4207 * Local3449.g);
	float Local4216 = (Local4215 * Local4213);
	float Local4217 = LWCSin(Local4206);
	float Local4218 = (Local4217 * Local4209);
	float3 Local4219 = (Local4199 + float3(float2(Local4214,Local4216),Local4218));
	float Local4220 = (Local4200 * Material_PreshaderBuffer[15].w);
	float Local4221 = (2.00000000 / Local4220);
	FLWCScalar Local4222 = LWCMultiply(  Local3474 , LWCPromote(Local4221));
	float Local4223 = (Local4221 * Material_PreshaderBuffer[72].y);
	float Local4224 = (Local4223 * Local3374);
	FLWCScalar Local4225 = LWCAdd(  Local4222 , LWCPromote(Local4224));
	FLWCScalar Local4226 = LWCMultiply(Local4225, LWCPromote(6.28318548));
	float Local4227 = LWCCos(Local4226);
	float Local4228 = (Local4227 * Local3473.r);
	float Local4229 = (Local4209 * Material_PreshaderBuffer[17].z);
	float Local4230 = (Local4221 * Local4229);
	float Local4231 = (Material_PreshaderBuffer[13].w * Local4230);
	float Local4232 = (Material_PreshaderBuffer[63].z / Local4231);
	float Local4233 = (Local4232 * Local4229);
	float Local4234 = (Local4228 * Local4233);
	float Local4235 = (Local4227 * Local3473.g);
	float Local4236 = (Local4235 * Local4233);
	float Local4237 = LWCSin(Local4226);
	float Local4238 = (Local4237 * Local4229);
	float3 Local4239 = (Local4219 + float3(float2(Local4234,Local4236),Local4238));
	float Local4240 = (Local4160 * Material_PreshaderBuffer[23].w);
	float Local4241 = (Material_PreshaderBuffer[67].x * Local4240);
	float Local4242 = (2.00000000 / Local4241);
	FLWCScalar Local4243 = LWCMultiply(  Local3503 , LWCPromote(Local4242));
	float Local4244 = (Local4242 * Material_PreshaderBuffer[72].z);
	float Local4245 = (Local4244 * Local3374);
	FLWCScalar Local4246 = LWCAdd(  Local4243 , LWCPromote(Local4245));
	FLWCScalar Local4247 = LWCMultiply(Local4246, LWCPromote(6.28318548));
	float Local4248 = LWCCos(Local4247);
	float Local4249 = (Local4248 * Local3502.r);
	float Local4250 = (Local4170 * Material_PreshaderBuffer[25].w);
	float Local4251 = (Local4242 * Local4250);
	float Local4252 = (Material_PreshaderBuffer[13].w * Local4251);
	float Local4253 = (Material_PreshaderBuffer[62].x / Local4252);
	float Local4254 = (Local4253 * Local4250);
	float Local4255 = (Local4249 * Local4254);
	float Local4256 = (Local4248 * Local3502.g);
	float Local4257 = (Local4256 * Local4254);
	float Local4258 = LWCSin(Local4247);
	float Local4259 = (Local4258 * Local4250);
	float Local4260 = (Local4241 * Material_PreshaderBuffer[15].w);
	float Local4261 = (2.00000000 / Local4260);
	FLWCScalar Local4262 = LWCMultiply(  Local3527 , LWCPromote(Local4261));
	float Local4263 = (Local4261 * Material_PreshaderBuffer[72].w);
	float Local4264 = (Local4263 * Local3374);
	FLWCScalar Local4265 = LWCAdd(  Local4262 , LWCPromote(Local4264));
	FLWCScalar Local4266 = LWCMultiply(Local4265, LWCPromote(6.28318548));
	float Local4267 = LWCCos(Local4266);
	float Local4268 = (Local4267 * Local3526.r);
	float Local4269 = (Local4250 * Material_PreshaderBuffer[17].z);
	float Local4270 = (Local4261 * Local4269);
	float Local4271 = (Material_PreshaderBuffer[13].w * Local4270);
	float Local4272 = (Material_PreshaderBuffer[62].z / Local4271);
	float Local4273 = (Local4272 * Local4269);
	float Local4274 = (Local4268 * Local4273);
	float Local4275 = (Local4267 * Local3526.g);
	float Local4276 = (Local4275 * Local4273);
	float Local4277 = LWCSin(Local4266);
	float Local4278 = (Local4277 * Local4269);
	float3 Local4279 = (float3(float2(Local4255,Local4257),Local4259) + float3(float2(Local4274,Local4276),Local4278));
	float Local4280 = (Local4260 * Material_PreshaderBuffer[15].w);
	float Local4281 = (2.00000000 / Local4280);
	FLWCScalar Local4282 = LWCMultiply(  Local3551 , LWCPromote(Local4281));
	float Local4283 = (Local4281 * Material_PreshaderBuffer[73].x);
	float Local4284 = (Local4283 * Local3374);
	FLWCScalar Local4285 = LWCAdd(  Local4282 , LWCPromote(Local4284));
	FLWCScalar Local4286 = LWCMultiply(Local4285, LWCPromote(6.28318548));
	float Local4287 = LWCCos(Local4286);
	float Local4288 = (Local4287 * Local3550.r);
	float Local4289 = (Local4269 * Material_PreshaderBuffer[17].z);
	float Local4290 = (Local4281 * Local4289);
	float Local4291 = (Material_PreshaderBuffer[13].w * Local4290);
	float Local4292 = (Material_PreshaderBuffer[63].x / Local4291);
	float Local4293 = (Local4292 * Local4289);
	float Local4294 = (Local4288 * Local4293);
	float Local4295 = (Local4287 * Local3550.g);
	float Local4296 = (Local4295 * Local4293);
	float Local4297 = LWCSin(Local4286);
	float Local4298 = (Local4297 * Local4289);
	float3 Local4299 = (Local4279 + float3(float2(Local4294,Local4296),Local4298));
	float Local4300 = (Local4280 * Material_PreshaderBuffer[15].w);
	float Local4301 = (2.00000000 / Local4300);
	FLWCScalar Local4302 = LWCMultiply(  Local3575 , LWCPromote(Local4301));
	float Local4303 = (Local4301 * Material_PreshaderBuffer[73].y);
	float Local4304 = (Local4303 * Local3374);
	FLWCScalar Local4305 = LWCAdd(  Local4302 , LWCPromote(Local4304));
	FLWCScalar Local4306 = LWCMultiply(Local4305, LWCPromote(6.28318548));
	float Local4307 = LWCCos(Local4306);
	float Local4308 = (Local4307 * Local3574.r);
	float Local4309 = (Local4289 * Material_PreshaderBuffer[17].z);
	float Local4310 = (Local4301 * Local4309);
	float Local4311 = (Material_PreshaderBuffer[13].w * Local4310);
	float Local4312 = (Material_PreshaderBuffer[63].z / Local4311);
	float Local4313 = (Local4312 * Local4309);
	float Local4314 = (Local4308 * Local4313);
	float Local4315 = (Local4307 * Local3574.g);
	float Local4316 = (Local4315 * Local4313);
	float Local4317 = LWCSin(Local4306);
	float Local4318 = (Local4317 * Local4309);
	float3 Local4319 = (Local4299 + float3(float2(Local4314,Local4316),Local4318));
	float3 Local4320 = (Local4239 + Local4319);
	float Local4321 = (Material_PreshaderBuffer[71].y * Local4240);
	float Local4322 = (2.00000000 / Local4321);
	FLWCScalar Local4323 = LWCMultiply(  Local3605 , LWCPromote(Local4322));
	float Local4324 = (Local4322 * Material_PreshaderBuffer[72].z);
	float Local4325 = (Local4324 * Local3374);
	FLWCScalar Local4326 = LWCAdd(  Local4323 , LWCPromote(Local4325));
	FLWCScalar Local4327 = LWCMultiply(Local4326, LWCPromote(6.28318548));
	float Local4328 = LWCCos(Local4327);
	float Local4329 = (Local4328 * Local3604.r);
	float Local4330 = (Local4322 * Local4250);
	float Local4331 = (Material_PreshaderBuffer[13].w * Local4330);
	float Local4332 = (Material_PreshaderBuffer[62].x / Local4331);
	float Local4333 = (Local4332 * Local4250);
	float Local4334 = (Local4329 * Local4333);
	float Local4335 = (Local4328 * Local3604.g);
	float Local4336 = (Local4335 * Local4333);
	float Local4337 = LWCSin(Local4327);
	float Local4338 = (Local4337 * Local4250);
	float Local4339 = (Local4321 * Material_PreshaderBuffer[15].w);
	float Local4340 = (2.00000000 / Local4339);
	FLWCScalar Local4341 = LWCMultiply(  Local3627 , LWCPromote(Local4340));
	float Local4342 = (Local4340 * Material_PreshaderBuffer[72].w);
	float Local4343 = (Local4342 * Local3374);
	FLWCScalar Local4344 = LWCAdd(  Local4341 , LWCPromote(Local4343));
	FLWCScalar Local4345 = LWCMultiply(Local4344, LWCPromote(6.28318548));
	float Local4346 = LWCCos(Local4345);
	float Local4347 = (Local4346 * Local3626.r);
	float Local4348 = (Local4340 * Local4269);
	float Local4349 = (Material_PreshaderBuffer[13].w * Local4348);
	float Local4350 = (Material_PreshaderBuffer[62].z / Local4349);
	float Local4351 = (Local4350 * Local4269);
	float Local4352 = (Local4347 * Local4351);
	float Local4353 = (Local4346 * Local3626.g);
	float Local4354 = (Local4353 * Local4351);
	float Local4355 = LWCSin(Local4345);
	float Local4356 = (Local4355 * Local4269);
	float3 Local4357 = (float3(float2(Local4334,Local4336),Local4338) + float3(float2(Local4352,Local4354),Local4356));
	float Local4358 = (Local4339 * Material_PreshaderBuffer[15].w);
	float Local4359 = (2.00000000 / Local4358);
	FLWCScalar Local4360 = LWCMultiply(  Local3650 , LWCPromote(Local4359));
	float Local4361 = (Local4359 * Material_PreshaderBuffer[73].x);
	float Local4362 = (Local4361 * Local3374);
	FLWCScalar Local4363 = LWCAdd(  Local4360 , LWCPromote(Local4362));
	FLWCScalar Local4364 = LWCMultiply(Local4363, LWCPromote(6.28318548));
	float Local4365 = LWCCos(Local4364);
	float Local4366 = (Local4365 * Local3649.r);
	float Local4367 = (Local4359 * Local4289);
	float Local4368 = (Material_PreshaderBuffer[13].w * Local4367);
	float Local4369 = (Material_PreshaderBuffer[63].x / Local4368);
	float Local4370 = (Local4369 * Local4289);
	float Local4371 = (Local4366 * Local4370);
	float Local4372 = (Local4365 * Local3649.g);
	float Local4373 = (Local4372 * Local4370);
	float Local4374 = LWCSin(Local4364);
	float Local4375 = (Local4374 * Local4289);
	float3 Local4376 = (Local4357 + float3(float2(Local4371,Local4373),Local4375));
	float Local4377 = (Local4358 * Material_PreshaderBuffer[15].w);
	float Local4378 = (2.00000000 / Local4377);
	FLWCScalar Local4379 = LWCMultiply(  Local3673 , LWCPromote(Local4378));
	float Local4380 = (Local4378 * Material_PreshaderBuffer[73].y);
	float Local4381 = (Local4380 * Local3374);
	FLWCScalar Local4382 = LWCAdd(  Local4379 , LWCPromote(Local4381));
	FLWCScalar Local4383 = LWCMultiply(Local4382, LWCPromote(6.28318548));
	float Local4384 = LWCCos(Local4383);
	float Local4385 = (Local4384 * Local3672.r);
	float Local4386 = (Local4378 * Local4309);
	float Local4387 = (Material_PreshaderBuffer[13].w * Local4386);
	float Local4388 = (Material_PreshaderBuffer[63].z / Local4387);
	float Local4389 = (Local4388 * Local4309);
	float Local4390 = (Local4385 * Local4389);
	float Local4391 = (Local4384 * Local3672.g);
	float Local4392 = (Local4391 * Local4389);
	float Local4393 = LWCSin(Local4383);
	float Local4394 = (Local4393 * Local4309);
	float3 Local4395 = (Local4376 + float3(float2(Local4390,Local4392),Local4394));
	float3 Local4396 = (Local4320 + Local4395);
	float3 Local4397 = (Local4159 + Local4396);
	float3 Local4398 = (Local3930 + Local4397);
	float3 Local4399 = (Local3693 + Local4398);
	float Local4400 =  select_internal( (abs(Material_PreshaderBuffer[75].z - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[75].z >= -1.00000000) , Material_PreshaderBuffer[75].z , Material_PreshaderBuffer[75].w ) , Material_PreshaderBuffer[75].z );
	float Local4401 =  select_internal( (abs(Local4400 - 1.00000000) > 0.00001000) ,  select_internal( (Local4400 >= 1.00000000) , Material_PreshaderBuffer[76].x , Material_PreshaderBuffer[75].z ) , Material_PreshaderBuffer[75].z );
	float Local4402 =  select_internal( (abs(Local4401 - 0.00000000) > 0.00001000) ,  select_internal( (Local4401 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local4403 = max(Local4402,-1.00000000);
	float Local4404 = min(Local4403,1.00000000);
	float3 Local4405 = (float3(float2(Local4404,Material_PreshaderBuffer[77].y),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local4406 = max(Local4405,((float3)-1.00000000));
	float3 Local4407 = min(Local4406,((float3)1.00000000));
	FLWCScalar Local4408 = LWCDot(LWCPromote(float2(Local4407.r,Local4407.g)),   Local2784 );
	float Local4409 = (Material_PreshaderBuffer[78].z * Local3352);
	float Local4410 = (2.00000000 / Local4409);
	FLWCScalar Local4411 = LWCMultiply(  Local4408 , LWCPromote(Local4410));
	float Local4412 = (Local4410 * Material_PreshaderBuffer[57].w);
	FLWCVector3 Local4413 = LWCAdd(  Local2738 , LWCPromote(((float3)10000.00000000)));
	FLWCVector3 Local4414 = LWCMultiply(  Local4413 , LWCPromote(((float3)Local3359)));
	FLWCVector3 Local4415 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[58].x)),   Local4414 );
	FLWCVector3 Local4416 = LWCMultiply(  Local4415 , LWCPromote(((float3)Material_PreshaderBuffer[58].y)));
	FLWCScalar Local4417 =  LWCGetComponent(   Local4416  , 0);
	FLWCScalar Local4418 =  LWCGetComponent(   Local4416  , 1);
	FLWCVector2 Local4419 = MakeLWCVector(LWCPromote(  Local4417 ),LWCPromote(  Local4418 ));
	FLWCScalar Local4420 =  LWCGetComponent(   Local4416  , 2);
	FLWCVector2 Local4421 = LWCAdd(LWCPromote(float2(Local3364,Local3364)), MakeLWCVector(LWCGetComponent(  Local4420 , 0),LWCGetComponent(  Local4420 , 0)));
	FLWCScalar Local4422 = MakeLWCVector(LWCGetComponent(  Local4421 , 0));
	FLWCVector3 Local4423 = MakeLWCVector(LWCPromote(  Local4419 ),LWCPromote(  Local4422 ));
	float3 Local4424 = LWCNormalizeTile(  Local4423 ).Offset;
	float Local4425 = MaterialExpressionNoise(Local4424,1.00000000,1.00000000,3.00000000,0.00000000,6.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local4426 = (Local4425 - 0.00000000);
	float Local4427 = (Local4426 + 0.00000000);
	float Local4428 = saturate(Local4427);
	float Local4429 = lerp(Local2743,Local2787,Local4428);
	float Local4430 = (Local4412 * Local4429);
	FLWCScalar Local4431 = LWCAdd(  Local4411 , LWCPromote(Local4430));
	FLWCScalar Local4432 = LWCMultiply(Local4431, LWCPromote(6.28318548));
	float Local4433 = LWCCos(Local4432);
	float Local4434 = (Local4433 * Local4407.r);
	FLWCVector3 Local4435 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[59].z)),   Local4414 );
	FLWCVector3 Local4436 = LWCMultiply(  Local4435 , LWCPromote(((float3)Material_PreshaderBuffer[59].w)));
	FLWCScalar Local4437 =  LWCGetComponent(   Local4436  , 0);
	FLWCScalar Local4438 =  LWCGetComponent(   Local4436  , 1);
	FLWCVector2 Local4439 = MakeLWCVector(LWCPromote(  Local4437 ),LWCPromote(  Local4438 ));
	FLWCScalar Local4440 =  LWCGetComponent(   Local4436  , 2);
	FLWCVector2 Local4441 = LWCAdd(LWCPromote(float2(Local3389,Local3389)), MakeLWCVector(LWCGetComponent(  Local4440 , 0),LWCGetComponent(  Local4440 , 0)));
	FLWCScalar Local4442 = MakeLWCVector(LWCGetComponent(  Local4441 , 0));
	FLWCVector3 Local4443 = MakeLWCVector(LWCPromote(  Local4439 ),LWCPromote(  Local4442 ));
	float3 Local4444 = LWCNormalizeTile(  Local4443 ).Offset;
	float Local4445 = MaterialExpressionNoise(Local4444,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	FLWCVector3 Local4446 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[60].z)),   Local4414 );
	FLWCVector3 Local4447 = LWCMultiply(  Local4446 , LWCPromote(((float3)Material_PreshaderBuffer[60].w)));
	FLWCScalar Local4448 =  LWCGetComponent(   Local4447  , 0);
	FLWCScalar Local4449 =  LWCGetComponent(   Local4447  , 1);
	FLWCVector2 Local4450 = MakeLWCVector(LWCPromote(  Local4448 ),LWCPromote(  Local4449 ));
	FLWCScalar Local4451 =  LWCGetComponent(   Local4447  , 2);
	FLWCVector2 Local4452 = LWCAdd(LWCPromote(float2(Local3402,Local3402)), MakeLWCVector(LWCGetComponent(  Local4451 , 0),LWCGetComponent(  Local4451 , 0)));
	FLWCScalar Local4453 = MakeLWCVector(LWCGetComponent(  Local4452 , 0));
	FLWCVector3 Local4454 = MakeLWCVector(LWCPromote(  Local4450 ),LWCPromote(  Local4453 ));
	float3 Local4455 = LWCNormalizeTile(  Local4454 ).Offset;
	float Local4456 = MaterialExpressionNoise(Local4455,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local4457 = (Local4456 - 0.00000000);
	float Local4458 = (Local4457 * Material_PreshaderBuffer[61].w);
	float Local4459 = (Local4458 + Material_PreshaderBuffer[61].z);
	float Local4460 = (Local4445 * Local4459);
	float Local4461 = lerp(Local3380,Local3382,Local4460);
	float Local4462 = (Local4410 * Local4461);
	float Local4463 = (Material_PreshaderBuffer[13].w * Local4462);
	float Local4464 = (Material_PreshaderBuffer[62].x / Local4463);
	float Local4465 = (Local4464 * Local4461);
	float Local4466 = (Local4434 * Local4465);
	float Local4467 = (Local4433 * Local4407.g);
	float Local4468 = (Local4467 * Local4465);
	float Local4469 = LWCSin(Local4432);
	float Local4470 = (Local4469 * Local4461);
	float3 Local4471 = (float3(float2(Local4404,Material_PreshaderBuffer[77].y),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local4472 = max(Local4471,((float3)-1.00000000));
	float3 Local4473 = min(Local4472,((float3)1.00000000));
	FLWCScalar Local4474 = LWCDot(LWCPromote(float2(Local4473.r,Local4473.g)),   Local2784 );
	float Local4475 = (Local4409 * Material_PreshaderBuffer[15].w);
	float Local4476 = (2.00000000 / Local4475);
	FLWCScalar Local4477 = LWCMultiply(  Local4474 , LWCPromote(Local4476));
	float Local4478 = (Local4476 * Material_PreshaderBuffer[62].y);
	float Local4479 = (Local4478 * Local4429);
	FLWCScalar Local4480 = LWCAdd(  Local4477 , LWCPromote(Local4479));
	FLWCScalar Local4481 = LWCMultiply(Local4480, LWCPromote(6.28318548));
	float Local4482 = LWCCos(Local4481);
	float Local4483 = (Local4482 * Local4473.r);
	float Local4484 = (Local4461 * Material_PreshaderBuffer[17].z);
	float Local4485 = (Local4476 * Local4484);
	float Local4486 = (Material_PreshaderBuffer[13].w * Local4485);
	float Local4487 = (Material_PreshaderBuffer[62].z / Local4486);
	float Local4488 = (Local4487 * Local4484);
	float Local4489 = (Local4483 * Local4488);
	float Local4490 = (Local4482 * Local4473.g);
	float Local4491 = (Local4490 * Local4488);
	float Local4492 = LWCSin(Local4481);
	float Local4493 = (Local4492 * Local4484);
	float3 Local4494 = (float3(float2(Local4466,Local4468),Local4470) + float3(float2(Local4489,Local4491),Local4493));
	float3 Local4495 = (float3(float2(Local4404,Material_PreshaderBuffer[77].y),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local4496 = max(Local4495,((float3)-1.00000000));
	float3 Local4497 = min(Local4496,((float3)1.00000000));
	FLWCScalar Local4498 = LWCDot(LWCPromote(float2(Local4497.r,Local4497.g)),   Local2784 );
	float Local4499 = (Local4475 * Material_PreshaderBuffer[15].w);
	float Local4500 = (2.00000000 / Local4499);
	FLWCScalar Local4501 = LWCMultiply(  Local4498 , LWCPromote(Local4500));
	float Local4502 = (Local4500 * Material_PreshaderBuffer[62].w);
	float Local4503 = (Local4502 * Local4429);
	FLWCScalar Local4504 = LWCAdd(  Local4501 , LWCPromote(Local4503));
	FLWCScalar Local4505 = LWCMultiply(Local4504, LWCPromote(6.28318548));
	float Local4506 = LWCCos(Local4505);
	float Local4507 = (Local4506 * Local4497.r);
	float Local4508 = (Local4484 * Material_PreshaderBuffer[17].z);
	float Local4509 = (Local4500 * Local4508);
	float Local4510 = (Material_PreshaderBuffer[13].w * Local4509);
	float Local4511 = (Material_PreshaderBuffer[63].x / Local4510);
	float Local4512 = (Local4511 * Local4508);
	float Local4513 = (Local4507 * Local4512);
	float Local4514 = (Local4506 * Local4497.g);
	float Local4515 = (Local4514 * Local4512);
	float Local4516 = LWCSin(Local4505);
	float Local4517 = (Local4516 * Local4508);
	float3 Local4518 = (Local4494 + float3(float2(Local4513,Local4515),Local4517));
	float3 Local4519 = (float3(float2(Local4404,Material_PreshaderBuffer[77].y),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local4520 = max(Local4519,((float3)-1.00000000));
	float3 Local4521 = min(Local4520,((float3)1.00000000));
	FLWCScalar Local4522 = LWCDot(LWCPromote(float2(Local4521.r,Local4521.g)),   Local2784 );
	float Local4523 = (Local4499 * Material_PreshaderBuffer[15].w);
	float Local4524 = (2.00000000 / Local4523);
	FLWCScalar Local4525 = LWCMultiply(  Local4522 , LWCPromote(Local4524));
	float Local4526 = (Local4524 * Material_PreshaderBuffer[63].y);
	float Local4527 = (Local4526 * Local4429);
	FLWCScalar Local4528 = LWCAdd(  Local4525 , LWCPromote(Local4527));
	FLWCScalar Local4529 = LWCMultiply(Local4528, LWCPromote(6.28318548));
	float Local4530 = LWCCos(Local4529);
	float Local4531 = (Local4530 * Local4521.r);
	float Local4532 = (Local4508 * Material_PreshaderBuffer[17].z);
	float Local4533 = (Local4524 * Local4532);
	float Local4534 = (Material_PreshaderBuffer[13].w * Local4533);
	float Local4535 = (Material_PreshaderBuffer[63].z / Local4534);
	float Local4536 = (Local4535 * Local4532);
	float Local4537 = (Local4531 * Local4536);
	float Local4538 = (Local4530 * Local4521.g);
	float Local4539 = (Local4538 * Local4536);
	float Local4540 = LWCSin(Local4529);
	float Local4541 = (Local4540 * Local4532);
	float3 Local4542 = (Local4518 + float3(float2(Local4537,Local4539),Local4541));
	float Local4543 =  select_internal( (abs(Material_PreshaderBuffer[78].w - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[78].w >= -1.00000000) , Material_PreshaderBuffer[78].w , Material_PreshaderBuffer[79].x ) , Material_PreshaderBuffer[78].w );
	float Local4544 =  select_internal( (abs(Local4543 - 1.00000000) > 0.00001000) ,  select_internal( (Local4543 >= 1.00000000) , Material_PreshaderBuffer[79].y , Material_PreshaderBuffer[78].w ) , Material_PreshaderBuffer[78].w );
	float Local4545 =  select_internal( (abs(Local4544 - 0.00000000) > 0.00001000) ,  select_internal( (Local4544 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local4546 = max(Local4545,-1.00000000);
	float Local4547 = min(Local4546,1.00000000);
	float3 Local4548 = (float3(float2(Local4547,Material_PreshaderBuffer[80].z),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local4549 = max(Local4548,((float3)-1.00000000));
	float3 Local4550 = min(Local4549,((float3)1.00000000));
	FLWCScalar Local4551 = LWCDot(LWCPromote(float2(Local4550.r,Local4550.g)),   Local2784 );
	float Local4552 = (Material_PreshaderBuffer[81].w * Local3504);
	float Local4553 = (2.00000000 / Local4552);
	FLWCScalar Local4554 = LWCMultiply(  Local4551 , LWCPromote(Local4553));
	float Local4555 = (Local4553 * Material_PreshaderBuffer[67].y);
	float Local4556 = (Local4555 * Local4429);
	FLWCScalar Local4557 = LWCAdd(  Local4554 , LWCPromote(Local4556));
	FLWCScalar Local4558 = LWCMultiply(Local4557, LWCPromote(6.28318548));
	float Local4559 = LWCCos(Local4558);
	float Local4560 = (Local4559 * Local4550.r);
	float Local4561 = (Local4461 * Material_PreshaderBuffer[25].w);
	float Local4562 = (Local4553 * Local4561);
	float Local4563 = (Material_PreshaderBuffer[13].w * Local4562);
	float Local4564 = (Material_PreshaderBuffer[62].x / Local4563);
	float Local4565 = (Local4564 * Local4561);
	float Local4566 = (Local4560 * Local4565);
	float Local4567 = (Local4559 * Local4550.g);
	float Local4568 = (Local4567 * Local4565);
	float Local4569 = LWCSin(Local4558);
	float Local4570 = (Local4569 * Local4561);
	float3 Local4571 = (float3(float2(Local4547,Material_PreshaderBuffer[80].z),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local4572 = max(Local4571,((float3)-1.00000000));
	float3 Local4573 = min(Local4572,((float3)1.00000000));
	FLWCScalar Local4574 = LWCDot(LWCPromote(float2(Local4573.r,Local4573.g)),   Local2784 );
	float Local4575 = (Local4552 * Material_PreshaderBuffer[15].w);
	float Local4576 = (2.00000000 / Local4575);
	FLWCScalar Local4577 = LWCMultiply(  Local4574 , LWCPromote(Local4576));
	float Local4578 = (Local4576 * Material_PreshaderBuffer[67].z);
	float Local4579 = (Local4578 * Local4429);
	FLWCScalar Local4580 = LWCAdd(  Local4577 , LWCPromote(Local4579));
	FLWCScalar Local4581 = LWCMultiply(Local4580, LWCPromote(6.28318548));
	float Local4582 = LWCCos(Local4581);
	float Local4583 = (Local4582 * Local4573.r);
	float Local4584 = (Local4561 * Material_PreshaderBuffer[17].z);
	float Local4585 = (Local4576 * Local4584);
	float Local4586 = (Material_PreshaderBuffer[13].w * Local4585);
	float Local4587 = (Material_PreshaderBuffer[62].z / Local4586);
	float Local4588 = (Local4587 * Local4584);
	float Local4589 = (Local4583 * Local4588);
	float Local4590 = (Local4582 * Local4573.g);
	float Local4591 = (Local4590 * Local4588);
	float Local4592 = LWCSin(Local4581);
	float Local4593 = (Local4592 * Local4584);
	float3 Local4594 = (float3(float2(Local4566,Local4568),Local4570) + float3(float2(Local4589,Local4591),Local4593));
	float3 Local4595 = (float3(float2(Local4547,Material_PreshaderBuffer[80].z),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local4596 = max(Local4595,((float3)-1.00000000));
	float3 Local4597 = min(Local4596,((float3)1.00000000));
	FLWCScalar Local4598 = LWCDot(LWCPromote(float2(Local4597.r,Local4597.g)),   Local2784 );
	float Local4599 = (Local4575 * Material_PreshaderBuffer[15].w);
	float Local4600 = (2.00000000 / Local4599);
	FLWCScalar Local4601 = LWCMultiply(  Local4598 , LWCPromote(Local4600));
	float Local4602 = (Local4600 * Material_PreshaderBuffer[67].w);
	float Local4603 = (Local4602 * Local4429);
	FLWCScalar Local4604 = LWCAdd(  Local4601 , LWCPromote(Local4603));
	FLWCScalar Local4605 = LWCMultiply(Local4604, LWCPromote(6.28318548));
	float Local4606 = LWCCos(Local4605);
	float Local4607 = (Local4606 * Local4597.r);
	float Local4608 = (Local4584 * Material_PreshaderBuffer[17].z);
	float Local4609 = (Local4600 * Local4608);
	float Local4610 = (Material_PreshaderBuffer[13].w * Local4609);
	float Local4611 = (Material_PreshaderBuffer[63].x / Local4610);
	float Local4612 = (Local4611 * Local4608);
	float Local4613 = (Local4607 * Local4612);
	float Local4614 = (Local4606 * Local4597.g);
	float Local4615 = (Local4614 * Local4612);
	float Local4616 = LWCSin(Local4605);
	float Local4617 = (Local4616 * Local4608);
	float3 Local4618 = (Local4594 + float3(float2(Local4613,Local4615),Local4617));
	float3 Local4619 = (float3(float2(Local4547,Material_PreshaderBuffer[80].z),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local4620 = max(Local4619,((float3)-1.00000000));
	float3 Local4621 = min(Local4620,((float3)1.00000000));
	FLWCScalar Local4622 = LWCDot(LWCPromote(float2(Local4621.r,Local4621.g)),   Local2784 );
	float Local4623 = (Local4599 * Material_PreshaderBuffer[15].w);
	float Local4624 = (2.00000000 / Local4623);
	FLWCScalar Local4625 = LWCMultiply(  Local4622 , LWCPromote(Local4624));
	float Local4626 = (Local4624 * Material_PreshaderBuffer[68].x);
	float Local4627 = (Local4626 * Local4429);
	FLWCScalar Local4628 = LWCAdd(  Local4625 , LWCPromote(Local4627));
	FLWCScalar Local4629 = LWCMultiply(Local4628, LWCPromote(6.28318548));
	float Local4630 = LWCCos(Local4629);
	float Local4631 = (Local4630 * Local4621.r);
	float Local4632 = (Local4608 * Material_PreshaderBuffer[17].z);
	float Local4633 = (Local4624 * Local4632);
	float Local4634 = (Material_PreshaderBuffer[13].w * Local4633);
	float Local4635 = (Material_PreshaderBuffer[63].z / Local4634);
	float Local4636 = (Local4635 * Local4632);
	float Local4637 = (Local4631 * Local4636);
	float Local4638 = (Local4630 * Local4621.g);
	float Local4639 = (Local4638 * Local4636);
	float Local4640 = LWCSin(Local4629);
	float Local4641 = (Local4640 * Local4632);
	float3 Local4642 = (Local4618 + float3(float2(Local4637,Local4639),Local4641));
	float3 Local4643 = (Local4542 + Local4642);
	float Local4644 =  select_internal( (abs(Material_PreshaderBuffer[82].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[82].x >= -1.00000000) , Material_PreshaderBuffer[82].x , Material_PreshaderBuffer[82].y ) , Material_PreshaderBuffer[82].x );
	float Local4645 =  select_internal( (abs(Local4644 - 1.00000000) > 0.00001000) ,  select_internal( (Local4644 >= 1.00000000) , Material_PreshaderBuffer[82].z , Material_PreshaderBuffer[82].x ) , Material_PreshaderBuffer[82].x );
	float Local4646 =  select_internal( (abs(Local4645 - 0.00000000) > 0.00001000) ,  select_internal( (Local4645 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local4647 = max(Local4646,-1.00000000);
	float Local4648 = min(Local4647,1.00000000);
	float3 Local4649 = (float3(float2(Local4648,Material_PreshaderBuffer[83].w),0.00000000) + Material_PreshaderBuffer[6].xyz);
	float3 Local4650 = max(Local4649,((float3)-1.00000000));
	float3 Local4651 = min(Local4650,((float3)1.00000000));
	FLWCScalar Local4652 = LWCDot(LWCPromote(float2(Local4651.r,Local4651.g)),   Local2784 );
	float Local4653 = (Material_PreshaderBuffer[85].x * Local3504);
	float Local4654 = (2.00000000 / Local4653);
	FLWCScalar Local4655 = LWCMultiply(  Local4652 , LWCPromote(Local4654));
	float Local4656 = (Local4654 * Material_PreshaderBuffer[67].y);
	float Local4657 = (Local4656 * Local4429);
	FLWCScalar Local4658 = LWCAdd(  Local4655 , LWCPromote(Local4657));
	FLWCScalar Local4659 = LWCMultiply(Local4658, LWCPromote(6.28318548));
	float Local4660 = LWCCos(Local4659);
	float Local4661 = (Local4660 * Local4651.r);
	float Local4662 = (Local4654 * Local4561);
	float Local4663 = (Material_PreshaderBuffer[13].w * Local4662);
	float Local4664 = (Material_PreshaderBuffer[62].x / Local4663);
	float Local4665 = (Local4664 * Local4561);
	float Local4666 = (Local4661 * Local4665);
	float Local4667 = (Local4660 * Local4651.g);
	float Local4668 = (Local4667 * Local4665);
	float Local4669 = LWCSin(Local4659);
	float Local4670 = (Local4669 * Local4561);
	float3 Local4671 = (float3(float2(Local4648,Material_PreshaderBuffer[83].w),0.00000000) + Material_PreshaderBuffer[15].xyz);
	float3 Local4672 = max(Local4671,((float3)-1.00000000));
	float3 Local4673 = min(Local4672,((float3)1.00000000));
	FLWCScalar Local4674 = LWCDot(LWCPromote(float2(Local4673.r,Local4673.g)),   Local2784 );
	float Local4675 = (Local4653 * Material_PreshaderBuffer[15].w);
	float Local4676 = (2.00000000 / Local4675);
	FLWCScalar Local4677 = LWCMultiply(  Local4674 , LWCPromote(Local4676));
	float Local4678 = (Local4676 * Material_PreshaderBuffer[67].z);
	float Local4679 = (Local4678 * Local4429);
	FLWCScalar Local4680 = LWCAdd(  Local4677 , LWCPromote(Local4679));
	FLWCScalar Local4681 = LWCMultiply(Local4680, LWCPromote(6.28318548));
	float Local4682 = LWCCos(Local4681);
	float Local4683 = (Local4682 * Local4673.r);
	float Local4684 = (Local4676 * Local4584);
	float Local4685 = (Material_PreshaderBuffer[13].w * Local4684);
	float Local4686 = (Material_PreshaderBuffer[62].z / Local4685);
	float Local4687 = (Local4686 * Local4584);
	float Local4688 = (Local4683 * Local4687);
	float Local4689 = (Local4682 * Local4673.g);
	float Local4690 = (Local4689 * Local4687);
	float Local4691 = LWCSin(Local4681);
	float Local4692 = (Local4691 * Local4584);
	float3 Local4693 = (float3(float2(Local4666,Local4668),Local4670) + float3(float2(Local4688,Local4690),Local4692));
	float3 Local4694 = (float3(float2(Local4648,Material_PreshaderBuffer[83].w),0.00000000) - Material_PreshaderBuffer[6].xyz);
	float3 Local4695 = max(Local4694,((float3)-1.00000000));
	float3 Local4696 = min(Local4695,((float3)1.00000000));
	FLWCScalar Local4697 = LWCDot(LWCPromote(float2(Local4696.r,Local4696.g)),   Local2784 );
	float Local4698 = (Local4675 * Material_PreshaderBuffer[15].w);
	float Local4699 = (2.00000000 / Local4698);
	FLWCScalar Local4700 = LWCMultiply(  Local4697 , LWCPromote(Local4699));
	float Local4701 = (Local4699 * Material_PreshaderBuffer[67].w);
	float Local4702 = (Local4701 * Local4429);
	FLWCScalar Local4703 = LWCAdd(  Local4700 , LWCPromote(Local4702));
	FLWCScalar Local4704 = LWCMultiply(Local4703, LWCPromote(6.28318548));
	float Local4705 = LWCCos(Local4704);
	float Local4706 = (Local4705 * Local4696.r);
	float Local4707 = (Local4699 * Local4608);
	float Local4708 = (Material_PreshaderBuffer[13].w * Local4707);
	float Local4709 = (Material_PreshaderBuffer[63].x / Local4708);
	float Local4710 = (Local4709 * Local4608);
	float Local4711 = (Local4706 * Local4710);
	float Local4712 = (Local4705 * Local4696.g);
	float Local4713 = (Local4712 * Local4710);
	float Local4714 = LWCSin(Local4704);
	float Local4715 = (Local4714 * Local4608);
	float3 Local4716 = (Local4693 + float3(float2(Local4711,Local4713),Local4715));
	float3 Local4717 = (float3(float2(Local4648,Material_PreshaderBuffer[83].w),0.00000000) - Material_PreshaderBuffer[15].xyz);
	float3 Local4718 = max(Local4717,((float3)-1.00000000));
	float3 Local4719 = min(Local4718,((float3)1.00000000));
	FLWCScalar Local4720 = LWCDot(LWCPromote(float2(Local4719.r,Local4719.g)),   Local2784 );
	float Local4721 = (Local4698 * Material_PreshaderBuffer[15].w);
	float Local4722 = (2.00000000 / Local4721);
	FLWCScalar Local4723 = LWCMultiply(  Local4720 , LWCPromote(Local4722));
	float Local4724 = (Local4722 * Material_PreshaderBuffer[68].x);
	float Local4725 = (Local4724 * Local4429);
	FLWCScalar Local4726 = LWCAdd(  Local4723 , LWCPromote(Local4725));
	FLWCScalar Local4727 = LWCMultiply(Local4726, LWCPromote(6.28318548));
	float Local4728 = LWCCos(Local4727);
	float Local4729 = (Local4728 * Local4719.r);
	float Local4730 = (Local4722 * Local4632);
	float Local4731 = (Material_PreshaderBuffer[13].w * Local4730);
	float Local4732 = (Material_PreshaderBuffer[63].z / Local4731);
	float Local4733 = (Local4732 * Local4632);
	float Local4734 = (Local4729 * Local4733);
	float Local4735 = (Local4728 * Local4719.g);
	float Local4736 = (Local4735 * Local4733);
	float Local4737 = LWCSin(Local4727);
	float Local4738 = (Local4737 * Local4632);
	float3 Local4739 = (Local4716 + float3(float2(Local4734,Local4736),Local4738));
	float3 Local4740 = (Local4643 + Local4739);
	float Local4741 = (Local3352 * 8.00000000);
	float Local4742 = (Material_PreshaderBuffer[78].z * Local4741);
	float Local4743 = (2.00000000 / Local4742);
	FLWCScalar Local4744 = LWCMultiply(  Local4408 , LWCPromote(Local4743));
	float Local4745 = (Local4743 * Material_PreshaderBuffer[71].z);
	float Local4746 = (Local4745 * Local4429);
	FLWCScalar Local4747 = LWCAdd(  Local4744 , LWCPromote(Local4746));
	FLWCScalar Local4748 = LWCMultiply(Local4747, LWCPromote(6.28318548));
	float Local4749 = LWCCos(Local4748);
	float Local4750 = (Local4749 * Local4407.r);
	float Local4751 = (Local4461 * 8.00000000);
	float Local4752 = (Local4743 * Local4751);
	float Local4753 = (Material_PreshaderBuffer[13].w * Local4752);
	float Local4754 = (Material_PreshaderBuffer[62].x / Local4753);
	float Local4755 = (Local4754 * Local4751);
	float Local4756 = (Local4750 * Local4755);
	float Local4757 = (Local4749 * Local4407.g);
	float Local4758 = (Local4757 * Local4755);
	float Local4759 = LWCSin(Local4748);
	float Local4760 = (Local4759 * Local4751);
	float Local4761 = (Local4742 * Material_PreshaderBuffer[15].w);
	float Local4762 = (2.00000000 / Local4761);
	FLWCScalar Local4763 = LWCMultiply(  Local4474 , LWCPromote(Local4762));
	float Local4764 = (Local4762 * Material_PreshaderBuffer[71].w);
	float Local4765 = (Local4764 * Local4429);
	FLWCScalar Local4766 = LWCAdd(  Local4763 , LWCPromote(Local4765));
	FLWCScalar Local4767 = LWCMultiply(Local4766, LWCPromote(6.28318548));
	float Local4768 = LWCCos(Local4767);
	float Local4769 = (Local4768 * Local4473.r);
	float Local4770 = (Local4751 * Material_PreshaderBuffer[17].z);
	float Local4771 = (Local4762 * Local4770);
	float Local4772 = (Material_PreshaderBuffer[13].w * Local4771);
	float Local4773 = (Material_PreshaderBuffer[62].z / Local4772);
	float Local4774 = (Local4773 * Local4770);
	float Local4775 = (Local4769 * Local4774);
	float Local4776 = (Local4768 * Local4473.g);
	float Local4777 = (Local4776 * Local4774);
	float Local4778 = LWCSin(Local4767);
	float Local4779 = (Local4778 * Local4770);
	float3 Local4780 = (float3(float2(Local4756,Local4758),Local4760) + float3(float2(Local4775,Local4777),Local4779));
	float Local4781 = (Local4761 * Material_PreshaderBuffer[15].w);
	float Local4782 = (2.00000000 / Local4781);
	FLWCScalar Local4783 = LWCMultiply(  Local4498 , LWCPromote(Local4782));
	float Local4784 = (Local4782 * Material_PreshaderBuffer[72].x);
	float Local4785 = (Local4784 * Local4429);
	FLWCScalar Local4786 = LWCAdd(  Local4783 , LWCPromote(Local4785));
	FLWCScalar Local4787 = LWCMultiply(Local4786, LWCPromote(6.28318548));
	float Local4788 = LWCCos(Local4787);
	float Local4789 = (Local4788 * Local4497.r);
	float Local4790 = (Local4770 * Material_PreshaderBuffer[17].z);
	float Local4791 = (Local4782 * Local4790);
	float Local4792 = (Material_PreshaderBuffer[13].w * Local4791);
	float Local4793 = (Material_PreshaderBuffer[63].x / Local4792);
	float Local4794 = (Local4793 * Local4790);
	float Local4795 = (Local4789 * Local4794);
	float Local4796 = (Local4788 * Local4497.g);
	float Local4797 = (Local4796 * Local4794);
	float Local4798 = LWCSin(Local4787);
	float Local4799 = (Local4798 * Local4790);
	float3 Local4800 = (Local4780 + float3(float2(Local4795,Local4797),Local4799));
	float Local4801 = (Local4781 * Material_PreshaderBuffer[15].w);
	float Local4802 = (2.00000000 / Local4801);
	FLWCScalar Local4803 = LWCMultiply(  Local4522 , LWCPromote(Local4802));
	float Local4804 = (Local4802 * Material_PreshaderBuffer[72].y);
	float Local4805 = (Local4804 * Local4429);
	FLWCScalar Local4806 = LWCAdd(  Local4803 , LWCPromote(Local4805));
	FLWCScalar Local4807 = LWCMultiply(Local4806, LWCPromote(6.28318548));
	float Local4808 = LWCCos(Local4807);
	float Local4809 = (Local4808 * Local4521.r);
	float Local4810 = (Local4790 * Material_PreshaderBuffer[17].z);
	float Local4811 = (Local4802 * Local4810);
	float Local4812 = (Material_PreshaderBuffer[13].w * Local4811);
	float Local4813 = (Material_PreshaderBuffer[63].z / Local4812);
	float Local4814 = (Local4813 * Local4810);
	float Local4815 = (Local4809 * Local4814);
	float Local4816 = (Local4808 * Local4521.g);
	float Local4817 = (Local4816 * Local4814);
	float Local4818 = LWCSin(Local4807);
	float Local4819 = (Local4818 * Local4810);
	float3 Local4820 = (Local4800 + float3(float2(Local4815,Local4817),Local4819));
	float Local4821 = (Local4741 * Material_PreshaderBuffer[23].w);
	float Local4822 = (Material_PreshaderBuffer[81].w * Local4821);
	float Local4823 = (2.00000000 / Local4822);
	FLWCScalar Local4824 = LWCMultiply(  Local4551 , LWCPromote(Local4823));
	float Local4825 = (Local4823 * Material_PreshaderBuffer[72].z);
	float Local4826 = (Local4825 * Local4429);
	FLWCScalar Local4827 = LWCAdd(  Local4824 , LWCPromote(Local4826));
	FLWCScalar Local4828 = LWCMultiply(Local4827, LWCPromote(6.28318548));
	float Local4829 = LWCCos(Local4828);
	float Local4830 = (Local4829 * Local4550.r);
	float Local4831 = (Local4751 * Material_PreshaderBuffer[25].w);
	float Local4832 = (Local4823 * Local4831);
	float Local4833 = (Material_PreshaderBuffer[13].w * Local4832);
	float Local4834 = (Material_PreshaderBuffer[62].x / Local4833);
	float Local4835 = (Local4834 * Local4831);
	float Local4836 = (Local4830 * Local4835);
	float Local4837 = (Local4829 * Local4550.g);
	float Local4838 = (Local4837 * Local4835);
	float Local4839 = LWCSin(Local4828);
	float Local4840 = (Local4839 * Local4831);
	float Local4841 = (Local4822 * Material_PreshaderBuffer[15].w);
	float Local4842 = (2.00000000 / Local4841);
	FLWCScalar Local4843 = LWCMultiply(  Local4574 , LWCPromote(Local4842));
	float Local4844 = (Local4842 * Material_PreshaderBuffer[72].w);
	float Local4845 = (Local4844 * Local4429);
	FLWCScalar Local4846 = LWCAdd(  Local4843 , LWCPromote(Local4845));
	FLWCScalar Local4847 = LWCMultiply(Local4846, LWCPromote(6.28318548));
	float Local4848 = LWCCos(Local4847);
	float Local4849 = (Local4848 * Local4573.r);
	float Local4850 = (Local4831 * Material_PreshaderBuffer[17].z);
	float Local4851 = (Local4842 * Local4850);
	float Local4852 = (Material_PreshaderBuffer[13].w * Local4851);
	float Local4853 = (Material_PreshaderBuffer[62].z / Local4852);
	float Local4854 = (Local4853 * Local4850);
	float Local4855 = (Local4849 * Local4854);
	float Local4856 = (Local4848 * Local4573.g);
	float Local4857 = (Local4856 * Local4854);
	float Local4858 = LWCSin(Local4847);
	float Local4859 = (Local4858 * Local4850);
	float3 Local4860 = (float3(float2(Local4836,Local4838),Local4840) + float3(float2(Local4855,Local4857),Local4859));
	float Local4861 = (Local4841 * Material_PreshaderBuffer[15].w);
	float Local4862 = (2.00000000 / Local4861);
	FLWCScalar Local4863 = LWCMultiply(  Local4598 , LWCPromote(Local4862));
	float Local4864 = (Local4862 * Material_PreshaderBuffer[73].x);
	float Local4865 = (Local4864 * Local4429);
	FLWCScalar Local4866 = LWCAdd(  Local4863 , LWCPromote(Local4865));
	FLWCScalar Local4867 = LWCMultiply(Local4866, LWCPromote(6.28318548));
	float Local4868 = LWCCos(Local4867);
	float Local4869 = (Local4868 * Local4597.r);
	float Local4870 = (Local4850 * Material_PreshaderBuffer[17].z);
	float Local4871 = (Local4862 * Local4870);
	float Local4872 = (Material_PreshaderBuffer[13].w * Local4871);
	float Local4873 = (Material_PreshaderBuffer[63].x / Local4872);
	float Local4874 = (Local4873 * Local4870);
	float Local4875 = (Local4869 * Local4874);
	float Local4876 = (Local4868 * Local4597.g);
	float Local4877 = (Local4876 * Local4874);
	float Local4878 = LWCSin(Local4867);
	float Local4879 = (Local4878 * Local4870);
	float3 Local4880 = (Local4860 + float3(float2(Local4875,Local4877),Local4879));
	float Local4881 = (Local4861 * Material_PreshaderBuffer[15].w);
	float Local4882 = (2.00000000 / Local4881);
	FLWCScalar Local4883 = LWCMultiply(  Local4622 , LWCPromote(Local4882));
	float Local4884 = (Local4882 * Material_PreshaderBuffer[73].y);
	float Local4885 = (Local4884 * Local4429);
	FLWCScalar Local4886 = LWCAdd(  Local4883 , LWCPromote(Local4885));
	FLWCScalar Local4887 = LWCMultiply(Local4886, LWCPromote(6.28318548));
	float Local4888 = LWCCos(Local4887);
	float Local4889 = (Local4888 * Local4621.r);
	float Local4890 = (Local4870 * Material_PreshaderBuffer[17].z);
	float Local4891 = (Local4882 * Local4890);
	float Local4892 = (Material_PreshaderBuffer[13].w * Local4891);
	float Local4893 = (Material_PreshaderBuffer[63].z / Local4892);
	float Local4894 = (Local4893 * Local4890);
	float Local4895 = (Local4889 * Local4894);
	float Local4896 = (Local4888 * Local4621.g);
	float Local4897 = (Local4896 * Local4894);
	float Local4898 = LWCSin(Local4887);
	float Local4899 = (Local4898 * Local4890);
	float3 Local4900 = (Local4880 + float3(float2(Local4895,Local4897),Local4899));
	float3 Local4901 = (Local4820 + Local4900);
	float Local4902 = (Material_PreshaderBuffer[85].x * Local4821);
	float Local4903 = (2.00000000 / Local4902);
	FLWCScalar Local4904 = LWCMultiply(  Local4652 , LWCPromote(Local4903));
	float Local4905 = (Local4903 * Material_PreshaderBuffer[72].z);
	float Local4906 = (Local4905 * Local4429);
	FLWCScalar Local4907 = LWCAdd(  Local4904 , LWCPromote(Local4906));
	FLWCScalar Local4908 = LWCMultiply(Local4907, LWCPromote(6.28318548));
	float Local4909 = LWCCos(Local4908);
	float Local4910 = (Local4909 * Local4651.r);
	float Local4911 = (Local4903 * Local4831);
	float Local4912 = (Material_PreshaderBuffer[13].w * Local4911);
	float Local4913 = (Material_PreshaderBuffer[62].x / Local4912);
	float Local4914 = (Local4913 * Local4831);
	float Local4915 = (Local4910 * Local4914);
	float Local4916 = (Local4909 * Local4651.g);
	float Local4917 = (Local4916 * Local4914);
	float Local4918 = LWCSin(Local4908);
	float Local4919 = (Local4918 * Local4831);
	float Local4920 = (Local4902 * Material_PreshaderBuffer[15].w);
	float Local4921 = (2.00000000 / Local4920);
	FLWCScalar Local4922 = LWCMultiply(  Local4674 , LWCPromote(Local4921));
	float Local4923 = (Local4921 * Material_PreshaderBuffer[72].w);
	float Local4924 = (Local4923 * Local4429);
	FLWCScalar Local4925 = LWCAdd(  Local4922 , LWCPromote(Local4924));
	FLWCScalar Local4926 = LWCMultiply(Local4925, LWCPromote(6.28318548));
	float Local4927 = LWCCos(Local4926);
	float Local4928 = (Local4927 * Local4673.r);
	float Local4929 = (Local4921 * Local4850);
	float Local4930 = (Material_PreshaderBuffer[13].w * Local4929);
	float Local4931 = (Material_PreshaderBuffer[62].z / Local4930);
	float Local4932 = (Local4931 * Local4850);
	float Local4933 = (Local4928 * Local4932);
	float Local4934 = (Local4927 * Local4673.g);
	float Local4935 = (Local4934 * Local4932);
	float Local4936 = LWCSin(Local4926);
	float Local4937 = (Local4936 * Local4850);
	float3 Local4938 = (float3(float2(Local4915,Local4917),Local4919) + float3(float2(Local4933,Local4935),Local4937));
	float Local4939 = (Local4920 * Material_PreshaderBuffer[15].w);
	float Local4940 = (2.00000000 / Local4939);
	FLWCScalar Local4941 = LWCMultiply(  Local4697 , LWCPromote(Local4940));
	float Local4942 = (Local4940 * Material_PreshaderBuffer[73].x);
	float Local4943 = (Local4942 * Local4429);
	FLWCScalar Local4944 = LWCAdd(  Local4941 , LWCPromote(Local4943));
	FLWCScalar Local4945 = LWCMultiply(Local4944, LWCPromote(6.28318548));
	float Local4946 = LWCCos(Local4945);
	float Local4947 = (Local4946 * Local4696.r);
	float Local4948 = (Local4940 * Local4870);
	float Local4949 = (Material_PreshaderBuffer[13].w * Local4948);
	float Local4950 = (Material_PreshaderBuffer[63].x / Local4949);
	float Local4951 = (Local4950 * Local4870);
	float Local4952 = (Local4947 * Local4951);
	float Local4953 = (Local4946 * Local4696.g);
	float Local4954 = (Local4953 * Local4951);
	float Local4955 = LWCSin(Local4945);
	float Local4956 = (Local4955 * Local4870);
	float3 Local4957 = (Local4938 + float3(float2(Local4952,Local4954),Local4956));
	float Local4958 = (Local4939 * Material_PreshaderBuffer[15].w);
	float Local4959 = (2.00000000 / Local4958);
	FLWCScalar Local4960 = LWCMultiply(  Local4720 , LWCPromote(Local4959));
	float Local4961 = (Local4959 * Material_PreshaderBuffer[73].y);
	float Local4962 = (Local4961 * Local4429);
	FLWCScalar Local4963 = LWCAdd(  Local4960 , LWCPromote(Local4962));
	FLWCScalar Local4964 = LWCMultiply(Local4963, LWCPromote(6.28318548));
	float Local4965 = LWCCos(Local4964);
	float Local4966 = (Local4965 * Local4719.r);
	float Local4967 = (Local4959 * Local4890);
	float Local4968 = (Material_PreshaderBuffer[13].w * Local4967);
	float Local4969 = (Material_PreshaderBuffer[63].z / Local4968);
	float Local4970 = (Local4969 * Local4890);
	float Local4971 = (Local4966 * Local4970);
	float Local4972 = (Local4965 * Local4719.g);
	float Local4973 = (Local4972 * Local4970);
	float Local4974 = LWCSin(Local4964);
	float Local4975 = (Local4974 * Local4890);
	float3 Local4976 = (Local4957 + float3(float2(Local4971,Local4973),Local4975));
	float3 Local4977 = (Local4901 + Local4976);
	float Local4978 = (Material_PreshaderBuffer[78].z * Local3931);
	float Local4979 = (2.00000000 / Local4978);
	FLWCScalar Local4980 = LWCMultiply(  Local4408 , LWCPromote(Local4979));
	float Local4981 = (Local4979 * Material_PreshaderBuffer[73].z);
	float Local4982 = (Local4981 * Local4429);
	FLWCScalar Local4983 = LWCAdd(  Local4980 , LWCPromote(Local4982));
	FLWCScalar Local4984 = LWCMultiply(Local4983, LWCPromote(6.28318548));
	float Local4985 = LWCCos(Local4984);
	float Local4986 = (Local4985 * Local4407.r);
	float Local4987 = (Local4461 * 4.00000000);
	float Local4988 = (Local4979 * Local4987);
	float Local4989 = (Material_PreshaderBuffer[13].w * Local4988);
	float Local4990 = (Material_PreshaderBuffer[62].x / Local4989);
	float Local4991 = (Local4990 * Local4987);
	float Local4992 = (Local4986 * Local4991);
	float Local4993 = (Local4985 * Local4407.g);
	float Local4994 = (Local4993 * Local4991);
	float Local4995 = LWCSin(Local4984);
	float Local4996 = (Local4995 * Local4987);
	float Local4997 = (Local4978 * Material_PreshaderBuffer[15].w);
	float Local4998 = (2.00000000 / Local4997);
	FLWCScalar Local4999 = LWCMultiply(  Local4474 , LWCPromote(Local4998));
	float Local5000 = (Local4998 * Material_PreshaderBuffer[73].w);
	float Local5001 = (Local5000 * Local4429);
	FLWCScalar Local5002 = LWCAdd(  Local4999 , LWCPromote(Local5001));
	FLWCScalar Local5003 = LWCMultiply(Local5002, LWCPromote(6.28318548));
	float Local5004 = LWCCos(Local5003);
	float Local5005 = (Local5004 * Local4473.r);
	float Local5006 = (Local4987 * Material_PreshaderBuffer[17].z);
	float Local5007 = (Local4998 * Local5006);
	float Local5008 = (Material_PreshaderBuffer[13].w * Local5007);
	float Local5009 = (Material_PreshaderBuffer[62].z / Local5008);
	float Local5010 = (Local5009 * Local5006);
	float Local5011 = (Local5005 * Local5010);
	float Local5012 = (Local5004 * Local4473.g);
	float Local5013 = (Local5012 * Local5010);
	float Local5014 = LWCSin(Local5003);
	float Local5015 = (Local5014 * Local5006);
	float3 Local5016 = (float3(float2(Local4992,Local4994),Local4996) + float3(float2(Local5011,Local5013),Local5015));
	float Local5017 = (Local4997 * Material_PreshaderBuffer[15].w);
	float Local5018 = (2.00000000 / Local5017);
	FLWCScalar Local5019 = LWCMultiply(  Local4498 , LWCPromote(Local5018));
	float Local5020 = (Local5018 * Material_PreshaderBuffer[74].x);
	float Local5021 = (Local5020 * Local4429);
	FLWCScalar Local5022 = LWCAdd(  Local5019 , LWCPromote(Local5021));
	FLWCScalar Local5023 = LWCMultiply(Local5022, LWCPromote(6.28318548));
	float Local5024 = LWCCos(Local5023);
	float Local5025 = (Local5024 * Local4497.r);
	float Local5026 = (Local5006 * Material_PreshaderBuffer[17].z);
	float Local5027 = (Local5018 * Local5026);
	float Local5028 = (Material_PreshaderBuffer[13].w * Local5027);
	float Local5029 = (Material_PreshaderBuffer[63].x / Local5028);
	float Local5030 = (Local5029 * Local5026);
	float Local5031 = (Local5025 * Local5030);
	float Local5032 = (Local5024 * Local4497.g);
	float Local5033 = (Local5032 * Local5030);
	float Local5034 = LWCSin(Local5023);
	float Local5035 = (Local5034 * Local5026);
	float3 Local5036 = (Local5016 + float3(float2(Local5031,Local5033),Local5035));
	float Local5037 = (Local5017 * Material_PreshaderBuffer[15].w);
	float Local5038 = (2.00000000 / Local5037);
	FLWCScalar Local5039 = LWCMultiply(  Local4522 , LWCPromote(Local5038));
	float Local5040 = (Local5038 * Material_PreshaderBuffer[74].y);
	float Local5041 = (Local5040 * Local4429);
	FLWCScalar Local5042 = LWCAdd(  Local5039 , LWCPromote(Local5041));
	FLWCScalar Local5043 = LWCMultiply(Local5042, LWCPromote(6.28318548));
	float Local5044 = LWCCos(Local5043);
	float Local5045 = (Local5044 * Local4521.r);
	float Local5046 = (Local5026 * Material_PreshaderBuffer[17].z);
	float Local5047 = (Local5038 * Local5046);
	float Local5048 = (Material_PreshaderBuffer[13].w * Local5047);
	float Local5049 = (Material_PreshaderBuffer[63].z / Local5048);
	float Local5050 = (Local5049 * Local5046);
	float Local5051 = (Local5045 * Local5050);
	float Local5052 = (Local5044 * Local4521.g);
	float Local5053 = (Local5052 * Local5050);
	float Local5054 = LWCSin(Local5043);
	float Local5055 = (Local5054 * Local5046);
	float3 Local5056 = (Local5036 + float3(float2(Local5051,Local5053),Local5055));
	float Local5057 = (Material_PreshaderBuffer[81].w * Local4007);
	float Local5058 = (2.00000000 / Local5057);
	FLWCScalar Local5059 = LWCMultiply(  Local4551 , LWCPromote(Local5058));
	float Local5060 = (Local5058 * Material_PreshaderBuffer[74].z);
	float Local5061 = (Local5060 * Local4429);
	FLWCScalar Local5062 = LWCAdd(  Local5059 , LWCPromote(Local5061));
	FLWCScalar Local5063 = LWCMultiply(Local5062, LWCPromote(6.28318548));
	float Local5064 = LWCCos(Local5063);
	float Local5065 = (Local5064 * Local4550.r);
	float Local5066 = (Local4987 * Material_PreshaderBuffer[25].w);
	float Local5067 = (Local5058 * Local5066);
	float Local5068 = (Material_PreshaderBuffer[13].w * Local5067);
	float Local5069 = (Material_PreshaderBuffer[62].x / Local5068);
	float Local5070 = (Local5069 * Local5066);
	float Local5071 = (Local5065 * Local5070);
	float Local5072 = (Local5064 * Local4550.g);
	float Local5073 = (Local5072 * Local5070);
	float Local5074 = LWCSin(Local5063);
	float Local5075 = (Local5074 * Local5066);
	float Local5076 = (Local5057 * Material_PreshaderBuffer[15].w);
	float Local5077 = (2.00000000 / Local5076);
	FLWCScalar Local5078 = LWCMultiply(  Local4574 , LWCPromote(Local5077));
	float Local5079 = (Local5077 * Material_PreshaderBuffer[74].w);
	float Local5080 = (Local5079 * Local4429);
	FLWCScalar Local5081 = LWCAdd(  Local5078 , LWCPromote(Local5080));
	FLWCScalar Local5082 = LWCMultiply(Local5081, LWCPromote(6.28318548));
	float Local5083 = LWCCos(Local5082);
	float Local5084 = (Local5083 * Local4573.r);
	float Local5085 = (Local5066 * Material_PreshaderBuffer[17].z);
	float Local5086 = (Local5077 * Local5085);
	float Local5087 = (Material_PreshaderBuffer[13].w * Local5086);
	float Local5088 = (Material_PreshaderBuffer[62].z / Local5087);
	float Local5089 = (Local5088 * Local5085);
	float Local5090 = (Local5084 * Local5089);
	float Local5091 = (Local5083 * Local4573.g);
	float Local5092 = (Local5091 * Local5089);
	float Local5093 = LWCSin(Local5082);
	float Local5094 = (Local5093 * Local5085);
	float3 Local5095 = (float3(float2(Local5071,Local5073),Local5075) + float3(float2(Local5090,Local5092),Local5094));
	float Local5096 = (Local5076 * Material_PreshaderBuffer[15].w);
	float Local5097 = (2.00000000 / Local5096);
	FLWCScalar Local5098 = LWCMultiply(  Local4598 , LWCPromote(Local5097));
	float Local5099 = (Local5097 * Material_PreshaderBuffer[75].x);
	float Local5100 = (Local5099 * Local4429);
	FLWCScalar Local5101 = LWCAdd(  Local5098 , LWCPromote(Local5100));
	FLWCScalar Local5102 = LWCMultiply(Local5101, LWCPromote(6.28318548));
	float Local5103 = LWCCos(Local5102);
	float Local5104 = (Local5103 * Local4597.r);
	float Local5105 = (Local5085 * Material_PreshaderBuffer[17].z);
	float Local5106 = (Local5097 * Local5105);
	float Local5107 = (Material_PreshaderBuffer[13].w * Local5106);
	float Local5108 = (Material_PreshaderBuffer[63].x / Local5107);
	float Local5109 = (Local5108 * Local5105);
	float Local5110 = (Local5104 * Local5109);
	float Local5111 = (Local5103 * Local4597.g);
	float Local5112 = (Local5111 * Local5109);
	float Local5113 = LWCSin(Local5102);
	float Local5114 = (Local5113 * Local5105);
	float3 Local5115 = (Local5095 + float3(float2(Local5110,Local5112),Local5114));
	float Local5116 = (Local5096 * Material_PreshaderBuffer[15].w);
	float Local5117 = (2.00000000 / Local5116);
	FLWCScalar Local5118 = LWCMultiply(  Local4622 , LWCPromote(Local5117));
	float Local5119 = (Local5117 * Material_PreshaderBuffer[75].y);
	float Local5120 = (Local5119 * Local4429);
	FLWCScalar Local5121 = LWCAdd(  Local5118 , LWCPromote(Local5120));
	FLWCScalar Local5122 = LWCMultiply(Local5121, LWCPromote(6.28318548));
	float Local5123 = LWCCos(Local5122);
	float Local5124 = (Local5123 * Local4621.r);
	float Local5125 = (Local5105 * Material_PreshaderBuffer[17].z);
	float Local5126 = (Local5117 * Local5125);
	float Local5127 = (Material_PreshaderBuffer[13].w * Local5126);
	float Local5128 = (Material_PreshaderBuffer[63].z / Local5127);
	float Local5129 = (Local5128 * Local5125);
	float Local5130 = (Local5124 * Local5129);
	float Local5131 = (Local5123 * Local4621.g);
	float Local5132 = (Local5131 * Local5129);
	float Local5133 = LWCSin(Local5122);
	float Local5134 = (Local5133 * Local5125);
	float3 Local5135 = (Local5115 + float3(float2(Local5130,Local5132),Local5134));
	float3 Local5136 = (Local5056 + Local5135);
	float Local5137 = (Material_PreshaderBuffer[85].x * Local4007);
	float Local5138 = (2.00000000 / Local5137);
	FLWCScalar Local5139 = LWCMultiply(  Local4652 , LWCPromote(Local5138));
	float Local5140 = (Local5138 * Material_PreshaderBuffer[74].z);
	float Local5141 = (Local5140 * Local4429);
	FLWCScalar Local5142 = LWCAdd(  Local5139 , LWCPromote(Local5141));
	FLWCScalar Local5143 = LWCMultiply(Local5142, LWCPromote(6.28318548));
	float Local5144 = LWCCos(Local5143);
	float Local5145 = (Local5144 * Local4651.r);
	float Local5146 = (Local5138 * Local5066);
	float Local5147 = (Material_PreshaderBuffer[13].w * Local5146);
	float Local5148 = (Material_PreshaderBuffer[62].x / Local5147);
	float Local5149 = (Local5148 * Local5066);
	float Local5150 = (Local5145 * Local5149);
	float Local5151 = (Local5144 * Local4651.g);
	float Local5152 = (Local5151 * Local5149);
	float Local5153 = LWCSin(Local5143);
	float Local5154 = (Local5153 * Local5066);
	float Local5155 = (Local5137 * Material_PreshaderBuffer[15].w);
	float Local5156 = (2.00000000 / Local5155);
	FLWCScalar Local5157 = LWCMultiply(  Local4674 , LWCPromote(Local5156));
	float Local5158 = (Local5156 * Material_PreshaderBuffer[74].w);
	float Local5159 = (Local5158 * Local4429);
	FLWCScalar Local5160 = LWCAdd(  Local5157 , LWCPromote(Local5159));
	FLWCScalar Local5161 = LWCMultiply(Local5160, LWCPromote(6.28318548));
	float Local5162 = LWCCos(Local5161);
	float Local5163 = (Local5162 * Local4673.r);
	float Local5164 = (Local5156 * Local5085);
	float Local5165 = (Material_PreshaderBuffer[13].w * Local5164);
	float Local5166 = (Material_PreshaderBuffer[62].z / Local5165);
	float Local5167 = (Local5166 * Local5085);
	float Local5168 = (Local5163 * Local5167);
	float Local5169 = (Local5162 * Local4673.g);
	float Local5170 = (Local5169 * Local5167);
	float Local5171 = LWCSin(Local5161);
	float Local5172 = (Local5171 * Local5085);
	float3 Local5173 = (float3(float2(Local5150,Local5152),Local5154) + float3(float2(Local5168,Local5170),Local5172));
	float Local5174 = (Local5155 * Material_PreshaderBuffer[15].w);
	float Local5175 = (2.00000000 / Local5174);
	FLWCScalar Local5176 = LWCMultiply(  Local4697 , LWCPromote(Local5175));
	float Local5177 = (Local5175 * Material_PreshaderBuffer[75].x);
	float Local5178 = (Local5177 * Local4429);
	FLWCScalar Local5179 = LWCAdd(  Local5176 , LWCPromote(Local5178));
	FLWCScalar Local5180 = LWCMultiply(Local5179, LWCPromote(6.28318548));
	float Local5181 = LWCCos(Local5180);
	float Local5182 = (Local5181 * Local4696.r);
	float Local5183 = (Local5175 * Local5105);
	float Local5184 = (Material_PreshaderBuffer[13].w * Local5183);
	float Local5185 = (Material_PreshaderBuffer[63].x / Local5184);
	float Local5186 = (Local5185 * Local5105);
	float Local5187 = (Local5182 * Local5186);
	float Local5188 = (Local5181 * Local4696.g);
	float Local5189 = (Local5188 * Local5186);
	float Local5190 = LWCSin(Local5180);
	float Local5191 = (Local5190 * Local5105);
	float3 Local5192 = (Local5173 + float3(float2(Local5187,Local5189),Local5191));
	float Local5193 = (Local5174 * Material_PreshaderBuffer[15].w);
	float Local5194 = (2.00000000 / Local5193);
	FLWCScalar Local5195 = LWCMultiply(  Local4720 , LWCPromote(Local5194));
	float Local5196 = (Local5194 * Material_PreshaderBuffer[75].y);
	float Local5197 = (Local5196 * Local4429);
	FLWCScalar Local5198 = LWCAdd(  Local5195 , LWCPromote(Local5197));
	FLWCScalar Local5199 = LWCMultiply(Local5198, LWCPromote(6.28318548));
	float Local5200 = LWCCos(Local5199);
	float Local5201 = (Local5200 * Local4719.r);
	float Local5202 = (Local5194 * Local5125);
	float Local5203 = (Material_PreshaderBuffer[13].w * Local5202);
	float Local5204 = (Material_PreshaderBuffer[63].z / Local5203);
	float Local5205 = (Local5204 * Local5125);
	float Local5206 = (Local5201 * Local5205);
	float Local5207 = (Local5200 * Local4719.g);
	float Local5208 = (Local5207 * Local5205);
	float Local5209 = LWCSin(Local5199);
	float Local5210 = (Local5209 * Local5125);
	float3 Local5211 = (Local5192 + float3(float2(Local5206,Local5208),Local5210));
	float3 Local5212 = (Local5136 + Local5211);
	float Local5213 = (Material_PreshaderBuffer[78].z * Local4160);
	float Local5214 = (2.00000000 / Local5213);
	FLWCScalar Local5215 = LWCMultiply(  Local4408 , LWCPromote(Local5214));
	float Local5216 = (Local5214 * Material_PreshaderBuffer[71].z);
	float Local5217 = (Local5216 * Local4429);
	FLWCScalar Local5218 = LWCAdd(  Local5215 , LWCPromote(Local5217));
	FLWCScalar Local5219 = LWCMultiply(Local5218, LWCPromote(6.28318548));
	float Local5220 = LWCCos(Local5219);
	float Local5221 = (Local5220 * Local4407.r);
	float Local5222 = (Local4461 * 0.50000000);
	float Local5223 = (Local5214 * Local5222);
	float Local5224 = (Material_PreshaderBuffer[13].w * Local5223);
	float Local5225 = (Material_PreshaderBuffer[62].x / Local5224);
	float Local5226 = (Local5225 * Local5222);
	float Local5227 = (Local5221 * Local5226);
	float Local5228 = (Local5220 * Local4407.g);
	float Local5229 = (Local5228 * Local5226);
	float Local5230 = LWCSin(Local5219);
	float Local5231 = (Local5230 * Local5222);
	float Local5232 = (Local5213 * Material_PreshaderBuffer[15].w);
	float Local5233 = (2.00000000 / Local5232);
	FLWCScalar Local5234 = LWCMultiply(  Local4474 , LWCPromote(Local5233));
	float Local5235 = (Local5233 * Material_PreshaderBuffer[71].w);
	float Local5236 = (Local5235 * Local4429);
	FLWCScalar Local5237 = LWCAdd(  Local5234 , LWCPromote(Local5236));
	FLWCScalar Local5238 = LWCMultiply(Local5237, LWCPromote(6.28318548));
	float Local5239 = LWCCos(Local5238);
	float Local5240 = (Local5239 * Local4473.r);
	float Local5241 = (Local5222 * Material_PreshaderBuffer[17].z);
	float Local5242 = (Local5233 * Local5241);
	float Local5243 = (Material_PreshaderBuffer[13].w * Local5242);
	float Local5244 = (Material_PreshaderBuffer[62].z / Local5243);
	float Local5245 = (Local5244 * Local5241);
	float Local5246 = (Local5240 * Local5245);
	float Local5247 = (Local5239 * Local4473.g);
	float Local5248 = (Local5247 * Local5245);
	float Local5249 = LWCSin(Local5238);
	float Local5250 = (Local5249 * Local5241);
	float3 Local5251 = (float3(float2(Local5227,Local5229),Local5231) + float3(float2(Local5246,Local5248),Local5250));
	float Local5252 = (Local5232 * Material_PreshaderBuffer[15].w);
	float Local5253 = (2.00000000 / Local5252);
	FLWCScalar Local5254 = LWCMultiply(  Local4498 , LWCPromote(Local5253));
	float Local5255 = (Local5253 * Material_PreshaderBuffer[72].x);
	float Local5256 = (Local5255 * Local4429);
	FLWCScalar Local5257 = LWCAdd(  Local5254 , LWCPromote(Local5256));
	FLWCScalar Local5258 = LWCMultiply(Local5257, LWCPromote(6.28318548));
	float Local5259 = LWCCos(Local5258);
	float Local5260 = (Local5259 * Local4497.r);
	float Local5261 = (Local5241 * Material_PreshaderBuffer[17].z);
	float Local5262 = (Local5253 * Local5261);
	float Local5263 = (Material_PreshaderBuffer[13].w * Local5262);
	float Local5264 = (Material_PreshaderBuffer[63].x / Local5263);
	float Local5265 = (Local5264 * Local5261);
	float Local5266 = (Local5260 * Local5265);
	float Local5267 = (Local5259 * Local4497.g);
	float Local5268 = (Local5267 * Local5265);
	float Local5269 = LWCSin(Local5258);
	float Local5270 = (Local5269 * Local5261);
	float3 Local5271 = (Local5251 + float3(float2(Local5266,Local5268),Local5270));
	float Local5272 = (Local5252 * Material_PreshaderBuffer[15].w);
	float Local5273 = (2.00000000 / Local5272);
	FLWCScalar Local5274 = LWCMultiply(  Local4522 , LWCPromote(Local5273));
	float Local5275 = (Local5273 * Material_PreshaderBuffer[72].y);
	float Local5276 = (Local5275 * Local4429);
	FLWCScalar Local5277 = LWCAdd(  Local5274 , LWCPromote(Local5276));
	FLWCScalar Local5278 = LWCMultiply(Local5277, LWCPromote(6.28318548));
	float Local5279 = LWCCos(Local5278);
	float Local5280 = (Local5279 * Local4521.r);
	float Local5281 = (Local5261 * Material_PreshaderBuffer[17].z);
	float Local5282 = (Local5273 * Local5281);
	float Local5283 = (Material_PreshaderBuffer[13].w * Local5282);
	float Local5284 = (Material_PreshaderBuffer[63].z / Local5283);
	float Local5285 = (Local5284 * Local5281);
	float Local5286 = (Local5280 * Local5285);
	float Local5287 = (Local5279 * Local4521.g);
	float Local5288 = (Local5287 * Local5285);
	float Local5289 = LWCSin(Local5278);
	float Local5290 = (Local5289 * Local5281);
	float3 Local5291 = (Local5271 + float3(float2(Local5286,Local5288),Local5290));
	float Local5292 = (Material_PreshaderBuffer[81].w * Local4240);
	float Local5293 = (2.00000000 / Local5292);
	FLWCScalar Local5294 = LWCMultiply(  Local4551 , LWCPromote(Local5293));
	float Local5295 = (Local5293 * Material_PreshaderBuffer[72].z);
	float Local5296 = (Local5295 * Local4429);
	FLWCScalar Local5297 = LWCAdd(  Local5294 , LWCPromote(Local5296));
	FLWCScalar Local5298 = LWCMultiply(Local5297, LWCPromote(6.28318548));
	float Local5299 = LWCCos(Local5298);
	float Local5300 = (Local5299 * Local4550.r);
	float Local5301 = (Local5222 * Material_PreshaderBuffer[25].w);
	float Local5302 = (Local5293 * Local5301);
	float Local5303 = (Material_PreshaderBuffer[13].w * Local5302);
	float Local5304 = (Material_PreshaderBuffer[62].x / Local5303);
	float Local5305 = (Local5304 * Local5301);
	float Local5306 = (Local5300 * Local5305);
	float Local5307 = (Local5299 * Local4550.g);
	float Local5308 = (Local5307 * Local5305);
	float Local5309 = LWCSin(Local5298);
	float Local5310 = (Local5309 * Local5301);
	float Local5311 = (Local5292 * Material_PreshaderBuffer[15].w);
	float Local5312 = (2.00000000 / Local5311);
	FLWCScalar Local5313 = LWCMultiply(  Local4574 , LWCPromote(Local5312));
	float Local5314 = (Local5312 * Material_PreshaderBuffer[72].w);
	float Local5315 = (Local5314 * Local4429);
	FLWCScalar Local5316 = LWCAdd(  Local5313 , LWCPromote(Local5315));
	FLWCScalar Local5317 = LWCMultiply(Local5316, LWCPromote(6.28318548));
	float Local5318 = LWCCos(Local5317);
	float Local5319 = (Local5318 * Local4573.r);
	float Local5320 = (Local5301 * Material_PreshaderBuffer[17].z);
	float Local5321 = (Local5312 * Local5320);
	float Local5322 = (Material_PreshaderBuffer[13].w * Local5321);
	float Local5323 = (Material_PreshaderBuffer[62].z / Local5322);
	float Local5324 = (Local5323 * Local5320);
	float Local5325 = (Local5319 * Local5324);
	float Local5326 = (Local5318 * Local4573.g);
	float Local5327 = (Local5326 * Local5324);
	float Local5328 = LWCSin(Local5317);
	float Local5329 = (Local5328 * Local5320);
	float3 Local5330 = (float3(float2(Local5306,Local5308),Local5310) + float3(float2(Local5325,Local5327),Local5329));
	float Local5331 = (Local5311 * Material_PreshaderBuffer[15].w);
	float Local5332 = (2.00000000 / Local5331);
	FLWCScalar Local5333 = LWCMultiply(  Local4598 , LWCPromote(Local5332));
	float Local5334 = (Local5332 * Material_PreshaderBuffer[73].x);
	float Local5335 = (Local5334 * Local4429);
	FLWCScalar Local5336 = LWCAdd(  Local5333 , LWCPromote(Local5335));
	FLWCScalar Local5337 = LWCMultiply(Local5336, LWCPromote(6.28318548));
	float Local5338 = LWCCos(Local5337);
	float Local5339 = (Local5338 * Local4597.r);
	float Local5340 = (Local5320 * Material_PreshaderBuffer[17].z);
	float Local5341 = (Local5332 * Local5340);
	float Local5342 = (Material_PreshaderBuffer[13].w * Local5341);
	float Local5343 = (Material_PreshaderBuffer[63].x / Local5342);
	float Local5344 = (Local5343 * Local5340);
	float Local5345 = (Local5339 * Local5344);
	float Local5346 = (Local5338 * Local4597.g);
	float Local5347 = (Local5346 * Local5344);
	float Local5348 = LWCSin(Local5337);
	float Local5349 = (Local5348 * Local5340);
	float3 Local5350 = (Local5330 + float3(float2(Local5345,Local5347),Local5349));
	float Local5351 = (Local5331 * Material_PreshaderBuffer[15].w);
	float Local5352 = (2.00000000 / Local5351);
	FLWCScalar Local5353 = LWCMultiply(  Local4622 , LWCPromote(Local5352));
	float Local5354 = (Local5352 * Material_PreshaderBuffer[73].y);
	float Local5355 = (Local5354 * Local4429);
	FLWCScalar Local5356 = LWCAdd(  Local5353 , LWCPromote(Local5355));
	FLWCScalar Local5357 = LWCMultiply(Local5356, LWCPromote(6.28318548));
	float Local5358 = LWCCos(Local5357);
	float Local5359 = (Local5358 * Local4621.r);
	float Local5360 = (Local5340 * Material_PreshaderBuffer[17].z);
	float Local5361 = (Local5352 * Local5360);
	float Local5362 = (Material_PreshaderBuffer[13].w * Local5361);
	float Local5363 = (Material_PreshaderBuffer[63].z / Local5362);
	float Local5364 = (Local5363 * Local5360);
	float Local5365 = (Local5359 * Local5364);
	float Local5366 = (Local5358 * Local4621.g);
	float Local5367 = (Local5366 * Local5364);
	float Local5368 = LWCSin(Local5357);
	float Local5369 = (Local5368 * Local5360);
	float3 Local5370 = (Local5350 + float3(float2(Local5365,Local5367),Local5369));
	float3 Local5371 = (Local5291 + Local5370);
	float Local5372 = (Material_PreshaderBuffer[85].x * Local4240);
	float Local5373 = (2.00000000 / Local5372);
	FLWCScalar Local5374 = LWCMultiply(  Local4652 , LWCPromote(Local5373));
	float Local5375 = (Local5373 * Material_PreshaderBuffer[72].z);
	float Local5376 = (Local5375 * Local4429);
	FLWCScalar Local5377 = LWCAdd(  Local5374 , LWCPromote(Local5376));
	FLWCScalar Local5378 = LWCMultiply(Local5377, LWCPromote(6.28318548));
	float Local5379 = LWCCos(Local5378);
	float Local5380 = (Local5379 * Local4651.r);
	float Local5381 = (Local5373 * Local5301);
	float Local5382 = (Material_PreshaderBuffer[13].w * Local5381);
	float Local5383 = (Material_PreshaderBuffer[62].x / Local5382);
	float Local5384 = (Local5383 * Local5301);
	float Local5385 = (Local5380 * Local5384);
	float Local5386 = (Local5379 * Local4651.g);
	float Local5387 = (Local5386 * Local5384);
	float Local5388 = LWCSin(Local5378);
	float Local5389 = (Local5388 * Local5301);
	float Local5390 = (Local5372 * Material_PreshaderBuffer[15].w);
	float Local5391 = (2.00000000 / Local5390);
	FLWCScalar Local5392 = LWCMultiply(  Local4674 , LWCPromote(Local5391));
	float Local5393 = (Local5391 * Material_PreshaderBuffer[72].w);
	float Local5394 = (Local5393 * Local4429);
	FLWCScalar Local5395 = LWCAdd(  Local5392 , LWCPromote(Local5394));
	FLWCScalar Local5396 = LWCMultiply(Local5395, LWCPromote(6.28318548));
	float Local5397 = LWCCos(Local5396);
	float Local5398 = (Local5397 * Local4673.r);
	float Local5399 = (Local5391 * Local5320);
	float Local5400 = (Material_PreshaderBuffer[13].w * Local5399);
	float Local5401 = (Material_PreshaderBuffer[62].z / Local5400);
	float Local5402 = (Local5401 * Local5320);
	float Local5403 = (Local5398 * Local5402);
	float Local5404 = (Local5397 * Local4673.g);
	float Local5405 = (Local5404 * Local5402);
	float Local5406 = LWCSin(Local5396);
	float Local5407 = (Local5406 * Local5320);
	float3 Local5408 = (float3(float2(Local5385,Local5387),Local5389) + float3(float2(Local5403,Local5405),Local5407));
	float Local5409 = (Local5390 * Material_PreshaderBuffer[15].w);
	float Local5410 = (2.00000000 / Local5409);
	FLWCScalar Local5411 = LWCMultiply(  Local4697 , LWCPromote(Local5410));
	float Local5412 = (Local5410 * Material_PreshaderBuffer[73].x);
	float Local5413 = (Local5412 * Local4429);
	FLWCScalar Local5414 = LWCAdd(  Local5411 , LWCPromote(Local5413));
	FLWCScalar Local5415 = LWCMultiply(Local5414, LWCPromote(6.28318548));
	float Local5416 = LWCCos(Local5415);
	float Local5417 = (Local5416 * Local4696.r);
	float Local5418 = (Local5410 * Local5340);
	float Local5419 = (Material_PreshaderBuffer[13].w * Local5418);
	float Local5420 = (Material_PreshaderBuffer[63].x / Local5419);
	float Local5421 = (Local5420 * Local5340);
	float Local5422 = (Local5417 * Local5421);
	float Local5423 = (Local5416 * Local4696.g);
	float Local5424 = (Local5423 * Local5421);
	float Local5425 = LWCSin(Local5415);
	float Local5426 = (Local5425 * Local5340);
	float3 Local5427 = (Local5408 + float3(float2(Local5422,Local5424),Local5426));
	float Local5428 = (Local5409 * Material_PreshaderBuffer[15].w);
	float Local5429 = (2.00000000 / Local5428);
	FLWCScalar Local5430 = LWCMultiply(  Local4720 , LWCPromote(Local5429));
	float Local5431 = (Local5429 * Material_PreshaderBuffer[73].y);
	float Local5432 = (Local5431 * Local4429);
	FLWCScalar Local5433 = LWCAdd(  Local5430 , LWCPromote(Local5432));
	FLWCScalar Local5434 = LWCMultiply(Local5433, LWCPromote(6.28318548));
	float Local5435 = LWCCos(Local5434);
	float Local5436 = (Local5435 * Local4719.r);
	float Local5437 = (Local5429 * Local5360);
	float Local5438 = (Material_PreshaderBuffer[13].w * Local5437);
	float Local5439 = (Material_PreshaderBuffer[63].z / Local5438);
	float Local5440 = (Local5439 * Local5360);
	float Local5441 = (Local5436 * Local5440);
	float Local5442 = (Local5435 * Local4719.g);
	float Local5443 = (Local5442 * Local5440);
	float Local5444 = LWCSin(Local5434);
	float Local5445 = (Local5444 * Local5360);
	float3 Local5446 = (Local5427 + float3(float2(Local5441,Local5443),Local5445));
	float3 Local5447 = (Local5371 + Local5446);
	float3 Local5448 = (Local5212 + Local5447);
	float3 Local5449 = (Local4977 + Local5448);
	float3 Local5450 = (Local4740 + Local5449);
	float3 Local5451 = (Local4399 + Local5450);
	float3 Local5452 = (Local3342 + Local5451);
	float Local5453 = (Local5452.b * Local2722.g);
	float Local5454 = (Local5453 - Material_PreshaderBuffer[90].w);
	float Local5455 = (Local5454 * Material_PreshaderBuffer[91].z);
	float Local5456 = (Local5455 + 0.00000000);
	float Local5457 = saturate(Local5456);
	float Local5458 = (Local5457 * Material_PreshaderBuffer[91].w);
	float Local5459 = (Local5458 - Material_PreshaderBuffer[92].x);
	float Local5460 = (Local5459 * Material_PreshaderBuffer[92].w);
	float Local5461 = (Local5460 + 0.00000000);
	float Local5462 = saturate(Local5461);
	float3 Local5463 = (((float3)Local5452.b) * Parameters.TangentToWorld[2]);
	FLWCVector3 Local5464 = LWCAdd(LWCPromote(Local5463),   Local2 );
	float3 Local5465 = LWCDdx(Local5464);
	float3 Local5466 = LWCDdy(Local5464);
	float3 Local5467 = cross(Local5465,Local5466);
	float3 Local5468 = normalize(Local5467);
	float3 Local5469 = LWCDdx(  Local2 );
	float3 Local5470 = LWCDdy(  Local2 );
	float3 Local5471 = cross(  Local5469 ,  Local5470 );
	float3 Local5472 = normalize(  Local5471 );
	float3 Local5473 = (Local5468 -   Local5472 );
	float3 Local5474 = (Local5473 + Parameters.TangentToWorld[2]);
	float3 Local5475 = lerp(Local5474,float3(0.00000000,0.00000000,1.00000000),Material_PreshaderBuffer[93].y);
	float3 Local5476 = (Local5475 * ((float3)Material_PreshaderBuffer[93].z));
	FLWCVector3 Local5477 = LWCAdd(LWCPromote(Local5476),   Local2738 );
	FLWCVector3 Local5478 = LWCMultiply(Local5477, LWCPromote(((float3)Material_PreshaderBuffer[93].w)));
	float Local5479 = (Local2743 * Material_PreshaderBuffer[94].y);
	float2 Local5480 = (float2(Local5479,Local5479) + float2(1.00000000,0.00000000));
	float3 Local5481 = LWCNormalizeTile(MakeLWCVector(LWCPromote(MakeLWCVector(LWCPromote( LWCGetComponent( Local5478 , 0)),LWCPromote( LWCGetComponent( Local5478 , 1)))),LWCPromote(Local5480.r))).Offset;
	float Local5482 = MaterialExpressionNoise(Local5481,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local5483 = (Local5462 * Material_PreshaderBuffer[94].z);
	float Local5484 = (Local5482 - Local5483);
	float Local5485 = (Local5483 + 1.00000000);
	float Local5486 = (Local5485 - Local5483);
	float Local5487 = (Local5484 / Local5486);
	float Local5488 = (Local5487 * (0.00000000 - 1.00000000));
	float Local5489 = (Local5488 + 1.00000000);
	float Local5490 = saturate(Local5489);
	float Local5491 = PositiveClampedPow(Local5490,2.00000000);
	float Local5492 = lerp(Material_PreshaderBuffer[95].x,Material_PreshaderBuffer[94].w,Local5491);
	float Local5493 = saturate(Local5492);
	float Local5494 = (Local5462 * Local5493.r);
	FLWCVector3 Local5495 = LWCMultiply(  Local2738 , LWCPromote(((float3)Material_PreshaderBuffer[95].y)));
	float3 Local5496 = LWCNormalizeTile(  Local5495 ).Offset;
	float Local5497 = MaterialExpressionNoise(Local5496,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local5498 = saturate(Local5497);
	FLWCVector3 Local5499 = LWCMultiply(  Local5495 , LWCPromote(((float3)1.20000005)));
	float3 Local5500 = LWCNormalizeTile(  Local5499 ).Offset;
	float Local5501 = MaterialExpressionNoise(Local5500,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local5502 = saturate(Local5501);
	float Local5503 = (Local5498 + Local5502);
	float Local5504 = (Local5494 - Local5503);
	float Local5505 = (Local2770 + Local5504);
	float Local5506 = (Local2730 * Local5505);
	float Local5507 = saturate(Local5506);
	float Local5508 = lerp(Material_PreshaderBuffer[95].w,Material_PreshaderBuffer[95].z,Local5507);
	float3 Local5509 = (((float3)Local3341.b) * Parameters.TangentToWorld[2]);
	FLWCVector3 Local5510 = LWCAdd(LWCPromote(Local5509),   Local2 );
	float3 Local5511 = LWCDdx(Local5510);
	float3 Local5512 = LWCDdy(Local5510);
	float3 Local5513 = cross(Local5511,Local5512);
	float3 Local5514 = normalize(Local5513);
	float3 Local5515 = (Local5514 -   Local5472 );
	float3 Local5516 = (Local5515 + Parameters.TangentToWorld[2]);
	float Local5517 = dot(Local5475,Parameters.CameraVector);
	float Local5518 = max(0.00000000,Local5517);
	float Local5519 = (1.00000000 - Local5518);
	float Local5520 = abs(Local5519);
	float Local5521 = max(Local5520,0.00010000);
	float Local5522 = PositiveClampedPow(Local5521,Material_PreshaderBuffer[96].x);
	float Local5523 = (Local5522 * Material_PreshaderBuffer[96].z);
	float Local5524 = (Local5523 + Material_PreshaderBuffer[96].y);
	float Local5525 = lerp(Material_PreshaderBuffer[97].x,Material_PreshaderBuffer[96].w,Local5524);
	float3 Local5526 = lerp(Local5475,float3(0.00000000,0.00000000,1.00000000),Local5525);
	float3 Local5527 = lerp(Local5516,Local5526,  Local2729 );
	float Local5528 = lerp(Material_PreshaderBuffer[97].y,0.00000000,  Local2729 );
	float3 Local5529 = lerp(Local5527,float3(0.00000000,0.00000000,1.00000000),  Local5528 );
	float Local5530 = (Local2759 * Local2768);
	float Local5531 = (Local2759 + Local5530);
	float Local5532 = (Local5494 * Local5503);
	float Local5533 = (Local5494 + Local5532);
	float Local5534 = (Local5531 + Local5533);
	float Local5535 = (Local2730 * Local5534);
	float3 Local5536 = (((float3)Local5535) * Parameters.TangentToWorld[2]);
	FLWCVector3 Local5537 = LWCAdd(LWCPromote(Local5536),   Local2 );
	float3 Local5538 = LWCDdx(Local5537);
	float3 Local5539 = LWCDdy(Local5537);
	float3 Local5540 = cross(Local5538,Local5539);
	float3 Local5541 = normalize(Local5540);
	float3 Local5542 = (Local5541 -   Local5472 );
	float3 Local5543 = (Local5542 + Parameters.TangentToWorld[2]);
	float3 Local5544 = lerp(Local5529,Local5543,Local2759);
	float Local5545 = lerp(Material_PreshaderBuffer[97].z,1.00000000,Local5507);
	float Local5546 = PositiveClampedPow(Local5521,Material_PreshaderBuffer[104].y);
	float Local5547 = (Local5546 * Material_PreshaderBuffer[104].w);
	float Local5548 = (Local5547 + Material_PreshaderBuffer[104].z);
	float Local5549 = lerp(Material_PreshaderBuffer[105].x,Material_PreshaderBuffer[103].w,Local5548);
	float Local5550 = lerp(Local5549,1.00000000,Local5507);
	float Local5551 = lerp(0.00000000,Material_PreshaderBuffer[105].y,Local5507);
	FStrataData Local5552 = Parameters.StrataTree.PromoteParameterBlendedBSDFToOperator(StrataConvertLegacyMaterialStatic(Parameters.StrataPixelFootprint, Local5551, Local5550, 0.00000000, Local5508, 0.00000000, float3(1.00000000,1.00000000,1.00000000), 0.00000000, 1.00000000, 0.10000000, float3(0.00000000,0.00000000,0.00000000), Local5545, float3(0.50000000,0.50000000,0.50000000), Material_PreshaderBuffer[107].xyz, Material_PreshaderBuffer[106].xyz, 0.00000000, Material_PreshaderBuffer[105].z, 10, Local5544, Local5544, Local5544, Local5544, 0, 0, Parameters.SharedLocalBases.Types) , 0, 0, 0, 1);
	



	PixelMaterialInputs.EmissiveColor = Local0;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = Local13;
	PixelMaterialInputs.BaseColor = float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Parameters.TangentToWorld[2];
	PixelMaterialInputs.Tangent = Parameters.TangentToWorld[0];
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = float3(float2(Material_PreshaderBuffer[107].w,0.0f),Material_PreshaderBuffer[108].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 10;
	PixelMaterialInputs.FrontMaterial = Local5552;
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.00000000;
	





	
	Parameters.SharedLocalBases.Normals[0] = Local5544;
	


	Parameters.SharedLocalBases.Tangents[0] = Parameters.TangentToWorld[0];
	


	Parameters.SharedLocalBases.Count = 1;



	
	















	Parameters.WorldTangent = 0;

}

#line 3365
void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));




		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001);
	}
}

#line 3383
void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}

#line 17410 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}

#line 17413 "/Engine/Generated/Material.ush"
void ClipLODTransition(float2 SvPosition)
{
}

#line 17444 "/Engine/Generated/Material.ush"
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);


	
#line 17469 "/Engine/Generated/Material.ush"

		clip(GetMaterialMask(PixelMaterialInputs));
	

}

#line 17543 "/Engine/Generated/Material.ush"
bool IsOrthoProjection(ViewState InView)
{
	return InView.ViewToClip[3][3] >= 1.0f;
}

#line 17549 "/Engine/Generated/Material.ush"
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);

	
	

	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.WorldPosition_NoOffsets = LWCSubtract(TranslatedWorldPositionExcludingShaderOffsets, ResolvedView.PreViewTranslation);


	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);

	
	


		if (IsOrthoProjection(ResolvedView))
		{
			
			Parameters.CameraVector = -ResolvedView.ViewForward;
		}
		else
		{
			
			Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
		}
	

	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;



























	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}

#line 17657 "/Engine/Generated/Material.ush"
float3x3 AssembleTangentToWorld( float3 TangentToWorld0, float4 TangentToWorld2 )
{
	
	

	
	
	float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	
	return float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}

#line 17738 "/Engine/Generated/Material.ush"
float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{







	return MaterialParameters.WorldNormal;

}

#line 17752 "/Engine/Generated/Material.ush"
void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal)
{
#line 17773 "/Engine/Generated/Material.ush"

  



	OutIrisNormal = InNormal;
	OutIrisPlaneNormal = InNormal;
  

}

#line 67 "/Engine/Private/BasePassCommon.ush"
struct FSharedBasePassInterpolants
{
	









	float3 PixelPositionExcludingWPO : TEXCOORD9;


























};

#line 121 "/Engine/Private/BasePassCommon.ush"
struct FShadingOcclusion
{
	float  DiffOcclusion;
	float  SpecOcclusion;
	float3 BentNormal;
};

#line 218 "/Engine/Private/BasePassCommon.ush"
FShadingOcclusion ApplyBentNormal(
	in float3 CameraVector, 
	in float3 WorldNormal, 
	in float3 WorldBentNormal0, 
	in float Roughness,
	in float MaterialAO)
{
	FShadingOcclusion Out;
	Out.DiffOcclusion = MaterialAO;
	Out.SpecOcclusion = MaterialAO;
	Out.BentNormal    = WorldNormal;

#line 253 "/Engine/Private/BasePassCommon.ush"

	return Out;
}

#line 7 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;
























	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
	


	



	























};

#line 89 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

#line 135 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

#line 140 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#line 154 "/Engine/Private/LocalVertexFactoryCommon.ush"
uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;



}

#line 467 "/Engine/Private/ShaderPrintCommon.ush"
// Hashes are computed using the CityHash32 function

#line 287 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediatesCommon
{
	
	FSceneDataIntermediates SceneData;






};

#line 302 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	FVertexFactoryIntermediatesCommon Common;

	int PrimitiveLocalInstanceIndex;


	float3x3 TangentToLocal;
	float3x3 TangentToWorld;
	float TangentToWorldSign;

	float4 Color;

	bool bEvaluateWorldPositionOffset;






	float IsVisible;







	float3 PreSkinPosition;
};

#line 333 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

#line 338 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return GetPrimitiveData(Intermediates.Common);
}

#line 516 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();















	float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	
	Result.Particle.Color = float4(1,1,1,1);




	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

#line 25 "/Engine/Private/VolumetricLightmapShared.ush"
float3 ComputeVolumetricLightmapBrickTextureUVs(float3 WorldPosition) 
{
	
	float3 IndirectionVolumeUVs = clamp(WorldPosition * View_VolumetricLightmapWorldToUVScale + View_VolumetricLightmapWorldToUVAdd, 0.0f, .99f);
	float3 IndirectionTextureTexelCoordinate = IndirectionVolumeUVs * View_VolumetricLightmapIndirectionTextureSize;
	float4 BrickOffsetAndSize = View_VolumetricLightmapIndirectionTexture.Load(int4(IndirectionTextureTexelCoordinate, 0));

	float PaddedBrickSize = View_VolumetricLightmapBrickSize + 1;
	return (BrickOffsetAndSize.xyz * PaddedBrickSize + frac(IndirectionTextureTexelCoordinate / BrickOffsetAndSize.w) * View_VolumetricLightmapBrickSize + .5f) * View_VolumetricLightmapBrickTexelSize;
}

#line 134 "/Engine/Private/VolumetricLightmapShared.ush"
float GetVolumetricLightmapDirectionalLightShadowing(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_DirectionalLightShadowingBrickTexture, View_SharedBilinearClampedSampler, BrickTextureUVs, 0).x;
}

#line 230 "/Engine/Private/LightmapCommon.ush"
float4 GetPrecomputedShadowMasks(float LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters, float3 VolumetricLightmapBrickTextureUVs)
{
	
	
#line 261 "/Engine/Private/LightmapCommon.ush"


		float DirectionalLightShadowing = 1.0f;

	
		if ((GetPrimitiveData(MaterialParameters).Flags & 0x2) != 0 && View_IndirectLightingCacheShowFlag > 0.0f)
		{
			DirectionalLightShadowing = IndirectLightingCache_DirectionalLightShadowing;
		}
	

		[branch]
		if ((GetPrimitiveData(MaterialParameters).Flags & 0x4) != 0)
		{
			
				
				VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs( LWCToFloat( MaterialParameters.AbsoluteWorldPosition ));
			

			DirectionalLightShadowing = GetVolumetricLightmapDirectionalLightShadowing(VolumetricLightmapBrickTextureUVs);
		}

		
		return float4(DirectionalLightShadowing, 1, 1, 1);

	




}

#line 64 "/Engine/Private/ReflectionEnvironmentShared.ush"
bool ShouldSkyLightApplyPrecomputedBentNormalShadowing() {
	return View_SkyLightApplyPrecomputedBentNormalShadowingFlag != 0.0f;
}

#line 80 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkySHDiffuse(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1.0f); 

	float3 Intermediate0, Intermediate1, Intermediate2;
	Intermediate0.x = dot(View_SkyIrradianceEnvironmentMap[0], NormalVector);
	Intermediate0.y = dot(View_SkyIrradianceEnvironmentMap[1], NormalVector);
	Intermediate0.z = dot(View_SkyIrradianceEnvironmentMap[2], NormalVector);

	float4 vB = NormalVector.xyzz * NormalVector.yzzx;
	Intermediate1.x = dot(View_SkyIrradianceEnvironmentMap[3], vB);
	Intermediate1.y = dot(View_SkyIrradianceEnvironmentMap[4], vB);
	Intermediate1.z = dot(View_SkyIrradianceEnvironmentMap[5], vB);

	float vC = NormalVector.x * NormalVector.x - NormalVector.y * NormalVector.y;
	Intermediate2 = View_SkyIrradianceEnvironmentMap[6].xyz * vC;

	
	return max(0, Intermediate0 + Intermediate1 + Intermediate2);
}

#line 12 "/Engine/Private/ShadingModelsMaterial.ush"
void SetGBufferForShadingModel(
	in out FGBufferData GBuffer, 
	in out FMaterialPixelParameters MaterialParameters,
	const float Opacity,
	const float3 BaseColor,
	const float  Metallic,
	const float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;

	
	
	
	if (false)
	{
	}














#line  84 "/Engine/Private/ShadingModelsMaterial.ush"

#line 118 "/Engine/Private/ShadingModelsMaterial.ush"























#line 203 "/Engine/Private/ShadingModelsMaterial.ush"

}

#line 7 "/Engine/Private/DistortionCommon.ush"
float2 ComputeBufferUVDistortion(
	in FMaterialPixelParameters MaterialParameters, in FPixelMaterialInputs PixelMaterialInputs, in ViewState ResolvedView,
	in float3 WorldNormal, in float InMaterialIOR,
	in float4 DistortionParameters, in float2 ScreenUV, in FMaterialRefractionData RefractionData, in bool TryToClip, in uint EyeIndex)
{
	float3 ViewNormal = normalize(TransformWorldVectorToView(WorldNormal));







	
	float AirIOR = 1.0f;

	float MaterialIOR = GetMaterialRefractionIOR(RefractionData);



	float2 ViewportUVDistortion = ViewNormal.xy * (MaterialIOR - AirIOR);











	float2 BufferUVDistortion = ViewportUVDistortion * ResolvedView.ViewSizeAndInvSize.xy * ResolvedView.BufferSizeAndInvSize.zw;

	
	
	
	const float2 FullResolutionDistortionPixelSize = ResolvedView.BufferSizeAndInvSize.zw;
	if (TryToClip && 
		all(abs(BufferUVDistortion) < FullResolutionDistortionPixelSize))
	{
		clip(-1.0f);
	}

	




	float InvTanHalfFov = DistortionParameters.x;
	float Ratio = DistortionParameters.y;


	
	
	
	

	
	float2 FovFix = float2(InvTanHalfFov, Ratio*InvTanHalfFov);
	
	const float OffsetFudgeFactor = 0.00023;
	BufferUVDistortion *= DistortionParameters.zw * float2(OffsetFudgeFactor, -OffsetFudgeFactor) * FovFix;

	return BufferUVDistortion;
}

#line 75 "/Engine/Private/DistortionCommon.ush"
void PostProcessUVDistortion(
	in FMaterialPixelParameters MaterialParameters, in FPixelMaterialInputs PixelMaterialInputs, 
	in float DistortSceneDepth,	inout float2 BufferUVDistortion, in FMaterialRefractionData RefractionData)
{
	
	float Bias = -RefractionData.RefractionDepthBias;
	float Range = clamp(abs(Bias * 0.5f), 0, 50);
	float Z = DistortSceneDepth;
	float ZCompare = MaterialParameters.ScreenPosition.w;
	float InvWidth = 1.0f / max(1.0f, Range);
	BufferUVDistortion *= saturate((Z - ZCompare) * InvWidth + Bias);

	
	static const float DistortionScaleBias = 4.0f;
	BufferUVDistortion *= DistortionScaleBias;
}

#line 24 "/Engine/Private/SingleLayerWaterShading.ush"
struct WaterVolumeLightingOutput
{
	float3 Luminance;
	float3 WaterToSceneTransmittance;
	float3 WaterToSceneToLightTransmittance;
};

#line 32 "/Engine/Private/SingleLayerWaterShading.ush"
WaterVolumeLightingOutput EvaluateWaterVolumeLighting(
	FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, ViewState ResolvedView,
	float DirectionalLightShadow,

	Texture2D SceneDepthWithoutSingleLayerWaterTexture, SamplerState SceneDepthWithoutSingleLayerWaterSampler,
	float2 SceneDepthWithoutSingleLayerWaterTextureSize,
	float2 SceneDepthWithoutSingleLayerWaterTextureInvSize,


	Texture2D SceneColorWithoutSingleLayerWaterTexture, SamplerState SceneColorWithoutSingleLayerWaterSampler,
	float2 SceneWithoutSingleLayerWaterMinUV,
	float2 SceneWithoutSingleLayerWaterMaxUV,

	float Specular, const float4 DistortionParams,
	float3 SunIlluminance, float3 AmbiantIlluminance, float3 EnvBrdf,
	bool CameraIsUnderWater, float WaterVisibility, uint EyeIndex,
	bool bSeparateMainDirLight, inout float3 SeparatedWaterMainDirLightScatteredLuminance)
{
	WaterVolumeLightingOutput Output;
	Output.Luminance = 0.0f;
	Output.WaterToSceneTransmittance = 1.0f;
	Output.WaterToSceneToLightTransmittance = 1.0f;

	float2 ViewportUV = MaterialParameters.ViewBufferUV;

	if (WaterVisibility > 0.0f)
	{
		float WaterDepth = MaterialParameters.ScreenPosition.w; 
#line  79 "/Engine/Private/SingleLayerWaterShading.ush"


		float IorWater = DielectricF0ToIor(DielectricSpecularToF0(Specular)); 

		ViewportUV = clamp(ViewportUV, SceneWithoutSingleLayerWaterMinUV, SceneWithoutSingleLayerWaterMaxUV);

		float PixelSceneDeviceZ = WaterSampleSceneDepthWithoutWater(
			SceneDepthWithoutSingleLayerWaterTexture,
			SceneDepthWithoutSingleLayerWaterSampler,
			ViewportUV,
			SceneDepthWithoutSingleLayerWaterTextureSize,
			SceneDepthWithoutSingleLayerWaterTextureInvSize);

		float PixelSceneDepth = ConvertFromDeviceZ(PixelSceneDeviceZ);
		
		FMaterialRefractionData RefractionData = GetMaterialRefraction(PixelMaterialInputs);
		float2 BufferUVDistortion = ComputeBufferUVDistortion(
			MaterialParameters, PixelMaterialInputs, ResolvedView,
			MaterialParameters.WorldNormal, IorWater,
			DistortionParams, ViewportUV, RefractionData, false, EyeIndex);
		PostProcessUVDistortion(MaterialParameters, PixelMaterialInputs, PixelSceneDepth, BufferUVDistortion, RefractionData);
		
		BufferUVDistortion *= saturate((PixelSceneDepth - WaterDepth) * 1.0 / 30.0f);

		const float2 DistortedUV = clamp(ViewportUV + BufferUVDistortion, SceneWithoutSingleLayerWaterMinUV, SceneWithoutSingleLayerWaterMaxUV);

		
		
		float4 SceneDeviceZ4 = SceneDepthWithoutSingleLayerWaterTexture.Gather(SceneDepthWithoutSingleLayerWaterSampler, DistortedUV);
		float4 SceneDepth4 = float4(ConvertFromDeviceZ(SceneDeviceZ4.x), ConvertFromDeviceZ(SceneDeviceZ4.y), ConvertFromDeviceZ(SceneDeviceZ4.z), ConvertFromDeviceZ(SceneDeviceZ4.w));
		
		float SceneDepth = 0.0f;
		float SceneDeviceZ = 0.0f;
		if(any(SceneDepth4 < WaterDepth))
		{
			SceneDepth = PixelSceneDepth; 
			SceneDeviceZ = PixelSceneDeviceZ;
		}
		else
		{
			
			SceneDeviceZ = GetBilinearInterpolation(GetBilinearSampleLevelInfos(DistortedUV, SceneDepthWithoutSingleLayerWaterTextureSize, SceneDepthWithoutSingleLayerWaterTextureInvSize), SceneDeviceZ4.wzxy);
			SceneDepth = ConvertFromDeviceZ(SceneDeviceZ);
			ViewportUV = DistortedUV;
		}




		
		SceneDeviceZ = max(0.000000000001f, SceneDeviceZ);


		const float BehindWaterDeltaDepth = CameraIsUnderWater ? WaterDepth : max(0.0f, SceneDepth - WaterDepth);


		MaterialParameters.StrataTree.BSDFs[0].StrataSanitizeBSDF();
		FStrataBSDF SLWBSDF = MaterialParameters.StrataTree.BSDFs[0];
		const float3 Albedo =   SLWBSDF .InlineVGPRs[0].xyz;
		const float3 ExtinctionCoeff =   SLWBSDF .InlineVGPRs[1].xyz;
		const float3 ScatteringCoeff = Albedo * ExtinctionCoeff;
		const float3 AbsorptionCoeff = max(0.0, ExtinctionCoeff - ScatteringCoeff);
		const float PhaseG =   SLWBSDF .InlineVGPRs[0].w;
		
		float3 ColorScaleBehindWater = lerp(1.0f,   SLWBSDF .InlineVGPRs[2].xyz, saturate(BehindWaterDeltaDepth * 0.02f));








		
		
		
		const float3 ExtinctionCoeffSafe = max(ExtinctionCoeff, 1e-5);
		
		float DirLightPhaseValue = 0.0f; 
		{



			float IorFrom = 1.0f; 
			const float relativeIOR = IorFrom / IorWater;
			float3 UnderWaterRayDir = 0.0f;
			if (WaterRefract(MaterialParameters.CameraVector, MaterialParameters.WorldNormal, relativeIOR, UnderWaterRayDir))
			{
				DirLightPhaseValue = SchlickPhase(PhaseG, dot(-ResolvedView.DirectionalLightDirection.xyz, UnderWaterRayDir));
			}

		}

		
		
		
		const FLWCVector3 BehindWaterSceneWorldPos = SvPositionToWorld(float4(MaterialParameters.SvPosition.xy, SceneDeviceZ, 1.0));
		const float DistanceFromScenePixelToWaterTop = max(0.0, LWCToFloat(LWCSubtract(MaterialParameters.AbsoluteWorldPosition, BehindWaterSceneWorldPos)).z);
		const float3 MeanTransmittanceToLightSources = exp(-DistanceFromScenePixelToWaterTop * ExtinctionCoeff);




		
		float3 BehindWaterSceneLuminance = SceneColorWithoutSingleLayerWaterTexture.SampleLevel(SceneColorWithoutSingleLayerWaterSampler, ViewportUV, 0).rgb;
		BehindWaterSceneLuminance = MeanTransmittanceToLightSources * ResolvedView.OneOverPreExposure * BehindWaterSceneLuminance;


		float3 SunScattLuminance = DirLightPhaseValue * SunIlluminance;
		float3 AmbScattLuminance = IsotropicPhase()   * AmbiantIlluminance;

		const float MainDirLightFactor			= bSeparateMainDirLight ? 0.0f : 1.0f;
		const float SeparatedMainDirLightFactor = bSeparateMainDirLight ? 1.0f : 0.0f;

		const float3 OpticalDepth = ExtinctionCoeff * BehindWaterDeltaDepth;
		float3 Transmittance = exp(-OpticalDepth);
		float3 IncomingLuminance = (AmbScattLuminance + SunScattLuminance * DirectionalLightShadow * MainDirLightFactor);
		
		float3 SafeScatteringAmount = saturate(ScatteringCoeff * (1.0f - Transmittance) / ExtinctionCoeffSafe);
		float3 ScatteredLuminance = IncomingLuminance * SafeScatteringAmount;

		
		float3 SeparatedIncomingLuminance = SunScattLuminance * DirectionalLightShadow * SeparatedMainDirLightFactor;
		
		SeparatedWaterMainDirLightScatteredLuminance += SeparatedIncomingLuminance * SafeScatteringAmount * (CameraIsUnderWater ? 1.0 : (1.0 - EnvBrdf)) * WaterVisibility;

		
		ScatteredLuminance *= CameraIsUnderWater ? 1.0 : (1.0 - EnvBrdf);	
		Transmittance *= CameraIsUnderWater ? (1.0 - EnvBrdf) : 1.0;		

		
		Output.Luminance = WaterVisibility * (ScatteredLuminance + Transmittance * (BehindWaterSceneLuminance * ColorScaleBehindWater));
		Output.WaterToSceneTransmittance = Transmittance;
		Output.WaterToSceneToLightTransmittance = Transmittance * MeanTransmittanceToLightSources;
	}

	return Output;
}

#line 18 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuationMask(float3 WorldLightVector)
{
	float NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);
	return 1.0f - saturate(NormalizeDistanceSquared);
}

#line 23 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuation(float3 WorldLightVector, float FalloffExponent)
{
	
	return pow(RadialAttenuationMask(WorldLightVector), FalloffExponent);

	
	
	
	
	















}

#line 56 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}

#line 60 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}

#line 7 "/Engine/Private/CapsuleLightSampling.ush"
float SqrtOneMinusX(float x)
{
	return x < 0.01 ? 1 - x * (0.5 + x * 0.125) : sqrt(1 - x);
}

#line 14 "/Engine/Private/CapsuleLightSampling.ush"
struct FCapsuleSphericalBounds
{
	FSphericalRect SphericalRect;
	float3 ConeAxis;
	float ConeSinThetaMax2;
	float ConeSolidAngle;
};

#line 23 "/Engine/Private/CapsuleLightSampling.ush"
float GetCapsuleBoundsSolidAngle(FCapsuleSphericalBounds Bounds)
{
	return min(Bounds.SphericalRect.SolidAngle, Bounds.ConeSolidAngle);
}

#line 29 "/Engine/Private/CapsuleLightSampling.ush"
float4 SampleCapsuleBounds(FCapsuleSphericalBounds Bounds, float2 E)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return float4(TangentToWorld(UniformSampleConeRobust(E, Bounds.ConeSinThetaMax2).xyz, Bounds.ConeAxis), Bounds.ConeSolidAngle);
	}
	else
	{
		return float4(normalize(UniformSampleSphericalRect(E, Bounds.SphericalRect)), Bounds.SphericalRect.SolidAngle);
	}
}

#line 42 "/Engine/Private/CapsuleLightSampling.ush"
FCapsuleSphericalBounds CapsuleGetSphericalBounds(float3 Origin, float3 Axis, float Radius, float Length)
{
	float h = dot(Axis, Origin);
	float3 ClosestPointOnAxis = Origin - Axis * h;

	float DistanceToAxisSqr = dot(ClosestPointOnAxis, ClosestPointOnAxis);
	float RadiusSqr = Pow2(Radius);

	if (DistanceToAxisSqr <= RadiusSqr)
	{
		
		float3 CapCenter = Origin - Axis * Length * 0.5 * sign(h);
		float LightDistanceSquared = dot(CapCenter, CapCenter);
		float SinThetaMax2 = saturate(RadiusSqr / LightDistanceSquared);

		FCapsuleSphericalBounds Result;
		Result.SphericalRect = (FSphericalRect)0;
		Result.SphericalRect.SolidAngle = (asfloat(0x7F800000)); 
		Result.ConeAxis = normalize(CapCenter);
		Result.ConeSinThetaMax2 = SinThetaMax2;
		Result.ConeSolidAngle = UniformConeSolidAngle(SinThetaMax2);
		return Result;
	}

	
	FRect Rect;
	Rect.Origin = Origin;
	Rect.Axis[1] = Axis;
	Rect.Axis[2] = normalize(-ClosestPointOnAxis);
	Rect.Axis[0] = cross(Rect.Axis[1], Rect.Axis[2]);

	float SinCylinderAngle = Radius * rsqrt(DistanceToAxisSqr);
	
	float RectRadius = Radius * rsqrt(1 - Pow2(SinCylinderAngle));

	float Extension[2];
	for (int i = 0; i < 2; i++)
	{
		float hi = Length * (i > 0 ? 0.5 : -0.5);
		float3 PointPos = Origin + Axis * hi;

		float InverseDist = rsqrt(dot(PointPos, PointPos));

		float SinSphereAngle = saturate(Radius * InverseDist);
		float CosSphereAngle = SqrtOneMinusX(Pow2(SinSphereAngle));

		float CosAxisAngle = -dot(Axis, PointPos) * InverseDist;
		CosAxisAngle = sign(CosAxisAngle * hi) * saturate(abs(CosAxisAngle));
		float SinAxisAngle = SqrtOneMinusX(Pow2(CosAxisAngle));

		float CosExtension = SinAxisAngle * CosSphereAngle + CosAxisAngle * SinSphereAngle;
		Extension[i] = Radius / CosExtension;
	}

	float Translate = 0.5 * (Extension[1] - Extension[0]);
	float Extend = 0.5 * (Extension[0] + Extension[1]);

	Rect.Origin += Translate * Rect.Axis[1];
	Rect.Extent = float2(RectRadius, 0.5 * Length + Extend);

	
	float3 R0 = Rect.Origin - Rect.Axis[1] * Rect.Extent.y;
	float3 R1 = Rect.Origin + Rect.Axis[1] * Rect.Extent.y;
	float InvDistR0 = rsqrt(dot(R0, R0));
	float InvDistR1 = rsqrt(dot(R1, R1));

	FCapsuleSphericalBounds Result;
	Result.SphericalRect = BuildSphericalRect(Rect);
	Result.ConeAxis = normalize(lerp(R0, R1, saturate(InvDistR1 / (InvDistR0 + InvDistR1))));
	Result.ConeSinThetaMax2 = saturate(0.5 - 0.5 * dot(R0, R1) * InvDistR0 * InvDistR1); 
	Result.ConeSolidAngle = UniformConeSolidAngle(Result.ConeSinThetaMax2);
	return Result;
}

#line 155 "/Engine/Private/CapsuleLightSampling.ush"
float CapsuleTest(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{
	
	float B = dot(Rd, Axis);
	float t = clamp(dot(Center, B * Rd - Axis) / (1 - B * B), -0.5 * Length, 0.5 * Length);
	float3 ToSphere = Center + t * Axis;
	float3 C = cross(Rd, ToSphere);
	return dot(C, C) <= Radius2 ? length(ToSphere) : -1.0;
}

#line 37 "/Engine/Private/CapsuleLightIntegrate.ush"
FAreaLightIntegrateContext CreateCapsuleIntegrateContext(float Roughness, float3 N, float3 V, FCapsuleLight Capsule, bool bInverseSquared )
{
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();

	float NoL;
	float Falloff;
	float LineCosSubtended = 1;

	
	
	
	
	

	[branch]
	if( Capsule.Length > 0 )
	{
		LineIrradiance( N, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float DistSqr = dot( Capsule.LightPos[0], Capsule.LightPos[0] );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );

		float3 L = Capsule.LightPos[0] * rsqrt( DistSqr );
		NoL = dot( N, L );
	}

	if( Capsule.Radius > 0 )
	{
		
		float SinAlphaSqr = saturate( Pow2( Capsule.Radius ) * Falloff );
		NoL = SphereHorizonCosWrap( NoL, SinAlphaSqr );
	}

	NoL = saturate( NoL );
	Falloff = bInverseSquared ? Falloff : 1;

	float3 ToLight = Capsule.LightPos[0];
	if( Capsule.Length > 0 )
	{
		float3 R = reflect( -V, N );

		







		ToLight = ClosestPointLineToRay( Capsule.LightPos[0], Capsule.LightPos[1], Capsule.Length, R );
	}

	float DistSqr = dot( ToLight, ToLight );
	float InvDist = rsqrt( DistSqr );
	float3 L = ToLight * InvDist;
	
	Roughness = max( Roughness, View_MinRoughness );
	float a = Pow2( Roughness );
    
	
	
	const float SizeFadesOutDiffuseMicroRefl = 20.0;

	Out.AreaLight.SphereSinAlpha = saturate( Capsule.Radius * InvDist * (1 - a) );
	Out.AreaLight.SphereSinAlphaSoft = saturate( Capsule.SoftRadius * InvDist );
	Out.AreaLight.LineCosSubtended = LineCosSubtended;
	Out.AreaLight.FalloffColor = 1;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, false);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, saturate(1.0f - max(Capsule.Length, Capsule.Radius) / SizeFadesOutDiffuseMicroRefl));
	Out.NoL = NoL;
	Out.Falloff = Falloff;	
	Out.L = L;
	return Out;
}

#line 118 "/Engine/Private/CapsuleLightIntegrate.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, bool bInverseSquared )
{
	GBuffer.Roughness = max( GBuffer.Roughness, View_MinRoughness );
	FAreaLightIntegrateContext Context = CreateCapsuleIntegrateContext(GBuffer.Roughness, N, V, Capsule, bInverseSquared);
	return IntegrateBxDF( GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow );
}

#line 125 "/Engine/Private/CapsuleLightIntegrate.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FCapsuleLight Capsule, FShadowTerms Shadow, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	Capsule.Radius = max( 1, Capsule.Radius );

	const float SphereArea = (4*PI) * Pow2( Capsule.Radius );
	const float CylinderArea = (2*PI) * Capsule.Radius * Capsule.Length;
	const float SurfaceArea = SphereArea + CylinderArea;
	const float SurfaceColor = 4.0 / SurfaceArea;

	float3 ToLight = 0.5 * ( Capsule.LightPos[0] + Capsule.LightPos[1] );
	float3 CapsuleAxis = normalize( Capsule.LightPos[1] - Capsule.LightPos[0] );

	float DistanceSqr = dot( ToLight, ToLight );
	float3 ConeAxis = ToLight * rsqrt( DistanceSqr );
	float SineConeSqr = saturate(Pow2(Capsule.Radius) / DistanceSqr);

	FCapsuleSphericalBounds CapsuleBounds = CapsuleGetSphericalBounds(ToLight, CapsuleAxis, Capsule.Radius, Capsule.Length);
	
	const uint NumSets = 3;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		16,	
	};
	
	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );
	
	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;
			
			
			
			float3 L, H;
			if( Set == 0 )
			{
				L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
				H = normalize(V + L);
			}
			else if( Set == 1 )
			{
				H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
				L = 2 * dot( V, H ) * H - V;
			}
			else
			{
				















































				if( Capsule.Length > 0 )
				{
					float3 ToArea = SampleCapsuleBounds(CapsuleBounds, E).xyz;
					L = normalize( ToArea );
					H = normalize( V + L );
				}
				else
				{
					L = TangentToWorld( UniformSampleConeRobust( E, SineConeSqr).xyz, ConeAxis );
					H = normalize(V + L);
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{
				{
					if (CapsuleTest(L, ToLight, CapsuleAxis, Pow2(Capsule.Radius), Capsule.Length) > 0)
					{
						
						continue;
					}
				}

				float PDF[] =
				{
					NoL / PI,
					D_GGX(Pow4(GBuffer.Roughness), NoH) * NoH / (4 * VoH),
					1.0 / GetCapsuleBoundsSolidAngle(CapsuleBounds)
				};

				if( Capsule.Length == 0 )
				{
					PDF[2] = 1.0 / UniformConeSolidAngle(SineConeSqr);
				}

				
				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];
				
				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse		+= SurfaceColor * Weight * LightingSample.Diffuse;
				Lighting.Specular		+= SurfaceColor * Weight * LightingSample.Specular;
				Lighting.Transmission	+= SurfaceColor * Weight * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}

#line 70 "/Engine/Private/RectLightIntegrate.ush"
FAreaLightIntegrateContext CreateRectIntegrateContext( float Roughness, float3 N, float3 V, FRect Rect, FRectTexture SourceTexture )
{
	float NoL = 0;
	float Falloff = 0;
	
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();




	float3 L = RectIrradianceLambert( N, Rect, Falloff, NoL );








#line 236 "/Engine/Private/RectLightIntegrate.ush"

	float3 FalloffColor = SampleSourceTexture( L, Rect, SourceTexture );

	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 1;
	Out.AreaLight.FalloffColor = FalloffColor;
	Out.AreaLight.Rect = Rect;
	Out.AreaLight.Texture = SourceTexture;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, true);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, 0.0);
	Out.L = L;
	Out.NoL = NoL;
	Out.Falloff = Falloff;

	return Out;
}

#line 255 "/Engine/Private/RectLightIntegrate.ush"
FDirectLighting IntegrateBxDF(FGBufferData GBuffer, float3 N, float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture)
{
	
	FDirectLighting Out = (FDirectLighting)0;
	if (IsRectVisible(Rect))
	{
		FAreaLightIntegrateContext Context = CreateRectIntegrateContext(GBuffer.Roughness, N, V, Rect, SourceTexture);
		GBuffer.Roughness = max(GBuffer.Roughness, 0.02);
		Out = IntegrateBxDF(GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow);
	}
	return Out;
}

#line 268 "/Engine/Private/RectLightIntegrate.ush"
FDirectLighting IntegrateBxDF( FGBufferData GBuffer, float3 N, float3 V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	const float SurfaceArea = 4 * Rect.Extent.x * Rect.Extent.y;
	const float SurfaceColor = 2.0 / SurfaceArea;

	
	if( dot( Rect.Axis[2], Rect.Origin ) < 0 )
		return Lighting;
	
	
	if (!IsRectVisible(Rect))
		return Lighting;

	FSphericalRect SphericalRect = BuildSphericalRect( Rect );
	
	const uint NumSets = 4;
	const uint NumSamples[ NumSets ] =
	{
		0,	
		16,	
		0,	
		16,	
	};

	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );

	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;
			
			
			
			float3 L, H;
			switch( Set )
			{
				case 0:
				{
					L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
					H = normalize( V + L );
					break;
				}
				case 1:
				{
					H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
					L = 2 * dot( V, H ) * H - V;
					break;
				}
				case 2:
				{
					float3 ToArea = Rect.Origin;
					ToArea += (E.x * 2 - 1) * Rect.Axis[0] * Rect.Extent.x;
					ToArea += (E.y * 2 - 1) * Rect.Axis[1] * Rect.Extent.y;
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
				case 3:
				{
					float3 ToArea = UniformSampleSphericalRect( E, SphericalRect );
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{
				
				float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
				float3 PointOnPlane = L * t;

				float2 PointInRect;
				PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
				PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

				float2 RectUV = PointInRect / Rect.Extent * float2( 0.5, -0.5 ) + 0.5;
				float3 LightColor = SampleRectTexture(SourceTexture, RectUV, 0, true);

				if( Set == 0 || Set == 1 )
				{
					bool InExtentX = abs( PointInRect.x ) <= Rect.Extent.x;
					bool InExtentY = abs( PointInRect.y ) <= Rect.Extent.y;

					[branch]
					if( t < 0 || !InExtentX || !InExtentY )
					{
						
						continue;
					}
				}

				float PDF[] =
				{
					NoL * (1 / PI),
					D_GGX( Pow4(GBuffer.Roughness), NoH ) * NoH / (4 * VoH),
					dot( PointOnPlane, PointOnPlane ) / ( SurfaceArea * abs( dot( L, Rect.Axis[2] ) ) ),
					1.0 / SphericalRect.SolidAngle,
				};

				
				float InvWeight = 0;
				[unroll] for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];

				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse		+= ( LightColor * Weight ) * LightingSample.Diffuse;
				Lighting.Specular		+= ( LightColor * Weight ) * LightingSample.Specular;
				Lighting.Transmission	+= ( LightColor * Weight ) * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}

#line 33 "/Engine/Private/DeferredLightingCommon.ush"
float DistanceFromCameraFade(float SceneDepth, FDeferredLightData LightData)
{
	
	float Fade = saturate(SceneDepth * LightData.DistanceFadeMAD.x + LightData.DistanceFadeMAD.y);
	return Fade * Fade;
}

#line 126 "/Engine/Private/DeferredLightingCommon.ush"
void GetShadowTerms(float SceneDepth, float4 PrecomputedShadowFactors, uint ShadingModelID, float ContactShadowOpacity, FDeferredLightData LightData, float3 TranslatedWorldPosition, float3 L, float4 LightAttenuation, float Dither, inout FShadowTerms Shadow)
{
	float ContactShadowLength = 0.0f;
	const float ContactShadowLengthScreenScale = GetTanHalfFieldOfView().y * SceneDepth;

	[branch]
	if (LightData.ShadowedBits)
	{
		

		
		
		

		float UsesStaticShadowMap = dot(LightData.ShadowMapChannelMask, float4(1, 1, 1, 1));
		float StaticShadowing = lerp(1, dot(PrecomputedShadowFactors, LightData.ShadowMapChannelMask), UsesStaticShadowMap);




		if (LightData.bRadialLight || 0)
		{
			

			Shadow.SurfaceShadow = LightAttenuation.z * StaticShadowing;
			
			
			Shadow.TransmissionShadow = LightAttenuation.w * StaticShadowing;

			Shadow.TransmissionThickness = LightAttenuation.w;
		}
		else
		{
			
			
			

			float DynamicShadowFraction = DistanceFromCameraFade(SceneDepth, LightData);
			
			Shadow.SurfaceShadow = lerp(LightAttenuation.x, StaticShadowing, DynamicShadowFraction);
			
			Shadow.TransmissionShadow = min(lerp(LightAttenuation.y, StaticShadowing, DynamicShadowFraction), LightAttenuation.w);

			Shadow.SurfaceShadow *= LightAttenuation.z;
			Shadow.TransmissionShadow *= LightAttenuation.z;

			
			Shadow.TransmissionThickness = min(LightAttenuation.y, LightAttenuation.w);
		}

		[flatten]
		if (LightData.ShadowedBits > 1 && LightData.ContactShadowLength > 0)
		{
			ContactShadowLength = LightData.ContactShadowLength * (LightData.ContactShadowLengthInWS ? 1.0f : ContactShadowLengthScreenScale);
		}
	}

#line 239 "/Engine/Private/DeferredLightingCommon.ush"


	Shadow.HairTransmittance = LightData.HairTransmittance;
	Shadow.HairTransmittance.OpaqueVisibility = Shadow.SurfaceShadow;
}

#line 245 "/Engine/Private/DeferredLightingCommon.ush"
float GetLocalLightAttenuation(
	float3 TranslatedWorldPosition, 
	FDeferredLightData LightData, 
	inout float3 ToLight, 
	inout float3 L)
{
	ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
		
	float DistanceSqr = dot( ToLight, ToLight );
	L = ToLight * rsqrt( DistanceSqr );

	float LightMask;
	if (LightData.bInverseSquared)
	{
		LightMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
		
		
		


	}
	else
	{
		LightMask = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	if (LightData.bSpotLight)
	{
		LightMask *= SpotAttenuation(L, -LightData.Direction, LightData.SpotAngles);
	}

	if( LightData.bRectLight )
	{
		
		LightMask = dot( LightData.Direction, L ) < 0 ? 0 : LightMask;
	}

	return LightMask;
}

#line 287 "/Engine/Private/DeferredLightingCommon.ush"
FRect GetRect(float3 ToLight, FDeferredLightData LightData)
{
	return GetRect(
		ToLight, 
		LightData.Direction, 
		LightData.Tangent, 
		LightData.SourceRadius, 
		LightData.SourceLength, 
		LightData.RectLightData.BarnCosAngle, 
		LightData.RectLightData.BarnLength,
		1);
}

#line 300 "/Engine/Private/DeferredLightingCommon.ush"
FCapsuleLight GetCapsule( float3 ToLight, FDeferredLightData LightData )
{
	FCapsuleLight Capsule;
	Capsule.Length = LightData.SourceLength;
	Capsule.Radius = LightData.SourceRadius;
	Capsule.SoftRadius = LightData.SoftSourceRadius;
	Capsule.DistBiasSqr = 1;
	Capsule.LightPos[0] = ToLight - 0.5 * Capsule.Length * LightData.Tangent;
	Capsule.LightPos[1] = ToLight + 0.5 * Capsule.Length * LightData.Tangent;
	return Capsule;
}

#line 312 "/Engine/Private/DeferredLightingCommon.ush"
FLightAccumulator AccumulateDynamicLighting(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, uint ShadingModelID,
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = (FLightAccumulator)0;

	float3 V = -CameraVector;
	float3 N = GBuffer.WorldNormal;
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		N = OctahedronToUnitVector(oct1);			
	}
	
	float3 L = LightData.Direction;	
	float3 ToLight = L;
	float3 MaskedLightColor = LightData.Color;
	float LightMask = 1;
	if (LightData.bRadialLight)
	{
		LightMask = GetLocalLightAttenuation( TranslatedWorldPosition, LightData, ToLight, L );
		MaskedLightColor *= LightMask;
	}

	LightAccumulator.EstimatedCost += 0.3f;		

	[branch]
	if( LightMask > 0 )
	{
		FShadowTerms Shadow;
		Shadow.SurfaceShadow = AmbientOcclusion;
		Shadow.TransmissionShadow = 1;
		Shadow.TransmissionThickness = 1;
		Shadow.HairTransmittance.OpaqueVisibility = 1;
		const float ContactShadowOpacity = GBuffer.CustomData.a;
		GetShadowTerms(GBuffer.Depth, GBuffer.PrecomputedShadowFactors, GBuffer.ShadingModelID, ContactShadowOpacity,
			LightData, TranslatedWorldPosition, L, LightAttenuation, Dither, Shadow);
		SurfaceShadow = Shadow.SurfaceShadow;

		LightAccumulator.EstimatedCost += 0.3f;		

#line 369 "/Engine/Private/DeferredLightingCommon.ush"

		[branch]
		if( Shadow.SurfaceShadow + Shadow.TransmissionShadow > 0 )
		{
			const bool bNeedsSeparateSubsurfaceLightAccumulation = UseSubsurfaceProfile(GBuffer.ShadingModelID);

		
#line 393 "/Engine/Private/DeferredLightingCommon.ush"

			FDirectLighting Lighting;

			if (LightData.bRectLight)
			{
				FRect Rect = GetRect( ToLight, LightData );
				const FRectTexture SourceTexture = ConvertToRectTexture(LightData);

				


					Lighting = IntegrateBxDF( GBuffer, N, V, Rect, Shadow, SourceTexture);
				
			}
			else
			{
				FCapsuleLight Capsule = GetCapsule( ToLight, LightData );

				


					Lighting = IntegrateBxDF( GBuffer, N, V, Capsule, Shadow, LightData.bInverseSquared );
				
			}

			Lighting.Specular *= LightData.SpecularScale;
				
			LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, MaskedLightColor * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );
			LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, 0.0f, Lighting.Transmission, MaskedLightColor * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );

			LightAccumulator.EstimatedCost += 0.4f;		
		
		}

	}
	return LightAccumulator;
}

#line 432 "/Engine/Private/DeferredLightingCommon.ush"
FDeferredLightingSplit GetDynamicLightingSplit(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, uint ShadingModelID, 
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, 
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = AccumulateDynamicLighting(TranslatedWorldPosition, CameraVector, GBuffer, AmbientOcclusion, ShadingModelID, LightData, LightAttenuation, Dither, SVPos, SurfaceShadow);
	return LightAccumulator_GetResultSplit(LightAccumulator);
}

#line 25 "/Engine/Private/LightGridCommon.ush"
uint GetCulledLightDataGrid(uint GridIndex)
{

	return OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit[GridIndex];



}

#line 45 "/Engine/Private/LightGridCommon.ush"
struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

#line 52 "/Engine/Private/LightGridCommon.ush"
FLightGridData GetLightGridData(uint EyeIndex)
{
	FLightGridData Result;







		Result.LightGridPixelSizeShift = OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;
		Result.LightGridZParams = OpaqueBasePass_Shared_Forward_LightGridZParams;
		Result.CulledGridSize = OpaqueBasePass_Shared_Forward_CulledGridSize;











	return Result;
}

#line 79 "/Engine/Private/LightGridCommon.ush"
uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}

#line 87 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	return (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
}

#line 93 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth, EyeIndex), EyeIndex);
}

#line 98 "/Engine/Private/LightGridCommon.ush"
uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}

#line 111 "/Engine/Private/LightGridCommon.ush"
uint GetNumLocalLights(uint EyeIndex)
{



	return OpaqueBasePass_Shared_Forward_NumLocalLights;

}

#line 120 "/Engine/Private/LightGridCommon.ush"
struct FCulledLightsGridData
{
	uint NumLocalLights;
	uint DataStartIndex;
};

#line 126 "/Engine/Private/LightGridCommon.ush"
FCulledLightsGridData GetCulledLightsGrid(uint GridIndex, uint EyeIndex)
{
	FCulledLightsGridData Result;







		Result.NumLocalLights = min(OpaqueBasePass_Shared_Forward_NumCulledLightsGrid[GridIndex * 2 + 0], OpaqueBasePass_Shared_Forward_NumLocalLights);
		Result.DataStartIndex = OpaqueBasePass_Shared_Forward_NumCulledLightsGrid[GridIndex * 2 + 1];










	return Result;
}

#line 179 "/Engine/Private/LightGridCommon.ush"
FDirectionalLightData GetDirectionalLightData(uint EyeIndex)
{
	FDirectionalLightData Result;






	
		Result.HasDirectionalLight					= OpaqueBasePass_Shared_Forward_HasDirectionalLight;
		Result.DirectionalLightShadowMapChannelMask = OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
		Result.DirectionalLightDistanceFadeMAD		= OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
		Result.DirectionalLightColor				= OpaqueBasePass_Shared_Forward_DirectionalLightColor;
		Result.DirectionalLightDirection			= OpaqueBasePass_Shared_Forward_DirectionalLightDirection;
		Result.DirectionalLightSourceRadius			= OpaqueBasePass_Shared_Forward_DirectionalLightSourceRadius;














	return Result;
}

#line 212 "/Engine/Private/LightGridCommon.ush"
FLocalLightData GetLocalLightData_Internal(
	uint LocalLightIndex,
	uint ClusteredDeferredSupportedEndIndex,
	uint LumenSupportedStartIndex,
	uint SimpleLightsEndIndex,
	float4 InData0, float4 InData1, float4 InData2, float4 InData3, float4 InData4, float4 InData5)
{
	FLocalLightData Out = (FLocalLightData)0;

	Out.bClusteredDeferredSupported				= LocalLightIndex <  ClusteredDeferredSupportedEndIndex;
	Out.bLumenLightSupported					= LocalLightIndex >= LumenSupportedStartIndex;
	Out.bIsSimpleLight							= LocalLightIndex <  SimpleLightsEndIndex;
	Out.LightPositionAndInvRadius				= InData0;
	Out.LightColorAndIdAndFalloffExponent		= InData1;
	Out.LightDirectionAndShadowMask				= InData2;
	Out.SpotAnglesAndSourceRadiusPacked			= InData3;
	Out.LightTangentAndIESDataAndSpecularScale	= InData4;
	Out.RectDataAndVirtualShadowMapId			= InData5;
	Out.VirtualShadowMapId						= int(Out.RectDataAndVirtualShadowMapId.z);
	Out.LightSceneId							= int(Out.LightColorAndIdAndFalloffExponent.z);

	return Out;
}

#line 255 "/Engine/Private/LightGridCommon.ush"
FLocalLightData GetLocalLightData(uint GridIndex, uint EyeIndex)
{
	FLocalLightData Out;






		uint LocalLightIndex = GetCulledLightDataGrid(GridIndex);
		uint LocalLightBaseIndex = LocalLightIndex * 6;

		Out = GetLocalLightData_Internal(
			LocalLightIndex, 
			OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex,
			OpaqueBasePass_Shared_Forward_LumenSupportedStartIndex,
			OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex,
			OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 0],
			OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 1],
			OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 2],
			OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 3],
			OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 4],
			OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer[LocalLightBaseIndex + 5]);
#line 297 "/Engine/Private/LightGridCommon.ush"

	return Out;
}

#line 13 "/Engine/Private/ShadowFilteringCommon.ush"
struct FPCFSamplerSettings
{
	Texture2D		ShadowDepthTexture;
	SamplerState	ShadowDepthTextureSampler;

	
	
	float4			ShadowBufferSize;

	
	float			SceneDepth;

	float			TransitionScale;

	
	bool			bSubsurface;

	
	bool			bTreatMaxDepthUnshadowed;

	
	float			DensityMulConstant;

	
	float2			ProjectionDepthBiasParameters;
};

#line 144 "/Engine/Private/ShadowFilteringCommon.ush"
float PCF1x1(float2 Fraction, float4 Values00)
{
	float2 HorizontalLerp00 = lerp(Values00.wx, Values00.zy, Fraction.xx);

	return lerp(HorizontalLerp00.x, HorizontalLerp00.y, Fraction.y);
}

#line 151 "/Engine/Private/ShadowFilteringCommon.ush"
float4 CalculateOcclusion(float4 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		float4 OccluderDistance = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float4 Occlusion = GetSubSurfaceTransmission(OccluderDistance, Settings.DensityMulConstant);
		
		return  select_internal( ShadowmapDepth > .99f , 1.0f , Occlusion );
	}
	else
	{
		
		
		
		float TransitionScale = Settings.TransitionScale;

		
		
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float4 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

#line 182 "/Engine/Private/ShadowFilteringCommon.ush"
float3 CalculateOcclusion(float3 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{
		
		
		
		float3 Thickness = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float3 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));
		
		return  select_internal( ShadowmapDepth > .99f , 1.0 , Occlusion );
	}
	else
	{
		
		
		
		float TransitionScale = Settings.TransitionScale;

		
		
		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float3 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

#line 334 "/Engine/Private/ShadowFilteringCommon.ush"
float Manual1x1PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;	
	float2 Fraction = frac(TexelPos);

	
	float4 Samples;

	
	
	float2 QuadCenter = floor(TexelPos) + 1.0f;	
	Samples = Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, QuadCenter * Settings.ShadowBufferSize.zw);

	float4 Values00 = CalculateOcclusion(Samples, Settings);
	return PCF1x1(Fraction, Values00);
}

#line 53 "/Engine/Private/ForwardShadowingCommon.ush"
uint GetForwardLightingCascadeIndex(float4 CascadeEndDepths, float SceneDepth)
{
	float4 Count = float4(SceneDepth.xxxx >= CascadeEndDepths);
	return uint(Count.x + Count.y + Count.z + Count.w);
}

#line 59 "/Engine/Private/ForwardShadowingCommon.ush"
float ComputeDirectionalLightDynamicShadowing(float3 TranslatedWorldPosition, float SceneDepth, inout bool bShadowingFromValidUVArea)
{
	float ShadowFactor = 1;
	bShadowingFromValidUVArea = false;

	const uint NumCascades = OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;
	if (NumCascades > 0)
	{
		uint CascadeIndex = GetForwardLightingCascadeIndex(OpaqueBasePass_Shared_Forward_CascadeEndDepths, SceneDepth);
		if (CascadeIndex < NumCascades)
		{
			
			float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPosition, 1), OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[CascadeIndex]);
			float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
			float4 ShadowmapMinMax = OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[CascadeIndex];

			
			if (all( and_internal( ShadowUVs >= ShadowmapMinMax.xy , ShadowUVs <= ShadowmapMinMax.zw )))
			{
			
				FPCFSamplerSettings Settings;
				Settings.ShadowDepthTexture = OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;
				Settings.ShadowDepthTextureSampler = OpaqueBasePass_Shared_Forward_ShadowmapSampler;
				Settings.ShadowBufferSize = OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
				Settings.SceneDepth = 1 - HomogeneousShadowPosition.z;
				Settings.TransitionScale = 4000;
				Settings.bSubsurface = false;
				Settings.bTreatMaxDepthUnshadowed = false;
				Settings.DensityMulConstant = 0;
				Settings.ProjectionDepthBiasParameters = float2(0, 0);

				ShadowFactor = Manual1x1PCF(ShadowUVs, Settings);
			





				
				bShadowingFromValidUVArea = true;
			}
		}
	}

	return ShadowFactor;
}

#line 43 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
bool IsSinglePageVirtualShadowMap(int VirtualShadowMapId)
{
	return VirtualShadowMapId < (1024U * 8U);
}

#line 59 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcLog2LevelDimsPages(uint Level)
{
	return 7 - Level;	
}

#line 69 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcLevelDimsTexels(uint Level)
{
	return uint(16384) >> Level;
}

#line 74 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcLevelOffsets(uint Level)
{
	
	
	
	
	
	
	
	
	
	
	

	
	uint NumBits = Level << 1;
	uint StartBit = (2 * 7 + 2) - NumBits;



	uint Mask = ((1u << NumBits) - 1u) << StartBit;


	return 0x55555555u & Mask;
}

#line 101 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
struct FVirtualSMLevelOffset
{
	bool bIsSinglePageSM;
	uint LevelOffset;
};

#line 121 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcFullPageTableLevelOffset(uint VirtualShadowMapId, uint Level)
{
	 { };
	return (1024U * 8U) + (VirtualShadowMapId - (1024U * 8U)) * 21845 + CalcLevelOffsets(Level);
}

#line 147 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcPageOffsetInFullLevel(uint Level, uint2 PageAddress)
{
	return PageAddress.x + (PageAddress.y << CalcLog2LevelDimsPages(Level));
}

#line 154 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcPageOffset(FVirtualSMLevelOffset LevelOffset, uint Level, uint2 PageAddress)
{
	 { };
	uint Result = LevelOffset.LevelOffset;

	if (!LevelOffset.bIsSinglePageSM)
	{
		Result += CalcPageOffsetInFullLevel(Level, PageAddress);
	}

	return Result;
}

#line 167 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
uint CalcPageOffset(uint VirtualShadowMapId, uint Level, uint2 PageAddress)
{
	
	if (IsSinglePageVirtualShadowMap(VirtualShadowMapId))
	{
		
		
		
		
		
		return VirtualShadowMapId;
	}
	
	return CalcFullPageTableLevelOffset(VirtualShadowMapId, Level) + CalcPageOffsetInFullLevel(Level, PageAddress);
}

#line 210 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
struct FShadowPhysicalPage
{
	uint2 PhysicalAddress;	
	uint LODOffset;			
	bool bAnyLODValid;		
	bool bThisLODValid;		
};

#line 230 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
FShadowPhysicalPage ShadowDecodePageTable(uint Value)
{
	FShadowPhysicalPage Result;
	Result.PhysicalAddress = uint2(Value & 0x3FF, (Value >> 10) & 0x3FF);
	Result.LODOffset = (Value >> 20) & 0x3F;
	Result.bAnyLODValid = (Value & 0x8000000) != 0;
	Result.bThisLODValid = Result.bAnyLODValid && Result.LODOffset == 0;
	return Result;
}

#line 240 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
FShadowPhysicalPage ShadowGetPhysicalPage(uint PageOffset)
{
	return ShadowDecodePageTable(VirtualShadowMap_PageTable[PageOffset]);
}

#line 260 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
struct FShadowPageTranslationResult
{
	bool bValid;
	uint LODOffset;
	uint2 VirtualTexelAddress;
	float2 VirtualTexelAddressFloat;
	uint2 PhysicalTexelAddress;
};

#line 270 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapPageAccessCommon.ush"
FShadowPageTranslationResult ShadowVirtualToPhysicalUV(uint VirtualShadowMapID, float2 ShadowMapUV)
{
	uint2 vPage = uint2(ShadowMapUV * 128);
	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(VirtualShadowMapID, 0, vPage));

	FShadowPageTranslationResult Result;
	Result.bValid = PhysicalPageEntry.bAnyLODValid;
	Result.LODOffset = IsSinglePageVirtualShadowMap(VirtualShadowMapID) ? (8 - 1U) : PhysicalPageEntry.LODOffset;
	
	Result.VirtualTexelAddressFloat = ShadowMapUV * float(CalcLevelDimsTexels(Result.LODOffset));
	Result.VirtualTexelAddress = uint2(Result.VirtualTexelAddressFloat);
	Result.PhysicalTexelAddress = PhysicalPageEntry.PhysicalAddress * 128 + (Result.VirtualTexelAddress & 127);

	return Result;
}

#line 9 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionStructs.ush"
struct FVirtualShadowMapProjectionShaderData
{
	float4x4 TranslatedWorldToShadowViewMatrix;
	float4x4 ShadowViewToClipMatrix;
	float4x4 TranslatedWorldToShadowUVMatrix;
	float4x4 TranslatedWorldToShadowUVNormalMatrix;

	FLWCVector3 PreViewTranslation;
	
	uint LightType;		
	float LightSourceRadius;

	FLWCVector3 ClipmapWorldOrigin;
	float ResolutionLodBias;

	int2 ClipmapCornerRelativeOffset;
	int ClipmapLevel;					
	int ClipmapLevelCountRemaining;		

	uint Flags;
	float LightRadius;

	
	int VirtualShadowMapId;	
	bool bCurrentDistantLight; 
	bool bUnCached; 
};

#line 37 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionStructs.ush"
FVirtualShadowMapProjectionShaderData DecodeVirtualShadowMapProjectionData(ByteAddressBuffer ProjectionData, int VirtualShadowMapId)
{
	FVirtualShadowMapProjectionShaderData Result;
	Result.VirtualShadowMapId = VirtualShadowMapId;

	
	const uint Stride = 16 * 21;
	const uint Base = VirtualShadowMapId * Stride;

	Result.TranslatedWorldToShadowViewMatrix[0]		= asfloat(ProjectionData.Load4(Base + 16*0));
	Result.TranslatedWorldToShadowViewMatrix[1]		= asfloat(ProjectionData.Load4(Base + 16*1));
	Result.TranslatedWorldToShadowViewMatrix[2]		= asfloat(ProjectionData.Load4(Base + 16*2));
	Result.TranslatedWorldToShadowViewMatrix[3]		= asfloat(ProjectionData.Load4(Base + 16*3));
	Result.ShadowViewToClipMatrix[0]				= asfloat(ProjectionData.Load4(Base + 16*4));
	Result.ShadowViewToClipMatrix[1]				= asfloat(ProjectionData.Load4(Base + 16*5));
	Result.ShadowViewToClipMatrix[2]				= asfloat(ProjectionData.Load4(Base + 16*6));
	Result.ShadowViewToClipMatrix[3]				= asfloat(ProjectionData.Load4(Base + 16*7));
	Result.TranslatedWorldToShadowUVMatrix[0]		= asfloat(ProjectionData.Load4(Base + 16*8));
	Result.TranslatedWorldToShadowUVMatrix[1]		= asfloat(ProjectionData.Load4(Base + 16*9));
	Result.TranslatedWorldToShadowUVMatrix[2]		= asfloat(ProjectionData.Load4(Base + 16*10));
	Result.TranslatedWorldToShadowUVMatrix[3]		= asfloat(ProjectionData.Load4(Base + 16*11));
	Result.TranslatedWorldToShadowUVNormalMatrix[0]	= asfloat(ProjectionData.Load4(Base + 16*12));
	Result.TranslatedWorldToShadowUVNormalMatrix[1]	= asfloat(ProjectionData.Load4(Base + 16*13));
	Result.TranslatedWorldToShadowUVNormalMatrix[2]	= asfloat(ProjectionData.Load4(Base + 16*14));
	Result.TranslatedWorldToShadowUVNormalMatrix[3]	= asfloat(ProjectionData.Load4(Base + 16*15));

	
	
	 
	float3 PreViewTranslationTile			= asfloat(ProjectionData.Load3(Base + (16*16 + 4*0)));
	Result.LightType						=		 (ProjectionData.Load (Base + (16*16 + 4*3)));

	float3 PreViewTranslationOffset			= asfloat(ProjectionData.Load3(Base + (16*17 + 4*0)));
	Result.LightSourceRadius				= asfloat(ProjectionData.Load (Base + (16*17 + 4*3)));

	float3 NegativeClipmapWorldOriginOffset = asfloat(ProjectionData.Load3(Base + (16*18 + 4*0)));
	Result.ResolutionLodBias				= asfloat(ProjectionData.Load (Base + (16*18 + 4*3)));
		
	Result.ClipmapCornerRelativeOffset		= asint  (ProjectionData.Load2(Base + (16*19 + 4*0)));
	Result.ClipmapLevel						= asint  (ProjectionData.Load (Base + (16*19 + 4*2)));
	Result.ClipmapLevelCountRemaining		= asint  (ProjectionData.Load (Base + (16*19 + 4*3)));

	Result.Flags 							= asuint (ProjectionData.Load (Base + (16*20 + 4*0)));
	Result.LightRadius 						= asfloat(ProjectionData.Load (Base + (16*20 + 4*1)));

	Result.PreViewTranslation				= MakeLWCVector3(PreViewTranslationTile, PreViewTranslationOffset);
	Result.ClipmapWorldOrigin				= LWCNegate(MakeLWCVector3(PreViewTranslationTile, NegativeClipmapWorldOriginOffset));

	Result.bCurrentDistantLight = (Result.Flags & (1U << 0)) != 0U;
	Result.bUnCached = (Result.Flags & (1U << 1)) != 0U;

	return Result;
}

#line 91 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionStructs.ush"
FVirtualShadowMapProjectionShaderData GetVirtualShadowMapProjectionData(int VirtualShadowMapId)
{
	return DecodeVirtualShadowMapProjectionData(VirtualShadowMap_ProjectionData, VirtualShadowMapId);
}

#line 20 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float CalcAbsoluteClipmapLevel(FVirtualShadowMapProjectionShaderData BaseProjectionData, FLWCVector3 WorldPosition)
{
	float DistanceToClipmapOrigin = length(LWCToFloat(LWCSubtract(WorldPosition, BaseProjectionData.ClipmapWorldOrigin)));
	return log2(DistanceToClipmapOrigin);
}

#line 26 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
int CalcClipmapLevel(FVirtualShadowMapProjectionShaderData BaseProjectionData, FLWCVector3 WorldPosition)
{
	float BiasedLevel = CalcAbsoluteClipmapLevel(BaseProjectionData, WorldPosition) + BaseProjectionData.ResolutionLodBias;
	return int(floor(BiasedLevel));
}

#line 58 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
struct FVirtualShadowMapSample
{
	float Depth;
	uint MipLevel;
	int VirtualShadowMapId;		
	bool bValid;
	uint2 VirtualTexelAddress;
	float2 VirtualTexelAddressFloat;
	uint2 PhysicalTexelAddress;
};

#line 69 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSample InitVirtualShadowMapSample()
{
	FVirtualShadowMapSample Result;
	Result.Depth = 0.0f;
	Result.MipLevel = 0;
	Result.VirtualShadowMapId = -1; 
	Result.bValid = false;
	Result.VirtualTexelAddress = Result.PhysicalTexelAddress = uint2(0U, 0U);
	Result.VirtualTexelAddressFloat = float2(0.0f, 0.0f);
	return Result;
}

#line 81 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float SampleVirtualShadowMapPhysicalDepth(uint2 PhysicalTexelAddress)
{
	return asfloat(VirtualShadowMap_PhysicalPagePool.Load(uint4(PhysicalTexelAddress, 0, 0)));
}

#line 105 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSample SampleVirtualShadowMap(int VirtualShadowMapId, float2 ShadowMapUV)
{
	FShadowPageTranslationResult Page = ShadowVirtualToPhysicalUV(VirtualShadowMapId, ShadowMapUV);
	if (Page.bValid)
	{
		FVirtualShadowMapSample Result = InitVirtualShadowMapSample();
		Result.bValid = true;
		Result.MipLevel = Page.LODOffset;
		Result.VirtualShadowMapId = VirtualShadowMapId;
		Result.VirtualTexelAddress = Page.VirtualTexelAddress;
		Result.VirtualTexelAddressFloat = Page.VirtualTexelAddressFloat;
		Result.PhysicalTexelAddress = Page.PhysicalTexelAddress;
		Result.Depth = SampleVirtualShadowMapPhysicalDepth(Result.PhysicalTexelAddress);
		return Result;
	}

	return InitVirtualShadowMapSample();
}

#line 126 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
struct FVirtualShadowMapClipmapRelativeTransform
{
	float Scale;
	float3 Bias;
};

#line 135 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapClipmapRelativeTransform CalcClipmapRelativeTransform(int ClipmapId, int LevelOffset)
{
	const FVirtualShadowMapProjectionShaderData ProjectionDataA = GetVirtualShadowMapProjectionData(ClipmapId);
	const FVirtualShadowMapProjectionShaderData ProjectionDataB = GetVirtualShadowMapProjectionData(ClipmapId + LevelOffset);

	float2 OffsetA = float2(ProjectionDataA.ClipmapCornerRelativeOffset);
	float2 OffsetB = float2(ProjectionDataB.ClipmapCornerRelativeOffset);

	FVirtualShadowMapClipmapRelativeTransform Result;
	Result.Scale = LevelOffset >= 0 ? rcp(float(1U << LevelOffset)) : float(1U << (-LevelOffset));
	Result.Bias.xy = 0.25f * (OffsetB - Result.Scale * OffsetA);

	
	float OffsetZA = ProjectionDataA.ShadowViewToClipMatrix[3][2];
	float OffsetZB = ProjectionDataB.ShadowViewToClipMatrix[3][2];
	Result.Bias.z = OffsetZB - Result.Scale * OffsetZA;

	return Result;
}

#line 158 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
uint2 CalcClipmapOffsetLevelPage(uint2 BasePage, int ClipmapId, uint LevelOffset)
{
	const FVirtualShadowMapProjectionShaderData ProjectionDataA = GetVirtualShadowMapProjectionData(ClipmapId);
	const FVirtualShadowMapProjectionShaderData ProjectionDataB = GetVirtualShadowMapProjectionData(ClipmapId + LevelOffset);

	const int OffsetScale = (128 >> 2);
	int2 BasePageOffset  = OffsetScale * ProjectionDataA.ClipmapCornerRelativeOffset;
	int2 LevelPageOffset = OffsetScale * ProjectionDataB.ClipmapCornerRelativeOffset;
	return (BasePage - BasePageOffset + (LevelPageOffset << LevelOffset)) >> LevelOffset;
}

#line 171 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSample SampleVirtualShadowMapClipmap(int VirtualShadowMapId, float2 ShadowMapUV)
{
	FVirtualShadowMapSample Result = InitVirtualShadowMapSample();



	uint2 BasePage = uint2(ShadowMapUV * 128);
	FShadowPhysicalPage PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(VirtualShadowMapId, 0, BasePage));
	if (PhysicalPageEntry.bAnyLODValid)
	{	
		uint ClipmapLevelOffset = PhysicalPageEntry.LODOffset;
		int ClipmapLevelId = VirtualShadowMapId + ClipmapLevelOffset;

		Result.VirtualTexelAddressFloat = ShadowMapUV * float(CalcLevelDimsTexels(0));
		Result.VirtualTexelAddress = uint2(Result.VirtualTexelAddressFloat);
		float DepthLevelScale = 1.0f;
		float DepthLevelBias = 0.0f;

		
		if (ClipmapLevelOffset > 0)
		{
			
			
			uint2 vPage = CalcClipmapOffsetLevelPage(BasePage, VirtualShadowMapId, ClipmapLevelOffset);
			uint2 VirtualTexelAddressMin = vPage * 128;
			uint2 VirtualTexelAddressMax = VirtualTexelAddressMin + (128 - 1);

			FVirtualShadowMapClipmapRelativeTransform Transform = CalcClipmapRelativeTransform(VirtualShadowMapId, ClipmapLevelOffset);
			float2 ClipmapUV = ShadowMapUV * Transform.Scale + Transform.Bias.xy;
			DepthLevelScale = Transform.Scale;
			DepthLevelBias = Transform.Bias.z;

			
			Result.VirtualTexelAddressFloat = ClipmapUV * float(CalcLevelDimsTexels(0));
			Result.VirtualTexelAddress = clamp(uint2(Result.VirtualTexelAddressFloat), VirtualTexelAddressMin, VirtualTexelAddressMax);

			PhysicalPageEntry = ShadowGetPhysicalPage(CalcPageOffset(ClipmapLevelId, 0, vPage));
		}

		
		if (PhysicalPageEntry.bThisLODValid)
		{
			Result.PhysicalTexelAddress = 
				PhysicalPageEntry.PhysicalAddress * 128 +
				(Result.VirtualTexelAddress & 127);

			
			Result.Depth = (SampleVirtualShadowMapPhysicalDepth(Result.PhysicalTexelAddress) - DepthLevelBias) / DepthLevelScale;
			Result.MipLevel = 0;
			Result.VirtualShadowMapId = ClipmapLevelId;
			Result.bValid = true;
		}
	}
#line 239 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"


	return Result;
}

#line 244 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float ComputeVirtualShadowMapOptimalSlopeBias(
	
	int RequestedVirtualShadowMapId,
	FVirtualShadowMapSample SmSample,
	float3 TranslatedWorldPosition,
	float3 EstimatedGeoWorldNormal,
	bool bClamp = true)
{
	FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(SmSample.VirtualShadowMapId);

	
	float4 NormalPlaneTranslatedWorld = float4(EstimatedGeoWorldNormal, -dot(EstimatedGeoWorldNormal, TranslatedWorldPosition));
	float4 NormalPlaneUV = mul(NormalPlaneTranslatedWorld, ProjectionData.TranslatedWorldToShadowUVNormalMatrix);

	float2 DepthSlopeUV = -NormalPlaneUV.xy / NormalPlaneUV.z;
	float MipLevelDim = float(CalcLevelDimsTexels(SmSample.MipLevel));
	float2 TexelCenter = float2(SmSample.VirtualTexelAddress) + 0.5f;
	float2 TexelCenterOffset = TexelCenter - SmSample.VirtualTexelAddressFloat;
	float2 TexelCenterOffsetUV = TexelCenterOffset / MipLevelDim;
	
	float OptimalSlopeBias = 2.0f * max(0.0f, dot(DepthSlopeUV, TexelCenterOffsetUV));
	
	
	OptimalSlopeBias = bClamp ? min(OptimalSlopeBias, abs(100.0f * ProjectionData.ShadowViewToClipMatrix._33)) : OptimalSlopeBias;

	
	
	
	OptimalSlopeBias *= float(1u << (SmSample.VirtualShadowMapId - RequestedVirtualShadowMapId));

	return OptimalSlopeBias;
}

#line 279 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float ComputeOccluderDistanceOrtho(float4x4 ShadowViewToClip, float OccluderDepth, float ReceiverDepth)
{
	float OccluderViewZ = (OccluderDepth - ShadowViewToClip._43) / ShadowViewToClip._33;
	float ReceiverViewZ = (ReceiverDepth - ShadowViewToClip._43) / ShadowViewToClip._33;

	
	float Result = ReceiverViewZ - OccluderViewZ;
	return max(1e-6f, Result);
}

#line 291 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
float ComputeOccluderDistancePerspective(float4x4 ShadowViewToClip, float OccluderDepth, float ReceiverDepth, float ReceiverDistance)
{
	float OccluderViewZ = ShadowViewToClip._43 / (OccluderDepth - ShadowViewToClip._33);
	float ReceiverViewZ = ShadowViewToClip._43 / (ReceiverDepth - ShadowViewToClip._33);

	
	float OccluderDistance = (ReceiverDistance / ReceiverViewZ) * OccluderViewZ;
	float Result = ReceiverDistance - OccluderDistance;	
	return max(1e-6f, Result);
}

#line 302 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
uint VirtualShadowMapGetCubeFace( float3 Dir )
{
	
	if( abs(Dir.x) >= abs(Dir.y) && abs(Dir.x) >= abs(Dir.z) )
		return Dir.x > 0 ? 0 : 1;
	else if( abs(Dir.y) > abs(Dir.z) )
		return Dir.y > 0 ? 2 : 3;
	else
		return Dir.z > 0 ? 4 : 5;
}

#line 313 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
struct FVirtualShadowMapSampleResult
{
	bool bValid;
	float ShadowFactor;	
	float OccluderDistance;

	
	uint ClipmapIndexOrMipLevel;
	uint RayCount;
	uint2 VirtualTexelAddress;
	uint2 PhysicalTexelAddress;
	float3 GeneralDebug;		
};

#line 328 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult InitVirtualShadowMapSampleResult()
{
	FVirtualShadowMapSampleResult Result;
	Result.bValid = false;
	Result.ShadowFactor = 1.0f;
	Result.OccluderDistance = -1.0f;
	Result.ClipmapIndexOrMipLevel = 0;
	Result.VirtualTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.PhysicalTexelAddress = uint2(0xFFFFFFFF, 0xFFFFFFFF);
	Result.RayCount = 0;
	Result.GeneralDebug = float3(0, 0, 0);
	return Result;
}

#line 355 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMapInner(int VirtualShadowMapId, FLWCVector3 WorldPosition, float RayStartDistance, bool bUseOptimalBias, float3 EstimatedGeoWorldNormal)
{
	RayStartDistance = max(RayStartDistance, 0.0f);

	FVirtualShadowMapProjectionShaderData BaseProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);

	if (BaseProjectionData.LightType == 0)
	{
		const int FirstClipmapLevel = BaseProjectionData.ClipmapLevel;
		const int ClipmapLevel = CalcClipmapLevel(BaseProjectionData, WorldPosition);
		int ClipmapIndex = max(0, ClipmapLevel - FirstClipmapLevel);

		
		if (ClipmapIndex < BaseProjectionData.ClipmapLevelCountRemaining)
		{
			int ClipmapLevelVirtualShadowMapId = VirtualShadowMapId + ClipmapIndex;
			FVirtualShadowMapProjectionShaderData ProjectionData = GetVirtualShadowMapProjectionData(ClipmapLevelVirtualShadowMapId);

			
			float3 ShadowTranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ProjectionData.PreViewTranslation));
			float4 ShadowUVz = mul(float4(ShadowTranslatedWorldPosition, 1.0f), ProjectionData.TranslatedWorldToShadowUVMatrix);
			
			FVirtualShadowMapSample SmSample;
			SmSample = SampleVirtualShadowMapClipmap(ClipmapLevelVirtualShadowMapId, ShadowUVz.xy);
			
			if (SmSample.bValid)
			{
				int SampledClipmapIndex = SmSample.VirtualShadowMapId - VirtualShadowMapId;

				FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();
				Result.bValid = true;
				Result.ShadowFactor = 1.0f;
				Result.OccluderDistance = -1.0f;
				Result.ClipmapIndexOrMipLevel = ClipmapIndex;
				Result.VirtualTexelAddress = SmSample.VirtualTexelAddress;
				Result.PhysicalTexelAddress = SmSample.PhysicalTexelAddress;
				Result.RayCount = 1;

				float OptimalSlopeBias = bUseOptimalBias 
					? ComputeVirtualShadowMapOptimalSlopeBias(ClipmapLevelVirtualShadowMapId, SmSample, ShadowTranslatedWorldPosition, EstimatedGeoWorldNormal)
					: 0.0f;
				
				float RayStartBias = -RayStartDistance * ProjectionData.ShadowViewToClipMatrix._33;
				float BiasedDepth = SmSample.Depth - OptimalSlopeBias - RayStartBias;

				if (BiasedDepth > ShadowUVz.z)
				{
					Result.ShadowFactor = 0.0f;
					Result.OccluderDistance = ComputeOccluderDistanceOrtho(
						ProjectionData.ShadowViewToClipMatrix,
						SmSample.Depth,
						ShadowUVz.z);
				}

				return Result;
			}
		}
	}
	else
	{
		float3 ShadowTranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, BaseProjectionData.PreViewTranslation));

		if (BaseProjectionData.LightType != 2)
		{
			VirtualShadowMapId += VirtualShadowMapGetCubeFace(ShadowTranslatedWorldPosition);
			BaseProjectionData = GetVirtualShadowMapProjectionData(VirtualShadowMapId);
		}

		
		float4 ShadowUVz = mul(float4(ShadowTranslatedWorldPosition, 1.0f), BaseProjectionData.TranslatedWorldToShadowUVMatrix);
		ShadowUVz.xyz /= ShadowUVz.w;

		FVirtualShadowMapSample SmSample = SampleVirtualShadowMap(VirtualShadowMapId, ShadowUVz.xy);
		if (SmSample.bValid)
		{
			FVirtualShadowMapSampleResult Result = InitVirtualShadowMapSampleResult();
			Result.bValid = true;
			Result.ShadowFactor = 1.0f;
			Result.OccluderDistance = -1.0f;
			Result.ClipmapIndexOrMipLevel = SmSample.MipLevel;
			Result.VirtualTexelAddress = SmSample.VirtualTexelAddress;
			Result.PhysicalTexelAddress = SmSample.PhysicalTexelAddress;
			Result.RayCount = 1;

			float OptimalSlopeBias = bUseOptimalBias 
				? ComputeVirtualShadowMapOptimalSlopeBias(VirtualShadowMapId, SmSample, ShadowTranslatedWorldPosition, EstimatedGeoWorldNormal)
				: 0.0f;

			float RayStartBias = -RayStartDistance * BaseProjectionData.ShadowViewToClipMatrix._33 / ShadowUVz.w;
			float BiasedDepth = SmSample.Depth - OptimalSlopeBias - RayStartBias;

			if (BiasedDepth > ShadowUVz.z)
			{
				Result.ShadowFactor = 0.0f;
				
				float ReceiverDistance = length(ShadowTranslatedWorldPosition);
				Result.OccluderDistance = RayStartDistance + ComputeOccluderDistancePerspective(
					BaseProjectionData.ShadowViewToClipMatrix,
					SmSample.Depth,
					ShadowUVz.z,
					ReceiverDistance);
			}

			return Result;
		}
	}

	
	return InitVirtualShadowMapSampleResult();
}

#line 467 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMap(int VirtualShadowMapId, FLWCVector3 WorldPosition, float RayStartDistance, float3 EstimatedGeoWorldNormal)
{
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, true, EstimatedGeoWorldNormal);
}

#line 471 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMap(int VirtualShadowMapId, FLWCVector3 WorldPosition, float RayStartDistance = 0.0f)
{
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, false, float3(0, 0, 0));
}

#line 477 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMapTranslatedWorld(int VirtualShadowMapId, float3 TranslatedWorldPosition, float RayStartDistance, float3 EstimatedGeoWorldNormal)
{
	FLWCVector3 WorldPosition = LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, true, EstimatedGeoWorldNormal);
}

#line 482 "/Engine/Private/VirtualShadowMaps/VirtualShadowMapProjectionCommon.ush"
FVirtualShadowMapSampleResult SampleVirtualShadowMapTranslatedWorld(int VirtualShadowMapId, float3 TranslatedWorldPosition, float RayStartDistance = 0.0f)
{
	FLWCVector3 WorldPosition = LWCSubtract(TranslatedWorldPosition, GetPrimaryView().PreViewTranslation);
	return SampleVirtualShadowMapInner(VirtualShadowMapId, WorldPosition, RayStartDistance, false, float3(0, 0, 0));
}

#line 97 "/Engine/Private/ForwardLightingCommon.ush"
float4 GetForwardDynamicShadowFactors(float2 ScreenUV)
{
	int2 IntScreenUV = int2(trunc(ScreenUV * View_BufferSizeAndInvSize.xy));
	float4 Value = 1.0f;
	
	[branch]
	if (OpaqueBasePass_UseForwardScreenSpaceShadowMask)
	{
		Value = OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture.Load(int3(IntScreenUV, 0));
	}
	return DecodeLightAttenuation(Value);
}

#line 126 "/Engine/Private/ForwardLightingCommon.ush"
FDeferredLightingSplit GetForwardDirectLightingSplit(
	uint2 PixelPos,
	uint GridIndex, float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBufferData, float2 ScreenUV, uint PrimitiveId, uint EyeIndex, float Dither, 
	float InDirectionalLightCloudShadow, float3 InDirectionalLightAtmosphereTransmittance, inout float OutDirectionalLightShadow,
	bool bSeparateMainDirLightLuminance, inout float3 SeparatedMainDirLightLuminance, bool bSkipDirLightVirtualShadowMapEvaluation)
{
	float3 WorldPosition = TranslatedWorldPosition -  LWCToFloat( GetPrimaryView().PreViewTranslation );

	float4 DynamicShadowFactors = 1;

	
		DynamicShadowFactors = GetForwardDynamicShadowFactors(ScreenUV);
	

	FDeferredLightingSplit DirectLighting;
	DirectLighting.DiffuseLighting = 0;
	DirectLighting.SpecularLighting = 0;

	float SpecularScale = 1;





	uint LightingChannelMask = GetPrimitive_LightingChannelMask(PrimitiveId);

	const FDirectionalLightData DirectionalLightData = GetDirectionalLightData(EyeIndex);

	[branch]
	if (DirectionalLightData.HasDirectionalLight)
	{
		float4 PreviewShadowMapChannelMask = 1;
		uint  DirLightingChannelMask = 0x7;
		FDeferredLightData LightData = ConvertToDeferredLight(DirectionalLightData, SpecularScale, PreviewShadowMapChannelMask, DirLightingChannelMask);
		






		
		
#line 180 "/Engine/Private/ForwardLightingCommon.ush"

			LightData.ShadowedBits = 1;
			LightData.ShadowMapChannelMask.x = 1;
			


				GBufferData.PrecomputedShadowFactors.x = 1;
			
			bool bUnused = false;
			float DynamicShadowFactor = ComputeDirectionalLightDynamicShadowing(TranslatedWorldPosition, GBufferData.Depth, bUnused);
			
			
			[branch]
			if ( !bSkipDirLightVirtualShadowMapEvaluation && OpaqueBasePass_Shared_Forward_DirectionalLightVSM != -1 )
			{
				
#line 225 "/Engine/Private/ForwardLightingCommon.ush"

				{
					FVirtualShadowMapSampleResult VirtualShadowMapSample = SampleVirtualShadowMapTranslatedWorld( OpaqueBasePass_Shared_Forward_DirectionalLightVSM, TranslatedWorldPosition );
					DynamicShadowFactor *= VirtualShadowMapSample.ShadowFactor;
				}
				
			}
			

			float4 LightAttenuation = float4(DynamicShadowFactor.x, DynamicShadowFactor.x, 1, 1);
		

		FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, GBufferData.ShadingModelID, LightData, LightAttenuation, Dither, uint2(0,0), OutDirectionalLightShadow);

		[flatten]
		if (DirLightingChannelMask & LightingChannelMask)
		{
		




			NewLighting.DiffuseLighting.rgb *= InDirectionalLightAtmosphereTransmittance;
			NewLighting.SpecularLighting.rgb *= InDirectionalLightAtmosphereTransmittance;

			if (bSeparateMainDirLightLuminance)
			{
				SeparatedMainDirLightLuminance += NewLighting.DiffuseLighting.rgb;
				SeparatedMainDirLightLuminance += NewLighting.SpecularLighting.rgb;
			}
			else
			{
				DirectLighting.DiffuseLighting += NewLighting.DiffuseLighting;
				DirectLighting.SpecularLighting += NewLighting.SpecularLighting;
			}
		}
	}



	const FCulledLightsGridData CulledLightsGrid = GetCulledLightsGrid(GridIndex, EyeIndex);

	
	
	
	const uint NumLocalLights = min(CulledLightsGrid.NumLocalLights, GetNumLocalLights(EyeIndex));

	[loop]
	for (uint LocalLightListIndex = 0; LocalLightListIndex < NumLocalLights; LocalLightListIndex++)
	{
		float4 PreviewShadowMapChannelMask = 1;
		uint  LocalLightingChannelMask = 0x7;
		const FLocalLightData LocalLight = GetLocalLightData(CulledLightsGrid.DataStartIndex + LocalLightListIndex, EyeIndex);
		FDeferredLightData LightData = ConvertToDeferredLight(LocalLight, SpecularScale, PreviewShadowMapChannelMask, LocalLightingChannelMask);
		
		LightData.bRectLight = LightData.bRectLight && 0;
		






		float DynamicShadowing = dot(PreviewShadowMapChannelMask, DynamicShadowFactors);
		float4 LightAttenuation = float4(1, 1, DynamicShadowing.x, DynamicShadowing.x);
		float SurfaceShadow = 1.0f;
		FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, GBufferData.ShadingModelID, LightData, LightAttenuation, Dither, uint2(0,0), SurfaceShadow);

		[flatten]
		if (LocalLightingChannelMask & LightingChannelMask)
		{
			DirectLighting.DiffuseLighting += NewLighting.DiffuseLighting;
			DirectLighting.SpecularLighting += NewLighting.SpecularLighting;
		}
	}



	
	if (OpaqueBasePass_Shared_Forward_DirectLightingShowFlag == 0)
	{
		DirectLighting.DiffuseLighting = 0.0f;
		DirectLighting.SpecularLighting = 0.0f;
	}

	return DirectLighting;
}

#line 20 "/Engine/Private/Strata/StrataExport.ush"
FShadingOcclusion ApplyBentNormal(
	in float3 CameraVector,
	in float3 WorldNormal,
	in float3 WorldBentNormal0,
	in float Roughness,
	in float MaterialAO);

#line 27 "/Engine/Private/Strata/StrataExport.ush"
void GetPrecomputedIndirectLightingAndSkyLight(
	FMaterialPixelParameters MaterialParameters,
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	float LightmapVTPageTableResult,
	bool bEvaluateBackface,
	float3 DiffuseDir,
	float3 VolumetricLightmapBrickTextureUVs,
	out float3 OutDiffuseLighting,
	out float3 OutSubsurfaceLighting,
	out float OutIndirectIrradiance);

#line 39 "/Engine/Private/Strata/StrataExport.ush"
float3 StrataGetBSDFPrecomputedLighting(
	in FStrataIntegrationSettings Settings,
	in FStrataPixelHeader StrataPixelHeader,
	in FStrataBSDF CurrentBSDF,
	in float3 V,
	in float3 WorldBentNormal0,
	in FMaterialPixelParameters MaterialParameters,
	in FVertexFactoryInterpolantsVSToPS Interpolants,
	in FSharedBasePassInterpolants BasePassInterpolants,
	in float LightmapVTPageTableResult,
	in float3 VolumetricLightmapBrickTextureUVs,
	inout float2 SpecMultiBounceAO_IndirectIrradiance)
{
	FStrataAddressing NullStrataAddressing = (FStrataAddressing)0;
	FStrataBSDFContext StrataBSDFContext = StrataCreateBSDFContext(StrataPixelHeader, CurrentBSDF, NullStrataAddressing, V);

	
	FShadingOcclusion ShadingOcclusion = ApplyBentNormal(
		V,
		StrataBSDFContext.N,
		WorldBentNormal0,
		StrataGetBSDFRoughness(CurrentBSDF),
		StrataPixelHeader.IrradianceAO.MaterialAO);

	
	FStrataBSDFContext EnvBSDFContext = StrataBSDFContext;
	EnvBSDFContext.N = ShadingOcclusion.BentNormal;
	EnvBSDFContext.StrataUpdateBSDFContext(EnvBSDFContext.L);

	
	float DiffuseEnvLightingNoL = 1.0f;
	float3 LuminanceWeightFinal = LuminanceWeight(DiffuseEnvLightingNoL, CurrentBSDF);

	
	const bool bEnableSpecular = false;
	FStrataEnvLightResult StrataEnvLight = StrataEvaluateForEnvLight(EnvBSDFContext, bEnableSpecular, Settings);

	
	float3 DiffuseLighting = 0.0f;
	float3 SubsurfaceLighting = 0.0f;
	float  IndirectIrradiance = 0.0f;
	const bool bEvaluateBackface = any(StrataEnvLight.DiffuseBackFaceWeight > 0.0);	
	GetPrecomputedIndirectLightingAndSkyLight(MaterialParameters, Interpolants, BasePassInterpolants, LightmapVTPageTableResult, bEvaluateBackface, StrataEnvLight.DiffuseNormal, VolumetricLightmapBrickTextureUVs,
		DiffuseLighting, SubsurfaceLighting, IndirectIrradiance);

	const float3 DiffMultiBounceAO = AOMultiBounce(StrataEnvLight.DiffuseColor, ShadingOcclusion.DiffOcclusion);
	SpecMultiBounceAO_IndirectIrradiance.x = AOMultiBounce(Luminance(StrataEnvLight.SpecularColor), ShadingOcclusion.SpecOcclusion).g;
	SpecMultiBounceAO_IndirectIrradiance.y = IndirectIrradiance;

	
	float3 OutLuminance = (DiffuseLighting * StrataEnvLight.DiffuseWeight + SubsurfaceLighting * StrataEnvLight.DiffuseBackFaceWeight) * LuminanceWeightFinal * DiffMultiBounceAO;

	return OutLuminance;
}

#line 97 "/Engine/Private/Strata/StrataExport.ush"
void PackStrataOut(
	inout FRWStrataMaterialContainerStruct StrataBuffer,

	RWTexture2DArray<uint> ExtraMaterialDataUAV,

	float Dither,
	FStrataIntegrationSettings Settings,
	FStrataAddressing StrataAddressing,
	FStrataPixelHeader StrataPixelHeader,
	FStrataData Strata,
	float3 V,
	float3 WorldBentNormal0,
	inout bool bStrataSubsurfaceEnable,
	inout float3 EmissiveColor,
	inout FStrataSubsurfaceData SSSData,
	inout FStrataTopLayerData TopLayerData,
	inout FStrataOpaqueRoughRefractionData OpaqueRoughRefractionData

	,
	in FMaterialPixelParameters MaterialParameters,
	in FVertexFactoryInterpolantsVSToPS Interpolants,
	in FSharedBasePassInterpolants BasePassInterpolants,
	in float LightmapVTPageTableResult,
	in float3 VolumetricLightmapBrickTextureUVs

)
{
	


	bStrataSubsurfaceEnable = false;
	EmissiveColor = 0.0f;

	const float FullyRough = 1.0f;

	
	
	SSSData = (FStrataSubsurfaceData)0;
	TopLayerData = (FStrataTopLayerData)0;
	OpaqueRoughRefractionData = (FStrataOpaqueRoughRefractionData)0;

	uint BSDFVisibleCount = 0;
	
	if (StrataPixelHeader.StrataTree.BSDFCount > 0)
	{
		
		FStrataAddressing NullStrataAddressing = (FStrataAddressing)0;	
		StrataPixelHeader.StrataUpdateTree(NullStrataAddressing, V, Settings);

		const uint RootOperatorIndex = Strata.OperatorIndex;

	






		
		{
			const FStrataOperator RootOperator = StrataPixelHeader.StrataTree.Operators[Strata.OperatorIndex];
			OpaqueRoughRefractionData.Coverage = RootOperator.OpaqueRoughRefractCoverage;

			const float StandardDeviationCm = sqrt(GetVarianceFromRoughness(RootOperator.OpaqueRoughRefractTopRoughness));
			const float StandardDeviationCmForThickness = StandardDeviationCm * RootOperator.OpaqueRoughRefractThicknessCm;
			OpaqueRoughRefractionData.VarianceCm = StandardDeviationCmForThickness * StandardDeviationCmForThickness;
		}

		uint OptimisedLegacyMode = 0;
		bool bIsSimpleMaterial = true;
		bool bIsSingleMaterial = true;
		bool bIsOnlySlab = true;
		int OneBSDFMaterial_Index = 0; 
		float TopLayerTotalWeight = 0.0f;
		
		{
			  [unroll( 1 )]
			for (int BSDFIdx = 0; BSDFIdx < StrataPixelHeader.StrataTree.BSDFCount; ++BSDFIdx)
			{
			

				const bool bIsVisible = StrataIsBSDFVisible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

				if (bIsVisible)
				{
					BSDFVisibleCount++;

					switch (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
					{
					case 0:
					{
						EmissiveColor +=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Emissive * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV;

						
						const bool LuminanceWeightEqualOne = all(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV == 1.0f);

						


						const bool bForceComplexSpecialPath = false;
						
						const bool bForceComplexMaterial =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( 0 )) &  ((1u<<( 1 ))-1)) || bForceComplexSpecialPath;

						
						bIsSimpleMaterial = bIsSimpleMaterial && IsStrataSlabFastPathCompatible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]) && LuminanceWeightEqualOne && !bForceComplexMaterial;

						
						
						bIsSingleMaterial = bIsSingleMaterial && LuminanceWeightEqualOne && !bForceComplexMaterial;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						float TopLayerRoughnessContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight *   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w;
						float3 TopLayerBaseColorContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * StrataGetBSDFBaseColor(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);
						if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
						{
							FHaziness Haziness = UnpackHaziness(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Haziness);
							if (Haziness.bSimpleClearCoat)
							{
								TopLayerRoughnessContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * lerp(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w, Haziness.Roughness, Haziness.Weight);
								TopLayerBaseColorContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * lerp(0.0, 0.04f, F0RGBToMetallic(0.04f));
							}
						}
						TopLayerData.Roughness += TopLayerRoughnessContribution;
						TopLayerData.BaseColor += TopLayerBaseColorContribution;

						TopLayerData.Material = 1;

						const bool bHasSSS =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (0u);
						const bool bIsSimpleVolume =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u);
						bStrataSubsurfaceEnable = bStrataSubsurfaceEnable || (bHasSSS && StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].Coverage > 0.0f && !bIsSimpleVolume); 

						const bool bSSSMask = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].bIsBottom;	
						StrataPixelHeader.SetHasSubsurface(bSSSMask && bHasSSS && !bIsSimpleVolume);

						StrataPixelHeader.SetUsesComplexSpecialRenderPath(bForceComplexSpecialPath);
						break;
					}

					case 3:
					{
						bIsOnlySlab = false;
						bIsSimpleMaterial = false;
						bIsSingleMaterial = false;
						EmissiveColor +=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Emissive * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						TopLayerData.Roughness += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * FullyRough;
						TopLayerData.BaseColor += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * StrataGetBSDFBaseColor(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

						TopLayerData.Material = 1;

						StrataPixelHeader.SetMaterialMode(5);
						break;
					}

					case 5:
					{
						bIsOnlySlab = false;
						bIsSimpleMaterial = false;
						bIsSingleMaterial = false;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						TopLayerData.Roughness += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * FullyRough;

						TopLayerData.Material = 1;

						const bool bHasSSS =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);
						StrataPixelHeader.SetHasSubsurface(bHasSSS);
						StrataPixelHeader.SetMaterialMode(6);
						break;
					}

					case 4:
					{
						bIsOnlySlab = false;
						bIsSimpleMaterial = false;
						bIsSingleMaterial = false;
						EmissiveColor +=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Emissive * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						TopLayerData.Roughness += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight *   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z;
						TopLayerData.BaseColor += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * StrataGetBSDFBaseColor(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

						TopLayerData.Material = 2;

						StrataPixelHeader.SetMaterialMode(4);
						break;
					}
					}

					float3x3 TangentBasis = StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx], StrataAddressing);
					float3 N = TangentBasis[2];
					TopLayerData.WorldNormal += N * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;

					OneBSDFMaterial_Index = BSDFIdx;

					
					   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (0			+ 1) )))) | ((( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].bIsTop ? 1 : 0 ) &  ((1u<<( 1 ))-1)) << ( (0			+ 1) ));
				}
		
		
			
			}
		}

		
		TopLayerData.WorldNormal= TopLayerTotalWeight > 0.0f	? normalize(TopLayerData.WorldNormal)			: 0.0f;
		TopLayerData.Roughness	= TopLayerTotalWeight > 0.0f	? TopLayerData.Roughness / TopLayerTotalWeight	: 0.0f;
		TopLayerData.BaseColor	= TopLayerTotalWeight > 0.0f	? TopLayerData.BaseColor / TopLayerTotalWeight	: 0.0f;

		
		if (bIsOnlySlab)
		{
			bIsSimpleMaterial = bIsSimpleMaterial && BSDFVisibleCount == 1;
			bIsSingleMaterial = bIsSingleMaterial && BSDFVisibleCount == 1;
			StrataPixelHeader.SetMaterialMode(bIsSimpleMaterial ? 1 : bIsSingleMaterial ? 2 : 3);

			if (bIsSingleMaterial)
			{
			
				const uint SingleHasHaziness		= 0x01;
				const uint SingleHasClearCoat		= 0x02;
				const uint SingleHasCloth			= 0x04;
				const uint SingleIsThin				= 0x08;
				const uint SingleIsSimpleVolume		= 0x10;
				const uint SingleIsWrap				= 0x20;
				const uint SingleIsSSSProfile		= 0x40;
				const uint SingleIsWrapThin			= SingleIsThin | SingleIsWrap;
				

				uint OptimisedModeMask = 0;
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
				{
					OptimisedModeMask |= SingleHasHaziness; 

					FHaziness Haziness = UnpackHaziness(  StrataPixelHeader.StrataTree.BSDFs[0] .Haziness);
					if (Haziness.bSimpleClearCoat)
					{
						OptimisedModeMask |= SingleHasClearCoat;
					}
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) &&   StrataPixelHeader.StrataTree.BSDFs[0] .VGPRs[0].w ==   StrataPixelHeader.StrataTree.BSDFs[0] .VGPRs[2].w)
				{
					OptimisedModeMask |= SingleHasCloth;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
				{
					OptimisedModeMask |= SingleIsThin;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u))
				{
					OptimisedModeMask |= SingleIsSimpleVolume;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
				{
					OptimisedModeMask |= SingleIsWrap;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
				{
					OptimisedModeMask |= SingleIsSSSProfile;
				}

				if (((OptimisedModeMask & SingleHasClearCoat) == SingleHasClearCoat) || ((OptimisedModeMask & SingleHasClearCoat) == (SingleHasHaziness | SingleHasClearCoat)))
				{
					OptimisedLegacyMode = 1;
				}
				else if ((OptimisedModeMask & SingleHasCloth) == SingleHasCloth)
				{
					OptimisedLegacyMode = 2;
				}				
				else if ((OptimisedModeMask & SingleIsWrapThin) == SingleIsWrapThin)
				{
					OptimisedLegacyMode = 5;
					SSSData.Header.Bytes = 0; 
				}
				else if ((OptimisedModeMask & SingleIsWrap) == SingleIsWrap)
				{
					OptimisedLegacyMode = 3;
					SSSData.Header.Bytes = 0; 
				}
				else if ((OptimisedModeMask & (SingleIsSSSProfile|SingleIsThin)) == SingleIsSSSProfile) 
				{
					
					OptimisedLegacyMode = 4;
					SSSData.Header.Bytes = 0; 
				}
			
			}
		}

		
		
		{
			float BSDFCount = 0;
			float2 SpecMultiBounceAO_IndirectIrradiance_Acc = 0.0f;
			  [unroll( 1 )]
			for (int BSDFIdx = 0; BSDFIdx < StrataPixelHeader.StrataTree.BSDFCount; ++BSDFIdx)
			{
			

				const bool bIsVisible = StrataIsBSDFVisible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

				
				[branch]
				if (bIsVisible)
				{
					
					float2 SpecMultiBounceAO_IndirectIrradiance = 0.0f;
					EmissiveColor += StrataGetBSDFPrecomputedLighting(
						Settings,
						StrataPixelHeader,
						StrataPixelHeader.StrataTree.BSDFs[BSDFIdx],
						V,
						WorldBentNormal0,
						MaterialParameters,
						Interpolants,
						BasePassInterpolants,
						LightmapVTPageTableResult,
						VolumetricLightmapBrickTextureUVs,
						SpecMultiBounceAO_IndirectIrradiance);
					SpecMultiBounceAO_IndirectIrradiance_Acc += SpecMultiBounceAO_IndirectIrradiance;

					
					BSDFCount++;
				}

			
			}

			
			float2 SpecMultiBounceAO_IndirectIrradiance = SpecMultiBounceAO_IndirectIrradiance_Acc * rcp(max(1.0f, BSDFCount));
			StrataPixelHeader.IrradianceAO.MaterialAO			= SpecMultiBounceAO_IndirectIrradiance.x;
			StrataPixelHeader.IrradianceAO.IndirectIrradiance	= SpecMultiBounceAO_IndirectIrradiance.y;
		}
		
		
		
	
		   StrataPixelHeader.State = ( StrataPixelHeader.State & (~ ( ((1u<<( 8 ))-1)<<( (0					+ 8) )))) | ((( StrataPackIrradianceAndOcclusion(StrataPixelHeader.IrradianceAO, 0) ) &  ((1u<<( 8 ))-1)) << ( (0					+ 8) ));
	

		

		
		
		
		
		
		
		
		const bool bHasFastEncoding = StrataPixelHeader.IsSimpleMaterial();
		const bool bHasFastWaterEncoding = StrataPixelHeader.IsSingleLayerWater();
		const bool bHasSingleEncoding = StrataPixelHeader.IsSingleMaterial();
		const bool bCustomEncoding = StrataPixelHeader.IsHair() || StrataPixelHeader.IsEye();

		
		if (!bHasFastEncoding && !bHasSingleEncoding && !bCustomEncoding && !bHasFastWaterEncoding)
		{
			
			const uint PackedHeader = PackStrataHeader(BSDFVisibleCount, StrataPixelHeader);
			 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedHeader );

			
		
			[unroll]
			for (uint i = 0; i < StrataPixelHeader.SharedLocalBases.Count; ++i)
			{
				const uint BasisType = StrataGetSharedLocalBasisType(StrataPixelHeader.SharedLocalBases.Types, i);
				if (BasisType == 0u)
				{
					 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, StrataPackNormal(StrataPixelHeader.SharedLocalBases.Normals[i]) );
				}
				else 
				{
					 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, StrataPackNormalAndTangent(StrataPixelHeader.SharedLocalBases.Normals[i], StrataPixelHeader.SharedLocalBases.Tangents[i]) );
				}
			}
		
		}

		{
			int BSDFCount = 0;
			  [unroll( 1 )]
			for (int BSDFIdx = 0; BSDFIdx < StrataPixelHeader.StrataTree.BSDFCount; ++BSDFIdx)
			{
			

				const bool bIsVisible = StrataIsBSDFVisible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

				
				[branch]
				if (bIsVisible)
				{
					const uint GreyScaleThroughputV = StrataHasGreyScaleWeight(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV) ? 1 : 0;
					   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (((0			+ 1)			+ 1)			+ 3) )))) | ((( GreyScaleThroughputV ) &  ((1u<<( 1 ))-1)) << ( (((0			+ 1)			+ 1)			+ 3) ));

					const bool bTransmittanceAboveAlongNRequired = any(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TransmittanceAboveAlongN < 1.0f);
					   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3)	+ 2) )))) | ((( bTransmittanceAboveAlongNRequired ) &  ((1u<<( 1 ))-1)) << ( (((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3)	+ 2) ));

					
					const bool bFastEncodedBSDF = bHasFastEncoding && BSDFIdx == OneBSDFMaterial_Index;
					if (bFastEncodedBSDF)
					{
						
						
						const uint PackedDiffuse20Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
						const uint PackedDiffuse12Bits = PackedDiffuse20Bits & 0xFFF;
						const uint PackedDiffuse8Bits = (PackedDiffuse20Bits >> 12) & 0xFF;
						const uint PackedF020Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz, Dither);
						const uint PackedRoughness8bits = PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w);

						
						{
							uint Out = 0;
							   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

							uint Packed16 = (PackedDiffuse8Bits << 8) | PackedRoughness8bits;
							Out = (Out & ((1u<<(8 + 8))-1u)) | (Packed16 << (8 + 8));
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );

						


						}
						
						{
							uint Out = PackedF020Bits | (PackedDiffuse12Bits << 20);
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );
						}
						
						StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
					}
					
					else if (bHasSingleEncoding && BSDFIdx == OneBSDFMaterial_Index)
					{
						
						
						   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (0			+ 1) )))) | ((( 1 ) &  ((1u<<( 1 ))-1)) << ( (0			+ 1) ));

						
						uint Out = 0;
						   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

						Out = Out & ((1u<<(8 + 8))-1u);
						Out = Out | ((OptimisedLegacyMode & ((1u<<3)-1u))	<< ((8 + 8)));

						[branch]
						if (OptimisedLegacyMode == 0)
						{
							Out = Out | ((StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State & ((1u<<(((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) + 1))-1u)) << ((8 + 8) + 3));
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );
						}
						
						
						else if(OptimisedLegacyMode == 1)
						{
							const uint PackedDiffuse20Bits	= PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
							const uint PackedF024Bits		= PackRGBA8(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz, 0.0f));
							const uint PackedClearCoat16Bits=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Haziness;
							const uint PackedRoughness8Bits = PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w);

							
							


							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out					| ((PackedRoughness8Bits & 0xFF) << 24) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedDiffuse20Bits	| ((PackedClearCoat16Bits & 0xFF00) << 12) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedF024Bits		| (PackedClearCoat16Bits << 24) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}
						else if (OptimisedLegacyMode == 2)
						{
							const uint PackedDiffuse20Bits	= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz	, Dither);
							const uint PackedF020Bits		= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz				, Dither);
							const uint PackedFuzzColor20bits= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].xyz		, Dither);
							const uint PackedFuzzAmount8bits= PackR8(			  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].w);
							

							
							


							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out					| ((PackedFuzzAmount8bits & 0xFF) << ((8 + 8) + 3)) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedDiffuse20Bits	| ((PackedFuzzColor20bits & 0xFFC00) << 10) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedF020Bits		| ((PackedFuzzColor20bits & 0x3FF) << 20) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}
						else if (OptimisedLegacyMode == 3 || OptimisedLegacyMode == 5)
						{
							const float SSSWOpacity = StrataSubSurfaceGetWrapOpacityFromAnisotropy(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].w);

							const uint PackedDiffuse20Bits		= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz	, Dither);
							const uint PackedF020Bits			= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz				, Dither);
							const uint PackedSSSWOpacity7bits	= PackR7(			SSSWOpacity					, 0.5);	
							const uint PackedSSSMFP30bits		= PackR10G10B10F(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz);
							

							const uint PackedSSSMFP12BitsA = (PackedSSSMFP30bits      ) & 0xFFF; 
							const uint PackedSSSMFP12BitsB = (PackedSSSMFP30bits >> 12) & 0xFFF; 
							const uint PackedSSSMFP6BitsC  = (PackedSSSMFP30bits >> 24) & 0x03F; 

							
							


							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out					| ((PackedSSSWOpacity7bits & 0x7F) << ((8 + 8) + 3)) | (PackedSSSMFP6BitsC << (7 + (8 + 8) + 3)) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedDiffuse20Bits  | (PackedSSSMFP12BitsA << 20) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedF020Bits		| (PackedSSSMFP12BitsB << 20) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}
						else if (OptimisedLegacyMode == 4)
						{
							const uint PackedDiffuse20Bits		= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz	, Dither);
							const uint PackedF020Bits			= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz				, Dither);

							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out					| (PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w) << 24) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedDiffuse20Bits  | (PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].y) << 24) );
							
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedF020Bits		| (PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].x) << 24) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}

						


					}
					
					else if (StrataPixelHeader.IsEye())
					{
						
						uint Out = 0;
						   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));
						Out = Out & ((1u<<(8 + 8))-1u);
						Out = Out | PackRGBA8(float4(0, 0,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].y,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].x));
						 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );

						


					}
					
					else if (StrataPixelHeader.IsHair())
					{
						
						uint Out = 0;
						   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));
						Out = Out & ((1u<<(8 + 8))-1u);
						 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );

						


					}
					
					else if (bHasFastWaterEncoding)
					{
						



						
						
						const uint PackedBaseColor20Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
						const uint PackedBaseColor12Bits = PackedBaseColor20Bits & 0xFFF;
						const uint PackedBaseColor8Bits = (PackedBaseColor20Bits >> 12) & 0xFF;

						
						const uint Roughness8Bits = PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z);
						const uint PackedOpacityMetalSpec20Bits = PackR7G7B6Linear(float3(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].w,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].x,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].y), Dither);

						
						{
							uint Out = 0;
							   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

							uint Packed16 = (PackedBaseColor8Bits << 8) | Roughness8Bits;
							Out = (Out & ((1u<<(8 + 8))-1u)) | (Packed16 << (8 + 8));
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );
						}
						
						{
							uint Out = (PackedBaseColor12Bits << 20) | PackedOpacityMetalSpec20Bits;
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, Out );
						}
						
						StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;

					}
					
					else if (GreyScaleThroughputV > 0)
					{
						   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 10 ))-1)<<( 22 )))) | ((( Pack10F(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV.x) ) &  ((1u<<( 10 ))-1)) << ( 22 ));
						 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State );
					}
					else
					{
						 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State );
						 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackR11G11B10F(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV) );
					}

					
					if (!bFastEncodedBSDF && !bHasFastWaterEncoding && OptimisedLegacyMode == 0)
					{
						const uint BSDFType =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
						switch (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
						{
						case 0:
						{
							
							
							const uint PackedDiffuse20Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
							const uint PackedF020Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz, Dither);
							const uint PackedData32Bits = ((PackedDiffuse20Bits << 12) & 0xFFFFF000) | (PackedF020Bits & 0xFFF);
							const uint PackedData8Bits = (PackedF020Bits >> 12) & 0xFF;

							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedData32Bits );
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackedData8Bits | PackRGBA8(float4(0.0f,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w, (  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].w + 1.f) * 0.5f, (  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].w + 1.f) * 0.5f)) );

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) ||   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
							{
								
								float3 F90 = saturate(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[2].xyz);
								const float Divisor = max(F90.r, max(F90.g, F90.b));
								F90 = Divisor > 0.0f ? F90 / Divisor : 1.0f;
								float3 F90YCoCg = LinearRGB_2_NormalisedYCoCg(F90);

								uint F90Data = PackRGBA8(float4(F90YCoCg.y, F90YCoCg.z, 0, 0));
								uint HazinessData =   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Haziness;
								 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, HazinessData << 16 | F90Data );
							}

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (0u))
							{
								
								if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (4u))
								{
									StrataSubSurfaceHeaderSetSSSType(SSSData.Header,   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)));
									if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
									{
										StrataSubSurfaceHeaderSetWrap(SSSData.Header,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].w);
									}
									else if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
									{
										StrataSubSurfaceHeaderSetProfile(SSSData.Header,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].y, StrataSubsurfaceProfileIdTo8bits(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].x));
									}
									else
									{
										StrataSubSurfaceHeaderSetNonProfile(SSSData.Header,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz);
									}

									StrataSubsurfaceExtrasSetBaseColor(SSSData.Extras,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz);
								}

								if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
								{
									
									
									 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackSSSProfile(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].x,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].y,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .ThicknessCm) );
								}
								else
								{
									
									
									
									if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) &&   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u))
									{
										  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz= RescaleMFPToComputationSpace(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .ThicknessCm, 100.0f);
									}

									
									 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackR11G11B10F(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz) );
								}
							}

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
							{
								 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackFuzz(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].w,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[2].w, Dither) );
							}

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3)	+ 2) )) &  ((1u<<( 1 ))-1)))
							{
								 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackColorLinearToGamma2AlphaLinear(float4(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TransmittanceAboveAlongN, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].CoverageAboveAlongN)) );
							}

							
#line 817 "/Engine/Private/Strata/StrataExport.ush"


							
						}
						break;
						case 3:
						{
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackColorLinearToGamma2AlphaLinear(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].x)) );
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackRGBA8(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].y,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].w)) );
							
						}
						break;
						case 5:
						{
							const float2 EncodedIrisNormal = UnitVectorToOctahedron(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[2].xyz);
							const float2 EncodedIrisPlaneNormal = UnitVectorToOctahedron(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz);
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackColorLinearToGamma2AlphaLinear(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w)) );
							 StrataStoreUint1(StrataBuffer, ExtraMaterialDataUAV, StrataAddressing, PackRGBA8(float4(EncodedIrisNormal * 0.5f + 0.5f, EncodedIrisPlaneNormal * 0.5f + 0.5f)) );
							

							
							const bool bHasSSS =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);
							if (bHasSSS)
							{
								StrataSubSurfaceHeaderSetSSSType(SSSData.Header, (3u));
								StrataSubSurfaceHeaderSetProfile(SSSData.Header, 1.0f, StrataSubsurfaceProfileIdTo8bits(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z));
								StrataSubsurfaceExtrasSetBaseColor(SSSData.Extras,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz);
							}
						}
						break;
						
						
						
						
						
						}
					}

					
					BSDFCount++;
				}

			
			}

			 { };
		}

		FinalizeWrites(StrataBuffer, StrataAddressing);
	}


}

#line 305 "/Engine/Private/BasePassPixelShader.usf"
void GetSkyLighting(FMaterialPixelParameters MaterialParameters, float LightmapVTPageTableResult, bool bEvaluateBackface, float3 WorldNormal, float2 LightmapUV, uint LightmapDataIndex, float3 SkyOcclusionUV3D, out float3 OutDiffuseLighting, out float3 OutSubsurfaceLighting)
{
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;

#line 341 "/Engine/Private/BasePassPixelShader.usf"

	if (OpaqueBasePass_Shared_UseBasePassSkylight > 0)
	{

	
		float SkyVisibility = 1;
		float GeometryTerm = 1;
		float3 SkyLightingNormal = WorldNormal;
	
		
			[branch]
			if (ShouldSkyLightApplyPrecomputedBentNormalShadowing())
			{
				float3 NormalizedBentNormal = SkyLightingNormal;

				
#line 370 "/Engine/Private/BasePassPixelShader.usf"


					
					if (View_IndirectLightingCacheShowFlag > 0.0f)
					{
						NormalizedBentNormal = IndirectLightingCache_PointSkyBentNormal.xyz;
						SkyVisibility = IndirectLightingCache_PointSkyBentNormal.w;
					}

				

				



				
					
					float BentNormalWeightFactor = 1 - (1 - SkyVisibility) * (1 - SkyVisibility);

					
					
					
					
					SkyLightingNormal = lerp(NormalizedBentNormal, WorldNormal, BentNormalWeightFactor);

					float DotProductFactor = lerp(saturate(dot(NormalizedBentNormal, WorldNormal)), 1, BentNormalWeightFactor);
					
					GeometryTerm = DotProductFactor;
				
			}
		
			
		
		float3 DiffuseLookup = GetSkySHDiffuse(SkyLightingNormal) * ResolvedView.SkyLightColor.rgb;

		
		OutDiffuseLighting += DiffuseLookup * (SkyVisibility * GeometryTerm);

		
		if (bEvaluateBackface)
		{
			float3 BackfaceDiffuseLookup = GetSkySHDiffuse(-WorldNormal) * ResolvedView.SkyLightColor.rgb;
			OutSubsurfaceLighting += BackfaceDiffuseLookup * SkyVisibility;
		}
		

	}
}

#line 428 "/Engine/Private/BasePassPixelShader.usf"
void GetPrecomputedIndirectLightingAndSkyLight(
	FMaterialPixelParameters MaterialParameters, 
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	float LightmapVTPageTableResult,
	bool bEvaluateBackface,
	float3 DiffuseDir,
	float3 VolumetricLightmapBrickTextureUVs,
	out float3 OutDiffuseLighting,
	out float3 OutSubsurfaceLighting,
	out float OutIndirectIrradiance)
{
	OutIndirectIrradiance = 0;
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
	float2 SkyOcclusionUV = (float2)0;
	uint SkyOcclusionDataIndex = 0u;

	
#line 540 "/Engine/Private/BasePassPixelShader.usf"

		if (View_IndirectLightingCacheShowFlag > 0.0f)
		{
		
#line 561 "/Engine/Private/BasePassPixelShader.usf"


			FThreeBandSHVectorRGB PointIndirectLighting;
			PointIndirectLighting.R.V0 = IndirectLightingCache_IndirectLightingSHCoefficients0[0];
			PointIndirectLighting.R.V1 = IndirectLightingCache_IndirectLightingSHCoefficients1[0];
			PointIndirectLighting.R.V2 = IndirectLightingCache_IndirectLightingSHCoefficients2[0];

			PointIndirectLighting.G.V0 = IndirectLightingCache_IndirectLightingSHCoefficients0[1];
			PointIndirectLighting.G.V1 = IndirectLightingCache_IndirectLightingSHCoefficients1[1];
			PointIndirectLighting.G.V2 = IndirectLightingCache_IndirectLightingSHCoefficients2[1];

			PointIndirectLighting.B.V0 = IndirectLightingCache_IndirectLightingSHCoefficients0[2];
			PointIndirectLighting.B.V1 = IndirectLightingCache_IndirectLightingSHCoefficients1[2];
			PointIndirectLighting.B.V2 = IndirectLightingCache_IndirectLightingSHCoefficients2[2];

			FThreeBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH3(DiffuseDir, 1);
			
			OutDiffuseLighting = max(float3(0,0,0), DotSH3(PointIndirectLighting, DiffuseTransferSH));

			
			if (bEvaluateBackface)
			{
				FThreeBandSHVector SubsurfaceTransferSH = CalcDiffuseTransferSH3(-DiffuseDir, 1);
				OutSubsurfaceLighting += max(float3(0, 0, 0), DotSH3(PointIndirectLighting, SubsurfaceTransferSH));
			}
			
		
		
		}

	
	
#line 607 "/Engine/Private/BasePassPixelShader.usf"


	
	OutDiffuseLighting *= View_PrecomputedIndirectLightingColorScale;
	OutSubsurfaceLighting *= View_PrecomputedIndirectLightingColorScale;

	float3 SkyDiffuseLighting;
	float3 SkySubsurfaceLighting;
	GetSkyLighting(MaterialParameters, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, SkyOcclusionUV, SkyOcclusionDataIndex, VolumetricLightmapBrickTextureUVs, SkyDiffuseLighting, SkySubsurfaceLighting);

	OutSubsurfaceLighting += SkySubsurfaceLighting;

	
	OutDiffuseLighting += SkyDiffuseLighting;

	
		OutIndirectIrradiance = Luminance(OutDiffuseLighting);
	
}

#line 662 "/Engine/Private/BasePassPixelShader.usf"
uint GetDiffuseIndirectSampleOcclusion(FSharedLocalBases SharedLocalBases, float3 V, float2 SvPosition, float MaterialAO)
{
	uint DiffuseIndirectSampleOcclusion = 0;
#line 695 "/Engine/Private/BasePassPixelShader.usf"

	return DiffuseIndirectSampleOcclusion;
}

#line 737 "/Engine/Private/BasePassPixelShader.usf"
uint GetSelectiveOutputMask()
{
	uint Mask = 0;










	Mask |= (1 << 7);

	return Mask;
}

#line 757 "/Engine/Private/BasePassPixelShader.usf"
void FPixelShaderInOut_MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants BasePassInterpolants,
	in FPixelShaderIn In,
	inout FPixelShaderOut Out)
{




	const uint EyeIndex = 0;
	ResolvedView = ResolveView();


	
	float4 OutVelocity = 0;
	
	
	float4 OutGBufferD = 0;
	
	
	float4 OutGBufferE = 0;
	
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, In.SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	float LightmapVTPageTableResult = (float)0.0f;








	











	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(In.SvPosition);
		float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(In.SvPosition);
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, In.SvPosition, ScreenPosition, In.bIsFrontFace, TranslatedWorldPosition, BasePassInterpolants.PixelPositionExcludingWPO);
	}





















	const bool bEditorWeightedZBuffering = false;






	

	if (!bEditorWeightedZBuffering)
	{



		GetMaterialCoverageAndClipping(MaterialParameters, PixelMaterialInputs);

	}


	const float Dither = InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8);












	float3 BaseColor = 0;
	float  Metallic = 0;
	float  Specular = 0;

	float Roughness = 0;
	float Anisotropy = 0;
	uint ShadingModel = 0;
	float Opacity = 0;


	float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);

	
	float3 SubsurfaceColor = 0;
	
	float SubsurfaceProfile = 0;
#line 903 "/Engine/Private/BasePassPixelShader.usf"



	
	FStrataData StrataData = PixelMaterialInputs.GetFrontStrataData();
	FStrataPixelHeader StrataPixelHeader = MaterialParameters.GetFrontStrataHeader();
	StrataPixelHeader.IrradianceAO.MaterialAO = MaterialAO;
	StrataPixelHeader.SetCastContactShadow(GetPrimitiveData(MaterialParameters).Flags & 0x200);
	StrataPixelHeader.SetDynamicIndirectShadowCasterRepresentation(GetPrimitiveData(MaterialParameters).Flags & 0x100);



	StrataPixelHeader.SetMaterialMode(4);

	
	
	StrataPixelHeader.StrataTree.BSDFs[0].StrataSanitizeBSDF();
	FStrataBSDF SLWBSDF = StrataPixelHeader.StrataTree.BSDFs[0];

	BaseColor =   SLWBSDF .VGPRs[0].xyz;
	Metallic =   SLWBSDF .VGPRs[1].x;
	Specular =   SLWBSDF .VGPRs[1].y;
	Roughness =   SLWBSDF .VGPRs[1].z;
	Opacity =   SLWBSDF .VGPRs[1].w;

	MaterialParameters.WorldNormal = normalize(StrataPixelHeader.SharedLocalBases.Normals[  uint(( SLWBSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))]);
	const float SLWWorldNormalSquaredLen = dot(MaterialParameters.WorldNormal, MaterialParameters.WorldNormal);
	[branch]
	if (!IsFinite(SLWWorldNormalSquaredLen)) 
	{
		
		MaterialParameters.WorldNormal = normalize(MaterialParameters.TangentToWorld[2]);
		


		StrataPixelHeader.SharedLocalBases.Normals[  uint(( SLWBSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))] = MaterialParameters.WorldNormal;
	}

	Anisotropy = 0.0f;
	ShadingModel = 1;


	float DBufferOpacity = 1.0f;
#line 975 "/Engine/Private/BasePassPixelShader.usf"


	const float BaseMaterialCoverageOverWater = Opacity;
	const float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;

	float3 VolumetricLightmapBrickTextureUVs;





	FGBufferData GBuffer = (FGBufferData)0;

	GBuffer.GBufferAO = MaterialAO;
	GBuffer.PerObjectGBufferData = GetPrimitive_PerObjectGBufferData(MaterialParameters.PrimitiveId);
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;
	GBuffer.PrecomputedShadowFactors = GetPrecomputedShadowMasks(LightmapVTPageTableResult, Interpolants, MaterialParameters, VolumetricLightmapBrickTextureUVs);


	
	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		Dither,
		ShadingModel
		);


	

	{
		
	



	  
		const bool bAllZero = all(GBuffer.PrecomputedShadowFactors == 0);
		const bool bAllOne  = all(GBuffer.PrecomputedShadowFactors == 1);
		if (!bAllZero && !bAllOne)
		{
			StrataPixelHeader.SetHasPrecShadowMask(true);
		}
		else if (bAllZero)
		{
			StrataPixelHeader.SetHasPrecShadowMask(false);
			StrataPixelHeader.SetZeroPrecShadowMask(true);
		}
		else if (bAllOne)
	  
		{
			StrataPixelHeader.SetHasPrecShadowMask(false);
			StrataPixelHeader.SetZeroPrecShadowMask(false);
		}
	
	}



	
	
	GBuffer.SelectiveOutputMask = GetSelectiveOutputMask() >> 4;
	GBuffer.Velocity = 0;


#line 1067 "/Engine/Private/BasePassPixelShader.usf"


	const bool bChecker = CheckerFromPixelPos(MaterialParameters.SvPosition.xy);


	
	GBuffer.SpecularColor = ComputeF0(Specular, BaseColor, Metallic);





















	GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;


	{
		
		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View_DiffuseOverrideParameter.w + View_DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}


    
	if (View_RenderingReflectionCaptureMask) 
	
	{
		EnvBRDFApproxFullyRough(GBuffer.DiffuseColor, GBuffer.SpecularColor);
		
	}

	float3 InputBentNormal = MaterialParameters.WorldNormal;
			
	
	[branch] if( GBuffer.ShadingModelID == 4 && 0)
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 4) - (512.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		InputBentNormal = OctahedronToUnitVector(oct1);
	}
	
	const FShadingOcclusion ShadingOcclusion = ApplyBentNormal(MaterialParameters.CameraVector, InputBentNormal, GetWorldBentNormalZero(MaterialParameters), GBuffer.Roughness, MaterialAO);

	
	GBuffer.GBufferAO = AOMultiBounce( Luminance( GBuffer.SpecularColor ), ShadingOcclusion.SpecOcclusion ).g;
	




	float3 DiffuseColor = 0;
	float3 Color = 0;
	float IndirectIrradiance = 0;

	float3 ColorSeparateSpecular = 0;
	float3 ColorSeparateEmissive = 0;

	float3 DiffuseIndirectLighting = 0;
	float3 SubsurfaceIndirectLighting = 0;

	float3 SeparatedWaterMainDirLightLuminance = float3(0, 0, 0); 



	

		float3 DiffuseDir = ShadingOcclusion.BentNormal;
		float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;

		








		






		












		const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);
		GetPrecomputedIndirectLightingAndSkyLight(MaterialParameters, Interpolants, BasePassInterpolants, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, VolumetricLightmapBrickTextureUVs, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance);

		float IndirectOcclusion = 1.0f;
		float2 NearestResolvedDepthScreenUV = 0;
		float DirectionalLightShadow = 1.0f;
		float DirectionalLightCloudShadow = 1.0f;

		










		DiffuseColor += (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce( GBuffer.BaseColor, ShadingOcclusion.DiffOcclusion );


		
		
		
		GBuffer.DiffuseColor *= BaseMaterialCoverageOverWater;
		DiffuseColor *= BaseMaterialCoverageOverWater;


		




			uint GridIndex = 0;

			
				GridIndex = ComputeLightGridCellIndex((uint2)((MaterialParameters.SvPosition.xy - ResolvedView.ViewRectMin.xy) * View_LightProbeSizeRatioAndInvSizeRatio.zw), MaterialParameters.SvPosition.w, EyeIndex);

				



				

					float3 DirectionalLightAtmosphereTransmittance = 1.0f;

					











					
					const bool bSkipMainDirLightVirtualShadowMapEvaluation = SingleLayerWater_bMainDirectionalLightVSMFiltering;
					const bool bSeparateWaterMainDirLightLuminance = (1 > 0) && SingleLayerWater_bSeparateMainDirLightLuminance;
					




					FDeferredLightingSplit ForwardDirectLighting = GetForwardDirectLightingSplit(
						In.SvPosition.xy,
						GridIndex, MaterialParameters.WorldPosition_CamRelative, MaterialParameters.CameraVector, GBuffer, NearestResolvedDepthScreenUV, MaterialParameters.PrimitiveId, EyeIndex, Dither, 
						DirectionalLightCloudShadow, DirectionalLightAtmosphereTransmittance, DirectionalLightShadow,
						bSeparateWaterMainDirLightLuminance, SeparatedWaterMainDirLightLuminance,
						bSkipMainDirLightVirtualShadowMapEvaluation);
					
					



						Color += ForwardDirectLighting.DiffuseLighting.rgb;
						Color += ForwardDirectLighting.SpecularLighting.rgb;
					
				
			
				
			
#line 1278 "/Engine/Private/BasePassPixelShader.usf"

		
	









	




		float4 HeightFogging = float4(0,0,0,1);
	

	float4 Fogging = HeightFogging;














#line 1328 "/Engine/Private/BasePassPixelShader.usf"















	float3 Emissive = 0;
#line 1363 "/Engine/Private/BasePassPixelShader.usf"



	float3 OutOfBoundsMaskLuminance = 0;
	
	
	
		
		[branch]
		if (View_OutOfBoundsMask > 0)
		{
			FPrimitiveSceneData PrimitiveData = GetPrimitiveData(MaterialParameters);

			float3 ObjectBounds =
				float3(
					PrimitiveData.ObjectBoundsX,
					PrimitiveData.ObjectBoundsY,
					PrimitiveData.ObjectBoundsZ
				);

			if (any(abs(LWCToFloat(LWCSubtract(MaterialParameters.AbsoluteWorldPosition, PrimitiveData.ObjectWorldPosition))) > ObjectBounds + 1))
			{
				float Gradient = LWCFrac(LWCDivide(LWCDot(MaterialParameters.AbsoluteWorldPosition, float3(.577f, .577f, .577f)), 500.0f));
				OutOfBoundsMaskLuminance = lerp(float3(1,1,0), float3(0,1,1), Gradient.xxx > .5f);
				Emissive = OutOfBoundsMaskLuminance;
				Opacity = 1;
			}
			else if (PrimitiveData.MaxWPOExtent > 0.0f)
			{
				
				const float3 OffsetAmt = abs(MaterialParameters.WorldPosition_CamRelative - MaterialParameters.WorldPosition_NoOffsets_CamRelative);
				const float MaxOffsetDim = max3(OffsetAmt.x, OffsetAmt.y, OffsetAmt.z);
				const float Proximity = 1.0f - saturate(abs(MaxOffsetDim - PrimitiveData.MaxWPOExtent) / 0.05f);
				Emissive = Proximity * float3(1, 0 ,1);
				Opacity = sign(Proximity);
			}
		}
		
	











 	
	
	Color += DiffuseColor;



	Color += Emissive;





	{
		const bool CameraIsUnderWater = false;	
		const float3 SunIlluminance = ResolvedView.DirectionalLightColor.rgb * PI;	
		const float3 WaterDiffuseIndirectIlluminance = DiffuseIndirectLighting * PI;
		const bool bSeparateWaterMainDirLightLuminance = (1 > 0) && SingleLayerWater_bSeparateMainDirLightLuminance;

		
		const float3 N = MaterialParameters.WorldNormal;
		const float3 V = MaterialParameters.CameraVector;
		const float3 EnvBrdf = EnvBRDF(GBuffer.SpecularColor, GBuffer.Roughness, max(0.0, dot(N, V)));

#line 1453 "/Engine/Private/BasePassPixelShader.usf"

		Color += EvaluateWaterVolumeLighting(
			MaterialParameters, PixelMaterialInputs, ResolvedView,
			DirectionalLightShadow * DirectionalLightCloudShadow,
			SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, View_SharedBilinearClampedSampler,
			SingleLayerWater_SceneWithoutSingleLayerWaterTextureSize,
			SingleLayerWater_SceneWithoutSingleLayerWaterInvTextureSize,
			SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, View_SharedBilinearClampedSampler,
			SingleLayerWater_SceneWithoutSingleLayerWaterMinMaxUV.xy,
			SingleLayerWater_SceneWithoutSingleLayerWaterMinMaxUV.zw,
			Specular, SingleLayerWater_DistortionParams,
			SunIlluminance, WaterDiffuseIndirectIlluminance, EnvBrdf,
			CameraIsUnderWater, WaterVisibility, EyeIndex,
			bSeparateWaterMainDirLightLuminance, SeparatedWaterMainDirLightLuminance).Luminance;

	}


#line 1487 "/Engine/Private/BasePassPixelShader.usf"






	bool bStrataSubsurfaceEnable = false;



	
	
	[unroll]
	for (uint i = 0; i < StrataPixelHeader.SharedLocalBases.Count; ++i)
	{
		StrataPixelHeader.SharedLocalBases.Normals[i] = normalize(StrataPixelHeader.SharedLocalBases.Normals[i]);
		if (StrataGetSharedLocalBasisType(StrataPixelHeader.SharedLocalBases.Types, i) == 1u)
		{
			StrataPixelHeader.SharedLocalBases.Tangents[i] = normalize(StrataPixelHeader.SharedLocalBases.Tangents[i]);
		}
	}


	
#line 1579 "/Engine/Private/BasePassPixelShader.usf"










	
	
	{
		StrataPixelHeader.IrradianceAO									= InitIrradianceAndOcclusion();
		StrataPixelHeader.IrradianceAO.MaterialAO						= MaterialAO;			
		StrataPixelHeader.IrradianceAO.IndirectIrradiance				= IndirectIrradiance;
		StrataPixelHeader.IrradianceAO.DiffuseIndirectSampleOcclusion	= GetDiffuseIndirectSampleOcclusion(StrataPixelHeader.SharedLocalBases, MaterialParameters.CameraVector, In.SvPosition.xy, StrataPixelHeader.IrradianceAO.MaterialAO);
	}

	
	const float4 PrecomputedShadowFactors = GBuffer.PrecomputedShadowFactors;
	const float4 EncodedVelocity = GBuffer.Velocity;
	GBuffer = (FGBufferData)0;
	GBuffer.PrecomputedShadowFactors = PrecomputedShadowFactors;
	GBuffer.Velocity = EncodedVelocity;






	{
		float3 EmissiveLuminance = 0.0f;
		uint2 PixelPos = uint2(In.SvPosition.xy);
		const float3 WorldBentNormal0 = GetWorldBentNormalZero(MaterialParameters);

		FStrataSubsurfaceData SSSData = (FStrataSubsurfaceData)0;
		FStrataTopLayerData TopLayerData = (FStrataTopLayerData)0;
		FStrataOpaqueRoughRefractionData OpaqueRoughRefractionData = (FStrataOpaqueRoughRefractionData)0;
		FStrataIntegrationSettings Settings = InitStrataIntegrationSettings(false , OpaqueBasePass_Strata_bRoughDiffuse, OpaqueBasePass_Strata_PeelLayersAboveDepth, OpaqueBasePass_Strata_bRoughnessTracking);

	



		
		FStrataAddressing StrataAddressing = GetStrataPixelDataByteOffset(PixelPos, uint2(ResolvedView.BufferSizeAndInvSize.xy), OpaqueBasePass_Strata_MaxBytesPerPixel);
		FRWStrataMaterialContainerStruct RWStrataMaterialContainer = InitialiseRWStrataMaterialContainer(OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs);
		PackStrataOut(
			RWStrataMaterialContainer,
			OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs,
			Dither,
			Settings,
			StrataAddressing,
			StrataPixelHeader, StrataData, MaterialParameters.CameraVector, WorldBentNormal0, bStrataSubsurfaceEnable, EmissiveLuminance,
			SSSData, TopLayerData, OpaqueRoughRefractionData
	
			,MaterialParameters
			,Interpolants
			,BasePassInterpolants
			,LightmapVTPageTableResult
			,VolumetricLightmapBrickTextureUVs
	
		);

		
	


		Out.StrataOutput[0] = RWStrataMaterialContainer.MaterialRenderTargets[0];
		Out.StrataOutput[1] = RWStrataMaterialContainer.MaterialRenderTargets[1];
		Out.StrataOutput[2] = RWStrataMaterialContainer.MaterialRenderTargets[2];
		Out.StrataTopLayerData = StrataPackTopLayerData(TopLayerData);
	
#line 1666 "/Engine/Private/BasePassPixelShader.usf"


		
		[branch]
		if(StrataSubSurfaceHeaderGetIsValid(SSSData.Header))
		{
			StrataStoreSubsurfaceHeader(OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT, PixelPos, SSSData.Header.Bytes);
			if (StrataSubSurfaceHeaderHasExtras(SSSData.Header))
			{
				StrataStoreSubsurfaceExtras(OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass_Strata_FirstSliceStoringStrataSSSDataWithoutMRT, PixelPos, SSSData.Extras.Bytes);
			}
		}

		
	
		Color  = lerp(Color, TopLayerData.BaseColor, View_UnlitViewmodeMask);
		EmissiveLuminance += OutOfBoundsMaskLuminance;
	

		Color += EmissiveLuminance;
	}



#line 1732 "/Engine/Private/BasePassPixelShader.usf"




#line 1798 "/Engine/Private/BasePassPixelShader.usf"


	
#line 1875 "/Engine/Private/BasePassPixelShader.usf"

		{
			FLightAccumulator LightAccumulator = (FLightAccumulator)0;

			
			Color = Color * Fogging.a + Fogging.rgb;

		
#line 1894 "/Engine/Private/BasePassPixelShader.usf"

			LightAccumulator_Add(LightAccumulator, Color, 0, 1.0f, false);
		
			Out.MRT[0] =  ( LightAccumulator_GetResult(LightAccumulator) );

			




		}
	

	
		
		float QuantizationBias = PseudoRandom( MaterialParameters.SvPosition.xy ) - 0.5f;

		GBuffer.IndirectIrradiance = IndirectIrradiance;

		
		
		{
			
			


				
				GBuffer.GenericAO = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);	
			



			EncodeGBufferToMRT(Out, GBuffer, QuantizationBias);

			if (GBuffer.ShadingModelID == 0 && !1) 
			{
				Out.MRT[1] = 0;
				SetGBufferForUnlit(Out.MRT[2]);
				Out.MRT[3] = 0;
				Out.MRT[0 ? 5 : 4] = 0;
				Out.MRT[0 ? 6 : 5] = 0;
			}

		
			
			
			
			
				Out.MRT[(0 ? 2 : 1) + (((5 >= 4 && (0 || 1) && !0) && 1) ? 1 : 0)] = float4(SeparatedWaterMainDirLightLuminance * View_PreExposure, 1.0f);
			





		
		}
		
#line 1973 "/Engine/Private/BasePassPixelShader.usf"


	








	if(bEditorWeightedZBuffering)
	{
		Out.MRT[0].a = 1;

		
			
			Out.MRT[0].a = GetMaterialMaskInputRaw(PixelMaterialInputs);
		

		











			
			clip(Out.MRT[0].a - GetMaterialOpacityMaskClipValue());
		
	}






	const float ViewPreExposure = View_PreExposure;

	
	
	
	
	


		Out.MRT[0].rgba *= ViewPreExposure;
	


	
	
#line 2080 "/Engine/Private/BasePassPixelShader.usf"


	
	
	
	Out.MRT[0].xyz = min(Out.MRT[0].xyz, Max10BitsFloat.xxx * 0.5f);

#line 2101 "/Engine/Private/BasePassPixelShader.usf"


















}

#line 11 "/Engine/Private/PixelShaderOutputCommon.ush"
[earlydepthstencil]
void MainPS
	(




		FVertexFactoryInterpolantsVSToPS Interpolants,



		FSharedBasePassInterpolants BasePassInterpolants,




		in   float4 SvPosition : SV_Position		

		, in bool bIsFrontFace : SV_IsFrontFace


	


		, out float4 OutTarget0 : SV_Target0
	



	


		, out float4 OutTarget1 : SV_Target1
	



		, out float4 OutTarget2 : SV_Target2



















		, out uint StrataOutput3 : SV_Target3
		, out uint StrataOutput4 : SV_Target4
		, out uint StrataOutput5 : SV_Target5
		, out uint StrataOutput6 : SV_Target6











#line 101 "/Engine/Private/PixelShaderOutputCommon.ush"


		
		 







	)
{
	










	FPixelShaderIn PixelShaderIn = (FPixelShaderIn)0;
	FPixelShaderOut PixelShaderOut = (FPixelShaderOut)0;










	PixelShaderIn.SvPosition = SvPosition;
	PixelShaderIn.bIsFrontFace = bIsFrontFace;


	FPixelShaderInOut_MainPS(Interpolants, BasePassInterpolants, PixelShaderIn, PixelShaderOut);









	OutTarget0 = PixelShaderOut.MRT[0];



	OutTarget1 = PixelShaderOut.MRT[1];



	OutTarget2 = PixelShaderOut.MRT[2];








	
	
	
	
	







	StrataOutput3 = PixelShaderOut.StrataOutput[0];
	StrataOutput4 = PixelShaderOut.StrataOutput[1];
	StrataOutput5 = PixelShaderOut.StrataOutput[2];
	StrataOutput6 = PixelShaderOut.StrataTopLayerData;












#line 214 "/Engine/Private/PixelShaderOutputCommon.ush"









}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
SceneTexturesStruct, 158338568
MobileSceneTextures, 147131313
Primitive, 50331904
Scene, 273683233
InstanceCulling, 3146265
HairCardsVF, 60686848
SpeedTreeData, 39846144
Atmosphere, 11534592
BlueNoise, 3473677
OpaqueBasePass, 159911720
BasePass, 148439296
TranslucentBasePass, 274269473
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
ReflectionStruct, 206569728
PlanarReflectionStruct, 22348032
FogStruct, 96995368
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
LumenGIVolumeStruct, 188746712
TranslucentSelfShadow, 93653256
ForwardLightData, 466097176
DeferredLightUniforms, 10486016
VirtualShadowMap, 277877352
MobileBasePass, 118234733
Nanite, 164563880
NaniteRayTracing, 4588345
ShaderPrintData, 5243136
LocalVFLooseParameters, 2490654
LocalVF, 105252632
InstancedVFLooseParameters, 6291712
MaterialCollection, 5243136
Material, 115867904
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
HairCardsVF_PositionBuffer, HairCardsVF, 6, 0
HairCardsVF_PreviousPositionBuffer, HairCardsVF, 6, 1
HairCardsVF_NormalsBuffer, HairCardsVF, 6, 2
HairCardsVF_UVsBuffer, HairCardsVF, 6, 3
HairCardsVF_MaterialsBuffer, HairCardsVF, 6, 4
HairCardsVF_DepthTexture, HairCardsVF, 5, 5
HairCardsVF_DepthSampler, HairCardsVF, 8, 6
HairCardsVF_TangentTexture, HairCardsVF, 5, 7
HairCardsVF_TangentSampler, HairCardsVF, 8, 8
HairCardsVF_CoverageTexture, HairCardsVF, 5, 9
HairCardsVF_CoverageSampler, HairCardsVF, 8, 10
HairCardsVF_AttributeTexture, HairCardsVF, 5, 11
HairCardsVF_AttributeSampler, HairCardsVF, 8, 12
HairCardsVF_AuxilaryDataTexture, HairCardsVF, 5, 13
HairCardsVF_AuxilaryDataSampler, HairCardsVF, 8, 14
HairCardsVF_MaterialTexture, HairCardsVF, 5, 15
HairCardsVF_MaterialSampler, HairCardsVF, 8, 16
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 46
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 48
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid32Bit, BasePass, 16, 6
BasePass_Forward_CulledLightDataGrid16Bit, BasePass, 16, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid32Bit, BasePass, 16, 14
BasePass_ForwardISR_CulledLightDataGrid16Bit, BasePass, 16, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_Forward_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 7
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 8
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 9
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 10
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 11
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, TranslucentBasePass, 16, 14
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, TranslucentBasePass, 16, 15
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 9, 16
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 26
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 28
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 30
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 32
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 33
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_ScenePartialDepthTexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 43
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 44
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 45
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 46
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 47
TranslucentBasePass_Strata_MaterialTextureArray, TranslucentBasePass, 9, 48
TranslucentBasePass_Strata_TopLayerTexture, TranslucentBasePass, 9, 49
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 50
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 51
TranslucentBasePass_OIT_OutOITSampleCount, TranslucentBasePass, 13, 52
TranslucentBasePass_OIT_OutOITSampleColor, TranslucentBasePass, 13, 53
TranslucentBasePass_OIT_OutOITSampleTrans, TranslucentBasePass, 13, 54
TranslucentBasePass_OIT_OutOITSampleDepth, TranslucentBasePass, 13, 55
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 56
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 57
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 12, 58
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 59
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 9, 60
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 61
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 9, 62
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 63
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 64
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 65
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 66
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 67
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 68
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 69
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 70
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 71
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 72
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 73
TranslucentBasePass_Radiance, TranslucentBasePass, 9, 74
TranslucentBasePass_Normal, TranslucentBasePass, 9, 75
TranslucentBasePass_SceneDepth, TranslucentBasePass, 9, 76
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 77
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 78
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 79
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 80
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 81
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 82
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 83
TranslucentBasePass_EyeAdaptationBuffer, TranslucentBasePass, 16, 84
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 85
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 86
TranslucentBasePass_BlueNoise_ScalarTexture, TranslucentBasePass, 5, 87
TranslucentBasePass_BlueNoise_Vec2Texture, TranslucentBasePass, 5, 88
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
PlanarReflectionStruct_PlanarReflectionTexture, PlanarReflectionStruct, 5, 0
PlanarReflectionStruct_PlanarReflectionSampler, PlanarReflectionStruct, 8, 1
FogStruct_FogInscatteringColorCubemap, FogStruct, 5, 0
FogStruct_FogInscatteringColorSampler, FogStruct, 8, 1
FogStruct_IntegratedLightScattering, FogStruct, 9, 2
FogStruct_IntegratedLightScatteringSampler, FogStruct, 8, 3
LumenGIVolumeStruct_RadianceProbeIndirectionTexture, LumenGIVolumeStruct, 9, 0
LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas, LumenGIVolumeStruct, 9, 1
LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas, LumenGIVolumeStruct, 9, 2
LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas, LumenGIVolumeStruct, 9, 3
LumenGIVolumeStruct_RadianceCacheDepthAtlas, LumenGIVolumeStruct, 9, 4
LumenGIVolumeStruct_ProbeWorldOffset, LumenGIVolumeStruct, 16, 5
LumenGIVolumeStruct_Radiance, LumenGIVolumeStruct, 9, 6
LumenGIVolumeStruct_Normal, LumenGIVolumeStruct, 9, 7
LumenGIVolumeStruct_SceneDepth, LumenGIVolumeStruct, 9, 8
LumenGIVolumeStruct_TranslucencyGIVolume0, LumenGIVolumeStruct, 9, 9
LumenGIVolumeStruct_TranslucencyGIVolume1, LumenGIVolumeStruct, 9, 10
LumenGIVolumeStruct_TranslucencyGIVolumeHistory0, LumenGIVolumeStruct, 9, 11
LumenGIVolumeStruct_TranslucencyGIVolumeHistory1, LumenGIVolumeStruct, 9, 12
LumenGIVolumeStruct_TranslucencyGIVolumeSampler, LumenGIVolumeStruct, 8, 13
TranslucentSelfShadow_Transmission0, TranslucentSelfShadow, 5, 0
TranslucentSelfShadow_Transmission1, TranslucentSelfShadow, 5, 1
TranslucentSelfShadow_Transmission0Sampler, TranslucentSelfShadow, 8, 2
TranslucentSelfShadow_Transmission1Sampler, TranslucentSelfShadow, 8, 3
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid32Bit, ForwardLightData, 16, 6
ForwardLightData_CulledLightDataGrid16Bit, ForwardLightData, 16, 7
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
MobileBasePass_Fog_FogInscatteringColorCubemap, MobileBasePass, 5, 0
MobileBasePass_Fog_FogInscatteringColorSampler, MobileBasePass, 8, 1
MobileBasePass_Fog_IntegratedLightScattering, MobileBasePass, 9, 2
MobileBasePass_Fog_IntegratedLightScatteringSampler, MobileBasePass, 8, 3
MobileBasePass_Forward_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 4
MobileBasePass_Forward_ShadowmapSampler, MobileBasePass, 8, 5
MobileBasePass_Forward_DirectionalLightStaticShadowmap, MobileBasePass, 5, 6
MobileBasePass_Forward_StaticShadowmapSampler, MobileBasePass, 8, 7
MobileBasePass_Forward_ForwardLocalLightBuffer, MobileBasePass, 16, 8
MobileBasePass_Forward_NumCulledLightsGrid, MobileBasePass, 16, 9
MobileBasePass_Forward_CulledLightDataGrid32Bit, MobileBasePass, 16, 10
MobileBasePass_Forward_CulledLightDataGrid16Bit, MobileBasePass, 16, 11
MobileBasePass_ForwardMMV_DirectionalLightShadowmapAtlas, MobileBasePass, 9, 12
MobileBasePass_ForwardMMV_ShadowmapSampler, MobileBasePass, 8, 13
MobileBasePass_ForwardMMV_DirectionalLightStaticShadowmap, MobileBasePass, 5, 14
MobileBasePass_ForwardMMV_StaticShadowmapSampler, MobileBasePass, 8, 15
MobileBasePass_ForwardMMV_ForwardLocalLightBuffer, MobileBasePass, 16, 16
MobileBasePass_ForwardMMV_NumCulledLightsGrid, MobileBasePass, 16, 17
MobileBasePass_ForwardMMV_CulledLightDataGrid32Bit, MobileBasePass, 16, 18
MobileBasePass_ForwardMMV_CulledLightDataGrid16Bit, MobileBasePass, 16, 19
MobileBasePass_PlanarReflection_PlanarReflectionTexture, MobileBasePass, 5, 20
MobileBasePass_PlanarReflection_PlanarReflectionSampler, MobileBasePass, 8, 21
MobileBasePass_SceneTextures_SceneColorTexture, MobileBasePass, 9, 22
MobileBasePass_SceneTextures_SceneColorTextureSampler, MobileBasePass, 8, 23
MobileBasePass_SceneTextures_SceneDepthTexture, MobileBasePass, 9, 24
MobileBasePass_SceneTextures_SceneDepthTextureSampler, MobileBasePass, 8, 25
MobileBasePass_SceneTextures_ScenePartialDepthTexture, MobileBasePass, 9, 26
MobileBasePass_SceneTextures_ScenePartialDepthTextureSampler, MobileBasePass, 8, 27
MobileBasePass_SceneTextures_CustomDepthTexture, MobileBasePass, 9, 28
MobileBasePass_SceneTextures_CustomDepthTextureSampler, MobileBasePass, 8, 29
MobileBasePass_SceneTextures_CustomStencilTexture, MobileBasePass, 12, 30
MobileBasePass_SceneTextures_SceneVelocityTexture, MobileBasePass, 9, 31
MobileBasePass_SceneTextures_SceneVelocityTextureSampler, MobileBasePass, 8, 32
MobileBasePass_SceneTextures_GBufferATexture, MobileBasePass, 9, 33
MobileBasePass_SceneTextures_GBufferBTexture, MobileBasePass, 9, 34
MobileBasePass_SceneTextures_GBufferCTexture, MobileBasePass, 9, 35
MobileBasePass_SceneTextures_GBufferDTexture, MobileBasePass, 9, 36
MobileBasePass_SceneTextures_SceneDepthAuxTexture, MobileBasePass, 9, 37
MobileBasePass_SceneTextures_LocalLightTextureA, MobileBasePass, 9, 38
MobileBasePass_SceneTextures_LocalLightTextureB, MobileBasePass, 9, 39
MobileBasePass_SceneTextures_GBufferATextureSampler, MobileBasePass, 8, 40
MobileBasePass_SceneTextures_GBufferBTextureSampler, MobileBasePass, 8, 41
MobileBasePass_SceneTextures_GBufferCTextureSampler, MobileBasePass, 8, 42
MobileBasePass_SceneTextures_GBufferDTextureSampler, MobileBasePass, 8, 43
MobileBasePass_SceneTextures_SceneDepthAuxTextureSampler, MobileBasePass, 8, 44
MobileBasePass_QuadOverdraw, MobileBasePass, 13, 45
MobileBasePass_ReflectionsParameters_SkyLightCubemap, MobileBasePass, 9, 46
MobileBasePass_ReflectionsParameters_SkyLightCubemapSampler, MobileBasePass, 8, 47
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemap, MobileBasePass, 5, 48
MobileBasePass_ReflectionsParameters_SkyLightBlendDestinationCubemapSampler, MobileBasePass, 8, 49
MobileBasePass_ReflectionsParameters_ReflectionCubemap, MobileBasePass, 5, 50
MobileBasePass_ReflectionsParameters_ReflectionCubemapSampler, MobileBasePass, 8, 51
MobileBasePass_ReflectionsParameters_PreIntegratedGF, MobileBasePass, 5, 52
MobileBasePass_ReflectionsParameters_PreIntegratedGFSampler, MobileBasePass, 8, 53
MobileBasePass_PreIntegratedGFTexture, MobileBasePass, 5, 54
MobileBasePass_PreIntegratedGFSampler, MobileBasePass, 8, 55
MobileBasePass_EyeAdaptationBuffer, MobileBasePass, 16, 56
MobileBasePass_RWOcclusionBufferUAV, MobileBasePass, 17, 57
MobileBasePass_AmbientOcclusionTexture, MobileBasePass, 9, 58
MobileBasePass_AmbientOcclusionSampler, MobileBasePass, 8, 59
MobileBasePass_ScreenSpaceShadowMaskTexture, MobileBasePass, 9, 60
MobileBasePass_ScreenSpaceShadowMaskSampler, MobileBasePass, 8, 61
Nanite_ClusterPageData, Nanite, 16, 0
Nanite_VisibleClustersSWHW, Nanite, 16, 1
Nanite_HierarchyBuffer, Nanite, 16, 2
Nanite_MaterialTileRemap, Nanite, 16, 3
Nanite_MaterialDepthTable, Nanite, 6, 4
Nanite_ShadingMask, Nanite, 9, 5
Nanite_VisBuffer64, Nanite, 9, 6
Nanite_DbgBuffer64, Nanite, 9, 7
Nanite_DbgBuffer32, Nanite, 9, 8
Nanite_RayTracingDataBuffer, Nanite, 16, 9
Nanite_ShadingBinMeta, Nanite, 16, 10
Nanite_ShadingBinData, Nanite, 16, 11
Nanite_MultiViewIndices, Nanite, 16, 12
Nanite_MultiViewRectScaleOffsets, Nanite, 16, 13
Nanite_InViews, Nanite, 16, 14
NaniteRayTracing_ClusterPageData, NaniteRayTracing, 6, 0
NaniteRayTracing_HierarchyBuffer, NaniteRayTracing, 6, 1
NaniteRayTracing_RayTracingDataBuffer, NaniteRayTracing, 6, 2
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Wrap_WorldGroupSettings, Material, 8, 0
Material_Clamp_WorldGroupSettings, Material, 8, 1
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=MainPS -shaderPlatformName=PCD3D_SM5_Preview -ps D:/active_labour/unreal/FinalPanopticon/FinalPanopticon/Saved/ShaderDebugInfo/PCD3D_SM5_Preview/M_Ocean_SLW_5a701a4654ee693b/Default/FLocalVertexFactory/TBasePassPSFCachedPointIndirectLightingPolicySkylight/0/BasePassPixelShader.usf -cflags=8589938688 -nocrashreports
#endif /*DIRECT COMPILE*/
