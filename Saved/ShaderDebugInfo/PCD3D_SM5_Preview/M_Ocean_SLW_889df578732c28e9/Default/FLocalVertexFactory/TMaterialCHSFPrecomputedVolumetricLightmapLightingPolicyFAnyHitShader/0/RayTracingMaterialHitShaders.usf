#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 6

#line 2 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MINOR 6

#line 3 "DumpShaderDefinesAsCommentedCode"
// #define ALLOW_STATIC_LIGHTING 1

#line 4 "DumpShaderDefinesAsCommentedCode"
// #define ALWAYS_EVALUATE_WORLD_POSITION_OFFSET 0

#line 5 "DumpShaderDefinesAsCommentedCode"
// #define AMPLIFICATIONSHADER 0

#line 6 "DumpShaderDefinesAsCommentedCode"
// #define CLEAR_COAT_BOTTOM_NORMAL 0

#line 7 "DumpShaderDefinesAsCommentedCode"
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1

#line 8 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DEFINE #define

#line 9 "DumpShaderDefinesAsCommentedCode"
// #define COMPILER_DXC 1

#line 10 "DumpShaderDefinesAsCommentedCode"
// #define COMPUTESHADER 0

#line 11 "DumpShaderDefinesAsCommentedCode"
// #define DISTORTION_ACCOUNT_FOR_COVERAGE 0

#line 12 "DumpShaderDefinesAsCommentedCode"
// #define DO_CHECK 1

#line 13 "DumpShaderDefinesAsCommentedCode"
// #define DO_GUARD_SLOW 0

#line 14 "DumpShaderDefinesAsCommentedCode"
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0

#line 15 "DumpShaderDefinesAsCommentedCode"
// #define DXT5_NORMALMAPS 0

#line 16 "DumpShaderDefinesAsCommentedCode"
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0

#line 17 "DumpShaderDefinesAsCommentedCode"
// #define FORWARD_SHADING 0

#line 18 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0

#line 19 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_HAS_VELOCITY 0

#line 20 "DumpShaderDefinesAsCommentedCode"
// #define GBUFFER_REFACTOR 1

#line 21 "DumpShaderDefinesAsCommentedCode"
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0

#line 22 "DumpShaderDefinesAsCommentedCode"
// #define GEOMETRYSHADER 0

#line 23 "DumpShaderDefinesAsCommentedCode"
// #define HAS_INVERTED_Z_BUFFER 1

#line 24 "DumpShaderDefinesAsCommentedCode"
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1

#line 25 "DumpShaderDefinesAsCommentedCode"
// #define INSTANCED_STEREO 0

#line 26 "DumpShaderDefinesAsCommentedCode"
// #define INTERPOLATE_VERTEX_COLOR 0

#line 27 "DumpShaderDefinesAsCommentedCode"
// #define IRIS_NORMAL 0

#line 28 "DumpShaderDefinesAsCommentedCode"
// #define IS_MATERIAL_SHADER 1

#line 29 "DumpShaderDefinesAsCommentedCode"
// #define LEGACY_MATERIAL_ENERGYCONSERVATION 0

#line 30 "DumpShaderDefinesAsCommentedCode"
// #define LIGHTMAP_VT_ENABLED 0

#line 31 "DumpShaderDefinesAsCommentedCode"
// #define MANUAL_VERTEX_FETCH 1

#line 32 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0

#line 33 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0

#line 34 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_CONTACT_SHADOWS 0

#line 35 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DECAL_READ_MASK 7

#line 36 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DITHER_OPACITY_MASK 0

#line 37 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_DOMAIN_SURFACE 1

#line 38 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0

#line 39 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1

#line 40 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0

#line 41 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_FULLY_ROUGH 0

#line 42 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0

#line 43 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_SKY 0

#line 44 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_IS_STRATA 1

#line 45 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ISTHINSURFACE 0

#line 46 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NONMETAL 0

#line 47 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0

#line 48 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0

#line 49 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PATH_TRACING_BUFFER_READ 0

#line 50 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0

#line 51 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_ROUGHDIFFUSE 1

#line 52 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SHADINGMODEL_SINGLELAYERWATER 1

#line 53 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SINGLE_SHADINGMODEL 1

#line 54 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SKY_ATMOSPHERE 0

#line 55 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_SSR 0

#line 56 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TANGENTSPACENORMAL 0

#line 57 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_TWOSIDED 0

#line 58 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0

#line 59 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_LM_DIRECTIONALITY 1

#line 60 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USE_PREINTEGRATED_GF 0

#line 61 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_ANISOTROPY 0

#line 62 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_DECAL_LOOKUP 0

#line 63 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_USES_SCENE_COLOR_COPY 0

#line 64 "DumpShaderDefinesAsCommentedCode"
// #define MATERIAL_VIRTUALTEXTURE_FEEDBACK 0

#line 65 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALBLENDING_MASKED 1

#line 66 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDECALRESPONSEMASK 7

#line 67 "DumpShaderDefinesAsCommentedCode"
// #define MATERIALDOMAIN_SURFACE 1

#line 68 "DumpShaderDefinesAsCommentedCode"
// #define MAX_NUM_LIGHTMAP_COEF 2

#line 69 "DumpShaderDefinesAsCommentedCode"
// #define MESHSHADER 0

#line 70 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_EMULATION 1

#line 71 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_HIGH_QUALITY_BRDF 0

#line 72 "DumpShaderDefinesAsCommentedCode"
// #define MOBILE_MULTI_VIEW 0

#line 73 "DumpShaderDefinesAsCommentedCode"
// #define MULTI_VIEW 0

#line 74 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0

#line 75 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0

#line 76 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_COLOR 0

#line 77 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0

#line 78 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0

#line 79 "DumpShaderDefinesAsCommentedCode"
// #define NEEDS_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS 1

#line 80 "DumpShaderDefinesAsCommentedCode"
// #define NUM_VIRTUALTEXTURE_SAMPLES 0

#line 81 "DumpShaderDefinesAsCommentedCode"
// #define PIXELSHADER 0

#line 82 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ALLOW_SCENE_DATA_COMPRESSED_TRANSFORMS 1

#line 83 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ENABLES_STRATA_GLINTS 1

#line 84 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_ENABLES_STRATA_SPECULAR_PROFILE 1

#line 85 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BINDLESS 0

#line 86 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_BUFFER_LOAD_TYPE_CONVERSION 1

#line 87 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_CLIP_DISTANCE 1

#line 88 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1

#line 89 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0

#line 90 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0

#line 91 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0

#line 92 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0

#line 93 "DumpShaderDefinesAsCommentedCode"
// #define PLATFORM_SUPPORTS_UB_STRUCT 1

#line 94 "DumpShaderDefinesAsCommentedCode"
// #define POST_PROCESS_ALPHA 0

#line 95 "DumpShaderDefinesAsCommentedCode"
// #define PRECOMPUTED_IRRADIANCE_VOLUME_LIGHTING 1

#line 96 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0

#line 97 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1

#line 98 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_OIT 0

#line 99 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0

#line 100 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1

#line 101 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 1

#line 102 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_SUPPORTS_LUMEN 1

#line 103 "DumpShaderDefinesAsCommentedCode"
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 0

#line 104 "DumpShaderDefinesAsCommentedCode"
// #define RAY_TRACING_DYNAMIC_MESH_IN_LOCAL_SPACE 1

#line 105 "DumpShaderDefinesAsCommentedCode"
// #define RAYCALLABLESHADER 0

#line 106 "DumpShaderDefinesAsCommentedCode"
// #define RAYGENSHADER 0

#line 107 "DumpShaderDefinesAsCommentedCode"
// #define RAYHITGROUPSHADER 1

#line 108 "DumpShaderDefinesAsCommentedCode"
// #define RAYMISSSHADER 0

#line 109 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_ROOT_NODE_OVERRIDES_DEFAULT 1

#line 110 "DumpShaderDefinesAsCommentedCode"
// #define REFRACTION_USE_INDEX_OF_REFRACTION 1

#line 111 "DumpShaderDefinesAsCommentedCode"
// #define RT_PAYLOAD_MAX_SIZE 60

#line 112 "DumpShaderDefinesAsCommentedCode"
// #define RT_PAYLOAD_TYPE 4

#line 113 "DumpShaderDefinesAsCommentedCode"
// #define SCENE_TEXTURES_DISABLED 1

#line 114 "DumpShaderDefinesAsCommentedCode"
// #define SELECTIVE_BASEPASS_OUTPUTS 0

#line 115 "DumpShaderDefinesAsCommentedCode"
// #define SHADING_PATH_DEFERRED 1

#line 116 "DumpShaderDefinesAsCommentedCode"
// #define SHAREDLOCALBASIS_INDEX_0_0 0

#line 117 "DumpShaderDefinesAsCommentedCode"
// #define SHAREDLOCALBASIS_INDEX_0_1 0

#line 118 "DumpShaderDefinesAsCommentedCode"
// #define SINGLE_LAYER_WATER_SEPARATED_MAIN_LIGHT 1

#line 119 "DumpShaderDefinesAsCommentedCode"
// #define SM6_PROFILE 1

#line 120 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ADVANCED_DEBUG_ENABLED 0

#line 121 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_BLENDING_MASKED 1

#line 122 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_CLAMPED_BSDF_COUNT 1

#line 123 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_COMPLEXSPECIALPATH 0

#line 124 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_ENABLED 1

#line 125 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_FASTPATH 0

#line 126 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_CONTEXT 0

#line 127 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_LEGACY_BLEND_MODE 0

#line 128 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_EXPORT_TYPE 0

#line 129 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_NUM_UINTS 20

#line 130 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_MATERIAL_OUTPUT_OPAQUE_ROUGH_REFRACTIONS 0

#line 131 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_NORMAL_QUALITY 0

#line 132 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPAQUE_ROUGH_REFRACTION_ENABLED 1

#line 133 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_OPTIMIZED_UNLIT 0

#line 134 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_PREMULTIPLIED_ALPHA_OPACITY_OVERRIDEN 0

#line 135 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SHADING_QUALITY 1

#line 136 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SHEEN_QUALITY 1

#line 137 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_SINGLEPATH 0

#line 138 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USE_DBUFFER_PASS 0

#line 139 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USE_FULLYSIMPLIFIED_MATERIAL 1

#line 140 "DumpShaderDefinesAsCommentedCode"
// #define STRATA_USES_CONVERSION_FROM_LEGACY 1

#line 141 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0

#line 142 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_CLOUD_SHADOW_ON_SINGLE_LAYER_WATER 0

#line 143 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_GPUSKIN_PASSTHROUGH 1

#line 144 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_RECTLIGHT_ON_FORWARD_LIT_TRANSLUCENT 0

#line 145 "DumpShaderDefinesAsCommentedCode"
// #define SUPPORT_VSM_FOWARD_QUALITY 0

#line 146 "DumpShaderDefinesAsCommentedCode"
// #define TEXTURE_SAMPLE_DEBUG 0

#line 147 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0

#line 148 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_FRONT_LAYER_TRANSPARENCY 0

#line 149 "DumpShaderDefinesAsCommentedCode"
// #define TRANSLUCENT_WRITING_VELOCITY 0

#line 150 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f

#line 151 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f

#line 152 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f

#line 153 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f

#line 154 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f

#line 155 "DumpShaderDefinesAsCommentedCode"
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f

#line 156 "DumpShaderDefinesAsCommentedCode"
// #define USE_8BIT_TILE_COORD 0

#line 157 "DumpShaderDefinesAsCommentedCode"
// #define USE_ACHROMATIC_BXDF_ENERGY 0

#line 158 "DumpShaderDefinesAsCommentedCode"
// #define USE_DBUFFER 1

#line 159 "DumpShaderDefinesAsCommentedCode"
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0

#line 160 "DumpShaderDefinesAsCommentedCode"
// #define USE_MATERIAL_ANY_HIT_SHADER 1

#line 161 "DumpShaderDefinesAsCommentedCode"
// #define USE_MATERIAL_CLOSEST_HIT_SHADER 1

#line 162 "DumpShaderDefinesAsCommentedCode"
// #define USE_MATERIAL_INTERSECTION_SHADER 0

#line 163 "DumpShaderDefinesAsCommentedCode"
// #define USE_RAYTRACED_TEXTURE_RAYCONE_LOD 0

#line 164 "DumpShaderDefinesAsCommentedCode"
// #define USE_STENCIL_LOD_DITHER_DEFAULT 0

#line 165 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISPLACEMENT 0

#line 166 "DumpShaderDefinesAsCommentedCode"
// #define USES_DISTORTION 0

#line 167 "DumpShaderDefinesAsCommentedCode"
// #define USES_EMISSIVE_COLOR 1

#line 168 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_CUSTOM_DATA 0

#line 169 "DumpShaderDefinesAsCommentedCode"
// #define USES_PER_INSTANCE_RANDOM 0

#line 170 "DumpShaderDefinesAsCommentedCode"
// #define USES_TRANSFORM_VECTOR 1

#line 171 "DumpShaderDefinesAsCommentedCode"
// #define USES_VERTEX_INTERPOLATOR 0

#line 172 "DumpShaderDefinesAsCommentedCode"
// #define USES_WORLD_POSITION_OFFSET 0

#line 173 "DumpShaderDefinesAsCommentedCode"
// #define VELOCITY_ENCODE_DEPTH 1

#line 174 "DumpShaderDefinesAsCommentedCode"
// #define VERTEXSHADER 0

#line 175 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 1

#line 176 "DumpShaderDefinesAsCommentedCode"
// #define VF_SUPPORTS_SPEEDTREE_WIND 1

#line 177 "DumpShaderDefinesAsCommentedCode"
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0

#line 178 "DumpShaderDefinesAsCommentedCode"
// #define WANT_PIXEL_DEPTH_OFFSET 0

#line 179 "DumpShaderDefinesAsCommentedCode"
// #define WORKING_COLOR_SPACE_IS_SRGB 1

#line 28 "/Engine/Public/Platform/D3D/D3DCommon.ush"
SamplerState D3DStaticTrilinearWrappedSampler   : register(s4, space1000);

#line 879 "/Engine/Public/Platform.ush"
float max3(float a, float b, float c)
{
	return max(a, max(b, c));
}

#line 884 "/Engine/Public/Platform.ush"
int max3(int a, int b, int c)
{
	return max(a, max(b, c));
}

#line 889 "/Engine/Public/Platform.ush"
uint max3(uint a, uint b, uint c)
{
	return max(a, max(b, c));
}

#line 894 "/Engine/Public/Platform.ush"
float2 max3 ( float2 a, float2 b, float2 c) { return float2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 894 "/Engine/Public/Platform.ush"
float3 max3 ( float3 a, float3 b, float3 c) { return float3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 894 "/Engine/Public/Platform.ush"
float4 max3 ( float4 a, float4 b, float4 c) { return float4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 895 "/Engine/Public/Platform.ush"
int2 max3 ( int2 a, int2 b, int2 c) { return int2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 895 "/Engine/Public/Platform.ush"
int3 max3 ( int3 a, int3 b, int3 c) { return int3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 895 "/Engine/Public/Platform.ush"
int4 max3 ( int4 a, int4 b, int4 c) { return int4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 896 "/Engine/Public/Platform.ush"
uint2 max3 ( uint2 a, uint2 b, uint2 c) { return uint2( max3 (a.x , b.x , c.x ), max3 (a.y , b.y , c.y )); }

#line 896 "/Engine/Public/Platform.ush"
uint3 max3 ( uint3 a, uint3 b, uint3 c) { return uint3( max3 (a.xy, b.xy, c.xy), max3 (a.z , b.z , c.z )); }

#line 896 "/Engine/Public/Platform.ush"
uint4 max3 ( uint4 a, uint4 b, uint4 c) { return uint4( max3 (a.xy, b.xy, c.xy), max3 (a.zw, b.zw, c.zw)); }

#line 973 "/Engine/Public/Platform.ush"
bool select_internal(bool    c, bool a, bool b) { return bool (c   ? a.x : b.x); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool a, bool2 b) { return bool2(c   ? a   : b.x, c   ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool b) { return bool2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool    c, bool2 a, bool2 b) { return bool2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool b) { return bool2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool a, bool2 b) { return bool2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool b) { return bool2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool2 select_internal(bool2   c, bool2 a, bool2 b) { return bool2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool a, bool3 b) { return bool3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool b) { return bool3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool    c, bool3 a, bool3 b) { return bool3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool b) { return bool3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool a, bool3 b) { return bool3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool b) { return bool3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool3 select_internal(bool3   c, bool3 a, bool3 b) { return bool3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool a, bool4 b) { return bool4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool b) { return bool4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool    c, bool4 a, bool4 b) { return bool4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool b) { return bool4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool a, bool4 b) { return bool4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool b) { return bool4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 973 "/Engine/Public/Platform.ush"
bool4 select_internal(bool4   c, bool4 a, bool4 b) { return bool4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int select_internal(bool    c, int a, int b) { return int (c   ? a.x : b.x); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int a, int2 b) { return int2(c   ? a   : b.x, c   ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int b) { return int2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool    c, int2 a, int2 b) { return int2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int b) { return int2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int a, int2 b) { return int2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int b) { return int2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int2 select_internal(bool2   c, int2 a, int2 b) { return int2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int a, int3 b) { return int3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int b) { return int3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool    c, int3 a, int3 b) { return int3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int b) { return int3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int a, int3 b) { return int3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int b) { return int3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int3 select_internal(bool3   c, int3 a, int3 b) { return int3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int a, int4 b) { return int4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int b) { return int4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool    c, int4 a, int4 b) { return int4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int b) { return int4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int a, int4 b) { return int4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int b) { return int4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 978 "/Engine/Public/Platform.ush"
int4 select_internal(bool4   c, int4 a, int4 b) { return int4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float select_internal(bool    c, float a, float b) { return float (c   ? a.x : b.x); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float a, float2 b) { return float2(c   ? a   : b.x, c   ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float b) { return float2(c   ? a.x : b  , c   ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool    c, float2 a, float2 b) { return float2(c   ? a.x : b.x, c   ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float b) { return float2(c.x ? a   : b  , c.y ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float a, float2 b) { return float2(c.x ? a   : b.x, c.y ? a   : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float b) { return float2(c.x ? a.x : b  , c.y ? a.y : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float2 select_internal(bool2   c, float2 a, float2 b) { return float2(c.x ? a.x : b.x, c.y ? a.y : b.y); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float a, float3 b) { return float3(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float b) { return float3(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool    c, float3 a, float3 b) { return float3(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float b) { return float3(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float a, float3 b) { return float3(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float b) { return float3(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float3 select_internal(bool3   c, float3 a, float3 b) { return float3(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float a, float4 b) { return float4(c   ? a   : b.x, c   ? a   : b.y, c   ? a   : b.z, c   ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float b) { return float4(c   ? a.x : b  , c   ? a.y : b  , c   ? a.z : b  , c   ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool    c, float4 a, float4 b) { return float4(c   ? a.x : b.x, c   ? a.y : b.y, c   ? a.z : b.z, c   ? a.w : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float b) { return float4(c.x ? a   : b  , c.y ? a   : b  , c.z ? a   : b  , c.w ? a   : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float a, float4 b) { return float4(c.x ? a   : b.x, c.y ? a   : b.y, c.z ? a   : b.z, c.w ? a   : b.w); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float b) { return float4(c.x ? a.x : b  , c.y ? a.y : b  , c.z ? a.z : b  , c.w ? a.w : b  ); }

#line 979 "/Engine/Public/Platform.ush"
float4 select_internal(bool4   c, float4 a, float4 b) { return float4(c.x ? a.x : b.x, c.y ? a.y : b.y, c.z ? a.z : b.z, c.w ? a.w : b.w); }

#line 1027 "/Engine/Public/Platform.ush"
float  CondMask(bool Cond, float  Src0, float  Src1) { return Cond ? Src0 : Src1; }

#line 1028 "/Engine/Public/Platform.ush"
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }

#line 1029 "/Engine/Public/Platform.ush"
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }

#line 1030 "/Engine/Public/Platform.ush"
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

#line 1032 "/Engine/Public/Platform.ush"
int  CondMask(bool Cond, int  Src0, int  Src1) { return Cond ? Src0 : Src1; }

#line 1033 "/Engine/Public/Platform.ush"
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }

#line 1034 "/Engine/Public/Platform.ush"
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }

#line 1035 "/Engine/Public/Platform.ush"
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

#line 1037 "/Engine/Public/Platform.ush"
uint  CondMask(bool Cond, uint  Src0, uint  Src1) { return Cond ? Src0 : Src1; }

#line 1038 "/Engine/Public/Platform.ush"
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }

#line 1039 "/Engine/Public/Platform.ush"
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }

#line 1040 "/Engine/Public/Platform.ush"
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }

#line 1063 "/Engine/Public/Platform.ush"
uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	
	
	Size &= 31;
	Offset &= 31;
	return (Data >> Offset) & ((1u << Size) - 1u);
}

#line 55 "/Engine/Private/PackUnpack.ush"
uint PackUInt2ToUInt(uint X, uint Y)
{
	return X | (Y << 16u);
}

#line 62 "/Engine/Private/PackUnpack.ush"
uint PackUInt2ToUInt(uint2 XY)
{
	return PackUInt2ToUInt(XY.x, XY.y);
}

#line 77 "/Engine/Private/PackUnpack.ush"
uint PackFloat2ToUInt(float X, float Y)
{
	return PackUInt2ToUInt(f32tof16(X), f32tof16(Y));
}

#line 83 "/Engine/Private/PackUnpack.ush"
uint PackFloat2ToUInt(float2 XY)
{
	return PackFloat2ToUInt(XY.x, XY.y);
}

#line 88 "/Engine/Private/PackUnpack.ush"
float2 UnpackFloat2FromUInt(uint In)
{
	return float2(f16tof32(In), f16tof32(In >> 16));
}

#line 97 "/Engine/Private/PackUnpack.ush"
uint PackR8(float Value)
{
	return uint(saturate(Value) * 255.0f);
}

#line 102 "/Engine/Private/PackUnpack.ush"
float UnpackR8(uint In)
{



	return float(In & 0xFF) * (1.0f / 255.0f);

}

#line 115 "/Engine/Private/PackUnpack.ush"
uint PackRGBA8(float4 In)
{



	uint r = (uint(saturate(In.r) * 255.0f) << 0);
	uint g = (uint(saturate(In.g) * 255.0f) << 8);
	uint b = (uint(saturate(In.b) * 255.0f) << 16);
	uint a = (uint(saturate(In.a) * 255.0f) << 24);
	return r | g | b | a;

}

#line 128 "/Engine/Private/PackUnpack.ush"
float4 UnpackRGBA8(uint In)
{







	float4 Out;
	Out.r = float((In >> 0) & 0xFF) * (1.0f / 255.0f);
	Out.g = float((In >> 8) & 0xFF) * (1.0f / 255.0f);
	Out.b = float((In >> 16) & 0xFF) * (1.0f / 255.0f);
	Out.a = float((In >> 24) & 0xFF) * (1.0f / 255.0f);
	return Out;

}

#line 150 "/Engine/Private/PackUnpack.ush"
uint Pack10F(float Value)
{
	return (f32tof16(Value) >> 5) & 0x000003FF;
}

#line 164 "/Engine/Private/PackUnpack.ush"
uint PackR11G11B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 17) & 0xFFE00000;
	uint g = (f32tof16(rgb.g) << 6) & 0x001FFC00;
	uint b = (f32tof16(rgb.b) >> 5) & 0x000003FF;
	return r | g | b;
}

#line 172 "/Engine/Private/PackUnpack.ush"
float3 UnpackR11G11B10F(uint rgb)
{
	float r = f16tof32((rgb >> 17) & 0x7FF0);
	float g = f16tof32((rgb >> 6) & 0x7FF0);
	float b = f16tof32((rgb << 5) & 0x7FE0);
	return float3(r, g, b);
}

#line 184 "/Engine/Private/PackUnpack.ush"
uint PackR10G10B10F(float3 rgb)
{
	uint r = (f32tof16(rgb.r) << 15) & 0x3FF00000;	
	uint g = (f32tof16(rgb.g) << 5) & 0x000FFC00;	
	uint b = (f32tof16(rgb.b) >> 5) & 0x000003FF;	
	return r | g | b;
}

#line 116 "/Engine/Private/Common.ush"
const static float PI = 3.1415926535897932f;

#line 118 "/Engine/Private/Common.ush"
const static float Max11BitsFloat = 65024.0f;

#line 119 "/Engine/Private/Common.ush"
const static float Max10BitsFloat = 64512.0f;

#line 120 "/Engine/Private/Common.ush"
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);

#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

#line 11 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

#line 17 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

#line 23 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};

#line 58 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCMatrix
{
	float4x4 M;
	float3 Tile; 
};

#line 65 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile; 
	int Dummy; 
};

#line 75 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCGetTileOffset(FLWCScalar V) { return  (( V ).Tile) * 2097152.00f; }

#line 76 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCGetTileOffset(FLWCVector2 V) { return  (( V ).Tile) * 2097152.00f; }

#line 77 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCVector3 V) { return  (( V ).Tile) * 2097152.00f; }

#line 78 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCGetTileOffset(FLWCVector4 V) { return  (( V ).Tile) * 2097152.00f; }

#line 79 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 80 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  (( V ).Tile) * 2097152.00f; }

#line 82 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 Make4x3Matrix(float4x4 M)
{
	
	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

#line 93 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

#line 103 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 111 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 119 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 127 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	 ( Result ).Tile = ( Tile );
	Result.Offset = Offset;
	return Result;
}

#line 135 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

#line 140 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( (( XYZ ).Tile), float4(XYZ.Offset, W));
}

#line 145 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

#line 147 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( (( X ).Tile),  (( Y ).Tile)), float2(X.Offset, Y.Offset)); }

#line 149 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile)), float3(X.Offset, Y.Offset, Z.Offset)); }

#line 150 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( (( X ).Tile),  (( YZ ).Tile)), float3(X.Offset, YZ.Offset)); }

#line 151 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( (( XY ).Tile),  (( Z ).Tile)), float3(XY.Offset, Z.Offset)); }

#line 153 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }

#line 154 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( Y ).Tile),  (( ZW ).Tile)), float4(X.Offset, Y.Offset, ZW.Offset)); }

#line 155 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZ ).Tile),  (( W ).Tile)), float4(X.Offset, YZ.Offset, W.Offset)); }

#line 156 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( (( XY ).Tile),  (( Z ).Tile),  (( W ).Tile)), float4(XY.Offset, Z.Offset, W.Offset)); }

#line 157 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( (( XY ).Tile),  (( ZW ).Tile)), float4(XY.Offset, ZW.Offset)); }

#line 158 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( (( X ).Tile),  (( YZW ).Tile)), float4(X.Offset, YZW.Offset)); }

#line 159 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( (( XYZ ).Tile),  (( W ).Tile)), float4(XYZ.Offset, W.Offset)); }

#line 161 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = InMatrix;
	return Result;
}

#line 169 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	 ( Result ).Tile = ( Tile );
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

#line 177 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

#line 186 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	 ( Result ).Tile = ( -Tile );
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}

#line 197 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }

#line 198 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 199 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 200 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( (( V ).Tile)[C], V.Offset[C]); }

#line 227 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(FLWCScalar Value)   { return LWCGetTileOffset(Value) + Value.Offset; }

#line 228 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 229 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 230 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

#line 232 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

#line 239 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

#line 245 "/Engine/Private/LargeWorldCoordinates.ush"
float3x3 LWCToFloat3x3(FLWCMatrix Value)
{
	return (float3x3)Value.M;
}

#line 250 "/Engine/Private/LargeWorldCoordinates.ush"
float3x3 LWCToFloat3x3(FLWCInverseMatrix Value)
{
	return (float3x3)Value.M;
}

#line 256 "/Engine/Private/LargeWorldCoordinates.ush"
float LWCToFloat(float Value) { return Value; }

#line 257 "/Engine/Private/LargeWorldCoordinates.ush"
float2 LWCToFloat(float2 Value) { return Value; }

#line 258 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCToFloat(float3 Value) { return Value; }

#line 259 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCToFloat(float4 Value) { return Value; }

#line 260 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCToFloat(float4x4 Value) { return Value; }

#line 263 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }

#line 264 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }

#line 265 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }

#line 266 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }

#line 267 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }

#line 268 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

#line 270 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }

#line 271 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }

#line 272 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }

#line 273 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }

#line 274 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }

#line 277 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{
	
	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( (( InMatrix ).Tile), Offset);
}

#line 284 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( (( InMatrix ).Tile), Offset);
}

#line 290 "/Engine/Private/LargeWorldCoordinates.ush"
float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( (( Position ).Tile) +  (( InMatrix ).Tile), Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

#line 296 "/Engine/Private/LargeWorldCoordinates.ush"
float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( (( Position ).Tile) + float4( (( InMatrix ).Tile), 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

#line 312 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( (( Rhs ).Tile), ResultMatrix);
}

#line 318 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- (( Lhs ).Tile), ResultMatrix);
}

#line 324 "/Engine/Private/LargeWorldCoordinates.ush"
float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{
	
	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( (( Lhs ).Tile) +  (( Rhs ).Tile)) * 2097152.00f));
	Result = mul(Result, Rhs.M);
	return Result;
}

#line 361 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( (( InMatrix ).Tile), InMatrix.M[3].xyz);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCNormalizeTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMakeIntTile(FLWCScalar V)
{
	float IntTile = floor(V.Tile);
	return MakeLWCScalar(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float LWCSqrtUnscaled(FLWCScalar V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float LWCRcpUnscaled(FLWCScalar V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float LWCRcpScaled(FLWCScalar V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float LWCRcp(FLWCScalar V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 45 "/Engine/Private/LWCOperations.ush"
float LWCDdx(FLWCScalar V) { return (float)0; }

#line 46 "/Engine/Private/LWCOperations.ush"
float LWCDdy(FLWCScalar V) { return (float)0; }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCAdd(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSubtract(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCFloor(FLWCScalar V) { FLWCScalar VN = LWCMakeIntTile(V); return MakeLWCScalar( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float LWCSaturate(FLWCScalar V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return MakeLWCScalar( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCMultiply(FLWCScalar Lhs, float Rhs) { return MakeLWCScalar( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCDivide(float Lhs, FLWCScalar Rhs) { return MakeLWCScalar((float)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float LWCFmodFloor(FLWCScalar Lhs, float Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float LWCFmodFloor2PI(FLWCScalar V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float LWCSin(FLWCScalar V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float LWCCos(FLWCScalar V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCScalar LWCSquareScaled(FLWCScalar V)
{
	float OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCScalar( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCNormalizeTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMakeIntTile(FLWCVector2 V)
{
	float2 IntTile = floor(V.Tile);
	return MakeLWCVector2(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float2 LWCSqrtUnscaled(FLWCVector2 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float2 LWCRcpUnscaled(FLWCVector2 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float2 LWCRcpScaled(FLWCVector2 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float2 LWCRcp(FLWCVector2 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 45 "/Engine/Private/LWCOperations.ush"
float2 LWCDdx(FLWCVector2 V) { return (float2)0; }

#line 46 "/Engine/Private/LWCOperations.ush"
float2 LWCDdy(FLWCVector2 V) { return (float2)0; }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCAdd(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSubtract(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCFloor(FLWCVector2 V) { FLWCVector2 VN = LWCMakeIntTile(V); return MakeLWCVector2( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float2 LWCSaturate(FLWCVector2 V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	return MakeLWCVector2( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCMultiply(FLWCVector2 Lhs, float2 Rhs) { return MakeLWCVector2( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(FLWCVector2 Lhs, float2 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCDivide(float2 Lhs, FLWCVector2 Rhs) { return MakeLWCVector2((float2)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float2 LWCFmodFloor(FLWCVector2 Lhs, float2 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float2 LWCFmodFloor2PI(FLWCVector2 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float2 LWCSin(FLWCVector2 V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float2 LWCCos(FLWCVector2 V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCVector2 LWCSquareScaled(FLWCVector2 V)
{
	float2 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector2( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCNormalizeTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMakeIntTile(FLWCVector3 V)
{
	float3 IntTile = floor(V.Tile);
	return MakeLWCVector3(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float3 LWCSqrtUnscaled(FLWCVector3 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float3 LWCRcpUnscaled(FLWCVector3 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float3 LWCRcpScaled(FLWCVector3 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float3 LWCRcp(FLWCVector3 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 45 "/Engine/Private/LWCOperations.ush"
float3 LWCDdx(FLWCVector3 V) { return (float3)0; }

#line 46 "/Engine/Private/LWCOperations.ush"
float3 LWCDdy(FLWCVector3 V) { return (float3)0; }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCAdd(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSubtract(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCFloor(FLWCVector3 V) { FLWCVector3 VN = LWCMakeIntTile(V); return MakeLWCVector3( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float3 LWCSaturate(FLWCVector3 V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	return MakeLWCVector3( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCMultiply(FLWCVector3 Lhs, float3 Rhs) { return MakeLWCVector3( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(FLWCVector3 Lhs, float3 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCDivide(float3 Lhs, FLWCVector3 Rhs) { return MakeLWCVector3((float3)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float3 LWCFmodFloor(FLWCVector3 Lhs, float3 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float3 LWCFmodFloor2PI(FLWCVector3 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float3 LWCSin(FLWCVector3 V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float3 LWCCos(FLWCVector3 V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCVector3 LWCSquareScaled(FLWCVector3 V)
{
	float3 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector3( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 5 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCNormalizeTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile + (V.Offset * 4.76837158e-07f + 0.5f));
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 12 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMakeIntTile(FLWCVector4 V)
{
	float4 IntTile = floor(V.Tile);
	return MakeLWCVector4(IntTile, (V.Tile - IntTile) * 2097152.00f + V.Offset);
}

#line 18 "/Engine/Private/LWCOperations.ush"
float4 LWCSqrtUnscaled(FLWCVector4 V) { return sqrt(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 20 "/Engine/Private/LWCOperations.ush"
float4 LWCRcpUnscaled(FLWCVector4 V) { return rcp(V.Offset * 4.76837158e-07f +  (( V ).Tile)); }

#line 23 "/Engine/Private/LWCOperations.ush"
float4 LWCRcpScaled(FLWCVector4 V, float Scale) { return LWCRcpUnscaled(V) * Scale; }

#line 26 "/Engine/Private/LWCOperations.ush"
float4 LWCRcp(FLWCVector4 V) { return LWCRcpScaled(V, 4.76837158e-07f); }

#line 45 "/Engine/Private/LWCOperations.ush"
float4 LWCDdx(FLWCVector4 V) { return (float4)0; }

#line 46 "/Engine/Private/LWCOperations.ush"
float4 LWCDdy(FLWCVector4 V) { return (float4)0; }

#line 52 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) +  (( Rhs ).Tile), Lhs.Offset + Rhs.Offset); }

#line 53 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile), Lhs + Rhs.Offset); }

#line 54 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCAdd(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset + Rhs); }

#line 56 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) -  (( Rhs ).Tile), Lhs.Offset - Rhs.Offset); }

#line 57 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4(- (( Rhs ).Tile), Lhs - Rhs.Offset); }

#line 58 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSubtract(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile), Lhs.Offset - Rhs); }

#line 97 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCFloor(FLWCVector4 V) { FLWCVector4 VN = LWCMakeIntTile(V); return MakeLWCVector4( (( VN ).Tile), floor(VN.Offset)); }

#line 104 "/Engine/Private/LWCOperations.ush"
float4 LWCSaturate(FLWCVector4 V) { return saturate(LWCToFloat(V)); }

#line 107 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	return MakeLWCVector4( (( Lhs ).Tile) * ( (( Rhs ).Tile) * 2097152.00f + Rhs.Offset) +  (( Rhs ).Tile) * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}

#line 111 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4( (( Rhs ).Tile) * Lhs, Lhs * Rhs.Offset); }

#line 112 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCMultiply(FLWCVector4 Lhs, float4 Rhs) { return MakeLWCVector4( (( Lhs ).Tile) * Rhs, Lhs.Offset * Rhs); }

#line 114 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }

#line 115 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(FLWCVector4 Lhs, float4 Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }

#line 116 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCDivide(float4 Lhs, FLWCVector4 Rhs) { return MakeLWCVector4((float4)0, Lhs * LWCRcp(Rhs)); }

#line 130 "/Engine/Private/LWCOperations.ush"
float4 LWCFmodFloor(FLWCVector4 Lhs, float4 Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));
	
	
}

#line 141 "/Engine/Private/LWCOperations.ush"
float4 LWCFmodFloor2PI(FLWCVector4 V)
{
	return LWCFmodFloor(V, 2.0f * PI);
	
}

#line 147 "/Engine/Private/LWCOperations.ush"
float4 LWCSin(FLWCVector4 V) { return sin(LWCFmodFloor2PI(V)); }

#line 148 "/Engine/Private/LWCOperations.ush"
float4 LWCCos(FLWCVector4 V) { return cos(LWCFmodFloor2PI(V)); }

#line 174 "/Engine/Private/LWCOperations.ush"
FLWCVector4 LWCSquareScaled(FLWCVector4 V)
{
	float4 OffsetScaled = V.Offset * 4.76837158e-07f;
	return MakeLWCVector4( (( V ).Tile) * ( (( V ).Tile) + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}

#line 423 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCScalar V) { return V; }

#line 424 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector2 V) { return LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)); }

#line 425 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector3 V) { return LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)); }

#line 426 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCVectorSum(FLWCVector4 V) { return LWCAdd(LWCAdd(LWCAdd( LWCGetComponent( V , 0),  LWCGetComponent( V , 1)),  LWCGetComponent( V , 2)),  LWCGetComponent( V , 3)); }

#line 428 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs) { return LWCMultiply(Lhs, Rhs); }

#line 429 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs) { return LWCMultiply(Lhs, Rhs); }

#line 430 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 431 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 432 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 433 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 434 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 435 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs) { return LWCVectorSum(LWCMultiply(Lhs, Rhs)); }

#line 438 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

#line 443 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	return LWCAdd(X2, Y2);
}

#line 450 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

#line 458 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent( V , 0));
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent( V , 1));
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent( V , 2));
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent( V , 3));
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}

#line 469 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 470 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 471 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 472 "/Engine/Private/LargeWorldCoordinates.ush"
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

#line 3 "/Engine/Generated/UniformBuffers/View.ush"
cbuffer  UniformBufferConstants_View 
{
	 float4x4  View_TranslatedWorldToClip;
	 float4x4  View_RelativeWorldToClip;
	 float4x4  View_ClipToRelativeWorld;
	 float4x4  View_TranslatedWorldToView;
	 float4x4  View_ViewToTranslatedWorld;
	 float4x4  View_TranslatedWorldToCameraView;
	 float4x4  View_CameraViewToTranslatedWorld;
	 float4x4  View_ViewToClip;
	 float4x4  View_ViewToClipNoAA;
	 float4x4  View_ClipToView;
	 float4x4  View_ClipToTranslatedWorld;
	 float4x4  View_SVPositionToTranslatedWorld;
	 float4x4  View_ScreenToRelativeWorld;
	 float4x4  View_ScreenToTranslatedWorld;
	 float4x4  View_MobileMultiviewShadowTransform;
	 float3  View_ViewTilePosition;
	 float  PrePadding_View_972;
	 float3  View_MatrixTilePosition;
	 float  PrePadding_View_988;
	 float3  View_ViewForward;
	 float  PrePadding_View_1004;
	 float3  View_ViewUp;
	 float  PrePadding_View_1020;
	 float3  View_ViewRight;
	 float  PrePadding_View_1036;
	 float3  View_HMDViewNoRollUp;
	 float  PrePadding_View_1052;
	 float3  View_HMDViewNoRollRight;
	 float  PrePadding_View_1068;
	 float4  View_InvDeviceZToWorldZTransform;
	 float4  View_ScreenPositionScaleBias;
	 float3  View_RelativeWorldCameraOrigin;
	 float  PrePadding_View_1116;
	 float3  View_TranslatedWorldCameraOrigin;
	 float  PrePadding_View_1132;
	 float3  View_RelativeWorldViewOrigin;
	 float  PrePadding_View_1148;
	 float3  View_RelativePreViewTranslation;
	 float  PrePadding_View_1164;
	 float4x4  View_PrevViewToClip;
	 float4x4  View_PrevClipToView;
	 float4x4  View_PrevTranslatedWorldToClip;
	 float4x4  View_PrevTranslatedWorldToView;
	 float4x4  View_PrevViewToTranslatedWorld;
	 float4x4  View_PrevTranslatedWorldToCameraView;
	 float4x4  View_PrevCameraViewToTranslatedWorld;
	 float3  View_PrevTranslatedWorldCameraOrigin;
	 float  PrePadding_View_1628;
	 float3  View_PrevRelativeWorldCameraOrigin;
	 float  PrePadding_View_1644;
	 float3  View_PrevRelativeWorldViewOrigin;
	 float  PrePadding_View_1660;
	 float3  View_RelativePrevPreViewTranslation;
	 float  PrePadding_View_1676;
	 float4x4  View_PrevClipToRelativeWorld;
	 float4x4  View_PrevScreenToTranslatedWorld;
	 float4x4  View_ClipToPrevClip;
	 float4x4  View_ClipToPrevClipWithAA;
	 float4  View_TemporalAAJitter;
	 float4  View_GlobalClippingPlane;
	 float2  View_FieldOfViewWideAngles;
	 float2  View_PrevFieldOfViewWideAngles;
	 float4  View_ViewRectMin;
	 float4  View_ViewSizeAndInvSize;
	 uint4  View_ViewRectMinAndSize;
	 float4  View_LightProbeSizeRatioAndInvSizeRatio;
	 float4  View_BufferSizeAndInvSize;
	 float4  View_BufferBilinearUVMinMax;
	 float4  View_ScreenToViewSpace;
	 float2  View_BufferToSceneTextureScale;
	 float2  View_ResolutionFractionAndInv;
	 int  View_NumSceneColorMSAASamples;
	 float  View_ProjectionDepthThicknessScale;
	 float  View_PreExposure;
	 float  View_OneOverPreExposure;
	 float4  View_DiffuseOverrideParameter;
	 float4  View_SpecularOverrideParameter;
	 float4  View_NormalOverrideParameter;
	 float2  View_RoughnessOverrideParameter;
	 float  View_PrevFrameGameTime;
	 float  View_PrevFrameRealTime;
	 float  View_OutOfBoundsMask;
	 float  PrePadding_View_2196;
	 float  PrePadding_View_2200;
	 float  PrePadding_View_2204;
	 float3  View_WorldCameraMovementSinceLastFrame;
	 float  View_CullingSign;
	 float  View_NearPlane;
	 float  View_GameTime;
	 float  View_RealTime;
	 float  View_DeltaTime;
	 float  View_MaterialTextureMipBias;
	 float  View_MaterialTextureDerivativeMultiply;
	 uint  View_Random;
	 uint  View_FrameNumber;
	 uint  View_FrameCounter;
	 uint  View_StateFrameIndexMod8;
	 uint  View_StateFrameIndex;
	 uint  View_DebugViewModeMask;
	 uint  View_WorldIsPaused;
	 float  View_CameraCut;
	 float  View_UnlitViewmodeMask;
	 float  PrePadding_View_2284;
	 float4  View_DirectionalLightColor;
	 float3  View_DirectionalLightDirection;
	 float  PrePadding_View_2316;
	 float4  View_TranslucencyLightingVolumeMin[2];
	 float4  View_TranslucencyLightingVolumeInvSize[2];
	 float4  View_TemporalAAParams;
	 float4  View_CircleDOFParams;
	 float  View_DepthOfFieldSensorWidth;
	 float  View_DepthOfFieldFocalDistance;
	 float  View_DepthOfFieldScale;
	 float  View_DepthOfFieldFocalLength;
	 float  View_DepthOfFieldFocalRegion;
	 float  View_DepthOfFieldNearTransitionRegion;
	 float  View_DepthOfFieldFarTransitionRegion;
	 float  View_MotionBlurNormalizedToPixel;
	 float  View_GeneralPurposeTweak;
	 float  View_GeneralPurposeTweak2;
	 float  View_DemosaicVposOffset;
	 float  View_DecalDepthBias;
	 float3  View_IndirectLightingColorScale;
	 float  PrePadding_View_2476;
	 float3  View_PrecomputedIndirectLightingColorScale;
	 float  PrePadding_View_2492;
	 float3  View_PrecomputedIndirectSpecularColorScale;
	 float  PrePadding_View_2508;
	 float4  View_AtmosphereLightDirection[2];
	 float4  View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	 float4  View_AtmosphereLightIlluminanceOuterSpace[2];
	 float4  View_AtmosphereLightDiscLuminance[2];
	 float4  View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	 float4  View_SkyViewLutSizeAndInvSize;
	 float3  View_SkyCameraTranslatedWorldOrigin;
	 float  PrePadding_View_2700;
	 float4  View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	 float4x4  View_SkyViewLutReferential;
	 float4  View_SkyAtmosphereSkyLuminanceFactor;
	 float  View_SkyAtmospherePresentInScene;
	 float  View_SkyAtmosphereHeightFogContribution;
	 float  View_SkyAtmosphereBottomRadiusKm;
	 float  View_SkyAtmosphereTopRadiusKm;
	 float4  View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	 float  View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	 float  View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	 float  View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	 float  PrePadding_View_2856;
	 float  PrePadding_View_2860;
	 float3  View_NormalCurvatureToRoughnessScaleBias;
	 float  View_RenderingReflectionCaptureMask;
	 float  View_RealTimeReflectionCapture;
	 float  View_RealTimeReflectionCapturePreExposure;
	 float  PrePadding_View_2888;
	 float  PrePadding_View_2892;
	 float4  View_AmbientCubemapTint;
	 float  View_AmbientCubemapIntensity;
	 float  View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	 float  View_SkyLightAffectReflectionFlag;
	 float  View_SkyLightAffectGlobalIlluminationFlag;
	 float4  View_SkyLightColor;
	 float4  View_MobileSkyIrradianceEnvironmentMap[8];
	 float  View_MobilePreviewMode;
	 float  View_HMDEyePaddingOffset;
	 float  View_ReflectionCubemapMaxMip;
	 float  View_ShowDecalsMask;
	 uint  View_DistanceFieldAOSpecularOcclusionMode;
	 float  View_IndirectCapsuleSelfShadowingIntensity;
	 float  PrePadding_View_3096;
	 float  PrePadding_View_3100;
	 float3  View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	 int  View_StereoPassIndex;
	 float4  View_GlobalVolumeTranslatedCenterAndExtent[6];
	 float4  View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	 float4  View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	 float  View_GlobalDistanceFieldMipFactor;
	 float  View_GlobalDistanceFieldMipTransition;
	 int  View_GlobalDistanceFieldClipmapSizeInPages;
	 int  PrePadding_View_3516;
	 float3  View_GlobalDistanceFieldInvPageAtlasSize;
	 float  PrePadding_View_3532;
	 float3  View_GlobalDistanceFieldInvCoverageAtlasSize;
	 float  View_GlobalVolumeDimension;
	 float  View_GlobalVolumeTexelSize;
	 float  View_MaxGlobalDFAOConeDistance;
	 uint  View_NumGlobalSDFClipmaps;
	 float  View_CoveredExpandSurfaceScale;
	 float  View_NotCoveredExpandSurfaceScale;
	 float  View_NotCoveredMinStepScale;
	 float  View_DitheredTransparencyStepThreshold;
	 float  View_DitheredTransparencyTraceThreshold;
	 int2  View_CursorPosition;
	 float  View_bCheckerboardSubsurfaceProfileRendering;
	 float  PrePadding_View_3596;
	 float3  View_VolumetricFogInvGridSize;
	 float  PrePadding_View_3612;
	 float3  View_VolumetricFogGridZParams;
	 float  PrePadding_View_3628;
	 float2  View_VolumetricFogSVPosToVolumeUV;
	 float2  View_VolumetricFogViewGridUVToPrevViewRectUV;
	 float2  View_VolumetricFogPrevViewGridRectUVToResourceUV;
	 float2  View_VolumetricFogPrevUVMax;
	 float2  View_VolumetricFogScreenToResourceUV;
	 float2  View_VolumetricFogUVMax;
	 float  View_VolumetricFogMaxDistance;
	 float  PrePadding_View_3684;
	 float  PrePadding_View_3688;
	 float  PrePadding_View_3692;
	 float3  View_VolumetricLightmapWorldToUVScale;
	 float  PrePadding_View_3708;
	 float3  View_VolumetricLightmapWorldToUVAdd;
	 float  PrePadding_View_3724;
	 float3  View_VolumetricLightmapIndirectionTextureSize;
	 float  View_VolumetricLightmapBrickSize;
	 float3  View_VolumetricLightmapBrickTexelSize;
	 float  View_IndirectLightingCacheShowFlag;
	 float  View_EyeToPixelSpreadAngle;
	 float  PrePadding_View_3764;
	 float  PrePadding_View_3768;
	 float  PrePadding_View_3772;
	 float4  View_XRPassthroughCameraUVs[2];
	 float  View_GlobalVirtualTextureMipBias;
	 uint  View_VirtualTextureFeedbackShift;
	 uint  View_VirtualTextureFeedbackMask;
	 uint  View_VirtualTextureFeedbackStride;
	 uint  View_VirtualTextureFeedbackJitterOffset;
	 uint  View_VirtualTextureFeedbackSampleOffset;
	 uint  PrePadding_View_3832;
	 uint  PrePadding_View_3836;
	 float4  View_RuntimeVirtualTextureMipLevel;
	 float2  View_RuntimeVirtualTexturePackHeight;
	 float  PrePadding_View_3864;
	 float  PrePadding_View_3868;
	 float4  View_RuntimeVirtualTextureDebugParams;
	 float  View_OverrideLandscapeLOD;
	 int  View_FarShadowStaticMeshLODBias;
	 float  View_MinRoughness;
	 float  PrePadding_View_3900;
	 float4  View_HairRenderInfo;
	 uint  View_EnableSkyLight;
	 uint  View_HairRenderInfoBits;
	 uint  View_HairComponents;
	 float  View_bSubsurfacePostprocessEnabled;
	 float4  View_SSProfilesTextureSizeAndInvSize;
	 float4  View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	 float4  View_SpecularProfileTextureSizeAndInvSize;
	 float3  View_PhysicsFieldClipmapCenter;
	 float  View_PhysicsFieldClipmapDistance;
	 int  View_PhysicsFieldClipmapResolution;
	 int  View_PhysicsFieldClipmapExponent;
	 int  View_PhysicsFieldClipmapCount;
	 int  View_PhysicsFieldTargetCount;
	 int4  View_PhysicsFieldTargets[32];
	 uint  View_GPUSceneViewId;
	 float  View_ViewResolutionFraction;
	 float  View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	 float  PrePadding_View_4540;
	 float4  View_TanAndInvTanHalfFOV;
	 float4  View_PrevTanAndInvTanHalfFOV;
	 float4  View_GlintLUTParameters0;
	 float4  View_GlintLUTParameters1;
	 uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler ;
	 uint  PrePadding_View_4612;
	 uint BindlessSampler_View_MaterialTextureBilinearClampedSampler ;
	 uint  PrePadding_View_4620;
	 uint BindlessResource_View_VolumetricLightmapIndirectionTexture ;
	 uint  PrePadding_View_4628;
	 uint BindlessResource_View_VolumetricLightmapBrickAmbientVector ;
	 uint  PrePadding_View_4636;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0 ;
	 uint  PrePadding_View_4644;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1 ;
	 uint  PrePadding_View_4652;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2 ;
	 uint  PrePadding_View_4660;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3 ;
	 uint  PrePadding_View_4668;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4 ;
	 uint  PrePadding_View_4676;
	 uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5 ;
	 uint  PrePadding_View_4684;
	 uint BindlessResource_View_SkyBentNormalBrickTexture ;
	 uint  PrePadding_View_4692;
	 uint BindlessResource_View_DirectionalLightShadowingBrickTexture ;
	 uint  PrePadding_View_4700;
	 uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler ;
	 uint  PrePadding_View_4708;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler0 ;
	 uint  PrePadding_View_4716;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler1 ;
	 uint  PrePadding_View_4724;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler2 ;
	 uint  PrePadding_View_4732;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler3 ;
	 uint  PrePadding_View_4740;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler4 ;
	 uint  PrePadding_View_4748;
	 uint BindlessSampler_View_VolumetricLightmapTextureSampler5 ;
	 uint  PrePadding_View_4756;
	 uint BindlessSampler_View_SkyBentNormalTextureSampler ;
	 uint  PrePadding_View_4764;
	 uint BindlessSampler_View_DirectionalLightShadowingTextureSampler ;
	 uint  PrePadding_View_4772;
	 uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture ;
	 uint  PrePadding_View_4780;
	 uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture ;
	 uint  PrePadding_View_4788;
	 uint BindlessResource_View_GlobalDistanceFieldPageTableTexture ;
	 uint  PrePadding_View_4796;
	 uint BindlessResource_View_GlobalDistanceFieldMipTexture ;
	 uint  PrePadding_View_4804;
	 uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler ;
	 uint  PrePadding_View_4812;
	 uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler ;
	 uint  PrePadding_View_4820;
	 uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler ;
	 uint  PrePadding_View_4828;
	 uint BindlessResource_View_AtmosphereTransmittanceTexture ;
	 uint  PrePadding_View_4836;
	 uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler ;
	 uint  PrePadding_View_4844;
	 uint BindlessResource_View_AtmosphereIrradianceTexture ;
	 uint  PrePadding_View_4852;
	 uint BindlessSampler_View_AtmosphereIrradianceTextureSampler ;
	 uint  PrePadding_View_4860;
	 uint BindlessResource_View_AtmosphereInscatterTexture ;
	 uint  PrePadding_View_4868;
	 uint BindlessSampler_View_AtmosphereInscatterTextureSampler ;
	 uint  PrePadding_View_4876;
	 uint BindlessResource_View_PerlinNoiseGradientTexture ;
	 uint  PrePadding_View_4884;
	 uint BindlessSampler_View_PerlinNoiseGradientTextureSampler ;
	 uint  PrePadding_View_4892;
	 uint BindlessResource_View_PerlinNoise3DTexture ;
	 uint  PrePadding_View_4900;
	 uint BindlessSampler_View_PerlinNoise3DTextureSampler ;
	 uint  PrePadding_View_4908;
	 uint BindlessResource_View_SobolSamplingTexture ;
	 uint  PrePadding_View_4916;
	 uint BindlessSampler_View_SharedPointWrappedSampler ;
	 uint  PrePadding_View_4924;
	 uint BindlessSampler_View_SharedPointClampedSampler ;
	 uint  PrePadding_View_4932;
	 uint BindlessSampler_View_SharedBilinearWrappedSampler ;
	 uint  PrePadding_View_4940;
	 uint BindlessSampler_View_SharedBilinearClampedSampler ;
	 uint  PrePadding_View_4948;
	 uint BindlessSampler_View_SharedBilinearAnisoClampedSampler ;
	 uint  PrePadding_View_4956;
	 uint BindlessSampler_View_SharedTrilinearWrappedSampler ;
	 uint  PrePadding_View_4964;
	 uint BindlessSampler_View_SharedTrilinearClampedSampler ;
	 uint  PrePadding_View_4972;
	 uint BindlessResource_View_PreIntegratedBRDF ;
	 uint  PrePadding_View_4980;
	 uint BindlessSampler_View_PreIntegratedBRDFSampler ;
	 uint  PrePadding_View_4988;
	 uint BindlessResource_View_SkyIrradianceEnvironmentMap ;
	 uint  PrePadding_View_4996;
	 uint BindlessResource_View_TransmittanceLutTexture ;
	 uint  PrePadding_View_5004;
	 uint BindlessSampler_View_TransmittanceLutTextureSampler ;
	 uint  PrePadding_View_5012;
	 uint BindlessResource_View_SkyViewLutTexture ;
	 uint  PrePadding_View_5020;
	 uint BindlessSampler_View_SkyViewLutTextureSampler ;
	 uint  PrePadding_View_5028;
	 uint BindlessResource_View_DistantSkyLightLutTexture ;
	 uint  PrePadding_View_5036;
	 uint BindlessSampler_View_DistantSkyLightLutTextureSampler ;
	 uint  PrePadding_View_5044;
	 uint BindlessResource_View_CameraAerialPerspectiveVolume ;
	 uint  PrePadding_View_5052;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler ;
	 uint  PrePadding_View_5060;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly ;
	 uint  PrePadding_View_5068;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler ;
	 uint  PrePadding_View_5076;
	 uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly ;
	 uint  PrePadding_View_5084;
	 uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler ;
	 uint  PrePadding_View_5092;
	 uint BindlessResource_View_HairScatteringLUTTexture ;
	 uint  PrePadding_View_5100;
	 uint BindlessSampler_View_HairScatteringLUTSampler ;
	 uint  PrePadding_View_5108;
	 uint BindlessResource_View_GGXLTCMatTexture ;
	 uint  PrePadding_View_5116;
	 uint BindlessSampler_View_GGXLTCMatSampler ;
	 uint  PrePadding_View_5124;
	 uint BindlessResource_View_GGXLTCAmpTexture ;
	 uint  PrePadding_View_5132;
	 uint BindlessSampler_View_GGXLTCAmpSampler ;
	 uint  PrePadding_View_5140;
	 uint BindlessResource_View_SheenLTCTexture ;
	 uint  PrePadding_View_5148;
	 uint BindlessSampler_View_SheenLTCSampler ;
	 uint  PrePadding_View_5156;
	 uint  View_bShadingEnergyConservation;
	 uint  View_bShadingEnergyPreservation;
	 uint BindlessResource_View_ShadingEnergyGGXSpecTexture ;
	 uint  PrePadding_View_5172;
	 uint BindlessResource_View_ShadingEnergyGGXGlassTexture ;
	 uint  PrePadding_View_5180;
	 uint BindlessResource_View_ShadingEnergyClothSpecTexture ;
	 uint  PrePadding_View_5188;
	 uint BindlessResource_View_ShadingEnergyDiffuseTexture ;
	 uint  PrePadding_View_5196;
	 uint BindlessSampler_View_ShadingEnergySampler ;
	 uint  PrePadding_View_5204;
	 uint BindlessResource_View_GlintTexture ;
	 uint  PrePadding_View_5212;
	 uint BindlessSampler_View_GlintSampler ;
	 uint  PrePadding_View_5220;
	 uint BindlessResource_View_SimpleVolumeTexture ;
	 uint  PrePadding_View_5228;
	 uint BindlessSampler_View_SimpleVolumeTextureSampler ;
	 uint  PrePadding_View_5236;
	 uint BindlessResource_View_SimpleVolumeEnvTexture ;
	 uint  PrePadding_View_5244;
	 uint BindlessSampler_View_SimpleVolumeEnvTextureSampler ;
	 uint  PrePadding_View_5252;
	 uint BindlessResource_View_SSProfilesTexture ;
	 uint  PrePadding_View_5260;
	 uint BindlessSampler_View_SSProfilesSampler ;
	 uint  PrePadding_View_5268;
	 uint BindlessSampler_View_SSProfilesTransmissionSampler ;
	 uint  PrePadding_View_5276;
	 uint BindlessResource_View_SSProfilesPreIntegratedTexture ;
	 uint  PrePadding_View_5284;
	 uint BindlessSampler_View_SSProfilesPreIntegratedSampler ;
	 uint  PrePadding_View_5292;
	 uint BindlessResource_View_SpecularProfileTexture ;
	 uint  PrePadding_View_5300;
	 uint BindlessSampler_View_SpecularProfileSampler ;
	 uint  PrePadding_View_5308;
	 uint BindlessResource_View_WaterIndirection ;
	 uint  PrePadding_View_5316;
	 uint BindlessResource_View_WaterData ;
	 uint  PrePadding_View_5324;
	 float4  View_RectLightAtlasSizeAndInvSize;
	 float  View_RectLightAtlasMaxMipLevel;
	 float  PrePadding_View_5348;
	 uint BindlessResource_View_RectLightAtlasTexture ;
	 uint  PrePadding_View_5356;
	 uint BindlessSampler_View_RectLightAtlasSampler ;
	 uint  PrePadding_View_5364;
	 uint  PrePadding_View_5368;
	 uint  PrePadding_View_5372;
	 float4  View_IESAtlasSizeAndInvSize;
	 uint BindlessResource_View_IESAtlasTexture ;
	 uint  PrePadding_View_5396;
	 uint BindlessSampler_View_IESAtlasSampler ;
	 uint  PrePadding_View_5404;
	 uint BindlessSampler_View_LandscapeWeightmapSampler ;
	 uint  PrePadding_View_5412;
	 uint BindlessResource_View_LandscapeIndirection ;
	 uint  PrePadding_View_5420;
	 uint BindlessResource_View_LandscapePerComponentData ;
	 uint  PrePadding_View_5428;
	 uint BindlessResource_View_VTFeedbackBuffer ;
	 uint  PrePadding_View_5436;
	 uint BindlessResource_View_PhysicsFieldClipmapBuffer ;
	 uint  PrePadding_View_5444;
	 uint  PrePadding_View_5448;
	 uint  PrePadding_View_5452;
	 float3  View_TLASRelativePreViewTranslation;
	 float  PrePadding_View_5468;
	 float3  View_TLASViewTilePosition;
}

#line 501 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_GlobalDistanceFieldPageAtlasTexture;

#line 503 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<uint>  View_GlobalDistanceFieldPageTableTexture;

#line 514 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_PerlinNoiseGradientTexture;

#line 515 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoiseGradientTextureSampler;

#line 516 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_PerlinNoise3DTexture;

#line 517 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_PerlinNoise3DTextureSampler;

#line 525 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SharedTrilinearClampedSampler;

#line 541 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D  View_HairScatteringLUTTexture;

#line 542 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_HairScatteringLUTSampler;

#line 543 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCMatTexture;

#line 544 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCMatSampler;

#line 545 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_GGXLTCAmpTexture;

#line 546 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_GGXLTCAmpSampler;

#line 547 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SheenLTCTexture;

#line 548 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SheenLTCSampler;

#line 549 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float2>  View_ShadingEnergyGGXSpecTexture;

#line 550 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float2>  View_ShadingEnergyGGXGlassTexture;

#line 553 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_ShadingEnergySampler;

#line 556 "/Engine/Generated/UniformBuffers/View.ush"
Texture3D<float>  View_SimpleVolumeTexture;

#line 557 "/Engine/Generated/UniformBuffers/View.ush"
SamplerState  View_SimpleVolumeTextureSampler;

#line 560 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D  View_SSProfilesTexture;

#line 569 "/Engine/Generated/UniformBuffers/View.ush"
Texture2D<float4>  View_RectLightAtlasTexture;

#line 3 "/Engine/Generated/UniformBuffers/Primitive.ush"
cbuffer  UniformBufferConstants_Primitive 
{
	 uint  Primitive_Flags;
	 uint  Primitive_InstanceSceneDataOffset;
	 uint  Primitive_NumInstanceSceneDataEntries;
	 int  Primitive_SingleCaptureIndex;
	 float3  Primitive_TilePosition;
	 uint  Primitive_PrimitiveComponentId;
	 float4x4  Primitive_LocalToRelativeWorld;
	 float4x4  Primitive_RelativeWorldToLocal;
	 float4x4  Primitive_PreviousLocalToRelativeWorld;
	 float4x4  Primitive_PreviousRelativeWorldToLocal;
	 float4x4  Primitive_WorldToPreviousWorld;
	 float3  Primitive_InvNonUniformScale;
	 float  Primitive_ObjectBoundsX;
	 float4  Primitive_ObjectRelativeWorldPositionAndRadius;
	 float3  Primitive_ActorRelativeWorldPosition;
	 uint  Primitive_LightmapUVIndex;
	 float3  Primitive_ObjectOrientation;
	 uint  Primitive_LightmapDataIndex;
	 float4  Primitive_NonUniformScale;
	 float3  Primitive_PreSkinnedLocalBoundsMin;
	 uint  Primitive_NaniteResourceID;
	 float3  Primitive_PreSkinnedLocalBoundsMax;
	 uint  Primitive_NaniteHierarchyOffset;
	 float3  Primitive_LocalObjectBoundsMin;
	 float  Primitive_ObjectBoundsY;
	 float3  Primitive_LocalObjectBoundsMax;
	 float  Primitive_ObjectBoundsZ;
	 float3  Primitive_InstanceLocalBoundsCenter;
	 uint  Primitive_InstancePayloadDataOffset;
	 float3  Primitive_InstanceLocalBoundsExtent;
	 uint  Primitive_InstancePayloadDataStride;
	 uint  Primitive_InstancePayloadExtensionSize;
	 uint  PrePadding_Primitive_532;
	 uint  PrePadding_Primitive_536;
	 uint  PrePadding_Primitive_540;
	 float3  Primitive_WireframeColor;
	 uint  Primitive_PackedNaniteFlags;
	 float3  Primitive_LevelColor;
	 int  Primitive_PersistentPrimitiveIndex;
	 float2  Primitive_InstanceDrawDistanceMinMaxSquared;
	 float  Primitive_InstanceWPODisableDistanceSquared;
	 uint  Primitive_NaniteRayTracingDataOffset;
	 float  Primitive_MaxWPOExtent;
	 float  Primitive_MinMaterialDisplacement;
	 float  Primitive_MaxMaterialDisplacement;
	 uint  Primitive_CustomStencilValueAndMask;
	 uint  Primitive_VisibilityFlags;
	 uint  PrePadding_Primitive_612;
	 uint  PrePadding_Primitive_616;
	 uint  PrePadding_Primitive_620;
	 float4  Primitive_CustomPrimitiveData[9];
}

#line 3 "/Engine/Generated/UniformBuffers/Scene.ush"
cbuffer  UniformBufferConstants_Scene 
{
	 uint BindlessResource_Scene_GPUScene_GPUSceneInstanceSceneData ;
	 uint  PrePadding_Scene_GPUScene_4;
	 uint BindlessResource_Scene_GPUScene_GPUSceneInstancePayloadData ;
	 uint  PrePadding_Scene_GPUScene_12;
	 uint BindlessResource_Scene_GPUScene_GPUScenePrimitiveSceneData ;
	 uint  PrePadding_Scene_GPUScene_20;
	 uint BindlessResource_Scene_GPUScene_GPUSceneLightmapData ;
	 uint  PrePadding_Scene_GPUScene_28;
	 uint BindlessResource_Scene_GPUScene_GPUSceneLightData ;
	 uint  PrePadding_Scene_GPUScene_36;
	 uint  Scene_GPUScene_InstanceDataSOAStride;
	 uint  Scene_GPUScene_GPUSceneFrameNumber;
	 int  Scene_GPUScene_NumInstances;
	 int  Scene_GPUScene_NumScenePrimitives;
}

#line 20 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneInstanceSceneData;

#line 21 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUSceneInstancePayloadData;

#line 22 "/Engine/Generated/UniformBuffers/Scene.ush"
StructuredBuffer<float4>  Scene_GPUScene_GPUScenePrimitiveSceneData;

#line 11 "/Engine/Generated/UniformBuffers/InstanceCulling.ush"
StructuredBuffer<uint>  InstanceCulling_InstanceIdsBuffer;

#line 3 "/Engine/Generated/UniformBuffers/LocalVF.ush"
cbuffer  UniformBufferConstants_LocalVF 
{
	 int4  LocalVF_VertexFetch_Parameters;
	 int  LocalVF_PreSkinBaseVertexIndex;
	 uint  LocalVF_LODLightmapDataIndex;
	 uint BindlessResource_LocalVF_VertexFetch_TexCoordBuffer ;
	 uint  PrePadding_LocalVF_28;
	 uint BindlessResource_LocalVF_VertexFetch_PositionBuffer ;
	 uint  PrePadding_LocalVF_36;
	 uint BindlessResource_LocalVF_VertexFetch_PreSkinPositionBuffer ;
	 uint  PrePadding_LocalVF_44;
	 uint BindlessResource_LocalVF_VertexFetch_PackedTangentsBuffer ;
	 uint  PrePadding_LocalVF_52;
	 uint BindlessResource_LocalVF_VertexFetch_ColorComponentsBuffer ;
}

#line 20 "/Engine/Generated/UniformBuffers/LocalVF.ush"
Buffer<float>  LocalVF_VertexFetch_PreSkinPositionBuffer;

#line 21 "/Engine/Generated/UniformBuffers/LocalVF.ush"
Buffer<float4>  LocalVF_VertexFetch_PackedTangentsBuffer;

#line 22 "/Engine/Generated/UniformBuffers/LocalVF.ush"
Buffer<float4>  LocalVF_VertexFetch_ColorComponentsBuffer;

#line 3 "/Engine/Generated/UniformBuffers/MaterialCollection0.ush"
cbuffer  UniformBufferConstants_MaterialCollection0 
{
	 float4  MaterialCollection0_Vectors[5];
}

#line 3 "/Engine/Generated/UniformBuffers/Material.ush"
cbuffer  UniformBufferConstants_Material 
{
	 float4  Material_PreshaderBuffer[109];
	 uint BindlessSampler_Material_Wrap_WorldGroupSettings ;
	 uint  PrePadding_Material_1748;
	 uint BindlessSampler_Material_Clamp_WorldGroupSettings ;
}

#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	uint4 ViewRectMinAndSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	float2 BufferToSceneTextureScale;
	float2 ResolutionFractionAndInv;
	int NumSceneColorMSAASamples;
	float ProjectionDepthThicknessScale;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint FrameCounter;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	uint WorldIsPaused;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[8];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeTranslatedCenterAndExtent[6];
	float4 GlobalVolumeTranslatedWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVScale[6];
	float4 GlobalDistanceFieldMipTranslatedWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float CoveredExpandSurfaceScale;
	float NotCoveredExpandSurfaceScale;
	float NotCoveredMinStepScale;
	float DitheredTransparencyStepThreshold;
	float DitheredTransparencyTraceThreshold;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float2 VolumetricFogViewGridUVToPrevViewRectUV;
	float2 VolumetricFogPrevViewGridRectUVToResourceUV;
	float2 VolumetricFogPrevUVMax;
	float2 VolumetricFogScreenToResourceUV;
	float2 VolumetricFogUVMax;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float4 SpecularProfileTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint GPUSceneViewId;
	float ViewResolutionFraction;
	float SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	float4 TanAndInvTanHalfFOV;
	float4 PrevTanAndInvTanHalfFOV;
	float4 GlintLUTParameters0;
	float4 GlintLUTParameters1;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};

#line 230 "/Engine/Generated/GeneratedInstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView);

#line 231 "/Engine/Generated/GeneratedInstancedStereo.ush"
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.ViewRectMinAndSize = View_ViewRectMinAndSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.BufferToSceneTextureScale = View_BufferToSceneTextureScale;
	Result.ResolutionFractionAndInv = View_ResolutionFractionAndInv;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.ProjectionDepthThicknessScale = View_ProjectionDepthThicknessScale;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.FrameCounter = View_FrameCounter;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.WorldIsPaused = View_WorldIsPaused;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle_PPTrans = View_AtmosphereLightDiscCosHalfApexAngle_PPTrans;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeTranslatedCenterAndExtent = View_GlobalVolumeTranslatedCenterAndExtent;
	Result.GlobalVolumeTranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVScale = View_GlobalDistanceFieldMipTranslatedWorldToUVScale;
	Result.GlobalDistanceFieldMipTranslatedWorldToUVBias = View_GlobalDistanceFieldMipTranslatedWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.CoveredExpandSurfaceScale = View_CoveredExpandSurfaceScale;
	Result.NotCoveredExpandSurfaceScale = View_NotCoveredExpandSurfaceScale;
	Result.NotCoveredMinStepScale = View_NotCoveredMinStepScale;
	Result.DitheredTransparencyStepThreshold = View_DitheredTransparencyStepThreshold;
	Result.DitheredTransparencyTraceThreshold = View_DitheredTransparencyTraceThreshold;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogViewGridUVToPrevViewRectUV = View_VolumetricFogViewGridUVToPrevViewRectUV;
	Result.VolumetricFogPrevViewGridRectUVToResourceUV = View_VolumetricFogPrevViewGridRectUVToResourceUV;
	Result.VolumetricFogPrevUVMax = View_VolumetricFogPrevUVMax;
	Result.VolumetricFogScreenToResourceUV = View_VolumetricFogScreenToResourceUV;
	Result.VolumetricFogUVMax = View_VolumetricFogUVMax;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.SpecularProfileTextureSizeAndInvSize = View_SpecularProfileTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	Result.ViewResolutionFraction = View_ViewResolutionFraction;
	Result.SubSurfaceColorAsTransmittanceAtDistanceInMeters = View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;
	Result.TanAndInvTanHalfFOV = View_TanAndInvTanHalfFOV;
	Result.PrevTanAndInvTanHalfFOV = View_PrevTanAndInvTanHalfFOV;
	Result.GlintLUTParameters0 = View_GlintLUTParameters0;
	Result.GlintLUTParameters1 = View_GlintLUTParameters1;
	FinalizeViewState(Result);
	return Result;
}

#line 17 "/Engine/Private/InstancedStereo.ush"
void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}

#line 34 "/Engine/Private/InstancedStereo.ush"
static ViewState ResolvedView = (ViewState)0.0f;

#line 36 "/Engine/Private/InstancedStereo.ush"
ViewState ResolveView()
{
	return GetPrimaryView();
}

#line 256 "/Engine/Private/Common.ush"
static float GlobalTextureMipBias = 0;

#line 337 "/Engine/Private/Common.ush"
float4 Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 353 "/Engine/Private/Common.ush"
float4 Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV, float Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

#line 595 "/Engine/Private/Common.ush"
float Luminance( float3 LinearColor )
{
	return dot( LinearColor, float3( 0.3, 0.59, 0.11 ) );
}

#line 600 "/Engine/Private/Common.ush"
float length2(float2 v)
{
	return dot(v, v);
}

#line 604 "/Engine/Private/Common.ush"
float length2(float3 v)
{
	return dot(v, v);
}

#line 608 "/Engine/Private/Common.ush"
float length2(float4 v)
{
	return dot(v, v);
}

#line 661 "/Engine/Private/Common.ush"
float PositiveClampedPow(float Base, float Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}

#line 665 "/Engine/Private/Common.ush"
float2 PositiveClampedPow(float2 Base, float2 Exponent)
{
	return float2(PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y)); 
}

#line 669 "/Engine/Private/Common.ush"
float3 PositiveClampedPow(float3 Base, float3 Exponent)
{
	return float3(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z)); 
}

#line 673 "/Engine/Private/Common.ush"
float4 PositiveClampedPow(float4 Base, float4 Exponent)
{
	return float4(PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw)); 
}

#line 52 "/Engine/Private/FastMathThirdParty.ush"
float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}

#line 62 "/Engine/Private/FastMathThirdParty.ush"
float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}

#line 82 "/Engine/Private/FastMathThirdParty.ush"
float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

#line 108 "/Engine/Private/FastMathThirdParty.ush"
float acosFast(float inX) 
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

#line 116 "/Engine/Private/FastMathThirdParty.ush"
float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

#line 121 "/Engine/Private/FastMathThirdParty.ush"
float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

#line 126 "/Engine/Private/FastMathThirdParty.ush"
float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}

#line 134 "/Engine/Private/FastMathThirdParty.ush"
float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

#line 139 "/Engine/Private/FastMathThirdParty.ush"
float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

#line 144 "/Engine/Private/FastMathThirdParty.ush"
float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

#line 149 "/Engine/Private/FastMathThirdParty.ush"
float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}

#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed / 4093);
	s = frac(s * s * 4093);
	s = frac(s * s * 4093);
	return s;
}

#line 71 "/Engine/Private/Random.ush"
uint3 Rand3DPCG16(int3 p)
{
	
	uint3 v = uint3(p);

	
	
	
	v = v * 1664525u + 1013904223u;

	
	
	
	
	
	
	
	
	
	
	
	
	
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	
	return v >> 16u;
}

#line 239 "/Engine/Private/Random.ush"
float3 NoiseTileWrap(float3 v,  bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}

#line 247 "/Engine/Private/Random.ush"
float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10); 
}

#line 266 "/Engine/Private/Random.ush"
float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx & int3(0x8000, 0x4000, 0x2000)) * float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000) - 1;
	return float4(direction, dot(direction, offset));
}

#line 279 "/Engine/Private/Random.ush"
float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{	
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{	
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}

#line 320 "/Engine/Private/Random.ush"
float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}

#line 466 "/Engine/Private/Random.ush"
float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;
	
	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;
	
	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}

#line 495 "/Engine/Private/Random.ush"
float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);
	
	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;	
	if (bTiling)						
	{
		OffsetB = iv1.z * ZShear;
	}

	
	float ts = 1 / 128.0f;

	
	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;

	
	float2 TexA1 = TexA0 + ts;	
	float2 TexB1 = TexB0 + ts;
	if (bTiling)				
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}


	
	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;
	
	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}

#line 557 "/Engine/Private/Random.ush"
float FastGradientPerlinNoise3D_TEX(float3 xyz)
{
	
	float Extent = 16;

	
	
	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);

	
	float3 uvw = frac(xyz);
	
	
	float3 p0 = xyz - uvw;

	
	float3 f = PerlinRamp(float4(uvw, 0)).xyz;	
	
	float3 p = p0 + f;
	
	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);		

	
	
	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}

#line 590 "/Engine/Private/Random.ush"
float3 VoronoiCornerSample(float3 pos, int Quality)
{
	
	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;

	
	
	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}

	
	
	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}

	
	return noise;
}

#line 620 "/Engine/Private/Random.ush"
float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}

#line 634 "/Engine/Private/Random.ush"
float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v),  fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);

	
	float4 mindist = float4(0,0,0,100);
	float3 p, offset;

	
	if (Quality == 3)
	{
		 [unroll( 3 )] for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			 [unroll( 3 )] for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				 [unroll( 3 )] for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}

	
	else
	{
		 [unroll( 2 )] for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					if (Quality == 2)
					{
						
						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}

	
	if (Quality >= 4)
	{
		 [unroll( 2 )] for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			 [unroll( 2 )] for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				 [unroll( 2 )] for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					
					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);

					
					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}

	
	return float4(mindist.xyz, sqrt(mindist.w));
}

#line 737 "/Engine/Private/Random.ush"
float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b = 
		  min(max(0, RG), max(0, RB))		
		+ min(max(0, -RG), max(0, GB))		
		+ min(max(0, -RB), max(0, -GB));	
	
	ret.a = 
		  min(max(0, -RG), max(0, -RB))		
		+ min(max(0, RG), max(0, -GB))		
		+ min(max(0, RB), max(0, GB));		

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

#line 774 "/Engine/Private/Random.ush"
float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;

	
	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

#line 783 "/Engine/Private/Random.ush"
float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

#line 793 "/Engine/Private/Random.ush"
float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}

#line 797 "/Engine/Private/Random.ush"
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}

#line 801 "/Engine/Private/Random.ush"
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}

#line 805 "/Engine/Private/Random.ush"
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}

#line 846 "/Engine/Private/Random.ush"
float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);

	
	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);
	
	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD));	DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}

#line 904 "/Engine/Private/Common.ush"
float Square( float x )
{
	return x*x;
}

#line 909 "/Engine/Private/Common.ush"
float2 Square( float2 x )
{
	return x*x;
}

#line 914 "/Engine/Private/Common.ush"
float3 Square( float3 x )
{
	return x*x;
}

#line 919 "/Engine/Private/Common.ush"
float4 Square( float4 x )
{
	return x*x;
}

#line 924 "/Engine/Private/Common.ush"
float Pow2( float x )
{
	return x*x;
}

#line 929 "/Engine/Private/Common.ush"
float2 Pow2( float2 x )
{
	return x*x;
}

#line 934 "/Engine/Private/Common.ush"
float3 Pow2( float3 x )
{
	return x*x;
}

#line 939 "/Engine/Private/Common.ush"
float4 Pow2( float4 x )
{
	return x*x;
}

#line 944 "/Engine/Private/Common.ush"
float Pow3( float x )
{
	return x*x*x;
}

#line 949 "/Engine/Private/Common.ush"
float2 Pow3( float2 x )
{
	return x*x*x;
}

#line 954 "/Engine/Private/Common.ush"
float3 Pow3( float3 x )
{
	return x*x*x;
}

#line 959 "/Engine/Private/Common.ush"
float4 Pow3( float4 x )
{
	return x*x*x;
}

#line 964 "/Engine/Private/Common.ush"
float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

#line 970 "/Engine/Private/Common.ush"
float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

#line 976 "/Engine/Private/Common.ush"
float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

#line 982 "/Engine/Private/Common.ush"
float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

#line 988 "/Engine/Private/Common.ush"
float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

#line 994 "/Engine/Private/Common.ush"
float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

#line 1000 "/Engine/Private/Common.ush"
float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

#line 1006 "/Engine/Private/Common.ush"
float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

#line 1229 "/Engine/Private/Common.ush"
float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

#line 1293 "/Engine/Private/Common.ush"
float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;	

	
	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);

	
	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

#line 1456 "/Engine/Private/Common.ush"
float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{
	
	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}

#line 1479 "/Engine/Private/Common.ush"
float MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;
	
	[loop] for(uint i = 0; i < Levels; ++i)
	{
		
		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{
		
		Out = Out * 0.5f + 0.5f;
	}

	
	return lerp(OutputMin, OutputMax, Out);
}

#line 1605 "/Engine/Private/Common.ush"
float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

#line 98 "/Engine/Private/ShadingCommon.ush"
float F0ToDielectricSpecular(float F0)
{
	return saturate(F0 / 0.08f);
}

#line 103 "/Engine/Private/ShadingCommon.ush"
float F0RGBToF0(float3 F0)
{
	return dot(0.3333333.xxx, F0);
}

#line 108 "/Engine/Private/ShadingCommon.ush"
float F0RGBToDielectricSpecular(float3 F0)
{
	return F0ToDielectricSpecular(F0RGBToF0(F0));
}

#line 113 "/Engine/Private/ShadingCommon.ush"
float DielectricSpecularToF0(float Specular)
{
	return float(0.08f * Specular);
}

#line 138 "/Engine/Private/ShadingCommon.ush"
float  F0ToMicroOcclusion(float F0)   { return saturate(50.0 * F0); }

#line 139 "/Engine/Private/ShadingCommon.ush"
float3 F0ToMicroOcclusion(float3 F0)  { return saturate(50.0 * F0); }

#line 141 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMicroOcclusion(float3 F0)
{
	return F0ToMicroOcclusion(max(F0.r, max(F0.g, F0.b)));
}

#line 146 "/Engine/Private/ShadingCommon.ush"
float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

#line 156 "/Engine/Private/ShadingCommon.ush"
float3 ComputeDiffuseAlbedo(float3 BaseColor, float Metallic)
{
	return BaseColor - BaseColor * Metallic;
}

#line 161 "/Engine/Private/ShadingCommon.ush"
float MakeRoughnessSafe(float Roughness, float MinRoughness=0.001f)
{
	return clamp(Roughness, MinRoughness, 1.0f);
}

#line 166 "/Engine/Private/ShadingCommon.ush"
float F0ToMetallic(float F0)
{
	
	const float FullMetalBeginF0 = 0.08f;	
	const float FullMetalEndF0   = 0.4f;	
	

	return saturate((F0 - FullMetalBeginF0) / (FullMetalEndF0 - FullMetalBeginF0));
}

#line 176 "/Engine/Private/ShadingCommon.ush"
float F0RGBToMetallic(float3 F0)
{
	return F0ToMetallic(max(F0.r, max(F0.g, F0.b)));
}

#line 185 "/Engine/Private/ShadingCommon.ush"
struct FVerticalLayeringInfo
{
	float TransmittanceTopAndBottom;	
	float TransmittanceOnlyBottom;		
	float TransmittanceOnlyTop;			

	float SurfaceBottom;				
	float SurfaceTop;					

	float Coverage;						
	float NoSurface;					
};

#line 200 "/Engine/Private/ShadingCommon.ush"
FVerticalLayeringInfo GetVerticalLayeringInfo(const float TopCoverage, const float BottomCoverage)
{
	FVerticalLayeringInfo Info;

	Info.TransmittanceTopAndBottom	= TopCoverage * BottomCoverage;
	Info.TransmittanceOnlyBottom	= (1.0f - TopCoverage) * BottomCoverage;
	Info.TransmittanceOnlyTop		= (1.0f - BottomCoverage) * TopCoverage;

	Info.SurfaceBottom				= Info.TransmittanceOnlyBottom;
	Info.SurfaceTop					= TopCoverage;								

	Info.Coverage					= Info.SurfaceTop + Info.SurfaceBottom;		
	Info.NoSurface					= 1.0f - Info.Coverage;

	return Info;
}

#line 18 "/Engine/Private/OctahedralCommon.ush"
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) *  select_internal( N.xy >= 0 , float2(1,1) , float2(-1,-1) );
	}
	return N.xy;
}

#line 28 "/Engine/Private/OctahedralCommon.ush"
float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy +=  select_internal( N.xy >= 0 , float2(-t, -t) , float2(t, t) );
	return normalize(N);
}

#line 42 "/Engine/Private/OctahedralCommon.ush"
float3 HemiOctahedronToUnitVector( float2 Oct )
{
	Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y );
	float3 N = float3( Oct, 2.0 - dot( 1, abs(Oct) ) );
	return normalize(N);
}

#line 86 "/Engine/Private/SceneData.ush"
static const uint InstanceTransformSizeFloat4Count = 2u;

#line 93 "/Engine/Private/SceneData.ush"
struct FPrimitiveSceneData
{
	uint		Flags;
	uint		VisibilityFlags;
	int			InstanceSceneDataOffset; 
	int			NumInstanceSceneDataEntries;
	int			PersistentPrimitiveIndex;
	uint		SingleCaptureIndex; 
	float3		TilePosition;
	uint		PrimitiveComponentId; 
	FLWCMatrix	LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix	PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float4x4	WorldToPreviousWorld; 
	float3		InvNonUniformScale;
	float		ObjectBoundsX;
	FLWCVector3	ObjectWorldPosition;
	FLWCVector3	ActorWorldPosition;
	float		ObjectRadius;
	uint		LightmapUVIndex;   
	float3		ObjectOrientation; 
	uint		LightmapDataIndex; 
	float4		NonUniformScale;
	float3		PreSkinnedLocalBoundsMin;
	uint		NaniteResourceID;
	float3		PreSkinnedLocalBoundsMax;
	uint		NaniteHierarchyOffset;
	float3		LocalObjectBoundsMin;
	float		ObjectBoundsY;
	float3		LocalObjectBoundsMax;
	float		ObjectBoundsZ;
	uint		InstancePayloadDataOffset;
	uint		InstancePayloadDataStride;
	uint		InstancePayloadExtensionSize;
	float3		InstanceLocalBoundsCenter;
	float3		InstanceLocalBoundsExtent;
	float3		WireframeColor; 
	float3		LevelColor; 
	uint		PackedNaniteFlags;
	float2 		InstanceDrawDistanceMinMaxSquared;
	float		InstanceWPODisableDistanceSquared;
	uint		NaniteRayTracingDataOffset;
	float		MaxWPOExtent;
	float		MinMaterialDisplacement;
	float		MaxMaterialDisplacement;
	uint		CustomStencilValueAndMask;
	float4		CustomPrimitiveData[9]; 
};

#line 211 "/Engine/Private/SceneData.ush"
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;








	 { };
	return Scene_GPUScene_GPUScenePrimitiveSceneData[TargetIdx];

}

#line 228 "/Engine/Private/SceneData.ush"
FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{





	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;
	
	
	uint PrimitiveIndex = PrimitiveId * 41;
	
	float3 TilePosition = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;

	const float4x4 LocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousLocalToWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7),
		float4(0, 0, 0, 1)
	));

	const float4x4 PreviousWorldToLocal = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13),
		float4(0, 0, 0, 1)
	));

	const float4x4 WorldToPreviousWorld = transpose(float4x4(
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15),
		LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16),
		float4(0, 0, 0, 1)
	));

	float4 ObjectWorldPositionAndRadius	= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18);

	PrimitiveData.Flags									= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) & 0xFFFFu;
	PrimitiveData.VisibilityFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w) >> 16u;
	PrimitiveData.TilePosition							= TilePosition; 
	PrimitiveData.PrimitiveComponentId					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld							= MakeLWCMatrix4x3(TilePosition, LocalToWorld);
	PrimitiveData.WorldToLocal							= MakeLWCInverseMatrix4x3(TilePosition, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld					= MakeLWCMatrix4x3(TilePosition, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal					= MakeLWCInverseMatrix4x3(TilePosition, PreviousWorldToLocal);
	PrimitiveData.WorldToPreviousWorld					= WorldToPreviousWorld;
	PrimitiveData.InvNonUniformScale					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz;
	PrimitiveData.ObjectBoundsX							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).w;
	PrimitiveData.ObjectWorldPosition					= MakeLWCVector3(TilePosition, ObjectWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius							= ObjectWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition					= MakeLWCVector3(TilePosition, LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).xyz);
	PrimitiveData.LightmapUVIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19).w);
	PrimitiveData.ObjectOrientation						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).xyz;
	PrimitiveData.LightmapDataIndex						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w);
	PrimitiveData.NonUniformScale						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21);
	PrimitiveData.PreSkinnedLocalBoundsMin				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).xyz;
	PrimitiveData.NaniteResourceID						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22).w);
	PrimitiveData.PreSkinnedLocalBoundsMax				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).xyz;
	PrimitiveData.NaniteHierarchyOffset					= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).w);
	PrimitiveData.LocalObjectBoundsMin					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.ObjectBoundsY							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w;
	PrimitiveData.LocalObjectBoundsMax					= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.ObjectBoundsZ							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w;
	PrimitiveData.InstanceLocalBoundsCenter				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.InstancePayloadDataOffset				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w);
	PrimitiveData.InstanceLocalBoundsExtent				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.InstancePayloadDataStride				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w) & 0x00FFFFFFu;
	PrimitiveData.InstancePayloadExtensionSize			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w) >> 24;
	PrimitiveData.WireframeColor						= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.PackedNaniteFlags						= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.LevelColor							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.PersistentPrimitiveIndex				= asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w);
	PrimitiveData.InstanceDrawDistanceMinMaxSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).xy;
	PrimitiveData.InstanceWPODisableDistanceSquared		= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).z;
	PrimitiveData.NaniteRayTracingDataOffset			= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);
	PrimitiveData.MaxWPOExtent							= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).x;
	PrimitiveData.MinMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).y;
	PrimitiveData.MaxMaterialDisplacement				= LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).z;
	PrimitiveData.CustomStencilValueAndMask				= asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31).w);

	

	
	[unroll]
	for (int DataIndex = 0; DataIndex < 9; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex,  32 + DataIndex);
	}
	return PrimitiveData;

}

#line 382 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask_FromFlags(uint Flags)
{
	const uint Channel0 = CondMask(Flags & 0x800, 1u, 0u);
	const uint Channel1 = CondMask(Flags & 0x1000, 1u, 0u);
	const uint Channel2 = CondMask(Flags & 0x2000, 1u, 0u);
	return (Channel0 | (Channel1 << 1u) | (Channel2 << 2u));
}

#line 390 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask(uint PrimitiveId)
{
	return GetPrimitive_LightingChannelMask_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}

#line 396 "/Engine/Private/SceneData.ush"
uint GetPrimitive_LightingChannelMask(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_LightingChannelMask_FromFlags(Primitive_Flags);
}

#line 404 "/Engine/Private/SceneData.ush"
struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint   HitProxyPacked;
	bool bIsSelected;
};

#line 412 "/Engine/Private/SceneData.ush"
float3 UnpackHitProxyId(uint HitProxyPacked)
{
	
	return float3
	(
		float((HitProxyPacked       ) & 0xFF),
		float((HitProxyPacked >>  8u) & 0xFF),
		float((HitProxyPacked >> 16u) & 0xFF)
	) * (1.0f / 255.0f);
}

#line 423 "/Engine/Private/SceneData.ush"
struct FInstancePayloadDataOffsets
{
	uint HierarchyOffset;
	uint EditorData;
	uint LocalBounds;
	uint DynamicData;
	uint LightShadowUVBias;
	uint PayloadExtension;
	uint CustomData;
};

#line 434 "/Engine/Private/SceneData.ush"
struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4   NonUniformScale;
	float3   InvNonUniformScale;
	float    DeterminantSign;
	float3   LocalBoundsCenter;
	uint     PrimitiveId;
	uint     RelativeId;
	uint     PayloadDataOffset;
	uint     PayloadExtensionOffset;
	uint     PayloadExtensionSize;
	float3   LocalBoundsExtent;
	uint     LastUpdateSceneFrameNumber;
	uint     NaniteRuntimeResourceID;
	uint     NaniteHierarchyOffset;








	float4   LightMapAndShadowMapUVBias;

	bool     ValidInstance;
	uint     Flags;


	FInstanceSceneEditorData EditorData;

};

#line 489 "/Engine/Private/SceneData.ush"
float4 LoadInstanceSceneDataElement(uint Index)
{





	return Scene_GPUScene_GPUSceneInstanceSceneData[Index];

}

#line 500 "/Engine/Private/SceneData.ush"
float4 LoadInstancePayloadDataElement(uint Index)
{





	return Scene_GPUScene_GPUSceneInstancePayloadData[Index];

}

#line 547 "/Engine/Private/SceneData.ush"
void GetHemiOrthoBasis( inout float3 BasisX, inout float3 BasisY, float3 BasisZ )
{
	float A = 1.0f / ( 1.0f + BasisZ.z );
	float B = -BasisZ.x * BasisZ.y * A;
	BasisX = float3( 1.0f - BasisZ.x * BasisZ.x * A, B, -BasisZ.x );
	BasisY = float3( B, 1.0f - BasisZ.y * BasisZ.y * A, -BasisZ.y );
}

#line 656 "/Engine/Private/SceneData.ush"
float4x4 DecodeTransform( uint4 RotationScale, float3 Translation, inout float3 Scale )
{
	float4x4 M = 0.0;
	M[3].xyz = Translation;
	M[3].w = 1.0;

	
	{
		float3 Rotation =
		{
			( RotationScale[0] >>  0 ) & 0xffff,
			( RotationScale[0] >> 16 ) & 0xffff,
			( RotationScale[1] >>  0 ) & 0x7fff
		};

		float2 OctZ  = ( Rotation.xy - 32768 ) * (1.0f / 32767.0f);
		float Spin0  = ( Rotation.z  - 16384 ) * (0.70710678f / 16383.0f);	
		bool bSpinIsX = RotationScale[1] & 0x8000;

		M[2].xyz = HemiOctahedronToUnitVector( OctZ );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, M[2].xyz );

		float Spin1 = sqrt( 1.0f - Spin0 * Spin0 );
		float X = bSpinIsX ? Spin0 : Spin1;
		float Y = bSpinIsX ? Spin1 : Spin0;

		M[0].xyz = BasisX * X + BasisY * Y;
		M[1].xyz = cross( M[2].xyz, M[0].xyz );
	}

	
	{
		const uint SignMantissaBits	= 16;
		const uint SignMantissaMask	= (1u << SignMantissaBits) - 1;
		const uint MantissaBits		= SignMantissaBits - 1;













		uint SharedExp = RotationScale[3] >> 16;

		float ExpScale = asfloat( ( SharedExp - MantissaBits ) << 23 );

		uint3 Mantissa =
		{
			RotationScale[2] >> 0,
			RotationScale[2] >> 16,
			RotationScale[3] >> 0
		};
		

		Mantissa &= SignMantissaMask;
		Scale = Mantissa;
		Scale -= 1u << MantissaBits;
		Scale *= ExpScale;

		M[0] *= Scale[0];
		M[1] *= Scale[1];
		M[2] *= Scale[2];
	}

	return M;
}

#line 732 "/Engine/Private/SceneData.ush"
void UnpackPrimitiveIdAndInstanceFlags(uint PackedPrimitiveIdAndFlags, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	OutPrimitiveId		= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (20u),  0);
	OutInstanceFlags	= BitFieldExtractU32(PackedPrimitiveIdAndFlags, (12u), (20u));	
}

#line 743 "/Engine/Private/SceneData.ush"
void LoadInstancePrimitiveIdAndFlags(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedPrimitiveIdAndFlags = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).x);
	UnpackPrimitiveIdAndInstanceFlags(PackedPrimitiveIdAndFlags, OutPrimitiveId, OutInstanceFlags);
}

#line 750 "/Engine/Private/SceneData.ush"
void UnpackInstanceRelativeIdAndCustomDataCount(uint PackedRelativeIdAndCustomDataCount, inout uint OutRelativeId, inout uint OutCustomDataCount)
{
	OutRelativeId		= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (24u),  0);
	OutCustomDataCount	= BitFieldExtractU32(PackedRelativeIdAndCustomDataCount, (8u), (24u));
}

#line 761 "/Engine/Private/SceneData.ush"
void LoadInstanceRelativeIdAndCustomDataCount(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedRelativeIdAndCustomDataCount = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).y);
	UnpackInstanceRelativeIdAndCustomDataCount(PackedRelativeIdAndCustomDataCount, OutPrimitiveId, OutInstanceFlags);
}

#line 768 "/Engine/Private/SceneData.ush"
float GetInstanceDeterminantSignFromFlags(uint Flags)
{
	
	return CondMask(Flags & 0x1, -1.0f, 1.0f);
}

#line 787 "/Engine/Private/SceneData.ush"
FInstancePayloadDataOffsets GetInstancePayloadDataOffsets(uint PrimitiveId, uint Flags, uint InstanceRelativeId)
{
	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveId);

	const uint PayloadDataRelativeOffset	= InstanceRelativeId * PrimitiveData.InstancePayloadDataStride;
	const uint PayloadDataGlobalOffset		= PayloadDataRelativeOffset + PrimitiveData.InstancePayloadDataOffset;

	const bool bHasHierarchyOffset			= (Flags & 0x20) != 0u;
	const bool bHasLocalBounds				= (Flags & 0x40) != 0u;
	const bool bHasDynamicData				= (Flags & 0x8) != 0u;
	const bool bHasLightShadowUVBias		= (Flags & 0x10) != 0u;
	const bool bHasCustomData				= (Flags & 0x4) != 0u;
	const bool bHasPayloadExtension			= (Flags & 0x80) != 0u;

	const bool bHasEditorData				= (Flags & 0x100) != 0u;




	uint CurOffset = PayloadDataGlobalOffset;

	
	FInstancePayloadDataOffsets Offsets;
	Offsets.HierarchyOffset 	= (0xFFFFFFFFu);
	Offsets.EditorData 			= (0xFFFFFFFFu);
	Offsets.LocalBounds 		= (0xFFFFFFFFu);
	Offsets.DynamicData 		= (0xFFFFFFFFu);
	Offsets.LightShadowUVBias 	= (0xFFFFFFFFu);
	Offsets.PayloadExtension	= (0xFFFFFFFFu);
	Offsets.CustomData			= (0xFFFFFFFFu);
	
	
	if (bHasHierarchyOffset)
	{
		Offsets.HierarchyOffset = CurOffset;
	}
	
	if (bHasEditorData)
	{
		Offsets.EditorData = CurOffset;
	}
	
	if (bHasLocalBounds)
	{
		Offsets.LocalBounds = CurOffset;
	}
	CurOffset += CondMask(bHasLocalBounds, 2u, CondMask(bHasHierarchyOffset || bHasEditorData, 1u, 0u));

	if (bHasDynamicData)
	{
		Offsets.DynamicData = CurOffset;
		CurOffset += InstanceTransformSizeFloat4Count;
	}

	if (bHasLightShadowUVBias)
	{
		Offsets.LightShadowUVBias = CurOffset;
		++CurOffset;
	}

	if (bHasPayloadExtension)
	{
		Offsets.PayloadExtension = CurOffset;
		CurOffset += PrimitiveData.InstancePayloadExtensionSize;
	}

	if (bHasCustomData)
	{
		Offsets.CustomData = CurOffset;
	}

	return Offsets;
}

#line 861 "/Engine/Private/SceneData.ush"
void ComputeInstanceDerivedData(inout FInstanceSceneData InstanceData, float3 TilePosition, float4x4 LocalToRelativeWorld)
{
	
	
	












	InstanceData.NonUniformScale.w							= max3( InstanceData.NonUniformScale.x, InstanceData.NonUniformScale.y, InstanceData.NonUniformScale.z );
	InstanceData.DeterminantSign							= GetInstanceDeterminantSignFromFlags(InstanceData.Flags);

	float4x4 RelativeWorldToLocal							= LocalToRelativeWorld;
	RelativeWorldToLocal[0].xyz							   *= Pow2(InstanceData.InvNonUniformScale.x);
	RelativeWorldToLocal[1].xyz					           *= Pow2(InstanceData.InvNonUniformScale.y);
	RelativeWorldToLocal[2].xyz					           *= Pow2(InstanceData.InvNonUniformScale.z);
	RelativeWorldToLocal[3].xyz						        = 0.0f;
	RelativeWorldToLocal								    = transpose(RelativeWorldToLocal);
	RelativeWorldToLocal[3].xyz						        = mul(float4(-LocalToRelativeWorld[3].xyz, 0.0f), RelativeWorldToLocal).xyz;
	InstanceData.WorldToLocal								= MakeLWCInverseMatrix(TilePosition, RelativeWorldToLocal);
}

#line 892 "/Engine/Private/SceneData.ush"
FInstanceSceneData GetInstanceSceneData(uint InstanceId, uint SOAStride, bool bCheckValid = true)
{
	FInstanceSceneData InstanceData = (FInstanceSceneData)0;

	
	
	
	

	
	LoadInstancePrimitiveIdAndFlags(InstanceId, SOAStride, InstanceData.PrimitiveId, InstanceData.Flags);
	InstanceData.ValidInstance = InstanceData.PrimitiveId != ((1u << (20u)) - 1u);

	
	
	
	
	
	
	
	

	
	
	
	








	[branch]
	if (!bCheckValid || InstanceData.ValidInstance)
	{
		uint CustomDataCount;
		LoadInstanceRelativeIdAndCustomDataCount(InstanceId, SOAStride, InstanceData.RelativeId, CustomDataCount);

		FInstancePayloadDataOffsets Offsets 	= GetInstancePayloadDataOffsets(InstanceData.PrimitiveId, InstanceData.Flags, InstanceData.RelativeId);
	
	



		InstanceData.LastUpdateSceneFrameNumber	= asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).z);
	



		FPrimitiveSceneData PrimitiveData		= GetPrimitiveData(InstanceData.PrimitiveId);

		float3 TilePosition 									= PrimitiveData.TilePosition;


		uint4  RotationScale									= asuint(LoadInstanceSceneDataElement(1 * SOAStride + InstanceId));
		float3 Translation										= LoadInstanceSceneDataElement(2 * SOAStride + InstanceId).xyz;
		float3 Scale = 0;
		float4x4 LocalToRelativeWorld							= DecodeTransform( RotationScale, Translation, Scale );

		InstanceData.NonUniformScale.xyz						= abs(Scale);
		InstanceData.InvNonUniformScale							= rcp(InstanceData.NonUniformScale.xyz);








		InstanceData.LocalToWorld	= MakeLWCMatrix(TilePosition, LocalToRelativeWorld);
		ComputeInstanceDerivedData(InstanceData, TilePosition, LocalToRelativeWorld);

		InstanceData.NaniteRuntimeResourceID	= PrimitiveData.NaniteResourceID;
		InstanceData.NaniteHierarchyOffset		= PrimitiveData.NaniteHierarchyOffset;

		[branch]
		if (Offsets.HierarchyOffset != (0xFFFFFFFFu))
		{
			const uint HierarchyRootOffset = asuint(LoadInstancePayloadDataElement(Offsets.HierarchyOffset)).x;

			
			InstanceData.NaniteHierarchyOffset += HierarchyRootOffset;
		}

	
		[branch]
		if (Offsets.EditorData != (0xFFFFFFFFu))
		{
			const uint PackedEditorData = asuint(LoadInstancePayloadDataElement(Offsets.EditorData)).y;

			InstanceData.EditorData.bIsSelected    = (PackedEditorData >> 24u) != 0;
			InstanceData.EditorData.HitProxyPacked =  PackedEditorData & 0x00FFFFFFu;
			InstanceData.EditorData.HitProxyId = UnpackHitProxyId(InstanceData.EditorData.HitProxyPacked);
		}
	

		[branch]
		if (Offsets.LocalBounds != (0xFFFFFFFFu))
		{
			InstanceData.LocalBoundsCenter = float3(LoadInstancePayloadDataElement(Offsets.LocalBounds + 0).zw, LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).x);
			InstanceData.LocalBoundsExtent = LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).yzw;
		}
		else
		{
			InstanceData.LocalBoundsCenter = PrimitiveData.InstanceLocalBoundsCenter;
			InstanceData.LocalBoundsExtent = PrimitiveData.InstanceLocalBoundsExtent;
		}

		[branch]
		if (Offsets.DynamicData != (0xFFFFFFFFu))
		{
		
			uint4  PrevRotationScale			= asuint(LoadInstancePayloadDataElement(Offsets.DynamicData + 0));
			float3 PrevTranslation				= LoadInstancePayloadDataElement(Offsets.DynamicData + 1).xyz;
			float3 PrevScale					= 0;
			float4x4 PrevLocalToRelativeWorld	= DecodeTransform(PrevRotationScale, PrevTranslation, PrevScale);
		






			float3 TilePosition 				= PrimitiveData.TilePosition;
			InstanceData.PrevLocalToWorld		= MakeLWCMatrix(TilePosition, PrevLocalToRelativeWorld);
		}
		else
		{
			
			
			
			InstanceData.PrevLocalToWorld = MakeLWCMatrix(TilePosition, mul(LocalToRelativeWorld, PrimitiveData.WorldToPreviousWorld));
		}

	
		[branch]
		if (Offsets.LightShadowUVBias != (0xFFFFFFFFu))
		{
			InstanceData.LightMapAndShadowMapUVBias = LoadInstancePayloadDataElement(Offsets.LightShadowUVBias);
		}
	

		InstanceData.PayloadExtensionOffset = Offsets.PayloadExtension;
		InstanceData.PayloadExtensionSize = PrimitiveData.InstancePayloadExtensionSize;
	}

	return InstanceData;
}

#line 1061 "/Engine/Private/SceneData.ush"
void UnpackInstanceCullingOutput(uint PackedId, inout uint InstanceId, inout uint ViewIndex, inout uint CullingFlags)
{
	InstanceId = PackedId & ((1u << (24u)) - 1u);
	ViewIndex = PackedId >> ((24u) + (4u));
	CullingFlags = (PackedId >> (24u)) & ((1u << (4u)) - 1u);
}

#line 1068 "/Engine/Private/SceneData.ush"
struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;
	uint CullingFlags;
	
	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};

#line 1086 "/Engine/Private/SceneData.ush"
FSceneDataIntermediates GetSceneDataIntermediates(uint InstanceIdOffset, uint DrawInstanceId)
{
	FSceneDataIntermediates Intermediates = (FSceneDataIntermediates)0;

	Intermediates.InstanceIdLoadIndex = InstanceIdOffset + DrawInstanceId;
	
	
	
	
	
	if ((InstanceIdOffset & (1U << 31U)) != 0U)
	{
		
		uint PrimitiveID = InstanceIdOffset & ((1U << 31U) - 1U);
		FPrimitiveSceneData PrimitiveData = GetPrimitiveData(PrimitiveID);
		Intermediates.InstanceId = PrimitiveData.InstanceSceneDataOffset + DrawInstanceId;
		Intermediates.ViewIndex = 0;
		Intermediates.CullingFlags = ((1u << 0u));
	}



	else
	{
		const uint PackedId = InstanceCulling_InstanceIdsBuffer[InstanceIdOffset + DrawInstanceId];
		UnpackInstanceCullingOutput(PackedId, Intermediates.InstanceId, Intermediates.ViewIndex, Intermediates.CullingFlags);
	}


	Intermediates.InstanceData = GetInstanceSceneData(Intermediates.InstanceId, Scene_GPUScene_InstanceDataSOAStride);
	Intermediates.PrimitiveId = Intermediates.InstanceData.PrimitiveId;
	Intermediates.Primitive = GetPrimitiveData(Intermediates.PrimitiveId);

	return Intermediates;
}

#line 5 "/Engine/Private/RayTracing/RayTracingRayCone.ush"
struct FRayCone
{
	float Width;
	float SpreadAngle;
};

#line 11 "/Engine/Private/RayTracing/RayTracingRayCone.ush"
FRayCone UnpackRayCone(uint PackedRayCone)
{
	FRayCone Result;
	Result.Width       = f16tof32(PackedRayCone & 0xFFFF);
	Result.SpreadAngle = f16tof32(PackedRayCone >> 16);
	return Result;
}

#line 19 "/Engine/Private/RayTracing/RayTracingRayCone.ush"
uint PackRayCone(FRayCone RayCone)
{
	return f32tof16(RayCone.Width) | (f32tof16(RayCone.SpreadAngle) << 16);
}

#line 24 "/Engine/Private/RayTracing/RayTracingRayCone.ush"
FRayCone PropagateRayCone(in FRayCone Cone, in float SurfaceSpreadAngle, in float  HitT)
{
	FRayCone NewCone;
	NewCone.Width = Cone.SpreadAngle * HitT + Cone.Width;
	NewCone.SpreadAngle = Cone.SpreadAngle + SurfaceSpreadAngle;
	return NewCone;
}

#line 42 "/Engine/Private/ShadingEnergyConservation.ush"
float2 GGXEnergyLookup(float Roughness, float NoV)
{

	return View_ShadingEnergyGGXSpecTexture.SampleLevel(View_ShadingEnergySampler, float2(NoV, Roughness), 0);









}

#line 57 "/Engine/Private/ShadingEnergyConservation.ush"
float GGXEnergyLookup(float Roughness, float NoV, float Eta)
{
	
	

	
	float2 E = View_ShadingEnergyGGXGlassTexture.SampleLevel(View_ShadingEnergySampler, float3(NoV, Roughness, max(Eta, rcp(Eta)) * 0.5 - 0.5), 0);
	return Eta >= 1.0 ? E.x : E.y;




}

#line 18 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3   GetF0F90RGB(float3 InF0)
{



	return InF0;

}

#line 27 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsRGB
{
	float3 W; 
	float3 E; 
};

#line 35 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeFresnelEnergyTermsRGB(float2 E, float3 InF0, float3 InF90)
{
	float3 F0  =   GetF0F90RGB(InF0);
	float3 F90 =   GetF0F90RGB(InF90);

	  FBxDFEnergyTermsRGB Result;
	
	

	Result.W = View_bShadingEnergyConservation ? (1.0 + F0 * ((1 - E.x) / E.x)) : 1.0f;



	
	
	
	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

#line 55 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0, float3 F90)
{
	  FBxDFEnergyTermsRGB Out;

	{
		Out =   ComputeFresnelEnergyTermsRGB(GGXEnergyLookup(Roughness, NoV), F0, F90);
}






	return Out;
}

#line 71 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
FBxDFEnergyTermsRGB   ComputeGGXSpecEnergyTermsRGB(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g); 
	return   ComputeGGXSpecEnergyTermsRGB(Roughness, NoV, F0, F90);
}

#line 115 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsRGB EnergyTerms)
{


	return View_bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;






}

#line 129 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float3 ComputeEnergyConservation(  FBxDFEnergyTermsRGB EnergyTerms)
{
	return EnergyTerms.W;
}

#line 27 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
struct   FBxDFEnergyTermsA
{
	float W; 
	float E; 
};

#line 115 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyPreservation(  FBxDFEnergyTermsA EnergyTerms)
{


	return View_bShadingEnergyPreservation ? (1 - Luminance(EnergyTerms.E)) : 1.0f;






}

#line 129 "/Engine/Private/ShadingEnergyConservationTemplate.ush"
float ComputeEnergyConservation(  FBxDFEnergyTermsA EnergyTerms)
{
	return EnergyTerms.W;
}

#line 9 "/Engine/Private/BRDF.ush"
struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;

};

#line 25 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

#line 44 "/Engine/Private/BRDF.ush"
void Init( inout BxDFContext Context, float3 N, float3 X, float3 Y, float3 V, float3 L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
	
	

	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}

#line 84 "/Engine/Private/BRDF.ush"
void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );
	
		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );





			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{
				
				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1   + VoTr;

				float p = NoBr   * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr   * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr; 





			Context.VoL = Context.VoL * CosAlpha + VoTr;

			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );





			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}

#line 278 "/Engine/Private/BRDF.ush"
float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}

#line 335 "/Engine/Private/BRDF.ush"
float3 Diffuse_Chan( float3 DiffuseColor, float a2, float NoV, float NoL, float VoH, float NoH, float RetroReflectivityWeight)
{
	
	NoV = saturate(NoV);
	NoL = saturate(NoL);
	VoH = saturate(VoH);
	NoH = saturate(NoH);

	
	float g = saturate( (1.0 / 18.0) * log2( 2 * rcpFast(a2) - 1 ) );

	float F0 = VoH + Pow5( 1 - VoH );
	float FdV = 1 - 0.75 * Pow5( 1 - NoV );
	float FdL = 1 - 0.75 * Pow5( 1 - NoL );

	
	float Fd = lerp( F0, FdV * FdL, saturate( 2.2 * g - 0.5 ) );

	
	float Fb = ( (34.5 * g - 59 ) * g + 24.5 ) * VoH * exp2( -max( 73.2 * g - 21.2, 8.9 ) * sqrtFast( NoH ) );
	
	Fb *= RetroReflectivityWeight;
	
	return DiffuseColor * ( (1 / PI) * ( Fd + Fb ) );
}

#line 377 "/Engine/Private/BRDF.ush"
float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;	
	return a2 / ( PI*d*d );					
}

#line 385 "/Engine/Private/BRDF.ush"
float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{


	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);

	return (1.0f / PI) * a2 * Square(a2 / S);




}

#line 439 "/Engine/Private/BRDF.ush"
float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}

#line 456 "/Engine/Private/BRDF.ush"
float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

#line 469 "/Engine/Private/BRDF.ush"
float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );					
	
	
	
	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

#line 478 "/Engine/Private/BRDF.ush"
float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

#line 503 "/Engine/Private/BRDF.ush"
float4 SheenLTC_Cofficients(float NoV, float Roughness, Texture2D InSheenLTCTexture, SamplerState InSheenSampler)
{
	const float Alpha = sqrt(Roughness);
	const float SatNoV = saturate(abs(NoV) + 1e-5);
	float2 UV = float2(Alpha, SatNoV);
	UV = UV * (31.0 / 32.0) + (0.5 / 32.0);
	return InSheenLTCTexture.SampleLevel(InSheenSampler, UV, 0);
}

#line 534 "/Engine/Private/BRDF.ush"
float SheenLTC_Eval(float3 V, float3 L, float3 N, float NoV, float Roughness, Texture2D InSheenLTCTexture, SamplerState InSheenSampler, inout float OutDirectionalAlbedo)
{
	
	const float3 T1 = normalize(V - N * NoV);
	const float3 T2 = cross(N, T1);
	const float3x3 TangentBasis = float3x3(T1, T2, N);

	
	
	const float3 LocalL = mul(TangentBasis, L); 

	const float4 LTC = SheenLTC_Cofficients(NoV, Roughness, InSheenLTCTexture, InSheenSampler);
	const float aInv = LTC.x;
	const float bInv = LTC.y;
	OutDirectionalAlbedo = LTC.z;

	float3 WrappedLocalL = float3(
		aInv * LocalL.x + bInv * LocalL.z,
		aInv * LocalL.y,
		LocalL.z);

	const float LenWrappedLocalL = length(WrappedLocalL);
	
	const float Jacobian = Pow2(aInv) / Pow3(LenWrappedLocalL);

	
	WrappedLocalL /= LenWrappedLocalL;

	
	const float CosDistribution = WrappedLocalL.z / PI;
	const float Out = OutDirectionalAlbedo * CosDistribution * Jacobian; 

	return max(Out, 0.f);
}

#line 592 "/Engine/Private/BRDF.ush"
void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{

	
	
	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);





}

#line 607 "/Engine/Private/BRDF.ush"
float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{
	
	
	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}

#line 689 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 SpecularColor)
{
	
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
	
}

#line 696 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}

#line 701 "/Engine/Private/BRDF.ush"
void EnvBRDFApproxFullyRough(inout float3 DiffuseColor, inout float3 F0, inout float3 F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}

#line 774 "/Engine/Private/BRDF.ush"
float3 SimpleClearCoatTransmittance(float NoL, float NoV, float Metallic, float3 BaseColor)
{
	float3 Transmittance = 1.0;

	float ClearCoatCoverage = Metallic;
	if (ClearCoatCoverage > 0.0)
	{
		float LayerThickness = 1.0;	

		
		
		float ThinDistance = LayerThickness * (rcp(NoV) + rcp(NoL));

		
		float3 TransmittanceColor = Diffuse_Lambert(BaseColor);
		
		
		float3 ExtinctionCoefficient = -log(max(TransmittanceColor,0.0001)) / (2.0 * LayerThickness);

		
		
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * LayerThickness, 0.0);

		
		Transmittance = exp(-OpticalDepth);
		
		Transmittance = lerp(1.0, Transmittance, ClearCoatCoverage);
	}

	
	
	
	

	return Transmittance;
}

#line 40 "/Engine/Private/ColorSpace.ush"
static const float3x3 XYZ_2_Linear_sRGB_MAT =
{
	 3.2409699419, -1.5373831776, -0.4986107603,
	-0.9692436363,  1.8759675015,  0.0415550574,
	 0.0556300797, -0.2039769589,  1.0569715142,
};

#line 47 "/Engine/Private/ColorSpace.ush"
static const float3x3 Linear_sRGB_2_XYZ_MAT =
{
	0.4123907993, 0.3575843394, 0.1804807884,
	0.2126390059, 0.7151686788, 0.0721923154,
	0.0193308187, 0.1191947798, 0.9505321522,
};

#line 54 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_XYZ( float3 LinearRGB )
{

	return mul(Linear_sRGB_2_XYZ_MAT, LinearRGB);



}

#line 63 "/Engine/Private/ColorSpace.ush"
float3 XYZ_2_LinearRGB( float3 XYZ )
{

	return mul(XYZ_2_Linear_sRGB_MAT, XYZ);



}

#line 78 "/Engine/Private/ColorSpace.ush"
float3 Luminance( float3 LinearColor, float3 LuminanceFactors )
{
	return dot( LinearColor, LuminanceFactors );
}

#line 92 "/Engine/Private/ColorSpace.ush"
static const float3 XYZ_WHITE_REF_NOMINAL = float3(0.9504559271, 1.0, 1.0890577508);

#line 97 "/Engine/Private/ColorSpace.ush"
static const float XYZ_2_LAB_DELTA_SQUARED = 0.04280618311;

#line 98 "/Engine/Private/ColorSpace.ush"
static const float XYZ_2_LAB_DELTA_CUBED = 0.00885645167;

#line 100 "/Engine/Private/ColorSpace.ush"
float xyz_otherwise(float t)
{
	return (t / (3.0 * XYZ_2_LAB_DELTA_SQUARED)) + 4.0 / 29.0;
}

#line 105 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_LAB( float3 LinearRGB )
{
	float3 XYZ = LinearRGB_2_XYZ(LinearRGB);

	float t_X = XYZ.x / XYZ_WHITE_REF_NOMINAL.x;
	float t_Y = XYZ.y / XYZ_WHITE_REF_NOMINAL.y;
	float t_Z = XYZ.z / XYZ_WHITE_REF_NOMINAL.z;

	float f_X = (t_X > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_X, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_X);
	float f_Y = (t_Y > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Y, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Y);
	float f_Z = (t_Z > XYZ_2_LAB_DELTA_CUBED) ? pow(max(t_Z, XYZ_2_LAB_DELTA_CUBED), 1.0 / 3.0) : xyz_otherwise(t_Z);

	float L = ( 116.0 * f_Y ) - 16.0;
	float a = 500.0 * ( f_X - f_Y );
	float b = 200.0 * ( f_Y - f_Z );

	return float3(L, a, b);
}

#line 124 "/Engine/Private/ColorSpace.ush"
float lab_otherwise(float t)
{
	return (3.0 * XYZ_2_LAB_DELTA_SQUARED) * (t - (4.0 / 29.0));
}

#line 129 "/Engine/Private/ColorSpace.ush"
float3 LAB_2_LinearRGB( float3 LAB )
{
	float L = LAB.x;
	float a = LAB.y;
	float b = LAB.z;

	float t_y = (L + 16.0) / 116.0;
	float t_x = t_y + (a / 500.0);
	float t_z = t_y - (b / 200.0);

	float f_x = pow(t_x, 3.0);
	float f_y = pow(t_y, 3.0);
	float f_z = pow(t_z, 3.0);

	if (f_x <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_x = lab_otherwise(t_x);
	}

	if (f_y <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_y = lab_otherwise(t_y);
	}

	if (f_z <= XYZ_2_LAB_DELTA_CUBED)
	{
		f_z = lab_otherwise(t_z);
	}

	float X = XYZ_WHITE_REF_NOMINAL.x * f_x;
	float Y = XYZ_WHITE_REF_NOMINAL.y * f_y;
	float Z = XYZ_WHITE_REF_NOMINAL.z * f_z;

	return XYZ_2_LinearRGB(float3(X, Y, Z));
}

#line 177 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_YCoCg(float3 RGB)
{
	float Y = dot(RGB, float3(1, 2, 1));
	float Co = dot(RGB, float3(2, 0, -2));
	float Cg = dot(RGB, float3(-1, 2, -1));

	float3 YCoCg = float3(Y, Co, Cg);
	return YCoCg;
}

#line 224 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_NormalisedYCoCg(float3 RGB)
{
	return LinearRGB_2_YCoCg(RGB) * float3(1.0f / 4.0, 0.25f, 0.25f) + float3(0.0f, 0.5f, 0.5f);
}

#line 238 "/Engine/Private/ColorSpace.ush"
float3 HUE_2_LinearRGB(in float H)
{
	float R = abs(H * 6 - 3) - 1;
	float G = 2 - abs(H * 6 - 2);
	float B = 2 - abs(H * 6 - 4);
	return saturate(float3(R, G, B));
}

#line 246 "/Engine/Private/ColorSpace.ush"
float3 HSV_2_LinearRGB(in float3 HSV)
{
	float3 RGB = HUE_2_LinearRGB(HSV.x);
	return ((RGB - 1) * HSV.y + 1) * HSV.z;
}

#line 252 "/Engine/Private/ColorSpace.ush"
float3 RGB_2_HCV(in float3 RGB)
{
	
	float4 P = (RGB.g < RGB.b)	? float4(RGB.bg, -1.0f, 2.0f / 3.0f): float4(RGB.gb, 0.0f, -1.0f / 3.0f);
	float4 Q = (RGB.r < P.x)	? float4(P.xyw, RGB.r)				: float4(RGB.r, P.yzx);
	float Chroma = Q.x - min(Q.w, Q.y);
	float Hue = abs((Q.w - Q.y) / (6.0f * Chroma + 1e-10f) + Q.z);
	return float3(Hue, Chroma, Q.x);
}

#line 262 "/Engine/Private/ColorSpace.ush"
float3 LinearRGB_2_HSV(in float3 RGB)
{
	float3 HCV = RGB_2_HCV(RGB);
	float s = HCV.y / (HCV.z + 1e-10f);
	return float3(HCV.x, s, HCV.z);
}

#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;
	
	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b,  Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}

#line 48 "/Engine/Private/MonteCarlo.ush"
float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

#line 365 "/Engine/Private/MonteCarlo.ush"
float VisibleGGXPDF(float3 V, float3 H, float a2)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);

	float d = (NoH * a2 - NoH) * NoH + 1;
	float D = a2 / (PI*d*d);

	float PDF = 2 * VoH * D / (NoV + sqrt(NoV * (NoV - NoV * a2) + a2));
	return PDF;
}

#line 378 "/Engine/Private/MonteCarlo.ush"
float VisibleGGXPDF_aniso(float3 V, float3 H, float2 Alpha)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);
	float a2 = Alpha.x * Alpha.y;
	float3 Hs = float3(Alpha.y * H.x, Alpha.x * H.y, a2 * NoH);
	float S = dot(Hs, Hs);
	float D = (1.0f / PI) * a2 * Square(a2 / S);
	float LenV = length(float3(V.x * Alpha.x, V.y * Alpha.y, NoV));
	float Pdf = (2 * D * VoH) / (NoV + LenV);
	return Pdf;
}

#line 516 "/Engine/Private/MonteCarlo.ush"
float RayPDFToReflectionRayPDF(float VoH, float RayPDF)
{
	float ReflectPDF = RayPDF / (4.0 * saturate(VoH));

	return ReflectPDF;
}

#line 206 "/Engine/Private/DeferredShadingCommon.ush"
float EncodeIndirectIrradiance(float IndirectIrradiance)
{
	float L = IndirectIrradiance;
	L *= View_PreExposure; 
	const float LogBlackPoint = 0.00390625;	
	return log2( L + LogBlackPoint ) / 16 + 0.5;
}

#line 329 "/Engine/Private/DeferredShadingCommon.ush"
struct FGBufferData
{
	
	float3 WorldNormal;
	
	float3 WorldTangent;
	
	float3 DiffuseColor;
	
	float3 SpecularColor;
	
	float3 BaseColor;
	
	float Metallic;
	
	float Specular;
	
	float4 CustomData;
	
	float GenericAO;
	
	float IndirectIrradiance;
	
	
	float4 PrecomputedShadowFactors;
	
	float Roughness;
	
	float Anisotropy;
	
	float GBufferAO;
	
	uint DiffuseIndirectSampleOcclusion;
	
	uint ShadingModelID;
	
	uint SelectiveOutputMask;
	
	float PerObjectGBufferData;
	
	float CustomDepth;
	
	uint CustomStencil;
	
	
	float Depth;
	
	float4 Velocity;

	
	float3 StoredBaseColor;
	
	float StoredSpecular;
	
	float StoredMetallic;

	
	float Curvature;
};

#line 398 "/Engine/Private/DeferredShadingCommon.ush"
bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}

#line 20 "/Engine/Private/ParticipatingMediaCommon.ush"
struct FParticipatingMedia
{
	float3 ScatteringCoef;	
	float3 AbsorptionCoef;	
	float3 ExtinctionCoef;	
	float3 MeanFreePath;	
	float3 Albedo;			
	float3 BaseColor;		
};

#line 40 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 GetAlbedoFromBaseColor(const float3 BaseColor, const float g = 0.0f)
{
	const float3 s = 4.09712 + 4.20863 * BaseColor - sqrt(9.59217 + 41.6808 * BaseColor + 17.7126 * BaseColor * BaseColor);
	const float3 Albedo = (1.0f - s * s) / (1.0f - g * s * s);
	return Albedo;
}

#line 61 "/Engine/Private/ParticipatingMediaCommon.ush"
FParticipatingMedia CreateMediumFromBaseColorMFP(float3 BaseColor, float3 MeanFreePathMeters)
{
	FParticipatingMedia PM = (FParticipatingMedia)0;
	PM.Albedo = GetAlbedoFromBaseColor(BaseColor);
	PM.BaseColor = BaseColor;
	PM.MeanFreePath = MeanFreePathMeters;
	PM.ExtinctionCoef = 1.0f / max(0.000000000001f, PM.MeanFreePath);
	PM.ScatteringCoef = PM.Albedo * PM.ExtinctionCoef;
	PM.AbsorptionCoef = max(0.0f, PM.ExtinctionCoef - PM.ScatteringCoef);
	return PM;
}

#line 79 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicPhase()
{
	return 1.0f / (4.0f * PI);
}

#line 164 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToExtinction(in float3 TransmittanceColor, in float ThicknessMeters)
{
	
	
	return -log(clamp(TransmittanceColor, 0.000000000001f, 1.0f)) / max(0.000000000001f, ThicknessMeters);
}

#line 171 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 TransmittanceToMeanFreePath(in float3 TransmittanceColor, in float ThicknessMeters)
{
	return 1.0f / max(0.000000000001f, TransmittanceToExtinction(TransmittanceColor, ThicknessMeters));
}

#line 176 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 ExtinctionToTransmittance(in float3 Extinction, in float ThicknessMeters)
{
	return exp(-Extinction * ThicknessMeters);
}

#line 216 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicMediumSlabDirectionalAlbedoFadeLUT(float MFP)
{
	
	const float FitLastMeasuredSampleMFP = 10.0f;
	const float AlbedoIsZeroForMFP = 640.0f;	
	const float Fade = saturate(1.0f - (MFP - FitLastMeasuredSampleMFP) / (AlbedoIsZeroForMFP - FitLastMeasuredSampleMFP));
	return Fade;
}

#line 225 "/Engine/Private/ParticipatingMediaCommon.ush"
float IsotropicMediumSlabPunctualDirectionalAlbedoLUT(float MFP, float BaseColor, float NoV, float NoL)
{
	
	
	
	
	
	
	

	
	const float4 LUTDim = float4(11.0f, 11.0, 9.0f, 8.0f);
	const float4 LUTDimInv = 1.0f / LUTDim;
	const float4 LUTMin = 0.5f * LUTDimInv;
	const float4 LUTMax = (LUTDim - 0.5f) * LUTDimInv;
	const float4 LUTLen = (LUTDim - 1.0f) * LUTDimInv;

	const float PIOver2 = PI / 2.0f;
	const float LightAngleNorm = saturate(acosFast(saturate(NoL)) / PIOver2);
	const float ViewAngleNorm  = saturate(acosFast(saturate(NoV)) / PIOver2);

	float4 UVs = float4(MFP / 10.0f, BaseColor, LightAngleNorm, ViewAngleNorm);	
	UVs = LUTMin + LUTLen * UVs;												

	float FourthCoord = ViewAngleNorm * LUTDim.w;
	float FourthCoord0 = floor(FourthCoord);
	      FourthCoord0 = min(FourthCoord0, LUTDim.w - 1.0);
	float FourthCoord1 = FourthCoord0 + 1.0;
	      FourthCoord1 = min(FourthCoord1, LUTDim.w - 1.0);
	float FourthCoordLerp = saturate(FourthCoord - FourthCoord0);

	const float LUT3DDimZ    = LUTDim.z * LUTDim.w;
	const float LUT4DUvDimZ  = (LUTDim.z - 1.0) / LUT3DDimZ;	
	const float LUT4DUvStepW = (LUTDim.z      ) / LUT3DDimZ; 
	const float EdgeOffset = (0.5) / LUT3DDimZ;

	float3 UVW0 = float3(UVs.x, UVs.y, EdgeOffset + FourthCoord0 * LUT4DUvStepW + LightAngleNorm * LUT4DUvDimZ);
	float3 UVW1 = float3(UVs.x, UVs.y, EdgeOffset + FourthCoord1 * LUT4DUvStepW + LightAngleNorm * LUT4DUvDimZ);

	float Value0 = View_SimpleVolumeTexture.SampleLevel(View_SimpleVolumeTextureSampler, UVW0, 0);
	float Value1 = View_SimpleVolumeTexture.SampleLevel(View_SimpleVolumeTextureSampler, UVW1, 0);

	float DirectionalAlbedo = lerp(Value0, Value1, FourthCoordLerp);

	const float Fade = IsotropicMediumSlabDirectionalAlbedoFadeLUT(MFP);
	return DirectionalAlbedo * Fade;
}

#line 273 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 IsotropicMediumSlabPunctualDirectionalAlbedoLUT(FParticipatingMedia PM, float NoV, float NoL)
{
	return float3(
		IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM.MeanFreePath.r, PM.BaseColor.r, NoV, NoL),
		IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM.MeanFreePath.g, PM.BaseColor.g, NoV, NoL),
		IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM.MeanFreePath.b, PM.BaseColor.b, NoV, NoL)
	);
}

#line 296 "/Engine/Private/ParticipatingMediaCommon.ush"
float3 IsotropicMediumSlabTransmittance(FParticipatingMedia PM, float SlabThickness, float NoV)
{
	const float3 SafeExtinctionThreshold = 0.000001f;
	const float3 SafeExtinctionCoefficients = max(SafeExtinctionThreshold, PM.ExtinctionCoef);

	const float PathLength = SlabThickness / max(0.0001f, abs(NoV));
	const float3 SafePathSegmentTransmittance = exp(-SafeExtinctionCoefficients * PathLength);

	return SafePathSegmentTransmittance;
}

#line 62 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileTexture(uint SampleIndex, uint SubsurfaceProfileInt)
{
	



	return View_SSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

#line 72 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileTexture(Texture2D InSSProfilesTexture, SamplerState InSSProfilesSampler, float4 InSSProfilesTextureSizeAndInvSize, uint SampleIndex, uint SubsurfaceProfileInt)
{
	



	return InSSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

#line 82 "/Engine/Private/SubsurfaceProfileCommon.ush"
void GetSubsurfaceProfileDualSpecular(uint SubsurfaceProfileInt, float Roughness, float Opacity, out float LobeRoughness0, out float LobeRoughness1, out float LobeMix)
{
	const float4 Data = GetSubsurfaceProfileTexture((((((0+1)+1)+1)+1)+1), SubsurfaceProfileInt);

	
	
	float MaterialRoughnessToLobeRoughness0 = lerp(1.0f, Data.x * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	float MaterialRoughnessToLobeRoughness1 = lerp(1.0f, Data.y * 2.0f, saturate((Opacity - 0.10) * 10.0f));
	LobeMix = Data.z;

	
	LobeRoughness0 = max(saturate(Roughness * MaterialRoughnessToLobeRoughness0), 0.02f);
	LobeRoughness1 = saturate(Roughness * MaterialRoughnessToLobeRoughness1);
}

#line 98 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileSurfaceAlbedo(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture((0+1), SubsurfaceProfileInt);
}

#line 103 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileDiffuseMeanFreePath(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(((0+1)+1), SubsurfaceProfileInt);
}

#line 108 "/Engine/Private/SubsurfaceProfileCommon.ush"
float GetSubsurfaceProfileWorldUnitScale(uint SubsurfaceProfileInt)
{
	return GetSubsurfaceProfileTexture(0, SubsurfaceProfileInt).a;
}

#line 113 "/Engine/Private/SubsurfaceProfileCommon.ush"
float DecodeWorldUnitScale(float EncodedWorldUnitScale)
{
	return EncodedWorldUnitScale * 1/0.02f;
}

#line 118 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 DecodeDiffuseMeanFreePath(float4 EncodedDiffuseMeanFreePath)
{
	return EncodedDiffuseMeanFreePath * 1/(0.01f*0.2f);
}

#line 161 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4 GetSubsurfaceProfileDMFPInCm(int SubsurfaceProfileInt)
{
	const float4 DiffuseMeanFreePath = DecodeDiffuseMeanFreePath(GetSubsurfaceProfileDiffuseMeanFreePath(SubsurfaceProfileInt));
	const float WorldUnitScale = DecodeWorldUnitScale(GetSubsurfaceProfileWorldUnitScale(SubsurfaceProfileInt));
	return DiffuseMeanFreePath * WorldUnitScale; 
}

#line 63 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetPerpendicularScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}

#line 91 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetSearchLightDiffuseScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}

#line 105 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetMFPFromDMFPCoeff(float3 DMFPSurfaceAlbedo, float3 MFPSurfaceAlbedo, float Dmfp2MfpMagicNumber = 0.6f)
{
	return Dmfp2MfpMagicNumber * GetPerpendicularScalingFactor3D(MFPSurfaceAlbedo) / GetSearchLightDiffuseScalingFactor3D(DMFPSurfaceAlbedo);
}

#line 110 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 GetMFPFromDMFPApprox(float3 SurfaceAlbedo, float3 TargetSurfaceAlbedo, float3 DMFP)
{
	return GetMFPFromDMFPCoeff(SurfaceAlbedo, TargetSurfaceAlbedo) * DMFP;
}

#line 122 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float4 GetSubsurfaceProfileMFPInCm(int SubsurfaceProfileInt)
{
	float4 DMFP = GetSubsurfaceProfileDMFPInCm(SubsurfaceProfileInt);
	float4 SurfaceAlbedo = GetSubsurfaceProfileSurfaceAlbedo(SubsurfaceProfileInt);

	return float4(GetMFPFromDMFPApprox(SurfaceAlbedo.xyz, SurfaceAlbedo.xyz, DMFP.xyz),0.0f);
}

#line 25 "/Engine/Private/GammaCorrectionCommon.ush"
float LinearToSrgbBranchingChannel(float lin) 
{
	if(lin < 0.00313067) return lin * 12.92;
	return pow(lin, (1.0/2.4)) * 1.055 - 0.055;
}

#line 31 "/Engine/Private/GammaCorrectionCommon.ush"
float3 LinearToSrgbBranching(float3 lin) 
{
	return float3(
		LinearToSrgbBranchingChannel(lin.r),
		LinearToSrgbBranchingChannel(lin.g),
		LinearToSrgbBranchingChannel(lin.b));
}

#line 39 "/Engine/Private/GammaCorrectionCommon.ush"
float3 LinearToSrgb(float3 lin) 
{

	
	return LinearToSrgbBranching(lin);




}

#line 50 "/Engine/Private/GammaCorrectionCommon.ush"
float3 sRGBToLinear( float3 Color ) 
{
	Color = max(6.10352e-5, Color); 
	return  select_internal( Color > 0.04045 , pow( Color * (1.0 / 1.055) + 0.0521327, 2.4 ) , Color * (1.0 / 12.92) );
}

#line 10 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
struct FStrataLobeStatistic
{
	
	
	
	float3 Mu;

	
	float3 E;

	
	float Sigma;
};

#line 26 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
float StrataLobeRoughnessToVariance(float Roughness)
{
	
	const float SafeRoughness = clamp(Roughness, 0.0f, 0.999f);
	const float a11 = pow(SafeRoughness, 1.1f);
	return a11 / (1.0f - a11);
}

#line 34 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
float StrataLobeVarianceToRoughness(float Variance)
{
	
	return pow(Variance / (1.0f + Variance), 1.0f / 1.1f);
}

#line 57 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetDiracLobe(float3 Wi)
{
	FStrataLobeStatistic WiLobe;
	WiLobe.E = 1.0f;
	WiLobe.Mu = Wi;
	WiLobe.Sigma = 0.0f;
	return WiLobe;
}

#line 70 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataOppositeLobe(FStrataLobeStatistic LobeIn)
{
	FStrataLobeStatistic LobeOut = LobeIn;
	LobeOut.Mu = -LobeOut.Mu;
	return LobeOut;
}

#line 77 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetReflectedLobe(FStrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness)
{
	FStrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * InterfaceFDG;

	
	WoLobe.Mu = float3(-WiLobe.Mu.xy, WiLobe.Mu.z);

	WoLobe.Sigma = WiLobe.Sigma + StrataLobeRoughnessToVariance(InterfaceRoughness);

	return WoLobe;
}

#line 91 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataGetRefractedLobe(FStrataLobeStatistic WiLobe, float3 InterfaceFDG, float InterfaceRoughness, float InterfaceEta12)
{
	FStrataLobeStatistic WoLobe;

	WoLobe.E = WiLobe.E * (1.0f - InterfaceFDG);

	
	WoLobe.Mu.xy = -WiLobe.Mu.xy * InterfaceEta12;
	WoLobe.Mu.z  = -sign(WiLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 

	
	
	const float S = 1.0f;																			
	WoLobe.Sigma = (WiLobe.Sigma / InterfaceEta12) + StrataLobeRoughnessToVariance(S * InterfaceRoughness);

	return WoLobe;
}

#line 123 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataWeightLobe(FStrataLobeStatistic A, float Weight)
{
	
	
	
	
	FStrataLobeStatistic WoLobe = A;
	WoLobe.E *= Weight;
	WoLobe.Mu.xy = WoLobe.Mu.xy * Weight;
	WoLobe.Mu.z = sign(WoLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 
	WoLobe.Sigma *= Weight;
	return WoLobe;
}

#line 137 "/Engine/Private/Strata/StrataStatisticalOperators.ush"
FStrataLobeStatistic StrataHorizontalMixLobes(FStrataLobeStatistic A, FStrataLobeStatistic B, float Mix)
{
	FStrataLobeStatistic WoLobe;
	WoLobe.E = lerp(A.E, B.E, Mix);
	WoLobe.Mu = lerp(A.Mu, B.Mu, Mix);
	WoLobe.Mu.z = sign(WoLobe.Mu.z) * sqrt(1.0 - dot(WoLobe.Mu.xy, WoLobe.Mu.xy)); 
	WoLobe.Sigma = lerp(A.Sigma, B.Sigma, Mix);
	return WoLobe;
}

#line 8 "/Engine/Private/Strata/StrataSubsurface.ush"
uint PackColorLinearToGamma2AlphaLinear(float4 In);

#line 16 "/Engine/Private/Strata/StrataSubsurface.ush"
struct FStrataSubsurfaceHeader
{
	
	
	
	
	
	

	
	
	
	uint Bytes;
};

#line 47 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetSSSType(inout FStrataSubsurfaceHeader SSSHeader, uint SSSType)
{
	SSSHeader.Bytes &= (~(0x00000003));
	SSSHeader.Bytes |= SSSType & (0x00000003);
}

#line 53 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetProfile(inout FStrataSubsurfaceHeader SSSHeader, float RadiusScale, uint ProfileId)
{
	SSSHeader.Bytes &= (0x00000003);
	SSSHeader.Bytes |= ProfileId << 24;
	SSSHeader.Bytes |= PackR8(RadiusScale) << 16;
}

#line 60 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetNonProfile(inout FStrataSubsurfaceHeader SSSHeader, float3 MeanFreePath)
{
	SSSHeader.Bytes &= (0x00000003);
	SSSHeader.Bytes |= (Pack10F(MeanFreePath.x) << 22) | (Pack10F(MeanFreePath.y) << 12) | (Pack10F(MeanFreePath.z) << 2);
}

#line 66 "/Engine/Private/Strata/StrataSubsurface.ush"
float StrataSubSurfaceGetWrapOpacityFromAnisotropy(float PhaseAnisotropy)
{
	
	
	
	const float Opacity = 1.f - abs(PhaseAnisotropy);
	return Opacity;
}

#line 75 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetWrapOpacity(inout FStrataSubsurfaceHeader SSSHeader, float Opacity)
{
	SSSHeader.Bytes &= (0x00000003);
	SSSHeader.Bytes |= PackR8(Opacity) << 2;
}

#line 81 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubSurfaceHeaderSetWrap(inout FStrataSubsurfaceHeader SSSHeader, float PhaseAnisotropy)
{
	const float Opacity = StrataSubSurfaceGetWrapOpacityFromAnisotropy(PhaseAnisotropy);
	StrataSubSurfaceHeaderSetWrapOpacity(SSSHeader, Opacity);
}

#line 161 "/Engine/Private/Strata/StrataSubsurface.ush"
struct FStrataSubsurfaceExtras
{
	
	uint Bytes;
};

#line 166 "/Engine/Private/Strata/StrataSubsurface.ush"
void StrataSubsurfaceExtrasSetBaseColor(inout FStrataSubsurfaceExtras SSSExtras, float3 BaseColor)
{
	SSSExtras.Bytes = PackColorLinearToGamma2AlphaLinear(float4(BaseColor, 0.0f));
}

#line 175 "/Engine/Private/Strata/StrataSubsurface.ush"
struct FStrataSubsurfaceData
{
	FStrataSubsurfaceHeader Header;
	FStrataSubsurfaceExtras Extras;
};

#line 209 "/Engine/Private/Strata/StrataSubsurface.ush"
uint StrataSubsurfaceProfileIdTo8bits(float In)
{
	
	return uint(In * 255.0f + 0.5f);
}

#line 133 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelHeader;

#line 134 "/Engine/Private/Strata/Strata.ush"
struct FStrataIntegrationSettings;

#line 135 "/Engine/Private/Strata/Strata.ush"
struct FStrataAddressing;

#line 136 "/Engine/Private/Strata/Strata.ush"
struct FStrataDBuffer;

#line 137 "/Engine/Private/Strata/Strata.ush"
struct FStrataData;

#line 142 "/Engine/Private/Strata/Strata.ush"
struct FStrataBSDF
{
	uint				State;			

	
	int					OperatorIndex;
	float3				LuminanceWeightV;

	float				CoverageAboveAlongN;
	float3				TransmittanceAboveAlongN;	

	int					bIsBottom;
	int					bIsTop;



	float				Coverage;		

	float3				Emissive;		
	float				ThicknessCm;	
	float3				TmpMFP;			

	float				TopLayerDataWeight;


	
	

	float4 InlineVGPRs[3];





	float4 VGPRs[5];

	uint   Haziness;					


	void EnableSlabMFPComputationSpace();

	void EnableSlabBSDFSimpleVolumetric();

	void StrataSanitizeBSDF();

	void StrataSetBSDFRoughness(in float Roughness);

	void UnpackFastPathSlabBSDF(uint2 PackedData01);

	void PostProcessSlabBeforeLighting(bool bIsStrataOpaqueMaterial);

	void PostProcessBSDFBeforeLighting(bool bIsStrataOpaqueMaterial);

	
	bool HasScatteringData();

	
	bool HasBackScattering();
};

#line 602 "/Engine/Private/Strata/Strata.ush"
FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters);

#line 603 "/Engine/Private/Strata/Strata.ush"
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm);

#line 604 "/Engine/Private/Strata/Strata.ush"
void   StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index);

#line 605 "/Engine/Private/Strata/Strata.ush"
float3 StrataUnpackNormal(uint PackedNormal);

#line 607 "/Engine/Private/Strata/Strata.ush"
uint   PackR6(float Value, float Dither);

#line 609 "/Engine/Private/Strata/Strata.ush"
uint   PackR7(float Value, float Dither);

#line 611 "/Engine/Private/Strata/Strata.ush"
uint   PackR7G7B6Gamma2(float3 rgb, float Dither);

#line 612 "/Engine/Private/Strata/Strata.ush"
float3 UnpackR7G7B6Gamma2(uint rgb);

#line 615 "/Engine/Private/Strata/Strata.ush"
uint   PackColorLinearToGamma2AlphaLinear(float4 In);

#line 617 "/Engine/Private/Strata/Strata.ush"
uint   StrataPackNormal(in float3 Normal);

#line 618 "/Engine/Private/Strata/Strata.ush"
float3 StrataUnpackNormal(uint PackedNormal);

#line 621 "/Engine/Private/Strata/Strata.ush"
uint   StrataPackNormal22(in float3 Normal);

#line 622 "/Engine/Private/Strata/Strata.ush"
float3 StrataUnpackNormal22(uint PackedNormal);

#line 623 "/Engine/Private/Strata/Strata.ush"
bool   IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF);

#line 630 "/Engine/Private/Strata/Strata.ush"
struct FHaziness
{
	bool  bSimpleClearCoat;
	float Roughness;
	float Weight;
};

#line 637 "/Engine/Private/Strata/Strata.ush"
FHaziness InitialiseHaziness()
{
	FHaziness Haziness = (FHaziness)0;
	return Haziness;
}

#line 644 "/Engine/Private/Strata/Strata.ush"
uint PackHaziness(FHaziness Haziness)
{
	uint High8Bits = (Haziness.bSimpleClearCoat ? 0x80 : 0x00) | uint(saturate(Haziness.Weight) * 127);
	uint Data = (High8Bits << 8) | PackR8(Haziness.Roughness);
	return Data;
}

#line 651 "/Engine/Private/Strata/Strata.ush"
FHaziness UnpackHaziness(uint Data)
{
	FHaziness Haziness;
	Haziness.bSimpleClearCoat	= Data & 0x8000;
	Haziness.Weight				= float(uint((Data>>8) & 0x7F)) * (1.0f / 127.0f);
	Haziness.Roughness			= UnpackR8(Data);
	return Haziness;
}

#line 675 "/Engine/Private/Strata/Strata.ush"
struct FStrataIrradianceAndOcclusion
{
	float MaterialAO;
	float IndirectIrradiance;
	uint  DiffuseIndirectSampleOcclusion;
};

#line 682 "/Engine/Private/Strata/Strata.ush"
FStrataIrradianceAndOcclusion InitIrradianceAndOcclusion(float InAO=1.0f)
{
	FStrataIrradianceAndOcclusion Out;
	Out.MaterialAO = 1.0f;
	Out.IndirectIrradiance = 1.0f;
	Out.DiffuseIndirectSampleOcclusion = 0x0u;
	return Out;
}

#line 691 "/Engine/Private/Strata/Strata.ush"
uint StrataPackIrradianceAndOcclusion(FStrataIrradianceAndOcclusion In, float QuantizationBias=0)
{



	
	return min(0xFFu, (EncodeIndirectIrradiance(In.IndirectIrradiance * In.MaterialAO) + QuantizationBias * (1.0 / 255.0)) * 0xFFu);



}

#line 730 "/Engine/Private/Strata/Strata.ush"
struct FStrataTopLayerData
{
	float3 BaseColor; 
	float3 WorldNormal;
	float  Roughness;
	uint   Material;
};

#line 738 "/Engine/Private/Strata/Strata.ush"
uint StrataPackTopLayerData(FStrataTopLayerData In)
{

	
	return (StrataPackNormal22(In.WorldNormal) << 10) | (PackR8(In.Roughness) << 2) | (In.Material);





}

#line 750 "/Engine/Private/Strata/Strata.ush"
FStrataTopLayerData StrataUnpackTopLayerData(uint In)
{
	FStrataTopLayerData Out = (FStrataTopLayerData)0;
	Out.Material = (In & 0x3);
	Out.WorldNormal = StrataUnpackNormal22(In >> 10);
	Out.Roughness = UnpackR8(In >> 2);
	return Out;
}

#line 758 "/Engine/Private/Strata/Strata.ush"
FStrataTopLayerData StrataUnpackTopLayerData(uint2 In)
{
	FStrataTopLayerData Out = (FStrataTopLayerData)0;

	Out = StrataUnpackTopLayerData(In.x);







	return Out;
}

#line 773 "/Engine/Private/Strata/Strata.ush"
bool IsStrataMaterial(FStrataTopLayerData In)
{
	return In.Material > 0;
}

#line 786 "/Engine/Private/Strata/Strata.ush"
struct FStrataOpaqueRoughRefractionData
{
	float	OpaqueRoughRefractionEnabled;
	float	Coverage;
	float	VarianceCm;
};

#line 824 "/Engine/Private/Strata/Strata.ush"
float GetVarianceFromRoughness(float Roughness)
{
	float Roughness2 = Roughness * Roughness;
	float Roughness3 = Roughness2 * Roughness;
	float Roughness4 = Roughness2 * Roughness2;

	return saturate(             - 0.000332564 * Roughness - 0.0168059 * Roughness2 + 0.115569 * Roughness3 - 0.0526336 * Roughness4);	
}

#line 836 "/Engine/Private/Strata/Strata.ush"
uint PackSSSProfile(float InProfileId, float InRadius, float InThickness)
{
	uint Out = 0; 	
	Out |= (PackR8(InProfileId));
	Out |= (PackR8(InRadius)<<8);
	Out |= (Pack10F(InThickness)<<16);
	return Out;
}

#line 909 "/Engine/Private/Strata/Strata.ush"
uint PackFuzz(float3 InColor, float InAmount, float InRoughness, float InDither)
{
	return PackR7G7B6Gamma2(InColor, InDither) | (PackR6(InAmount, InDither) << 20) | (PackR6(InRoughness, InDither) << 26);
}

#line 931 "/Engine/Private/Strata/Strata.ush"
bool StrataIsBSDFVisible(in FStrataBSDF BSDF)
{
	return any(BSDF.LuminanceWeightV > 0.0f);
}

#line 936 "/Engine/Private/Strata/Strata.ush"
bool StrataHasGreyScaleWeight(in float3 Weight)
{
	return Weight.x == Weight.y && Weight.y == Weight.z;
}

#line 994 "/Engine/Private/Strata/Strata.ush"
struct FStrataOperator
{
	
	int ParentIndex;
	uint LayerDepth;
	uint MaxDistanceFromLeaves;							
	uint Type;											
	int	LeftIndex;
	int RightIndex;
	float Weight;

	

	float  Coverage;									
	float3 ThroughputAlongV;							
	float3 TransmittanceAlongN;							

	float  VerticalTop_Coverage;						
	float3 VerticalTop_ThroughputAlongV;				
	float3 VerticalTop_TransmittanceAlongN;				

	float  VerticalBot_Coverage;						
	float3 VerticalBot_ThroughputAlongV;				
	float3 VerticalBot_TransmittanceAlongN;				

	
	float3				 TopDownRefractionWorldNormal;	
	FStrataLobeStatistic TopDownRefractionLobeStat;		
	FStrataLobeStatistic BottomUpRefractionLobeStat;	

	
	float				 OpaqueRoughRefractCoverage;	
	float				 OpaqueRoughRefractThicknessCm;	
	float				 OpaqueRoughRefractTopRoughness;

	
	FStrataLobeStatistic VerticalTop_TopDownRefractionLobeStat;	
	FStrataLobeStatistic VerticalTop_BottomUpRefractionLobeStat;
};

#line 1034 "/Engine/Private/Strata/Strata.ush"
FStrataOperator GetInitialisedStrataOperator()
{
	FStrataOperator StrataOp = (FStrataOperator)0;
	StrataOp.ParentIndex = -1;
	StrataOp.LeftIndex = -1;
	StrataOp.RightIndex = -1;
	return StrataOp;
}

#line 1044 "/Engine/Private/Strata/Strata.ush"
struct FStrataTree
{
	int BSDFCount;
	uint OperatorCount;

	FStrataBSDF BSDFs[8u];
	FStrataOperator Operators[15];

	void UpdateSingleBSDFOperatorCoverageTransmittance(
		FStrataPixelHeader StrataPixelHeader,
		int BSDFIndex,
		FStrataIntegrationSettings Settings,
		FStrataAddressing NullStrataAddressing,
		float3 V);

	void UpdateSingleOperatorCoverageTransmittance(
		int OpIndex);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Weight(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Horizontal(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	void UpdateAllBSDFWithBottomUpOperatorVisit_Vertical(
		int BSDFIndex,
		int OpIndex,
		int PreviousIsInputA);

	FStrataData StrataAdd(FStrataData A, FStrataData B, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataWeight(FStrataData A, float Weight, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData StrataVerticalLayering(FStrataData Top, FStrataData Base, int OperatorIndex, uint MaxDistanceFromLeaves);
	FStrataData PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom);
};

#line 1084 "/Engine/Private/Strata/Strata.ush"
FStrataTree GetInitialisedStrataTree()
{
	FStrataTree Out;
	Out.BSDFCount = 0;
	Out.OperatorCount = 0;
	return Out;
}

#line 1281 "/Engine/Private/Strata/Strata.ush"
struct FStrataData
{
	FStrataBSDF InlinedBSDF;

	int  OperatorIndex;		


	float3 PreviewColor;	

};

#line 1292 "/Engine/Private/Strata/Strata.ush"
FStrataData GetInitialisedStrataData()
{
	FStrataData StrataData = (FStrataData)0;
	return StrataData;
}

#line 1298 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelFootprint
{
	float PixelRadiusInWorldSpace;	
	float NormalCurvatureRoughness; 
};

#line 1304 "/Engine/Private/Strata/Strata.ush"
FStrataPixelFootprint StrataGetPixelFootprint(float3 dPdx, float3 dPdy, float InNormalCurvatureRoughness)
{
	const float dX = lengthFast(dPdx);
	const float dY = lengthFast(dPdy);

	FStrataPixelFootprint Out;
	Out.PixelRadiusInWorldSpace = min(dX, dY) * 0.5f;
	Out.NormalCurvatureRoughness = InNormalCurvatureRoughness;
	return Out;
}

#line 1315 "/Engine/Private/Strata/Strata.ush"
FStrataPixelFootprint StrataGetPixelFootprint(float3 InWorldPosition, float InNormalCurvatureRoughness)
{




	const float3 dPdx =  0;
	const float3 dPdy =  0;
	return StrataGetPixelFootprint(dPdx, dPdy, InNormalCurvatureRoughness);

}

#line 1330 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataSlabBSDF(
	FStrataPixelFootprint InPixelFootprint,
	float3 DiffuseAlbedo, float3 F0, float3 F90,
	float Roughness, float Anisotropy,
	float SSSProfileID, float3 SSSMFP, float SSSMFPScale, float SSSPhaseAnisotropy, float UseSSSDiffusion,
	float3 Emissive, 
	float SecondRoughness, float SecondRoughnessWeight, float SecondRoughnessAsSimpleClearCoat,
	float FuzzAmount, float3 FuzzColor, float FuzzRoughness,
	float GlintValue, float2 GlintUV,
	float SpecularProfileId,
	float ThicknessCm,
	bool bIsThinSurface,
	bool bIsAtTheBottomOfTopology,	
	uint SharedLocalBasisIndex, inout uint SharedLocalBasisTypes)
{
	
	Roughness		= max(Roughness, InPixelFootprint.NormalCurvatureRoughness);
	SecondRoughness = max(SecondRoughness, InPixelFootprint.NormalCurvatureRoughness);
	FuzzRoughness	= max(FuzzRoughness, InPixelFootprint.NormalCurvatureRoughness);
	

	FStrataData StrataData = GetInitialisedStrataData();

	SSSMFPScale = saturate(SSSMFPScale);
	const bool bSSSProfilePlugged = SSSProfileID > 0.0f;
	const bool bMFPPlugged = any(SSSMFP > 0);
	bool bIsThin		= bIsAtTheBottomOfTopology && (bMFPPlugged && bIsThinSurface); 
	bool bHasSSSWrap	= bIsAtTheBottomOfTopology && (bMFPPlugged && !UseSSSDiffusion);
	bool bHasSSSProfile	= bIsAtTheBottomOfTopology && (bSSSProfilePlugged && SSSMFPScale > 0.f);
	bool bHasSSS		= bIsAtTheBottomOfTopology && (bMFPPlugged || bHasSSSProfile || bHasSSSWrap);

	FHaziness Haziness = InitialiseHaziness();

	
	if (!0 && bSSSProfilePlugged)
	{
		
		const uint SubsurfaceProfileUInt = StrataSubsurfaceProfileIdTo8bits(SSSProfileID);

		GetSubsurfaceProfileDualSpecular(SubsurfaceProfileUInt, Roughness, SSSMFPScale, Roughness, Haziness.Roughness, Haziness.Weight);

		SSSMFP = GetSubsurfaceProfileMFPInCm(SubsurfaceProfileUInt).xyz * SSSMFPScale;
	}
	else
	{
		Haziness.Roughness = SecondRoughness;
		Haziness.Weight = SecondRoughnessWeight;
		Haziness.bSimpleClearCoat = SecondRoughnessAsSimpleClearCoat > 0.0f;
	}

	
#line 1392 "/Engine/Private/Strata/Strata.ush"


	
	if (!0 && bHasSSSWrap)
	{
		SSSMFP = RescaleMFPToComputationSpace(SSSMFP, ThicknessCm, 100.0f);
		ThicknessCm = 100.0f;
	}

	const bool bHasGlint = GlintValue > 0.0f;
	const uint bHasHaziness = (((Haziness.Roughness != Roughness || bHasGlint)  && Haziness.Weight > 0.0f) || Haziness.bSimpleClearCoat) ? 1 : 0;
	const uint bHasAnisotropy = Anisotropy != 0 ? 1 : 0;
	const uint bHasFuzz = FuzzAmount > 0.0f ? 1 : 0;
	if (!0 && bHasAnisotropy)
	{
		StrataRequestSharedLocalBasisTangent(SharedLocalBasisTypes, SharedLocalBasisIndex);
	}

	
	
	
	
	
	
	

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 0 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;


	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( bHasSSS ? (bHasSSSWrap ? (1u) : (bHasSSSProfile ? (3u) : (2u))) : (0u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( 0 )))) | ((( bHasAnisotropy ) &  ((1u<<( 1 ))-1)) << ( 0 ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( (0			+ 1) )))) | ((( 0 ) &  ((1u<<( 1 ))-1)) << ( (0			+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) | ((( bIsThin ? 1 : 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) )))) | ((( bMFPPlugged ? 1 : 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )))) | ((( bHasHaziness ) &  ((1u<<( 1 ))-1)) << ( ((((0			+ 1)			+ 1)			+ 3)		+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )))) | ((( bHasFuzz ) &  ((1u<<( 1 ))-1)) << ( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) ));
	  StrataData.InlinedBSDF .ThicknessCm = ThicknessCm ;


#line 1451 "/Engine/Private/Strata/Strata.ush"



	
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 1 ))-1)<<( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) )))) | ((( any(F90 < 1.0f) ) &  ((1u<<( 1 ))-1)) << ( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) ));


	  StrataData.InlinedBSDF .VGPRs[0].xyz			= DiffuseAlbedo;
	  StrataData.InlinedBSDF .VGPRs[1].xyz						= F0;
	  StrataData.InlinedBSDF .VGPRs[2].xyz					= F90;

	  StrataData.InlinedBSDF .VGPRs[0].w		= Roughness;


	  StrataData.InlinedBSDF .VGPRs[1].w		= Anisotropy;

	  StrataData.InlinedBSDF .Haziness					= PackHaziness(Haziness);

	if (bHasSSSProfile)
	{
		  StrataData.InlinedBSDF .VGPRs[3].x		= SSSProfileID;
		  StrataData.InlinedBSDF .VGPRs[3].y	= SSSMFPScale;
		  StrataData.InlinedBSDF .VGPRs[3].z	= ThicknessCm;
	}
	else
	{
		  StrataData.InlinedBSDF .VGPRs[3].xyz				= SSSMFP * SSSMFPScale;
	}

	  StrataData.InlinedBSDF .VGPRs[3].w			= SSSPhaseAnisotropy;

	  StrataData.InlinedBSDF .VGPRs[4].w		= FuzzAmount;
	  StrataData.InlinedBSDF .VGPRs[4].xyz		= FuzzColor;
	  StrataData.InlinedBSDF .VGPRs[2].w		= FuzzRoughness;




	
	StrataData.InlinedBSDF.TmpMFP = SSSMFP * SSSMFPScale;

	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor = lerp(DiffuseAlbedo, F0, F0RGBToMetallic(F0));


	return StrataData;
}

#line 1523 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataUnlitBSDF(float3 Emissive, float3 TransmittanceColor, float3 Normal)
{
	FStrataData StrataData = GetInitialisedStrataData();

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 2 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = TransmittanceColor;
	  StrataData.InlinedBSDF .VGPRs[1].xyz = Normal;


	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= Emissive;


	return StrataData;
}

#line 1543 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataHairBSDF(float3 BaseColor, float Scatter, float Specular, float Roughness, float Backlit, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	
	
	  


		
	  
	

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 3 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = BaseColor;
	  StrataData.InlinedBSDF .VGPRs[0].w = Scatter;
	  StrataData.InlinedBSDF .VGPRs[1].x = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].y = Specular;
	  StrataData.InlinedBSDF .VGPRs[1].z = Backlit;
	  StrataData.InlinedBSDF .VGPRs[1].w = 0;


	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= BaseColor;


	return StrataData;
}

#line 1577 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataEyeBSDF(float3 DiffuseAlbedo, float Roughness, float IrisMask, float IrisDistance, float3 IrisNormal, float3 IrisPlaneNormal, float SSSProfileId, float3 Emissive, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 5 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = DiffuseAlbedo;
	  StrataData.InlinedBSDF .VGPRs[0].w = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].x = IrisDistance;
	  StrataData.InlinedBSDF .VGPRs[1].y = IrisMask;
	  StrataData.InlinedBSDF .VGPRs[2].xyz = IrisNormal;
	  StrataData.InlinedBSDF .VGPRs[3].xyz = IrisPlaneNormal;
	  StrataData.InlinedBSDF .VGPRs[1].z = SSSProfileId;
	  StrataData.InlinedBSDF .VGPRs[2].w = 0.028f;
	  StrataData.InlinedBSDF .VGPRs[3].w = 1.0f;

	const bool bHasSSS = SSSProfileId != 0;
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( bHasSSS ? (3u) : (0u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));

	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= DiffuseAlbedo;


	return StrataData;
}

#line 1606 "/Engine/Private/Strata/Strata.ush"
FStrataData GetStrataSingleLayerWaterBSDF(
	float3 BaseColor, float Metallic, float Specular, float Roughness, float3 Emissive, float TopMaterialOpacity,
	float3 WaterAlbedo, float3 WaterExtinction, float WaterPhaseG, float3 ColorScaleBehindWater, uint SharedLocalBasisIndex)
{
	FStrataData StrataData = GetInitialisedStrataData();

	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 3 ))-1)<<( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )))) | ((( 4 ) &  ((1u<<( 3 ))-1)) << ( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) ));
	   StrataData.InlinedBSDF .State = ( StrataData.InlinedBSDF .State & (~ ( ((1u<<( 2 ))-1)<<( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )))) | ((( SharedLocalBasisIndex ) &  ((1u<<( 2 ))-1)) << ( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) ));
	  StrataData.InlinedBSDF .Emissive = Emissive ;
	  StrataData.InlinedBSDF .VGPRs[0].xyz = BaseColor;
	  StrataData.InlinedBSDF .VGPRs[1].x = Metallic;
	  StrataData.InlinedBSDF .VGPRs[1].y = Specular;
	  StrataData.InlinedBSDF .VGPRs[1].z = Roughness;
	  StrataData.InlinedBSDF .VGPRs[1].w = TopMaterialOpacity;

	  StrataData.InlinedBSDF .InlineVGPRs[0].xyz = WaterAlbedo;
	  StrataData.InlinedBSDF .InlineVGPRs[1].xyz = WaterExtinction;
	  StrataData.InlinedBSDF .InlineVGPRs[0].w = WaterPhaseG;
	  StrataData.InlinedBSDF .InlineVGPRs[2].xyz = ColorScaleBehindWater;



	StrataData.InlinedBSDF.Coverage = 1.0f;



	StrataData.PreviewColor			= lerp(WaterAlbedo, BaseColor, TopMaterialOpacity);


	return StrataData;
}

#line 1659 "/Engine/Private/Strata/Strata.ush"
struct FStrataRaytracingPayload
{
	
	uint PackedTopLayerData;
	uint Data[(32/4)];
};

#line 1669 "/Engine/Private/Strata/Strata.ush"
struct FStrataAddressing
{
	uint  CurrentIndex;
	uint2 PixelCoords;
	uint  ReadBytes;
};

#line 1676 "/Engine/Private/Strata/Strata.ush"
FStrataAddressing GetStrataPixelDataByteOffset(uint2 PixelPos, uint2 ViewBufferSize, uint StrataMaxBytesPerPixel)
{
	FStrataAddressing StrataAddressing = (FStrataAddressing)0;
	StrataAddressing.CurrentIndex = 0;
	StrataAddressing.PixelCoords = PixelPos;
	StrataAddressing.ReadBytes = 0;
	return StrataAddressing;
}

#line 1746 "/Engine/Private/Strata/Strata.ush"
FStrataRaytracingPayload InitialiseRWStrataMaterialContainer()
{
	FStrataRaytracingPayload Out;
	[unroll]
	for (int i = 0; i < 3; ++i)
	{
		Out.Data[i] = 0;
	}
	Out.PackedTopLayerData = 0;
	return Out;
}

#line 1758 "/Engine/Private/Strata/Strata.ush"
void StrataStoreUint1(inout FStrataRaytracingPayload StrataBuffer, inout FStrataAddressing StrataAddressing, uint Data)
{
	[branch]
	if (StrataAddressing.CurrentIndex < (32/4))
	{
		StrataBuffer.Data[StrataAddressing.CurrentIndex] = Data;
		StrataAddressing.CurrentIndex++;
	}
}

#line 1772 "/Engine/Private/Strata/Strata.ush"
void FinalizeWrites(inout FStrataRaytracingPayload StrataBuffer, inout FStrataAddressing StrataAddressing)
{
	
}

#line 1878 "/Engine/Private/Strata/Strata.ush"
struct FSharedLocalBases
{
	uint Count;
	uint Types;
	float3 Normals[4];	
	float3 Tangents[4];
};

#line 1886 "/Engine/Private/Strata/Strata.ush"
FSharedLocalBases StrataInitialiseSharedLocalBases()
{
	FSharedLocalBases SharedLocalBases = (FSharedLocalBases)0;
	return SharedLocalBases;
}

#line 1892 "/Engine/Private/Strata/Strata.ush"
void StrataRequestSharedLocalBasisTangent(inout uint Types, uint Index)
{
	Types = Types | (1u << Index);
}

#line 1897 "/Engine/Private/Strata/Strata.ush"
uint StrataGetSharedLocalBasisType(in uint Types, uint Index)
{
	return (Types >> Index) & 0x1 ? 1u : 0u;
}

#line 1905 "/Engine/Private/Strata/Strata.ush"
struct FStrataPixelHeader
{
	uint BSDFCount;

	uint State;


	
	FSharedLocalBases SharedLocalBases;
	
	FStrataTree StrataTree;
	FStrataIrradianceAndOcclusion IrradianceAO;

	
	void PreUpdateAllBSDFWithBottomUpOperatorVisit(FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllBSDFsOperatorCoverageTransmittance(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllOperatorsCoverageTransmittance();
	void UpdateAllBSDFWithBottomUpOperatorVisit();
	void PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V);
	void UpdateAllOperatorsCoverageTransmittance_FullySimplified();
	void UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified();

	void StrataUpdateTree(
		inout FStrataAddressing StrataAddressing,
		float3 V,
		FStrataIntegrationSettings Settings);

	void StrataUpdateTree(
		inout FStrataAddressing StrataAddressing,
		in FStrataData StrataData,
		float3 V,
		FStrataIntegrationSettings Settings,
		inout float OutCoverage,
		inout float3 OutTransmittancePreCoverage);










	
	FStrataDBuffer StrataConvertToDBuffer(in FStrataBSDF InBSDF);
	void StrataConvertFromDBuffer(in FStrataDBuffer In, inout FStrataData OutData);

	
	uint GetMaterialMode()										{ return (this.State & (0x7)); }
	bool IsSimpleMaterial()										{ return (this.State & (0x7)) == 1 || 0; }
	bool IsSingleMaterial()										{ return (this.State & (0x7)) == 2 || 0; }
	bool IsComplexMaterial()									{ return (this.State & (0x7)) == 3 && !0 && !0; }
	bool IsSingleLayerWater()									{ return (this.State & (0x7)) == 4; }
	bool IsHair()												{ return (this.State & (0x7)) == 5; }
	bool IsEye()												{ return (this.State & (0x7)) == 6; }
	uint StrataGetBSDFType()
	{
		switch (this.GetMaterialMode())
		{
		case 1:
		case 2:
		case 3:	return 0;
		case 4:		return 4;
		case 5:			return 3;
		case 6:			return 5;
		default:								return 0;
		}
	}

	bool HasPrecShadowMask()									{ return (this.State & (1u << 3)) != 0; }
	bool HasZeroPrecShadowMask()								{ return (this.State & (1u << 4)) != 0; }
	bool DoesCastContactShadow()								{ return (this.State & (1u << 5)) != 0; }
	bool HasSubsurface()										{ return (this.State & (1u << 7)) != 0; }
	bool HasDynamicIndirectShadowCasterRepresentation()			{ return (this.State & (1u << 6)) != 0; }

	void SetHasPrecShadowMask(bool bIn)							{ this.State |= (bIn ? (1u << 3) : 0u); }
	void SetZeroPrecShadowMask(bool bIn)						{ this.State |= (bIn ? (1u << 4) : 0u); }
	void SetCastContactShadow(bool bIn)							{ this.State |= (bIn ? (1u << 5) : 0u); }
	void SetHasSubsurface(bool bIn)								{ this.State |= (bIn ? (1u << 7) : 0u); }
	void SetDynamicIndirectShadowCasterRepresentation(bool bIn)	{ this.State |= (bIn ? (1u << 6) : 0u); }

	bool IsStrataMaterial()										{ return this.GetMaterialMode() != 0; }
	void SetMaterialMode(uint MaterialMode)						{ this.State = (this.State & ~(0x7)) | (MaterialMode & (0x7)); }

	bool GetUsesComplexSpecialRenderPath()						{ return (this.State &  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) ))) != 0; }
	void SetUsesComplexSpecialRenderPath(bool bIn)				{ this.State |= (bIn ?  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) )) : 0u); }
};

#line 2000 "/Engine/Private/Strata/Strata.ush"
FStrataPixelHeader InitialiseStrataPixelHeader()
{
	FStrataPixelHeader Out;
	Out.BSDFCount = 0;

	Out.SharedLocalBases = (FSharedLocalBases)0;
	Out.StrataTree = GetInitialisedStrataTree();
	Out.IrradianceAO = InitIrradianceAndOcclusion();









	Out.State = 0;
	Out.SetMaterialMode(1); 
	return Out;
}

#line 2022 "/Engine/Private/Strata/Strata.ush"
float3x3 StrataGetBSDFSharedBasis_InlineShading(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{

	
	float3 Normal  = StrataPixelHeader.SharedLocalBases.Normals[  uint(( BSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	float3 Tangent = StrataPixelHeader.SharedLocalBases.Tangents[  uint(( BSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	float3 Bitangent = cross(Normal, Tangent);
	return float3x3(Tangent, Bitangent, Normal);



}

#line 2068 "/Engine/Private/Strata/Strata.ush"
float3x3 StrataGetBSDFSharedBasis(in FStrataPixelHeader StrataPixelHeader, in FStrataBSDF BSDF, in FStrataAddressing StrataAddressing)
{

	return StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, BSDF, StrataAddressing);



}

#line 2080 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataAdd(FStrataData A, FStrataData B, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = A.PreviewColor + B.PreviewColor;


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 3;
	Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= B.OperatorIndex;

	Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;
	Operators[B.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

#line 2101 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataWeight(FStrataData A, float Weight, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float SafeWeight = saturate(Weight);

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = A.PreviewColor * SafeWeight;


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 0;
	Operators[OperatorIndex].Weight					= SafeWeight;
	Operators[OperatorIndex].LeftIndex				= A.OperatorIndex;

	Operators[A.OperatorIndex].ParentIndex			= OperatorIndex;

	return StrataData;
}

#line 2123 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataHorizontalMixing(FStrataData Background, FStrataData Foreground, float Mix, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	const float ForegroundMixFactor = saturate(Mix);
	const float BackgroundMixFactor = 1.0 - ForegroundMixFactor;

	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = lerp(Background.PreviewColor, Foreground.PreviewColor, Mix);


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 2;
	Operators[OperatorIndex].Weight					= Mix;
	Operators[OperatorIndex].LeftIndex				= Background.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= Foreground.OperatorIndex;

	Operators[Background.OperatorIndex].ParentIndex	= OperatorIndex;
	Operators[Foreground.OperatorIndex].ParentIndex	= OperatorIndex;

	return StrataData;
}

#line 2148 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::StrataVerticalLayering(FStrataData Top, FStrataData Base, int OperatorIndex, uint MaxDistanceFromLeaves)
{
	FStrataData StrataData = GetInitialisedStrataData();
	StrataData.OperatorIndex = OperatorIndex;

	StrataData.PreviewColor = lerp(Top.PreviewColor, Base.PreviewColor, 0.5);


	OperatorCount++;
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].MaxDistanceFromLeaves	= MaxDistanceFromLeaves;
	Operators[OperatorIndex].Type					= 1;
	Operators[OperatorIndex].LeftIndex				= Top.OperatorIndex;
	Operators[OperatorIndex].RightIndex				= Base.OperatorIndex;

	Operators[Top.OperatorIndex].ParentIndex		= OperatorIndex;
	Operators[Base.OperatorIndex].ParentIndex		= OperatorIndex;

	return StrataData;
}

#line 2170 "/Engine/Private/Strata/Strata.ush"
FStrataData FStrataTree::PromoteParameterBlendedBSDFToOperator(FStrataData StrataData, int OperatorIndex, int BSDFIndex, int LayerDepth, int bIsBottom)
{
	BSDFCount++;
	OperatorCount++;

	BSDFs[BSDFIndex] = StrataData.InlinedBSDF;
	
	Operators[OperatorIndex]						= GetInitialisedStrataOperator();
	Operators[OperatorIndex].LayerDepth				= LayerDepth;
	Operators[OperatorIndex].MaxDistanceFromLeaves	= 0;
	Operators[OperatorIndex].Type					= 4;
	Operators[OperatorIndex].LeftIndex				= BSDFIndex;

	BSDFs[BSDFIndex].OperatorIndex					= OperatorIndex;
	BSDFs[BSDFIndex].bIsBottom						= bIsBottom;
	BSDFs[BSDFIndex].bIsTop							= LayerDepth == 0;

	StrataData.OperatorIndex = OperatorIndex;
	return StrataData;
}

#line 2637 "/Engine/Private/Strata/Strata.ush"
float SanitizeRoughness(float Roughness)
{



	
	
	
	Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	
	return saturate(max(View_MinRoughness, Roughness));

}

#line 2651 "/Engine/Private/Strata/Strata.ush"
float3 SanitizeDiffuseAlbedo(float3 DiffuseAlbedo)
{
	
	
	
	return saturate(DiffuseAlbedo) * ResolvedView.DiffuseOverrideParameter.www + ResolvedView.DiffuseOverrideParameter.xyz;
	


}

#line 2662 "/Engine/Private/Strata/Strata.ush"
float3 SanitizeF0(float3 F0)
{
	
	
	
	return saturate(F0) * ResolvedView.SpecularOverrideParameter.w + ResolvedView.SpecularOverrideParameter.xyz;
	


}

#line 2673 "/Engine/Private/Strata/Strata.ush"
float SanitizeF0(float F0)
{
	
	
	
	return saturate(F0) * ResolvedView.SpecularOverrideParameter.w + ResolvedView.SpecularOverrideParameter.x;
	


}

#line 2684 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::StrataSanitizeBSDF()
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
		case 0:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[1].xyz = SanitizeF0(  this .VGPRs[1].xyz);
			  this .VGPRs[2].xyz = saturate(  this .VGPRs[2].xyz);
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w);
			if (  uint(( this .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
			{
				FHaziness Haziness = UnpackHaziness(  this .Haziness);
				Haziness.Roughness = SanitizeRoughness(Haziness.Roughness);
				  this .Haziness = PackHaziness(Haziness);
			}
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w); 
			  this .VGPRs[1].w = clamp(  this .VGPRs[1].w, -1.f, 1.f);
			
		





			
			if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
			{
				  this .VGPRs[3].y = saturate(  this .VGPRs[3].y);
			}
			else if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u))
			{
				  this .VGPRs[3].xyz = clamp(  this .VGPRs[3].xyz, 0.0f, Max111110BitsFloat3);
			}

			  this .VGPRs[4].w = saturate(  this .VGPRs[4].w);
			  this .VGPRs[4].xyz = saturate(  this .VGPRs[4].xyz);
			  this .VGPRs[2].w = saturate(  this .VGPRs[2].w);
			break; 
		}
		case 3:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[0].w = saturate(  this .VGPRs[0].w);
			  this .VGPRs[1].x = SanitizeRoughness(  this .VGPRs[1].x);
			  this .VGPRs[1].y = SanitizeF0(  this .VGPRs[1].y);
			  this .VGPRs[1].z = saturate(  this .VGPRs[1].z);
			break;
		}
		case 5:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[0].w = SanitizeRoughness(  this .VGPRs[0].w);
			  this .VGPRs[1].x = saturate(  this .VGPRs[1].x);
			  this .VGPRs[1].y = saturate(  this .VGPRs[1].y);
			  this .VGPRs[2].xyz = normalize(  this .VGPRs[2].xyz);
			  this .VGPRs[3].xyz = normalize(  this .VGPRs[3].xyz);
			break;
		}
		case 4:
		{
			  this .Emissive = clamp(  this .Emissive, 0.0, Max10BitsFloat) ;
			  this .VGPRs[0].xyz = SanitizeDiffuseAlbedo(  this .VGPRs[0].xyz);
			  this .VGPRs[1].x = saturate(  this .VGPRs[1].x);
			  this .VGPRs[1].y = SanitizeF0(  this .VGPRs[1].y);
			  this .VGPRs[1].z = SanitizeRoughness(  this .VGPRs[1].z);
			  this .VGPRs[1].w = saturate(  this .VGPRs[1].w);
		
			  this .InlineVGPRs[0].xyz = saturate(  this .InlineVGPRs[0].xyz);
			  this .InlineVGPRs[1].xyz = clamp(  this .InlineVGPRs[1].xyz, 0.0f, Max10BitsFloat);
			  this .InlineVGPRs[0].w = clamp(  this .InlineVGPRs[0].w, -1.0f, 1.0f);
			  this .InlineVGPRs[2].xyz = clamp(  this .InlineVGPRs[2].xyz, 0.0f, Max10BitsFloat);
		
			break;
		}
		case 2:
		{
		
			
			  this .Emissive = max(  this .Emissive, 0.0) ;
		
			  this .VGPRs[0].xyz = saturate(  this .VGPRs[0].xyz);
			  this .VGPRs[1].xyz = normalize(  this .VGPRs[1].xyz);
		}
	}
}

#line 2799 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::PostProcessSlabBeforeLighting(bool bIsStrataOpaqueMaterial)
{
	
	
	const bool bIsThin = this.bIsBottom &&   uint(( this .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) && bIsStrataOpaqueMaterial;

	
	
	
	const bool bIsSimpleVolume = !bIsThin &&   uint(( this .State >>( ((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1) )) &  ((1u<<( 1 ))-1)) && (!bIsStrataOpaqueMaterial || (bIsStrataOpaqueMaterial && !this.bIsBottom));

	if (bIsSimpleVolume)
	{
		
		
		
		this.EnableSlabBSDFSimpleVolumetric();
	}
	else if (bIsThin)
	{
		
		
		if (  uint(( this .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
		{
			this.EnableSlabMFPComputationSpace();
		}
	}
	else
	{
		
		   this .State = ( this .State & (~ ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) | ((( 0 ) &  ((1u<<( 1 ))-1)) << ( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) ));
	}
}

#line 2833 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::PostProcessBSDFBeforeLighting(bool bIsStrataOpaqueMaterial)
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0:
	{
		this.PostProcessSlabBeforeLighting(bIsStrataOpaqueMaterial);
		break;
	}
	}
}

#line 2845 "/Engine/Private/Strata/Strata.ush"
bool FStrataBSDF::HasScatteringData()
{
	const uint SSSType =   uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	return SSSType != (0u) && SSSType != (4u);
}

#line 2851 "/Engine/Private/Strata/Strata.ush"
bool FStrataBSDF::HasBackScattering()
{
	const uint SSSType =   uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	return SSSType != (0u) && SSSType != (4u);
}

#line 2858 "/Engine/Private/Strata/Strata.ush"
float IsNonZeroFast(float v)
{
	return float(min(asuint(v) & 0x7FFFFFFF, 1u));
}

#line 2863 "/Engine/Private/Strata/Strata.ush"
float3 IsNonZeroFast(float3 v)
{
	return float3(min(asuint(v) & 0x7FFFFFFF, 1u.xxx));
}

#line 2869 "/Engine/Private/Strata/Strata.ush"
float3 DitherIfNonBlack(float3 Input, float3 Dither)
{
	
	float3 NewInput = Input + Dither * IsNonZeroFast(Input);
	return saturate(NewInput);
}

#line 2875 "/Engine/Private/Strata/Strata.ush"
float DitherIfNonBlack(float Input, float Dither)
{
	
	float NewInput = Input + Dither * IsNonZeroFast(Input);
	return saturate(NewInput);
}

#line 2887 "/Engine/Private/Strata/Strata.ush"
FParticipatingMedia StrataSlabCreateParticipatingMedia(float3 DiffuseColor, float3 MeanFreePathCentimeters)
{
	const float3 MeanFreePathMeters = MeanFreePathCentimeters * (1.0f / 100.0f);
	return CreateMediumFromBaseColorMFP(DiffuseColor, MeanFreePathMeters);
}

#line 2893 "/Engine/Private/Strata/Strata.ush"
float StrataSlabDiffuseToVolumeBlend(FParticipatingMedia PM)
{
	
	
	const float MaxMeanFreePathMeters = max(PM.MeanFreePath.x, max(PM.MeanFreePath.y, PM.MeanFreePath.z));
	
	const float StartVolumeBlenMFP = 0.04f;
	
	const float Blend = saturate(max(0.0, MaxMeanFreePathMeters - StartVolumeBlenMFP) * 3.0f);
	

	
	return Blend * Blend;
}

#line 2908 "/Engine/Private/Strata/Strata.ush"
float3 RescaleMFPToComputationSpace(float3 InMFPInCm, float InSrcThicknessInCm, float InDstThicknessInCm)
{
	
	
	
	
	return max(InMFPInCm * (InDstThicknessInCm / max(1e-10f, InSrcThicknessInCm)), 0.0f);
}

#line 2917 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::EnableSlabMFPComputationSpace()
{

	
	  this .VGPRs[3].xyz = this.TmpMFP;


	
	
	  this .VGPRs[3].xyz = RescaleMFPToComputationSpace(  this .VGPRs[3].xyz,   this .ThicknessCm, 100.0f);
}

#line 2929 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::EnableSlabBSDFSimpleVolumetric()
{
	this.EnableSlabMFPComputationSpace();

	
	
	
	   this .State = ( this .State & (~ ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) )))) | ((( (4u) ) &  ((1u<<( 3 ))-1)) << ( ((0			+ 1)			+ 1) ));
}

#line 2942 "/Engine/Private/Strata/Strata.ush"
uint StrataGetBSDFType(in FStrataBSDF BSDF)
{
	return   uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
}

#line 2947 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFBaseColor(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return lerp(  BSDF .VGPRs[0].xyz,   BSDF .VGPRs[1].xyz, F0RGBToMetallic(  BSDF .VGPRs[1].xyz));  
	case 3: 			return   BSDF .VGPRs[0].xyz;
	case 5: 				return   BSDF .VGPRs[0].xyz;
	case 4: return   BSDF .VGPRs[0].xyz;
	}
	return 0.f;
}

#line 2982 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularF0(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[1].xyz;
	case 3: 			return DielectricSpecularToF0(  BSDF .VGPRs[1].y);
	case 5: 				return   BSDF .VGPRs[2].w;
	case 4: return DielectricSpecularToF0(  BSDF .VGPRs[1].y);
	}
	return 0.f;
}

#line 2993 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularColor(in FStrataBSDF BSDF) { return StrataGetBSDFSpecularF0(BSDF);  }

#line 2995 "/Engine/Private/Strata/Strata.ush"
float3 StrataGetBSDFSpecularF90(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[2].xyz;
	case 3: 			return 1.0f;
	case 5: 				return   BSDF .VGPRs[3].w;
	case 4: return 1.0f;
	}
	return 0.f;
}

#line 3053 "/Engine/Private/Strata/Strata.ush"
float StrataGetBSDFMetallic(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return F0RGBToMetallic(  BSDF .VGPRs[1].xyz); 
	case 3: 			return 0;
	case 5: 				return 0;
	case 4: return 0;
	}
	return 0.f;
}

#line 3065 "/Engine/Private/Strata/Strata.ush"
float StrataGetBSDFRoughness(in FStrataBSDF BSDF)
{
	switch (  uint(( BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			return   BSDF .VGPRs[0].w;
	case 3: 			return   BSDF .VGPRs[1].x;
	case 5: 				return   BSDF .VGPRs[0].w;
	case 4: return   BSDF .VGPRs[1].z;
	}
	return 0.f;
}

#line 3077 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::StrataSetBSDFRoughness(in float Roughness)
{
	switch (  uint(( this .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
	{
	case 0: 			  this .VGPRs[0].w = Roughness; break;
	case 3: 			  this .VGPRs[1].x = Roughness; break;
	case 5: 				  this .VGPRs[0].w  = Roughness; break;
	case 4:   this .VGPRs[1].z  = Roughness; break;
	}
}

#line 3151 "/Engine/Private/Strata/Strata.ush"
float3 StrataLinearToSrgb(float3 In)
{

	return LinearToSrgb(In);



}

#line 3160 "/Engine/Private/Strata/Strata.ush"
float3 StrataSrgbToLinear(float3 In)
{

	return sRGBToLinear(In);



}

#line 3180 "/Engine/Private/Strata/Strata.ush"
uint PackColorLinearToGamma2AlphaLinear(float4 In)
{
	return PackRGBA8(float4(StrataLinearToSrgb(saturate(In.rgb)), In.a));
}

#line 3191 "/Engine/Private/Strata/Strata.ush"
uint PackR7G7B6Gamma2(float3 rgb, float Dither)
{
	
	const float CenteredDither = Dither - 0.5f;
	const float Dither8bits = CenteredDither * 1.0f / 255.0f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float Dither6bits = CenteredDither * 1.0f / 63.0f;
	const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

	
	const float3 dithered_rgb = DitherIfNonBlack(StrataLinearToSrgb(saturate(rgb)), Dither776);

	uint r = (uint(dithered_rgb.r * 127.0f) << 0);
	uint g = (uint(dithered_rgb.g * 127.0f) << 7);
	uint b = (uint(dithered_rgb.b *  63.0f) << 14);
	return r | g | b;
}

#line 3209 "/Engine/Private/Strata/Strata.ush"
float3 UnpackR7G7B6Gamma2(uint rgb)
{
	float3 Out;
	Out.r = float((rgb >> 0)  & 0x7F) * (1.0f / 127.0f);
	Out.g = float((rgb >> 7)  & 0x7F) * (1.0f / 127.0f);
	Out.b = float((rgb >> 14) & 0x3F) * (1.0f /  63.0f);

	return StrataSrgbToLinear(Out);
}

#line 3219 "/Engine/Private/Strata/Strata.ush"
uint PackR7G7B6Linear(float3 rgb, float Dither)
{
	
	const float CenteredDither = Dither - 0.5f;
	const float Dither8bits = CenteredDither * 1.0f / 255.0f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float Dither6bits = CenteredDither * 1.0f / 63.0f;
	const float3 Dither776 = float3(Dither7bits, Dither7bits, Dither6bits);

	
	const float3 dithered_rgb = DitherIfNonBlack(saturate(rgb), Dither776);

	uint r = (uint(dithered_rgb.r * 127.0f) << 0);
	uint g = (uint(dithered_rgb.g * 127.0f) << 7);
	uint b = (uint(dithered_rgb.b *  63.0f) << 14);
	return r | g | b;
}

#line 3246 "/Engine/Private/Strata/Strata.ush"
uint PackR7(float Value, float Dither)
{
	const float CenteredDither = Dither - 0.5f;
	const float Dither7bits = CenteredDither * 1.0f / 127.0f;
	const float DitheredValue = DitherIfNonBlack(saturate(Value), Dither7bits);
	return uint(DitheredValue * 127.0f);
}

#line 3259 "/Engine/Private/Strata/Strata.ush"
uint PackR6(float Value, float Dither)
{
	const float CenteredDither = Dither - 0.5f;
	const float Dither7bits = CenteredDither * 1.0f / 63.0f;
	const float DitheredValue = DitherIfNonBlack(saturate(Value), Dither7bits);
	return uint(DitheredValue * 63.0f);
}

#line 3273 "/Engine/Private/Strata/Strata.ush"
float SignNotZero(in float k)
{
	return k >= 0.0 ? 1.0 : -1.0;
}

#line 3277 "/Engine/Private/Strata/Strata.ush"
float2 SignNotZero(in float2 v)
{
	return float2(SignNotZero(v.x), SignNotZero(v.y));
}

#line 3282 "/Engine/Private/Strata/Strata.ush"
uint StrataPackNormal(in float3 Normal)
{
	return PackFloat2ToUInt(UnitVectorToOctahedron(Normal));
}

#line 3287 "/Engine/Private/Strata/Strata.ush"
float3 StrataUnpackNormal(uint PackedNormal)
{
	return OctahedronToUnitVector(UnpackFloat2FromUInt(PackedNormal));
}

#line 3306 "/Engine/Private/Strata/Strata.ush"
uint StrataPackNormal22(in float3 Normal)
{
	const float2 Result = UnitVectorToOctahedron(Normal);
	const uint2 PackedXY = uint2(clamp(Result * 1023.0f + 1024.0f, 0.0f, 2047.0f));
	return PackedXY.x | (PackedXY.y << 11);
}

#line 3313 "/Engine/Private/Strata/Strata.ush"
float3 StrataUnpackNormal22(uint PackedNormal)
{
	const int2 XY11Bits = int2(0x7FF & PackedNormal, 0x7FF & (PackedNormal >> 11));
	const float2 xy = float2(XY11Bits - 1024) / 1023.0f;
	return OctahedronToUnitVector(xy);
}

#line 3322 "/Engine/Private/Strata/Strata.ush"
uint StrataPackNormalAndTangent(in float3 Normal, in float3 Tangent)
{
	uint X10Bits;
	uint Y10Bits;
	uint Z11Bits;
	uint W1Bit;

	
	{
		float l1norm = abs(Normal.x) + abs(Normal.y) + abs(Normal.z);
		float2 result = Normal.xy * (1.0 / l1norm);
		if (Normal.z < 0.0)
		{
			result = (1.0 - abs(result.yx)) * SignNotZero(result.xy);
		}
		X10Bits = uint(clamp(result.x * 511.0f + 512.0f, 0.0f, 1023.0f));
		Y10Bits = uint(clamp(result.y * 511.0f + 512.0f, 0.0f, 1023.0f));
	}

	
	{
		
		float x = float(int(X10Bits) - 512) / 511.0f;
		float y = float(int(Y10Bits) - 512) / 511.0f;
		Normal = float3(x, y, 1.0f - abs(x) - abs(y));
		if (Normal.z < 0.0f)
		{
			Normal.xy = (1.0f - abs(Normal.yx)) * SignNotZero(Normal.xy);
		}
		Normal = normalize(Normal);

		float3x3 LocalRef = GetTangentBasis(Normal);
		float2 ProjXY = float2(dot(LocalRef[0], Tangent), dot(LocalRef[1], Tangent));
	
		
		ProjXY = ProjXY.x >= 0 ? ProjXY : -ProjXY.xy;
	
		float l1norm = abs(ProjXY.x) + abs(ProjXY.y);
		float2 result = ProjXY.xy * (1.0 / l1norm);

	
		Z11Bits = uint(clamp(result.x * 2047.0f, 0.0f, 2047.0f));
	


		W1Bit   = ProjXY.y >= 0 ? 1u : 0u;
	}

	return
		 (0x3FF & X10Bits)        | 
		((0x3FF & Y10Bits) << 10) | 
		((0x7FF & Z11Bits) << 20) |
		((0x1   & W1Bit  ) << 31);
}

#line 3443 "/Engine/Private/Strata/Strata.ush"
struct FStrataDBuffer
{
	float3 WorldNormal;
	float  Roughness;
	float3 BaseColor;
	float  Specular;
	float3 Emissive;
	float  Metallic;
	float  Coverage;

	
	
	
	float  OneMinusCoverage;
	float  OneMinusCoverage_BaseColor;
	float  OneMinusCoverage_WorldNormal;
	float  OneMinusCoverage_Roughness;
};

#line 3500 "/Engine/Private/Strata/Strata.ush"
FStrataDBuffer FStrataPixelHeader::StrataConvertToDBuffer(
	in FStrataBSDF InBSDF)
{
	FStrataDBuffer Out = (FStrataDBuffer)0;



	const float3 DiffuseColor =   InBSDF .VGPRs[0].xyz;
	const float3 F0 =   InBSDF .VGPRs[1].xyz;

	Out.Roughness =   InBSDF .VGPRs[0].w;
	Out.Metallic = F0RGBToMetallic(F0);
	Out.Specular = F0RGBToDielectricSpecular(F0);
	Out.BaseColor = lerp(DiffuseColor, F0, Out.Metallic);
	Out.Emissive =   InBSDF .Emissive;
	Out.WorldNormal = this.SharedLocalBases.Normals[  uint(( InBSDF .State >>( ((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3) )) &  ((1u<<( 2 ))-1))];
	Out.Coverage = InBSDF.Coverage;





	return Out;
}

#line 3525 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataConvertFromDBuffer(
	in FStrataDBuffer In,
	inout FStrataData OutData)
{
	
	const uint SharedLocalBasisIndex = 0;
	uint SharedLocalBasisTypes = 0;
	this.BSDFCount = 1;

	this.SharedLocalBases = StrataInitialiseSharedLocalBases();
	this.SharedLocalBases.Normals[SharedLocalBasisIndex] = In.WorldNormal;
	this.SharedLocalBases.Tangents[SharedLocalBasisIndex] = 0.f;
	this.IrradianceAO = InitIrradianceAndOcclusion();

	this.State = 0;
	this.SetMaterialMode(1);

	
	const FStrataPixelFootprint PixelFootprint = (FStrataPixelFootprint)0;
	const float DefaultThicknessCm = 0.01f;
	OutData = GetStrataSlabBSDF(
		PixelFootprint,		
		ComputeDiffuseAlbedo(In.BaseColor, In.Metallic),
		ComputeF0(In.Specular, In.BaseColor, In.Metallic),
		1.0f,				
		In.Roughness,		
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		0.f,				
		In.Roughness,		
		0.f,				
		0.f.xx,				
		0.f, 				
		DefaultThicknessCm,
		false,				
		false,				
		SharedLocalBasisIndex,
		SharedLocalBasisTypes);

	OutData.InlinedBSDF.Emissive = In.Emissive;
	OutData.InlinedBSDF.Coverage = In.Coverage;

}

#line 3581 "/Engine/Private/Strata/Strata.ush"
struct FStrataIntegrationSettings
{
	bool bForceFullyRough;
	bool bRoughDiffuseEnabled;
	bool bRoughnessTracking;

	
	int  SliceStoringDebugStrataTreeData;
	int  PeelLayersAboveDepth;
};

#line 3592 "/Engine/Private/Strata/Strata.ush"
FStrataIntegrationSettings InitStrataIntegrationSettings(bool bForceFullyRough, bool bRoughDiffuseEnabled, int PeelLayersAboveDepth, bool bRoughnessTracking)
{
	FStrataIntegrationSettings Out;
	Out.bForceFullyRough = bForceFullyRough;
	Out.bRoughDiffuseEnabled = bRoughDiffuseEnabled;
	Out.bRoughnessTracking = bRoughnessTracking;

	Out.PeelLayersAboveDepth = PeelLayersAboveDepth;
	Out.SliceStoringDebugStrataTreeData = -1;
	return Out;
}

#line 3604 "/Engine/Private/Strata/Strata.ush"
FStrataIntegrationSettings InitStrataIntegrationSettings()
{
	return InitStrataIntegrationSettings(false, true, -1, false);
}

#line 3615 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	float3 V,
	FStrataIntegrationSettings Settings)
{
	

	{
		
		
		
		this.PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(StrataAddressing, V);

		
		
		
		this.UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(Settings, StrataAddressing, V);

		
		
		
		this.UpdateAllOperatorsCoverageTransmittance_FullySimplified();

		
		
		
		this.UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified();
	}
#line 3665 "/Engine/Private/Strata/Strata.ush"

}

#line 3668 "/Engine/Private/Strata/Strata.ush"
void FStrataPixelHeader::StrataUpdateTree(
	inout FStrataAddressing StrataAddressing,
	in FStrataData StrataData,		
	float3 V,
	FStrataIntegrationSettings Settings,
	inout float OutCoverage,
	inout float3 OutTransmittancePreCoverage)
{
	this.StrataUpdateTree(
		StrataAddressing,
		V,
		Settings);

	OutCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].Coverage);
	OutTransmittancePreCoverage = saturate(StrataTree.Operators[StrataData.OperatorIndex].ThroughputAlongV);
}

#line 3691 "/Engine/Private/Strata/Strata.ush"
uint PackStrataHeader(uint InBSDFCount, FStrataPixelHeader InHeader)
{
	uint Out = 0;
	   Out = ( Out & (~ ( ((1u<<( 4 ))-1)<<( ((0					+ 8)			+ 8) )))) | ((( InBSDFCount ) &  ((1u<<( 4 ))-1)) << ( ((0					+ 8)			+ 8) ));


	   Out = ( Out & (~ ( ((1u<<( 3 ))-1)<<( (((0					+ 8)			+ 8)				+ 4) )))) | ((( InHeader.SharedLocalBases.Count ) &  ((1u<<( 3 ))-1)) << ( (((0					+ 8)			+ 8)				+ 4) ));
	   Out = ( Out & (~ ( ((1u<<( 4 ))-1)<<( ((((0					+ 8)			+ 8)				+ 4)	+ 3) )))) | ((( InHeader.SharedLocalBases.Types ) &  ((1u<<( 4 ))-1)) << ( ((((0					+ 8)			+ 8)				+ 4)	+ 3) ));



	Out |= InHeader.State &  ( ((1u<<( 1 ))-1)<<( (((((0					+ 8)			+ 8)				+ 4)	+ 3)	+ 4) ));


	   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( InHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

	return Out;
}

#line 3773 "/Engine/Private/Strata/Strata.ush"
bool IsStrataSlabFastPathCompatible(in FStrataBSDF BSDF)
{
	return (BSDF.State & ( ( ((1u<<( 1 ))-1)<<( 0 ))| 								 ( ((1u<<( 3 ))-1)<<( ((0			+ 1)			+ 1) ))	| 								 ( ((1u<<( 1 ))-1)<<( ((((0			+ 1)			+ 1)			+ 3)		+ 1) ))	| 								 ( ((1u<<( 1 ))-1)<<( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) ))		| 								 ( ((1u<<( 1 ))-1)<<( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) ))	| 								 ( ((1u<<( 1 ))-1)<<( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )))) == 0;
}

#line 3778 "/Engine/Private/Strata/Strata.ush"
void FStrataBSDF::UnpackFastPathSlabBSDF(uint2 PackedData01)
{
	const uint PackedData8Bits		= PackedData01.y & 0xFF;
	const uint PackedData32Bits		= PackedData01.x;
	const uint PackedF020Bits		= ((PackedData8Bits << 12) & 0xFF000) | (PackedData32Bits & 0xFFF);
	const uint PackedDiffuse20Bits	= (PackedData32Bits >> 12) & 0xFFFFF;

	  this .VGPRs[0].xyz	= UnpackR7G7B6Gamma2(PackedDiffuse20Bits);
	  this .VGPRs[1].xyz				= UnpackR7G7B6Gamma2(PackedF020Bits);

	float4 Data1 = UnpackRGBA8(PackedData01.y);
	  this .VGPRs[0].w			= Data1.y;
	  this .VGPRs[1].w			= Data1.z * 2.f - 1.f;
	  this .VGPRs[3].w	= Data1.w * 2.f - 1.f;
}

#line 264 "/Engine/Private/RayTracing/RayTracingCommon.ush"
struct FTriangleBaseAttributes
{
	uint3 Indices;
	float3 LocalPositions[3];
};

#line 278 "/Engine/Private/RayTracing/RayTracingCommon.ush"
struct FMinimalPayload
{
	float HitT; 

	bool IsMiss() { return HitT < 0; }
	bool IsHit() { return !IsMiss(); }

	void SetMiss() { HitT = -1; }
};

#line 333 "/Engine/Private/RayTracing/RayTracingCommon.ush"
struct FRayTracingIntersectionAttributes
{
	uint2 PackedData;

	float2 GetBarycentrics()
	{



		return asfloat(PackedData);

	}

	void SetBarycentrics(float2 Barycentrics)
	{



		PackedData = asuint(Barycentrics);

	}








};

#line 424 "/Engine/Private/RayTracing/RayTracingCommon.ush"
float3 TLASWorldToTranslatedWorld(float3 TLASWorldPosition)
{
	const FLWCVector3 TLASPreViewTranslation = MakeLWCVector3(-View_TLASViewTilePosition, View_TLASRelativePreViewTranslation);
	const float3 TranslatedWorldPosition = TLASWorldPosition + LWCToFloat(LWCSubtract(GetPrimaryView().PreViewTranslation, TLASPreViewTranslation));
	return TranslatedWorldPosition;
}

#line 432 "/Engine/Private/RayTracing/RayTracingCommon.ush"
uint PackNormalToUInt32(float3 Normal)
{
	float2 NormalAsOctahedron = UnitVectorToOctahedron(Normal);
	uint2 QuantizedOctahedron = clamp((NormalAsOctahedron * 0.5 + 0.5) * 65535.0 + 0.5, 0.0, 65535.0);
	return ((QuantizedOctahedron.x & 0xFFFF) << 16) | (QuantizedOctahedron.y & 0xFFFF);
}

#line 440 "/Engine/Private/RayTracing/RayTracingCommon.ush"
float3 UnpackNormalFromUInt32(uint PackedNormal)
{
	uint2 QuantizedOctahedron = uint2((PackedNormal >> 16) & 0xFFFF, PackedNormal & 0xFFFF);
	float2 WorldNormalAsOctahedron = ((QuantizedOctahedron / 65535.0) - 0.5) * 2.0;
	float3 WorldNormal = OctahedronToUnitVector(WorldNormalAsOctahedron);
	return WorldNormal;
}

#line 468 "/Engine/Private/RayTracing/RayTracingCommon.ush"
float3 TranslatedWorldRayOrigin()
{
	return TLASWorldToTranslatedWorld(WorldRayOrigin());
}

#line 538 "/Engine/Private/RayTracing/RayTracingCommon.ush"
struct FMaterialClosestHitPayload : FMinimalPayload
{
	
	FRayCone RayCone;
	float3 Radiance;
	float3 WorldNormal; 
	float Opacity;
	uint BlendingMode;
	uint PrimitiveLightingChannelMask;
	float3 IndirectIrradiance;
	uint ShadingModelID;
	float3 RayDirection;

	
	
	
	float3 TranslatedWorldPos;			
	uint Flags;							
	FStrataRaytracingPayload StrataData; 

	void SetFrontFace()						{ Flags |= (1 << 0); }
	bool IsFrontFace()						{ return (Flags & (1 << 0)) != 0; }

	void SetTwoSided()						{ Flags |= (1 << 1); }
	bool IsTwoSided()						{ return (Flags & (1 << 1)) != 0; }

	FRayCone GetRayCone()					{ return RayCone; }
	void SetRayCone(FRayCone In)			{ RayCone = In; }
	float3 GetRayDirection()				{ return RayDirection; }
};

#line 569 "/Engine/Private/RayTracing/RayTracingCommon.ush"
struct FPackedMaterialClosestHitPayload : FMinimalPayload
{
	
	
	
	 
	
	uint PackedRayCone;                                  
	uint Flags;											 
	uint Radiance;										 
	uint PackedGeometryNormal;							 
	uint SceneInstanceIndex;                             
														 
	FStrataRaytracingPayload StrataData;				 
														 

	void SetMinimalPayloadMode()			{ Flags |= (1 << 0); }
	bool IsMinimalPayloadMode()				{ return (Flags & (1 << 0)) != 0; }

	void SetEnableSkyLightContribution()	{ Flags |= (1 << 1); }
	bool IsEnableSkyLightContribution()		{ return (Flags & (1 << 1)) != 0; }

	void SetLumenPayload()					{ Flags |= (1 << 2); }
	bool IsLumenPayload()					{ return (Flags & (1 << 2)) != 0; }

	void SetIgnoreTranslucentMaterials()	{ Flags |= (1 << 3); }
	bool IsIgnoreTranslucentMaterials()		{ return (Flags & (1 << 3)) != 0; }

	FRayCone GetRayCone()					{ return UnpackRayCone(PackedRayCone); }
	void SetRayCone(FRayCone NewRayCone)	{ PackedRayCone = PackRayCone(NewRayCone); }

	float GetMipBias()						{ return UnpackR8(Flags>>8u); }
	void SetMipBias(float NewMipBias)		{ Flags = PackR8(NewMipBias) << 8u; }

	void SetRadiance(in float3 In)			{ Radiance = PackR11G11B10F(In); }
	float3 GetRadiance()					{ return UnpackR11G11B10F(Radiance); }

	void SetIndirectIrradiance(float3 In)	{  }
	float3 GetIndirectIrradiance()			{ return 0.f; }

	float3 GetWorldNormal()					{ return StrataUnpackTopLayerData(StrataData.PackedTopLayerData).WorldNormal; }

	void SetGeometryNormal(float3 GeometryNormal) 
	{
		PackedGeometryNormal = PackNormalToUInt32(GeometryNormal); 
	}

	float3 GetGeometryNormal()
	{ 
		return UnpackNormalFromUInt32(PackedGeometryNormal); 
	}

	bool IsValid()							{ return any(StrataData.PackedTopLayerData != 0); }
	uint  GetShadingModelID()				{ return IsValid() ? 12 : 0; }
	uint  GetFlags()						{ return (Flags & 0xFF); }
	bool IsTwoSided()						{ return (Flags & (1 << 1)) != 0; }
	bool IsFrontFace()						{ return (Flags & (1 << 0)) != 0; }
	uint  GetBlendingMode()					{ return (Flags >> 16u) & 0x7; }
	uint  GetPrimitiveLightingChannelMask() { return (Flags >> 19u) & 0x7; }
	float GetOpacity()						{ return UnpackR8(Flags >> 24u); }

	void SetFlags(uint In)							{ Flags |= ((In & 0xFF)); }
	void SetBlendingMode(uint In)					{ Flags |= ((In & 0x7)<<16u); }
	void SetPrimitiveLightingChannelMask(uint In)	{ Flags |= ((In & 0x7)<<19u); }
	void SetOpacity(float In)						{ Flags |= PackR8(In) << 24u; }

	void SetRayDirection(float3 In)			{ PackedRayCone = StrataPackNormal(In); }
	float3 GetRayDirection()				{ return StrataUnpackNormal(PackedRayCone); }

	
	void SetSceneInstanceIndex(uint In)		{ SceneInstanceIndex = In; }
	int GetSceneInstanceIndex()				{ return SceneInstanceIndex; }

	












};

#line 657 "/Engine/Private/RayTracing/RayTracingCommon.ush"
FPackedMaterialClosestHitPayload PackRayTracingPayload(FMaterialClosestHitPayload In, in FRayCone RayCone)
{
	FPackedMaterialClosestHitPayload Out = (FPackedMaterialClosestHitPayload)0;
	Out.HitT = In.HitT;
	Out.SetRayCone(RayCone);
	Out.SetFlags(In.Flags);
	Out.SetBlendingMode(In.BlendingMode);
	Out.SetPrimitiveLightingChannelMask(In.PrimitiveLightingChannelMask);
	Out.SetRadiance(In.Radiance);
	Out.StrataData = In.StrataData;
	Out.SetOpacity(In.Opacity);

	return Out;
}

#line 1203 "/Engine/Private/RayTracing/RayTracingCommon.ush"
uint GetGPUSceneInstanceIndex(uint PrimitiveIndex, uint InstanceIndex)
{

	FPrimitiveSceneData PrimData = GetPrimitiveData(PrimitiveIndex);
	
	if (PrimData.NumInstanceSceneDataEntries == 1)
	{
		InstanceIndex = 0;
	}

	return PrimData.InstanceSceneDataOffset + InstanceIndex;




}

#line 33 "/Engine/Shared/RayTracingBuiltInResources.h"
struct FHitGroupSystemRootConstants
{
	
	
	
	
	uint Config;

	
	uint IndexBufferOffsetInBytes;

	
	uint FirstPrimitive;

	
	uint UserData;

	
	
	uint BaseInstanceIndex;

	uint Pad0;

	

	uint GetIndexStride()
	{
		return Config & 0xFF;
	}

	uint GetVertexStride()
	{
		return (Config >> 8) & 0xFF;
	}

	





};

#line 89 "/Engine/Shared/RayTracingBuiltInResources.h"
ByteAddressBuffer									HitGroupSystemIndexBuffer   :  register(   t0 ,    space2 );

#line 90 "/Engine/Shared/RayTracingBuiltInResources.h"
ByteAddressBuffer									HitGroupSystemVertexBuffer  :  register(   t1 ,    space2 );

#line 91 "/Engine/Shared/RayTracingBuiltInResources.h"
ConstantBuffer<FHitGroupSystemRootConstants>		HitGroupSystemRootConstants :  register(   b0 ,    space2 );

#line 23 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
uint3 LoadIndices16Bit(ByteAddressBuffer SourceBuffer, uint OffsetInBytes)
{
	uint3 Result;

	
	
	uint AlignedOffsetInBytes = OffsetInBytes & (~3);
	const uint2 PackedIndices = SourceBuffer.Load2(AlignedOffsetInBytes);

	if (AlignedOffsetInBytes == OffsetInBytes)
	{
		
		Result[0] = PackedIndices[0] & 0xffff;
		Result[1] = PackedIndices[0] >> 16;
		Result[2] = PackedIndices[1] & 0xffff;
	}
	else
	{
		
		Result[0] = PackedIndices[0] >> 16;
		Result[1] = PackedIndices[1] & 0xffff;
		Result[2] = PackedIndices[1] >> 16;
	}

	return Result;
}

#line 50 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
uint3 LoadIndices32Bit(ByteAddressBuffer SourceBuffer, uint OffsetInBytes)
{
	return SourceBuffer.Load3(OffsetInBytes);
}

#line 55 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
float3 LoadVertexPositionFloat3(ByteAddressBuffer SourceBuffer, uint BaseOffsetInBytes, uint Index, uint StrideInBytes)
{
	uint OffsetInBytes = BaseOffsetInBytes + Index * StrideInBytes;
	return asfloat(SourceBuffer.Load3(OffsetInBytes));
}

#line 63 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
FTriangleBaseAttributes LoadTriangleBaseAttributes(
	ByteAddressBuffer IndexBuffer, uint IndexBufferOffsetInBytes, uint IndexBufferStride, 
	ByteAddressBuffer VertexBuffer, uint VertexBufferOffsetInBytes, uint VertexBufferStride, 
	uint PrimitiveId)
{
	FTriangleBaseAttributes Result = (FTriangleBaseAttributes)0;

	

	const uint BaseIndex = PrimitiveId * 3;

	if (IndexBufferStride == 0)
	{
		
		Result.Indices = uint3(BaseIndex, BaseIndex + 1, BaseIndex + 2);
	}
	else if (IndexBufferStride == 2)
	{
		Result.Indices = LoadIndices16Bit(IndexBuffer, IndexBufferOffsetInBytes + BaseIndex * IndexBufferStride);
	}
	else
	{
		Result.Indices = LoadIndices32Bit(IndexBuffer, IndexBufferOffsetInBytes + BaseIndex * IndexBufferStride);
	}

	
	
	Result.LocalPositions[0] = LoadVertexPositionFloat3(VertexBuffer, VertexBufferOffsetInBytes, Result.Indices[0], VertexBufferStride);
	Result.LocalPositions[1] = LoadVertexPositionFloat3(VertexBuffer, VertexBufferOffsetInBytes, Result.Indices[1], VertexBufferStride);
	Result.LocalPositions[2] = LoadVertexPositionFloat3(VertexBuffer, VertexBufferOffsetInBytes, Result.Indices[2], VertexBufferStride);

	return Result;
}

#line 97 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
FTriangleBaseAttributes LoadTriangleBaseAttributes(uint PrimitiveId)
{
	uint IndexBufferOffsetInBytes = HitGroupSystemRootConstants.IndexBufferOffsetInBytes;
	uint IndexBufferStride = HitGroupSystemRootConstants.GetIndexStride();
	uint VertexStride = HitGroupSystemRootConstants.GetVertexStride();
	uint VertexBufferOffsetInBytes = 0; 
	return LoadTriangleBaseAttributes(HitGroupSystemIndexBuffer, IndexBufferOffsetInBytes, IndexBufferStride, HitGroupSystemVertexBuffer, VertexBufferOffsetInBytes, VertexStride, PrimitiveId);
}

#line 106 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
uint GetInstanceUserData()
{
	return InstanceID();
}

#line 116 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
uint GetBaseInstanceIndex()
{
	return HitGroupSystemRootConstants.BaseInstanceIndex;
}

#line 121 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"
float3 GetGeometryNormalFromTriangleBaseAttributes(uint PrimitiveIndex)
{
#line 158 "/Engine/Private/RayTracing/RayTracingHitGroupCommon.ush"

	FTriangleBaseAttributes Tri = LoadTriangleBaseAttributes(PrimitiveIndex);

	float3 LocalEdges[2] = {
		Tri.LocalPositions[1] - Tri.LocalPositions[0],
		Tri.LocalPositions[2] - Tri.LocalPositions[0]
	};
	float3 LocalNormal = cross(LocalEdges[1], LocalEdges[0]);

	float3x3 InverseTranspose3x3 = transpose((float3x3)WorldToObject4x3());
	float3 WorldNormal = normalize(mul(LocalNormal, InverseTranspose3x3));

	return WorldNormal;
}

#line 15 "/Engine/Private/RayTracing/RayTracingShaderUtils.ush"
static int CurrentPayloadInputFlags = 0;

#line 104 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
struct FGlobalDistanceFieldPage
{
	uint PageIndex;
	bool bValid;
	bool bCoverage;
};

#line 111 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset;
	
	
	

	
	PageAtlasOffset.x = Page.PageIndex & 0x7F;
	PageAtlasOffset.y = (Page.PageIndex >> 7) & 0x7F;
	PageAtlasOffset.z = Page.PageIndex >> 14;

	return PageAtlasOffset;
}

#line 137 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
FGlobalDistanceFieldPage UnpackGlobalDistanceFieldPage(uint PackedPage)
{
	FGlobalDistanceFieldPage Page;
	Page.PageIndex = PackedPage & 0x00FFFFFF;
	Page.bCoverage = PackedPage & 0x80000000;
	Page.bValid = PackedPage < 0xFFFFFFFF;
	return Page;
}

#line 146 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
FGlobalDistanceFieldPage GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) * View_GlobalDistanceFieldClipmapSizeInPages + int3(0, 0, ClipmapIndex * View_GlobalDistanceFieldClipmapSizeInPages), 0);
	uint PackedPage = View_GlobalDistanceFieldPageTableTexture.Load(PageTableCoord);
	return UnpackGlobalDistanceFieldPage(PackedPage);
}

#line 153 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
void ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page, out float3 OutPageUV, out float3 OutCoveragePageUV)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View_GlobalDistanceFieldClipmapSizeInPages);

	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	OutPageUV = PageAtlasCoord * View_GlobalDistanceFieldInvPageAtlasSize;

	float3 CoveragePageAtlasCoord = PageAtlasOffset * 4 + VolumePageUV * (4 - 1) + 0.5f;
	OutCoveragePageUV = CoveragePageAtlasCoord * View_GlobalDistanceFieldInvCoverageAtlasSize;
}

#line 165 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, FGlobalDistanceFieldPage Page)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(Page);
	float3 VolumePageUV = frac(VolumeUV * View_GlobalDistanceFieldClipmapSizeInPages);
	float3 PageAtlasCoord = PageAtlasOffset * 8 + VolumePageUV * (8 - 1) + 0.5f;
	float3 PageUV = PageAtlasCoord * View_GlobalDistanceFieldInvPageAtlasSize;
	return PageUV;
}

#line 188 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

#line 193 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 ComputeGlobalUV(float3 TranslatedWorldPosition, uint ClipmapIndex)
{
	
	float4 TranslatedWorldToUVAddAndMul = View_GlobalVolumeTranslatedWorldToUVAddAndMul[ClipmapIndex];
	float3 UV = frac(TranslatedWorldPosition * TranslatedWorldToUVAddAndMul.www + TranslatedWorldToUVAddAndMul.xyz); 
	UV = frac(UV); 
	return UV;
}

#line 214 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GetDistanceToNearestSurfaceGlobal(float3 TranslatedWorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex < View_NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);
		const float ClipmapVoxelExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View_GlobalVolumeTexelSize;
		const float ClipmapInfluenceRange = 2.0f * 4 * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);

			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

#line 274 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GlobalDistanceFieldSampleClipmap(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float DistanceFieldValue = 1.0f;

	
	ClipmapVolumeUV = frac(ClipmapVolumeUV);

	FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);
	if (Page.bValid)
	{
		float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);
		DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;
	}

	return DistanceFieldValue;
}

#line 291 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 GlobalDistanceFieldPageCentralDiff(float3 ClipmapVolumeUV, uint ClipmapIndex)
{
	float3 TexelOffset = 0.5f * View_GlobalVolumeTexelSize;

	float R = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(+TexelOffset.x, 0, 0), ClipmapIndex);
	float L = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(-TexelOffset.x, 0, 0), ClipmapIndex);
	float F = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, +TexelOffset.y, 0), ClipmapIndex);
	float B = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, -TexelOffset.y, 0), ClipmapIndex);
	float U = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, +TexelOffset.z), ClipmapIndex);
	float D = GlobalDistanceFieldSampleClipmap(ClipmapVolumeUV + float3(0, 0, -TexelOffset.z), ClipmapIndex);

	return float3(R - L, F - B, U - D);
}

#line 316 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 GetDistanceFieldGradientGlobal(float3 TranslatedWorldPosition)
{
	float3 Gradient = float3(0, 0, 0.001f);

	for (uint ClipmapIndex = 0; ClipmapIndex < View_NumGlobalSDFClipmaps; ClipmapIndex++)
	{
		const float ClipmapVoxelExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w * View_GlobalVolumeTexelSize;
		const float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside(View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].xyz, View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].www, TranslatedWorldPosition);

		if (DistanceFromClipmap >= ClipmapVoxelExtent)
		{
			const float3 ClipmapVolumeUV = ComputeGlobalUV(TranslatedWorldPosition, ClipmapIndex);
			FGlobalDistanceFieldPage Page = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (Page.bValid)
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, Page);

				float DistanceFieldValue = Texture3DSampleLevel(View_GlobalDistanceFieldPageAtlasTexture,  D3DStaticTrilinearWrappedSampler, PageUV, 0).x;

				
				if (DistanceFieldValue < 0.9f)
				{
					float3 PageCentralDiff = GlobalDistanceFieldPageCentralDiff(ClipmapVolumeUV, ClipmapIndex);

					const float ClipmapInfluenceRange = 4 * 2.0f * ClipmapVoxelExtent;
					const float PageDistanceDecodeFactor = 2.0f * ClipmapInfluenceRange;
					float ClipmapExtent = View_GlobalVolumeTranslatedCenterAndExtent[ClipmapIndex].w;

					
					const float BackwardsCompatibilityFactor = 128.0f * View_GlobalVolumeTexelSize;
					Gradient = PageDistanceDecodeFactor * PageCentralDiff / (ClipmapExtent * BackwardsCompatibilityFactor);

					break;
				}
			}
		}
	}

	return Gradient;
}

#line 418 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float GetDistanceToNearestSurfaceGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceToNearestSurfaceGlobal(TranslatedWorldPosition);
}

#line 425 "/Engine/Private/DistanceField/GlobalDistanceFieldShared.ush"
float3 GetDistanceFieldGradientGlobal(FLWCVector3 WorldPosition)
{
	const float3 TranslatedWorldPosition = LWCToFloat(LWCAdd(WorldPosition, ResolvedView.PreViewTranslation));

	return GetDistanceFieldGradientGlobal(TranslatedWorldPosition);
}

#line 20 "/Engine/Private/HairShadingCommon.ush"
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;

	float  OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

#line 33 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent = 0x1u | 0x2u | 0x4u | (bMultipleScatterEnable ? 0x20u : 0);

	return o;
}

#line 48 "/Engine/Private/HairShadingCommon.ush"
FHairTransmittanceData InitHairStrandsTransmittanceData(bool bMultipleScatterEnable = false)
{
	FHairTransmittanceData o = InitHairTransmittanceData(bMultipleScatterEnable);
	o.bUseLegacyAbsorption = false;
	o.bUseBacklit = true;
	return o;
}

#line 71 "/Engine/Private/HairShadingCommon.ush"
float3 HairColorToAbsorption(float3 C, float B = 0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return Pow2(log(C) / D);
}

#line 95 "/Engine/Private/CapsuleLight.ush"
float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 115 "/Engine/Private/CapsuleLight.ush"

		
		
		
		
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}




	return NoL;
}

#line 23 "/Engine/Private/LightData.ush"
struct FRectTexture
{
	float2 AtlasUVOffset;
	float2 AtlasUVScale;
	float  AtlasMaxLevel;
};

#line 30 "/Engine/Private/LightData.ush"
FRectTexture InitRectTexture()
{
	FRectTexture Out;
	Out.AtlasUVOffset = 0;
	Out.AtlasUVScale  = 0;
	Out.AtlasMaxLevel = 32;
	return Out;
}

#line 14 "/Engine/Private/RectLight.ush"
struct FRect
{
	float3		Origin;
	float3x3	Axis;
	float2		Extent;
	float2		FullExtent;
	float2		Offset;
};

#line 23 "/Engine/Private/RectLight.ush"
float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference = false)
{

	const bool bIsValid = RectTexture.AtlasMaxLevel < 32;
	const float2 RectTextureSize = RectTexture.AtlasUVScale * View_RectLightAtlasSizeAndInvSize.xy;
	Level += log2(min(RectTextureSize.x, RectTextureSize.y)) - 2.f;
	Level  = min(Level, RectTexture.AtlasMaxLevel);

	RectUV = saturate(RectUV) * RectTexture.AtlasUVScale + RectTexture.AtlasUVOffset;
	return bIsValid ? View_RectLightAtlasTexture.SampleLevel(View_SharedTrilinearClampedSampler, RectUV, bIsReference ? 0 : Level).rgb : 1.f;



}

#line 278 "/Engine/Private/RectLight.ush"
float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{

	
	L += Rect.Axis[2] * saturate( 0.001 - dot( Rect.Axis[2], L ) );

	
	float DistToPlane = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * DistToPlane;

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

	
    float2 RectUV = (PointInRect + Rect.Offset) / max(0.0001f, Rect.FullExtent) * float2(0.5, -0.5) + 0.5;
	
	float Level = log2( DistToPlane * rsqrt( max(0.0001f, Rect.FullExtent.x * Rect.FullExtent.y) ) );

    return SampleRectTexture(RectTexture, RectUV, Level);



}

#line 303 "/Engine/Private/RectLight.ush"
float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );
	
	

	








	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );
	
	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( 1 - c01 * c01 ) - w01;


	return w01;
}

#line 328 "/Engine/Private/RectLight.ush"
float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );	
	float3 L1 = normalize( Poly[1] );	
	float3 L2 = normalize( Poly[2] );	
	float3 L3 = normalize( Poly[3] );	
	








	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );








	float3 L;
	L  = cross( L1, -w01 * L0 +  w12 * L2 );	
	L += cross( L3,  w30 * L0 + -w23 * L2 );	



	
	return L;
}

#line 365 "/Engine/Private/RectLight.ush"
struct FRectLTC
{
	float3x3 LTC;
	float3x3 InvLTC;
	float3 IrradianceScale;
};

#line 373 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_GGX( float Roughness, float3 SpecularColor, float NoV)
{
	
	const float3 F0  = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);

	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);
   
	float4 LTCMat = View_GGXLTCMatTexture.SampleLevel( View_GGXLTCMatSampler, UV, 0 );
	float4 LTCAmp = View_GGXLTCAmpTexture.SampleLevel( View_GGXLTCAmpSampler, UV, 0 );

	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3(        0, 1,        0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};

	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;

	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3(	          0, 1,           0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};

	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;
	return Out;
}

#line 408 "/Engine/Private/RectLight.ush"
FRectLTC GetRectLTC_Sheen( float Roughness, float NoV)
{	
	const float Alpha = sqrt(Roughness);
	const float SatNoV = saturate(abs(NoV) + 1e-5);
	float2 UV = float2(Alpha, SatNoV);
	UV = UV * (31.0 / 32.0) + (0.5 / 32.0);
	const float3 SheenLTC = View_SheenLTCTexture.SampleLevel(View_SheenLTCSampler, UV, 0).xyz;

	const float aInv = SheenLTC.x;
	const float bInv = SheenLTC.y;

	float3x3 LTC = {
		float3(1/aInv, 0,     -bInv/aInv),    
		float3(0,      1/aInv, 0),
		float3(0,      0,      1)
	};

	float3x3 InvLTC = {
		float3(aInv, 0,    bInv),
		float3(0,    aInv, 0),
		float3(0,    0,    1)
	};

	FRectLTC Out = (FRectLTC)0;
	Out.LTC = LTC;
	Out.InvLTC = InvLTC;
	Out.IrradianceScale = SheenLTC.z;
	return Out;
}

#line 440 "/Engine/Private/RectLight.ush"
float3 RectApproxLTC(FRectLTC In, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{	
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	
	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );

	In.LTC = mul( In.LTC, TangentBasis );
	In.InvLTC = mul( transpose( TangentBasis ), In.InvLTC );

	float3 Poly[4];
	Poly[0] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( In.LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( In.LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );

	
	float3 L = PolygonIrradiance( Poly );

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;

	
	L *= InvLength;

	
	
	
	float SinAlphaSqr = Length;

	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;

	
	Irradiance = -min(-Irradiance, 0.0);









	
	
	L = mul( In.InvLTC, L );
	OutMeanLightWorldDirection = L;

	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );
	
	return LightColor * Irradiance * In.IrradianceScale;
}

#line 499 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float3 OutMeanLightWorldDirection)
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const FRectLTC LTC = GetRectLTC_GGX(Roughness, SpecularColor, NoV);
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, OutMeanLightWorldDirection);
}

#line 510 "/Engine/Private/RectLight.ush"
float3 RectGGXApproxLTC(float Roughness, float3 SpecularColor, float3 N, float3 V, FRect Rect, FRectTexture RectTexture)
{
	float3 MeanLightWorldDirection = 0.0f;
	return RectGGXApproxLTC(Roughness, SpecularColor, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 517 "/Engine/Private/RectLight.ush"
float3 RectSheenApproxLTC( float Roughness, float3 N, float3 V, FRect Rect, FRectTexture RectTexture, inout float DirectionalAlbedo)
{
	
	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	const float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	const FRectLTC LTC = GetRectLTC_Sheen(Roughness, NoV);
	DirectionalAlbedo = LTC.IrradianceScale.x;

	float3 MeanLightWorldDirection = 0.0f;
	return RectApproxLTC(LTC, N, V, Rect, RectTexture, MeanLightWorldDirection);
}

#line 7 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLight
{
	float		SphereSinAlpha;
	float		SphereSinAlphaSoft;
	float		LineCosSubtended;

	float3		FalloffColor;

	FRect		Rect;
	FRectTexture Texture;

	uint		IsRectAndDiffuseMicroReflWeight;
};

#line 21 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};

#line 45 "/Engine/Private/AreaLightCommon.ush"
float GetAreaLightDiffuseMicroReflWeight(FAreaLight AreaLight)
{
	return asfloat(AreaLight.IsRectAndDiffuseMicroReflWeight >> 1);
}

#line 55 "/Engine/Private/AreaLightCommon.ush"
FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{
	
	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	Out.AreaLight.Texture = InitRectTexture();
	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}

#line 10 "/Engine/Private/HairBsdf.ush"
float Hair_g(float B, float Theta)
{
	return exp(-0.5 * Pow2(Theta) / (B * B)) / (sqrt(2 * PI) * B);
}

#line 15 "/Engine/Private/HairBsdf.ush"
float Hair_F(float CosTheta)
{
	const float n = 1.55;
	const float F0 = Pow2((1 - n) / (1 + n));
	return F0 + (1 - F0) * Pow5(1 - CosTheta);
}

#line 22 "/Engine/Private/HairBsdf.ush"
float3 KajiyaKayDiffuseAttenuation(FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow)
{
	
	float KajiyaDiffuse = 1 - abs(dot(N, L));

	float3 FakeNormal = normalize(V - N * dot(V, N));
	
	N = FakeNormal;

	
	float MinValue = 0.0001f;
	float Wrap = 1;
	float NoL = saturate((dot(N, L) + Wrap) / Square(1 + Wrap));
	float DiffuseScatter = (1 / PI) * lerp(NoL, KajiyaDiffuse, 0.33) * GBuffer.Metallic;
	float Luma = Luminance(GBuffer.BaseColor);
    float3 BaseOverLuma = abs(GBuffer.BaseColor / max(Luma, MinValue));
	float3 ScatterTint = Shadow < 1 ? pow(BaseOverLuma, 1 - Shadow) : 1;
	return sqrt(abs(GBuffer.BaseColor)) * DiffuseScatter * ScatterTint;
}

#line 42 "/Engine/Private/HairBsdf.ush"
float3 EvaluateHairMultipleScattering(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float3 Fs)
{
	return TransmittanceData.GlobalScattering * (Fs + TransmittanceData.LocalScattering) * TransmittanceData.OpaqueVisibility;
}

#line 273 "/Engine/Private/HairBsdf.ush"
float3 HairShading( FGBufferData GBuffer, float3 L, float3 V, float3 N, float Shadow, FHairTransmittanceData HairTransmittance, float InBacklit, float Area, uint2 Random )
{
	
	
	
	float ClampedRoughness = clamp(GBuffer.Roughness, 1/255.0f, 1.0f);

	
	const float Backlit	= min(InBacklit, HairTransmittance.bUseBacklit ? GBuffer.CustomData.z : 1);






	

	const float VoL       = dot(V,L);                                                      
	const float SinThetaL = clamp(dot(N,L), -1.f, 1.f);
	const float SinThetaV = clamp(dot(N,V), -1.f, 1.f);
	float CosThetaD = cos( 0.5 * abs( asinFast( SinThetaV ) - asinFast( SinThetaL ) ) );

	

	const float3 Lp = L - SinThetaL * N;
	const float3 Vp = V - SinThetaV * N;
	const float CosPhi = dot(Lp,Vp) * rsqrt( dot(Lp,Lp) * dot(Vp,Vp) + 1e-4 );
	const float CosHalfPhi = sqrt( saturate( 0.5 + 0.5 * CosPhi ) );
	

	float n = 1.55;
	
	float n_prime = 1.19 / CosThetaD + 0.36 * CosThetaD;

	float Shift = 0.035;
	float Alpha[] =
	{
		-Shift * 2,
		Shift,
		Shift * 4,
	};	
	float B[] =
	{
		Area + Pow2(ClampedRoughness),
		Area + Pow2(ClampedRoughness) / 2,
		Area + Pow2(ClampedRoughness) * 2,
	};

	float3 S = 0;
	if (HairTransmittance.ScatteringComponent & 0x1u)
	{
		const float sa = sin(Alpha[0]);
		const float ca = cos(Alpha[0]);
		float ShiftR = 2 * sa * (ca * CosHalfPhi * sqrt(1 - SinThetaV * SinThetaV) + sa * SinThetaV);
		float BScale = HairTransmittance.bUseSeparableR ? sqrt(2.0) * CosHalfPhi : 1;
		float Mp = Hair_g(B[0] * BScale, SinThetaL + SinThetaV - ShiftR);
		float Np = 0.25 * CosHalfPhi;
		float Fp = Hair_F(sqrt(saturate(0.5 + 0.5 * VoL)));
		S += Mp * Np * Fp * (GBuffer.Specular * 2) * lerp(1, Backlit, saturate(-VoL));
	}

	
	if (HairTransmittance.ScatteringComponent & 0x2u)
	{
		float Mp = Hair_g( B[1], SinThetaL + SinThetaV - Alpha[1] );

		float a = 1 / n_prime;
		
		
		float h = CosHalfPhi * ( 1 + a * ( 0.6 - 0.8 * CosPhi ) );
		
		
		
		
		float f = Hair_F( CosThetaD * sqrt( saturate( 1 - h*h ) ) );
		float Fp = Pow2(1 - f);
		
		
		float3 Tp = 0;
		if (HairTransmittance.bUseLegacyAbsorption)
		{
			Tp = pow(abs(GBuffer.BaseColor), 0.5 * sqrt(1 - Pow2(h * a)) / CosThetaD);
		}
		else
		{
			
			const float3 AbsorptionColor = HairColorToAbsorption(GBuffer.BaseColor);
			Tp = exp(-AbsorptionColor * 2 * abs(1 - Pow2(h * a) / CosThetaD));
		}

		
		
		
		
		
		
		float Np = exp( -3.65 * CosPhi - 3.98 );

		S += Mp * Np * Fp * Tp * Backlit;
	}

	
	if (HairTransmittance.ScatteringComponent & 0x4u)
	{
		float Mp = Hair_g( B[2], SinThetaL + SinThetaV - Alpha[2] );
		
		
		float f = Hair_F( CosThetaD * 0.5 );
		float Fp = Pow2(1 - f) * f;
		
		float3 Tp = pow(abs(GBuffer.BaseColor), 0.8 / CosThetaD );

		
		
		float Np = exp( 17 * CosPhi - 16.78 );

		S += Mp * Np * Fp * Tp;
	}


	if (HairTransmittance.ScatteringComponent & 0x20u)
	{
		S  = EvaluateHairMultipleScattering(HairTransmittance, ClampedRoughness, S);
		S += KajiyaKayDiffuseAttenuation(GBuffer, L, V, N, Shadow);
	}

	S = -min(-S, 0.0);
	return S;
}

#line 138 "/Engine/Private/ShadingModels.ush"
struct FShadowTerms
{
	float	SurfaceShadow;
	float	TransmissionShadow;
	float	TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};

#line 156 "/Engine/Private/ShadingModels.ush"
float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );
	
	
}

#line 163 "/Engine/Private/ShadingModels.ush"
float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{
		
		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}

	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}

	if( AreaLight.LineCosSubtended < 1 )
	{

		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / Line_a2 );






	}

	return Energy;
}

#line 369 "/Engine/Private/ShadingModels.ush"
float RefractBlendClearCoatApprox(float VoH)
{
	
	return (0.63 - 0.22 * VoH) * VoH - 0.745;
}

#line 382 "/Engine/Private/ShadingModels.ush"
BxDFContext RefractClearCoatContext(BxDFContext Context)
{
	
	
	
	
	
	
	

	BxDFContext RefractedContext = Context;
	float Eta = 1.0 / 1.5;
	float RefractionBlendFactor = RefractBlendClearCoatApprox(Context.VoH);
	float RefractionProjectionTerm = RefractionBlendFactor * Context.NoH;
	RefractedContext.NoV = clamp(Eta * Context.NoV - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.NoL = clamp(Eta * Context.NoL - RefractionProjectionTerm, 0.001, 1.0); 
	RefractedContext.VoH = saturate(Eta * Context.VoH - RefractionBlendFactor);
	RefractedContext.VoL = 2.0 * RefractedContext.VoH * RefractedContext.VoH - 1.0;
	RefractedContext.NoH = Context.NoH;
	return RefractedContext;
}

#line 12 "/Engine/Private/HairStrands/HairStrandsCommon.ush"
struct FHairAverageScattering
{
	float3 A_front;	
	float3 A_back;	
};

#line 18 "/Engine/Private/HairStrands/HairStrandsCommon.ush"
float3 FromLinearAbsorption(float3 In) { return sqrt(In);  }

#line 21 "/Engine/Private/HairStrands/HairStrandsCommon.ush"
FHairAverageScattering SampleHairLUT(Texture3D<float4> LUTTexture, SamplerState LUTSampler, float3 InAbsorption, float Roughness, float SinViewAngle)
{
	const float3 RemappedAbsorption = FromLinearAbsorption(InAbsorption);
	const float2 LUTValue_R = LUTTexture.SampleLevel(LUTSampler, float3(saturate(abs(SinViewAngle)), saturate(Roughness), saturate(RemappedAbsorption.x)), 0).xy;
	const float2 LUTValue_G = LUTTexture.SampleLevel(LUTSampler, float3(saturate(abs(SinViewAngle)), saturate(Roughness), saturate(RemappedAbsorption.y)), 0).xy;
	const float2 LUTValue_B = LUTTexture.SampleLevel(LUTSampler, float3(saturate(abs(SinViewAngle)), saturate(Roughness), saturate(RemappedAbsorption.z)), 0).xy;

	FHairAverageScattering Output;
	Output.A_front = float3(LUTValue_R.x, LUTValue_G.x, LUTValue_B.x);
	Output.A_back  = float3(LUTValue_R.y, LUTValue_G.y, LUTValue_B.y);
	return Output;
}

#line 7 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceCommon.ush"
struct FHairTransmittanceMask
{
	float HairCount;
	float Visibility;
};

#line 13 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceCommon.ush"
FHairTransmittanceMask InitHairTransmittanceMask()
{
	FHairTransmittanceMask Out;
	Out.HairCount = 0;
	Out.Visibility = 1;
	return Out;
}

#line 21 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceCommon.ush"
FHairTransmittanceMask InitHairTransmittanceMask(float HairCount, float Visibility)
{
	FHairTransmittanceMask Out;
	Out.HairCount = HairCount;
	Out.Visibility = Visibility;
	return Out;
}

#line 12 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
float Hair_g2(float Variance,float Theta)
{
	
	const float A = 1.f;
	return A * exp(-0.5 * Pow2(Theta) / Variance);
}

#line 20 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
FHairTransmittanceData ComputeDualScatteringTerms(
	const FHairTransmittanceMask TransmittanceMask,
	const FHairAverageScattering AverageScattering,
	float Roughness,
	const float Backlit,
	const float3 V,
	const float3 L,
	const float3 T,
	const uint HairComponents)
{
	const float SinThetaL = clamp(dot(T, L), -1, 1);
	const float SinThetaV = clamp(dot(T, V), -1, 1);
	const float CosThetaL = sqrt(1 - SinThetaL * SinThetaL);
	const float MaxAverageScatteringValue = 0.99f;

	
	const float3 af	 = min(MaxAverageScatteringValue.xxx, AverageScattering.A_front);
	const float3 af2 = Pow2(af);
	const float3 ab  = min(MaxAverageScatteringValue.xxx, AverageScattering.A_back);
	const float3 ab2 = Pow2(ab);
	const float3 OneMinusAf2 = 1 - af2;

	const float3 A1 = ab * af2 / OneMinusAf2;
	const float3 A3 = ab * ab2 * af2 / (OneMinusAf2*Pow2(OneMinusAf2));
	const float3 Ab = A1 + A3;

	
	
	
	Roughness = clamp(Roughness, 0.18f, 0.6f);
	const float Beta_R	 = Pow2( Roughness );
	const float Beta_TT	 = Pow2( Roughness / 2 ); 
	const float Beta_TRT = Pow2( Roughness * 2 ); 

	const float Shift     = 0.035;
	const float Shift_R   =-0.035*2;
	const float Shift_TT  = 0.035;
	const float Shift_TRT = 0.035*4;

	
	const float df = 0.7f;
	const float db = 0.7f;

	
	
	const float HairCount = max(0, TransmittanceMask.HairCount - 1);

	
	
	const float3 af_weights = af / (af.r + af.g + af.b);
	const float3 Beta_f  = dot(float3(Beta_R, Beta_TT, Beta_TRT), af_weights);
	const float3 Beta_f2 = Beta_f*Beta_f;
	const float3 sigma_f2 = Beta_f2 * max(1.f, HairCount);

	const float Theta_d = asin(SinThetaL) + asin(SinThetaV);
	const float Theta_h = Theta_d * 0.5f;

	
	float3 Sf = float3(	Hair_g2(sigma_f2.r, Theta_h), 
						Hair_g2(sigma_f2.g, Theta_h), 
						Hair_g2(sigma_f2.b, Theta_h)) / PI;
	const float3 Tf = pow(AverageScattering.A_front, HairCount);

	
	const float3 shift_f = dot(float3(Shift_R, Shift_TT, Shift_TRT), af_weights);
	const float3 shift_b = shift_f;
	const float3 delta_b = shift_b * (1 - 2*ab2 / Pow2(1 - af2)) * shift_f * (2 * Pow2(1 - af2) + 4*af2*ab2)/Pow3(1-af2);

	const float3 ab_weights = ab / (ab.r + ab.g + ab.b);
	const float3 Beta_b  = dot(float3(Beta_R, Beta_TT, Beta_TRT), ab_weights);
	const float3 Beta_b2 = Beta_b * Beta_b;

	const float3 sigma_b = (1 + db*af2) * (ab*sqrt(2*Beta_f2 + Beta_b2) + ab*ab2*sqrt(2*Beta_f2 + Beta_b2)) / (ab + ab*ab2*(2*Beta_f + 3*Beta_b));
	const float3 sigma_b2 = sigma_b * sigma_b;

	
	
	float3 Sb = float3(	Hair_g2(sigma_f2.r + sigma_b2.r, Theta_h - delta_b.r),
						Hair_g2(sigma_f2.g + sigma_b2.g, Theta_h - delta_b.g),
						Hair_g2(sigma_f2.b + sigma_b2.b, Theta_h - delta_b.b)) / PI;


	
	const float3 GlobalScattering = lerp(1, Tf * Sf * df, saturate(HairCount));
	const float3 LocalScattering  = 2 * Ab * Sb * db;
	
	
	FHairTransmittanceData Out = InitHairStrandsTransmittanceData();
	Out.ScatteringComponent = HairComponents | 0x20u;
	Out.GlobalScattering = (HairComponents & 0x10u) > 0 ? GlobalScattering : 1;
	Out.LocalScattering  = (HairComponents & 0x8u) > 0 ? LocalScattering : 0;
	Out.bUseLegacyAbsorption = (HairComponents & 0x40u) == 0;
	Out.OpaqueVisibility = TransmittanceMask.Visibility;
	return Out;
	
	
}

#line 186 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
FHairTransmittanceData EvaluateDualScattering(inout float3 BaseColor, float3 WorldNormal, float Roughness, float3 V, float3 L)
{
	
	BaseColor = max(0.0001f, BaseColor);

	
	const float SinLightAngle = dot(L, WorldNormal);
	const FHairAverageScattering AverageScattering = SampleHairLUT(View_HairScatteringLUTTexture, View_HairScatteringLUTSampler, BaseColor, Roughness, SinLightAngle);

	return ComputeDualScatteringTerms(
		InitHairTransmittanceMask(),
		AverageScattering,
		Roughness,
		1, 
		V,
		L,
		WorldNormal,
		View_HairComponents);
}

#line 206 "/Engine/Private/HairStrands/HairStrandsDeepTransmittanceDualScattering.ush"
FHairTransmittanceData EvaluateDualScattering(inout FGBufferData GBuffer, float3 V, float3 L)
{
	 { };
	return EvaluateDualScattering(GBuffer.BaseColor, GBuffer.WorldNormal, GBuffer.Roughness, V, L);
}

#line 94 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataBSDFContext
{
	FStrataBSDF BSDF;

	float3 N;
	float3 X;
	float3 Y;
	float3 V;
	float3 R;
	float3 H;
	float3 B;

	float3 L;	

	BxDFContext Context;
	float SatNoL;
	float SatNoV;

	float3x3 TangentBasis;
	float3 TangentV;
	float3 TangentH;
	float3 TangentB; 
	float3 TangentL;
	
	uint2 PixelCoord; 

	void StrataUpdateBSDFContext(float3 NewL);
};

#line 123 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(float3x3 TangentBasis, FStrataBSDF BSDF, float3 V, float3 L, bool bHasValidL=true, uint2 InPixelCoord=0)
{
	FStrataBSDFContext BSDFContext = (FStrataBSDFContext)0;

	BSDFContext.BSDF = BSDF;

	BSDFContext.X = TangentBasis[0]; 
	BSDFContext.Y = TangentBasis[1];
	BSDFContext.N = TangentBasis[2]; 
	BSDFContext.V = V;
	BSDFContext.R = 2 * dot(BSDFContext.V, BSDFContext.N) * BSDFContext.N - BSDFContext.V;
	BSDFContext.L = bHasValidL ? L : BSDFContext.R;
	BSDFContext.H = normalize(BSDFContext.V + BSDFContext.L);
	BSDFContext.B = normalize(BSDFContext.R + BSDFContext.L);

	BSDFContext.Context = (BxDFContext)0;

	if (  uint(( BSDF .State >>( 0 )) &  ((1u<<( 1 ))-1)) != 0)
	{
		Init(BSDFContext.Context, BSDFContext.N, BSDFContext.X, BSDFContext.Y, BSDFContext.V, BSDFContext.L);
	}
	else

	{
		Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, BSDFContext.L);
	}
	BSDFContext.TangentBasis = float3x3(BSDFContext.X, BSDFContext.Y, BSDFContext.N);

	BSDFContext.TangentV = mul(BSDFContext.TangentBasis, BSDFContext.V);
	BSDFContext.TangentH = mul(BSDFContext.TangentBasis, BSDFContext.H);
	BSDFContext.TangentB = mul(BSDFContext.TangentBasis, BSDFContext.B);
	BSDFContext.TangentL = normalize(mul(BSDFContext.TangentBasis, BSDFContext.L));

	BSDFContext.SatNoL = saturate(BSDFContext.Context.NoL);
	BSDFContext.SatNoV = saturate(BSDFContext.Context.NoV);








	BSDFContext.PixelCoord = InPixelCoord;

	return BSDFContext;
}

#line 171 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(FStrataPixelHeader StrataPixelHeader, FStrataBSDF BSDF, const FStrataAddressing StrataAddressing, float3 V)
{
	float3 UnusedL = float3(0, 0, 1);
	float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
	return StrataCreateBSDFContext(TangentBasis, BSDF, V, UnusedL, false, StrataAddressing.PixelCoords);
}

#line 178 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataBSDFContext StrataCreateBSDFContext(FStrataPixelHeader StrataPixelHeader, FStrataBSDF BSDF, const FStrataAddressing StrataAddressing, float3 V, float3 L)
{
	float3x3 TangentBasis = StrataGetBSDFSharedBasis(StrataPixelHeader, BSDF, StrataAddressing);
	return StrataCreateBSDFContext(TangentBasis, BSDF, V, L, true, StrataAddressing.PixelCoords);
}

#line 184 "/Engine/Private/Strata/StrataEvaluation.ush"
void FStrataBSDFContext::StrataUpdateBSDFContext(float3 NewL)
{
	
	this.L = NewL;
	Init(this.Context, this.N, this.V, this.L);
	this.R		 = 2 * dot(this.V, this.N) * this.N - this.V;
	this.H		 = normalize(this.V + this.L);
	this.B		 = normalize(this.R + this.L);

	this.TangentH = mul(this.TangentBasis, this.H);
	this.TangentB = mul(this.TangentBasis, this.B);
	this.TangentL = normalize(mul(this.TangentBasis, this.L));

	this.SatNoL	 = saturate(this.Context.NoL);
	this.SatNoV	 = saturate(this.Context.NoV);
}

#line 228 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_D_GGX(float Roughness, float a2, float NoH)
{



	return D_GGX(a2, NoH);

}

#line 237 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_D_GGX_Aniso(float ax, float ay, float NoH, float XoH, float YoH)
{
	return D_GGXaniso(ax, ay, NoH, XoH, YoH);
}

#line 242 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_Vis_GGX(float Roughness, float a2, float NoV, float NoL)
{





	return Vis_SmithJointApprox(a2, NoV, NoL);

}

#line 253 "/Engine/Private/Strata/StrataEvaluation.ush"
float Strata_Vis_GGX_Aniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	
	return Vis_SmithJointAniso(ax, ay, NoV, NoL, XoV, XoL, YoV, YoL);
}

#line 259 "/Engine/Private/Strata/StrataEvaluation.ush"
float3 Strata_F_GGX(float3 F0, float3 F90, float VoH)
{




	return F_Schlick(F0, F90, VoH);

}

#line 272 "/Engine/Private/Strata/StrataEvaluation.ush"
struct FStrataEvaluateResult
{
	float3 IntegratedDiffuseValue;
	float3 IntegratedSpecularValue;

	
	float3 DiffuseColor;

	float3 EmissivePathValue;

	float3 DiffusePathValue;
	float3 SpecularPathValue;
	float3 SpecularHazePathValue;
	float3 TransmissionPathValue;

	
	
	float SpecularPathProbability;
	float SpecularHazePathProbability;

	float  DiffusePDF;
	float  SpecularPDF;
	float  SpecularHazePDF;
	float  TransmissionPDF;

	float3 ThroughputV;					
	float3 TransmittanceAlongN;			
	bool   bSubsurface;					
	bool   bApplyProjectedSolidAngle;	
};

#line 309 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEvaluateResult StrataEvaluateBSDFCommon(FStrataBSDFContext BSDFContext, FShadowTerms ShadowTerms, FAreaLightIntegrateContext AreaLightContext, FStrataIntegrationSettings Settings, int IntegrationType)
{
	FStrataEvaluateResult Sample = (FStrataEvaluateResult)0;

	const float OpaqueBSDFThroughput = 0.0f;

	const uint BSDFType =   uint(( BSDFContext.BSDF .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
	switch (BSDFType)
	{
		case 0:
		{
			float3 DiffuseColor			=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0					=   BSDFContext.BSDF .VGPRs[1].xyz;
			float3 F90					=   BSDFContext.BSDF .VGPRs[2].xyz;
			const float SafeRoughness	= MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);
			const bool bHasAnisotropy	=   uint(( BSDFContext.BSDF .State >>( 0 )) &  ((1u<<( 1 ))-1));
			const bool bHaziness		=   uint(( BSDFContext.BSDF .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1));

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			float Alpha2Spec = Pow4(SafeRoughness);

			float NoV, VoH, NoH;
		
			[branch]
			if (bHasAnisotropy)
			{
				Init(BSDFContext.Context, BSDFContext.N, BSDFContext.X, BSDFContext.Y, BSDFContext.V, AreaLightContext.L);

				NoV = BSDFContext.Context.NoV;
				VoH = BSDFContext.Context.VoH;
				NoH = BSDFContext.Context.NoH;
			}
			else
		
			{
				Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, AreaLightContext.L);

				NoV = BSDFContext.Context.NoV;
				VoH = BSDFContext.Context.VoH;
				NoH = BSDFContext.Context.NoH;

				SphereMaxNoH(BSDFContext.Context, AreaLightContext.AreaLight.SphereSinAlpha, true);
			}
			BSDFContext.Context.NoV = saturate(max(abs(BSDFContext.Context.NoV), 1e-10f));

			
			
			

			if (Settings.bRoughDiffuseEnabled && any(DiffuseColor > 0))
			{
				
				
				
				
				Sample.DiffusePathValue = Diffuse_Chan(DiffuseColor, Alpha2Spec, NoV, AreaLightContext.NoL, VoH, NoH, GetAreaLightDiffuseMicroReflWeight(AreaLightContext.AreaLight));
			}
			else

			{
				Sample.DiffusePathValue = Diffuse_Lambert(DiffuseColor);
			}
			Sample.IntegratedDiffuseValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * Sample.DiffusePathValue * AreaLightContext.AreaLight.FalloffColor;
			Sample.DiffuseColor		= DiffuseColor;
			Sample.DiffusePDF		= BSDFContext.SatNoL / PI;
			Sample.bSubsurface		=   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u) ||   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);




			
			
			
			
			

			const bool bIsRectLight = IntegrationType == 2;

			
			float PDF = 0;
			float DirectionalAlbedo_SpecularTransmission = 1.0f;
			{
				float3 MSScale = 1.0f;
				{
					FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
					DirectionalAlbedo_SpecularTransmission = ComputeEnergyPreservation(EnergyTerms);
					MSScale = ComputeEnergyConservation(EnergyTerms);
				}
				
				
				
				Sample.DiffusePathValue *= DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue *= DirectionalAlbedo_SpecularTransmission;
			
				float D = 0;
				float Vis = 0;

				float3 RectLightSpec = 0;
				
				[branch]
				if (bHasAnisotropy)
				{
					
					{
						float  Alpha  = Square(SafeRoughness);
						float2 AlphaXY = 0;
						GetAnisotropicRoughness(Alpha,   BSDFContext.BSDF .VGPRs[1].w, AlphaXY.x, AlphaXY.y);

					











						{
							D = Strata_D_GGX_Aniso(AlphaXY.x, AlphaXY.y, BSDFContext.Context.NoH, BSDFContext.Context.XoH, BSDFContext.Context.YoH);
						}

						Vis = Strata_Vis_GGX_Aniso(AlphaXY.x, AlphaXY.y, BSDFContext.Context.NoV, BSDFContext.SatNoL, BSDFContext.Context.XoV, BSDFContext.Context.XoL, BSDFContext.Context.YoV, BSDFContext.Context.YoL);
						const float H_PDF = VisibleGGXPDF_aniso(BSDFContext.TangentV, BSDFContext.TangentH, AlphaXY);
						PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
					}
				}
				else
				
				{
					[branch]
					if (bIsRectLight)
					{
						
						{
							float3 MeanLightWorldDirection = 0.0f;
							RectLightSpec = RectGGXApproxLTC(SafeRoughness, F0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture, MeanLightWorldDirection);
							
							
						
#line 470 "/Engine/Private/Strata/StrataEvaluation.ush"


							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
							PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
					else
					{
						

						
						{
							if(IntegrationType == 0)
							{
							









								{
									D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
								}
							}
							else
							{
								const float Energy = EnergyNormalization(Alpha2Spec, BSDFContext.Context.VoH, AreaLightContext.AreaLight);

							









								{
									D = Energy * Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
								}
							}

							Vis = Strata_Vis_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoV, AreaLightContext.NoL);
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
							PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
				}

				if (bIsRectLight)
				{
					Sample.SpecularPathValue = MSScale * RectLightSpec;
				}
				else
				{
					const float3 FresnelTerm = Strata_F_GGX(F0, F90, BSDFContext.Context.VoH);
					Sample.SpecularPathValue = D * Vis * MSScale * FresnelTerm;
				}

				Sample.SpecularPathProbability     = 1.0f;
				Sample.SpecularHazePathProbability = 0.0f;
				Sample.IntegratedSpecularValue = Sample.SpecularPathValue;
			}

			
			float HazePDF = 0;
			
			[branch]
			if (bHaziness)
			{
				
				float3 HazeF0 = F0;
				float3 HazeF90= F90;
			
				const FHaziness Haziness = UnpackHaziness(  BSDFContext.BSDF .Haziness);
				const float HazeWeight = Haziness.Weight;
				const float HazeSafeRoughness = MakeRoughnessSafe(Haziness.Roughness);
				const bool bHazeAsSimpleClearCoat = Haziness.bSimpleClearCoat;

				if (bHazeAsSimpleClearCoat)
				{
					HazeF0 = 0.04f;
					HazeF90 = 1.0f;
					
				}

				FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(HazeSafeRoughness, BSDFContext.Context.NoV, HazeF0, HazeF90);
				float3 HazeMSScale = ComputeEnergyConservation(EnergyTerms);

				float HazeD = 0;
				float HazeVis = 0;

				float3 RectLightSpecHaze = 0;
				
				[branch]
				if (bHasAnisotropy)
				{
					{
						float2 HazeAlpha = 0;
						GetAnisotropicRoughness(HazeSafeRoughness,   BSDFContext.BSDF .VGPRs[1].w, HazeAlpha.x, HazeAlpha.y);

						HazeD   = Strata_D_GGX_Aniso(HazeAlpha.x, HazeAlpha.y, BSDFContext.Context.NoH, BSDFContext.Context.XoH, BSDFContext.Context.YoH);
						HazeVis = Strata_Vis_GGX_Aniso(HazeAlpha.x, HazeAlpha.y, BSDFContext.Context.NoV, BSDFContext.Context.NoL, BSDFContext.Context.XoV, BSDFContext.Context.XoL, BSDFContext.Context.YoV, BSDFContext.Context.YoL);
						const float H_PDF = VisibleGGXPDF_aniso(BSDFContext.TangentV, BSDFContext.TangentH, HazeAlpha);
						HazePDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
					}
				}
				else
				
				{
					if (bIsRectLight)
					{
						{
							RectLightSpecHaze = RectGGXApproxLTC(HazeSafeRoughness, HazeF0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture);
					
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Pow4(HazeSafeRoughness));
							HazePDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
					else
					{
						
						{
							float Alpha2SpecHaze = Pow4(HazeSafeRoughness);
							if (IntegrationType == 0)
							{
								HazeD = Strata_D_GGX(HazeSafeRoughness, Alpha2SpecHaze, BSDFContext.Context.NoH);
							}
							else
							{
								const float Energy = EnergyNormalization(Alpha2SpecHaze, BSDFContext.Context.VoH, AreaLightContext.AreaLight);
								HazeD = Strata_D_GGX(HazeSafeRoughness, Alpha2SpecHaze, BSDFContext.Context.NoH) * Energy;
							}
							HazeVis = Strata_Vis_GGX(HazeSafeRoughness, Alpha2SpecHaze, BSDFContext.Context.NoV, AreaLightContext.NoL);
							const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2SpecHaze);
							HazePDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
						}
					}
				}

				const float3 HazeFresnelTerm = Strata_F_GGX(HazeF0, HazeF90, BSDFContext.Context.VoH);
				if (bIsRectLight)
				{					
					Sample.SpecularHazePathValue = RectLightSpecHaze * HazeMSScale;
				}
				else
				{
					Sample.SpecularHazePathValue = HazeD * HazeVis * HazeMSScale * HazeFresnelTerm;
				}

				
				
				
				[branch]
				if (bHazeAsSimpleClearCoat)
				{
					const BxDFContext ClearCoatContext = RefractClearCoatContext(BSDFContext.Context);
					const float3 HazeClearCoatTransmittance = SimpleClearCoatTransmittance(ClearCoatContext.NoL, ClearCoatContext.NoV, StrataGetBSDFMetallic(BSDFContext.BSDF), StrataGetBSDFBaseColor(BSDFContext.BSDF));

					const float TopLayerCoverage = HazeWeight;
					const float TopLayerSpecularTransmittionApprox = saturate(1.0f - HazeFresnelTerm.x); 
					const float3 TopLayerThrouput = lerp(1.0f, HazeClearCoatTransmittance * TopLayerSpecularTransmittionApprox, TopLayerCoverage);

					const float TopLayerThrouputGrey = dot(TopLayerThrouput, (1.0 / 3.0).xxx);
					Sample.SpecularPathProbability = TopLayerThrouputGrey / (TopLayerCoverage + TopLayerThrouputGrey);
					Sample.SpecularHazePathProbability = TopLayerCoverage / (TopLayerCoverage + TopLayerThrouputGrey);

					
					Sample.DiffusePathValue *= TopLayerThrouput;
					Sample.IntegratedDiffuseValue *= TopLayerThrouput;
					
					Sample.IntegratedSpecularValue = Sample.SpecularPathValue * TopLayerThrouput + Sample.SpecularHazePathValue * TopLayerCoverage;
				}
				else
				{
					Sample.SpecularPathProbability     = (1.0f - HazeWeight);
					Sample.SpecularHazePathProbability = HazeWeight;
					Sample.IntegratedSpecularValue = lerp(Sample.SpecularPathValue, Sample.SpecularHazePathValue, HazeWeight);
				}
			}
			

			
			







			{
				float3 CommonTerm = 0.0f;
				if (bIsRectLight)
				{
					CommonTerm = ShadowTerms.SurfaceShadow; 
				}
				else
				{
					CommonTerm = (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor;
				}
				Sample.IntegratedSpecularValue *= CommonTerm;
			}

			Sample.SpecularPDF = PDF * Sample.SpecularPathProbability;
			Sample.SpecularHazePDF = HazePDF * Sample.SpecularHazePathProbability;


			
			
			
			
			
			Sample.EmissivePathValue =   BSDFContext.BSDF .Emissive;

			Sample.ThroughputV			= OpaqueBSDFThroughput;
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;

			
			
			

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
			{
				const float  FuzzAmount =   BSDFContext.BSDF .VGPRs[4].w;
				const float3 FuzzF0  =   BSDFContext.BSDF .VGPRs[4].xyz;
				const float  FuzzRoughness = MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[2].w, 0.02f);

				
				FBxDFEnergyTermsA EnergyTerms = (FBxDFEnergyTermsA)1.f;
				float3 ClothSpecularPathValueNoL = 0;

				
				
				{
					float DirectionalAlbedo = 1;
					[branch]
					if (bIsRectLight)
					{
						ClothSpecularPathValueNoL = FuzzF0 * RectSheenApproxLTC(FuzzRoughness, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture, DirectionalAlbedo);
					}
					else
					{
						ClothSpecularPathValueNoL = FuzzF0 * SheenLTC_Eval(BSDFContext.V, AreaLightContext.L, BSDFContext.N, BSDFContext.Context.NoV, FuzzRoughness, View_SheenLTCTexture, View_SheenLTCSampler, DirectionalAlbedo);
					}
					EnergyTerms.E = DirectionalAlbedo;
					EnergyTerms.W = 1.f;
				}
				
#line 737 "/Engine/Private/Strata/StrataEvaluation.ush"


				
				const float3 Cloth_DirectionalAlbedo_SpecularTransmission = lerp(1.0, ComputeEnergyPreservation(EnergyTerms), FuzzAmount);

				
				float3 ClothIntegratedSpecularValue = (ShadowTerms.SurfaceShadow * AreaLightContext.Falloff * FuzzAmount) * AreaLightContext.AreaLight.FalloffColor * ClothSpecularPathValueNoL;
				
				
				Sample.DiffusePathValue			*= Cloth_DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue	*= Cloth_DirectionalAlbedo_SpecularTransmission;
				Sample.SpecularPathValue		*= Cloth_DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedSpecularValue	*= Cloth_DirectionalAlbedo_SpecularTransmission;
				
				Sample.SpecularPathValue		+= ClothSpecularPathValueNoL;
				Sample.IntegratedSpecularValue  += ClothIntegratedSpecularValue;

				
				
				
				
				

				if (bHaziness)
				{
					Sample.SpecularHazePathValue*= Cloth_DirectionalAlbedo_SpecularTransmission;
					Sample.SpecularHazePathValue+= ClothSpecularPathValueNoL;

					
					
				}

				Sample.ThroughputV *= Cloth_DirectionalAlbedo_SpecularTransmission;
				
				break;
			}
			

			
			
			

			
			if (  uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
			{
				
				
				const bool bIsThin =   uint(( BSDFContext.BSDF .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1));
				const float TransmittanceNoL = 1.0f;
				const float3 SlabDiffuseColor = bIsThin ? DiffuseColor : float3(1, 1, 1);
				const FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(SlabDiffuseColor,   BSDFContext.BSDF .VGPRs[3].xyz);
				const float3 SubSurfaceColor = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), TransmittanceNoL);
				const float Opacity = 1.f - abs(  BSDFContext.BSDF .VGPRs[3].w);

				float3 TransmissionThroughput = 0;
				if (bIsThin)
				{
					
					
					
					const float Wrap = 0.5;
					const float WrapNoL = saturate((-dot(BSDFContext.N, BSDFContext.L) + Wrap) / Square(1 + Wrap));
					
					const float VoL = dot(BSDFContext.V, BSDFContext.L);
					const float Scatter = Strata_D_GGX(0.6, 0.6 * 0.6, saturate(-VoL));

					TransmissionThroughput = (WrapNoL * Scatter) * SubSurfaceColor;
				}
				else
				{
					
					 
					
					const float InScatter = pow(saturate(dot(BSDFContext.L, -BSDFContext.V)), 12) * lerp(3, .1f, Opacity);
					
					
					
					
					
					
					const float WrappedDiffuse = pow(saturate(AreaLightContext.NoL * (1.f / 1.5f) + (0.5f / 1.5f)), 1.5f) * (2.5f / 1.5f);
					const float NormalContribution = lerp(1.f, WrappedDiffuse, Opacity);
					const float BackScatter =  NormalContribution / (PI * 2);

					
					
					
					
					
					const float3 ExtinctionCoefficients = TransmittanceToExtinction(SubSurfaceColor, View_SubSurfaceColorAsTransmittanceAtDistanceInMeters);
					const float3 RawTransmittedColor = ExtinctionToTransmittance(ExtinctionCoefficients, 1.0f );
					const float3 TransmittedColor = HSV_2_LinearRGB(float3(LinearRGB_2_HSV(RawTransmittedColor).xy, LinearRGB_2_HSV(SubSurfaceColor).z));

					
					TransmissionThroughput = lerp(BackScatter, 1, InScatter) * lerp(TransmittedColor, SubSurfaceColor, ShadowTerms.TransmissionShadow);
				}

				Sample.TransmissionPDF = 1.0f / (4.0f * PI); 
				Sample.TransmissionPathValue = TransmissionThroughput * DirectionalAlbedo_SpecularTransmission;
				Sample.IntegratedDiffuseValue += (ShadowTerms.TransmissionShadow * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.TransmissionPathValue;
			}
			

			
			
			
			
#line 884 "/Engine/Private/Strata/StrataEvaluation.ush"


			
			
			
			

			
			[branch]
			if (  uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u))
			{
				FParticipatingMedia PM = StrataSlabCreateParticipatingMedia(DiffuseColor,   BSDFContext.BSDF .VGPRs[3].xyz);
				const float DiffuseToVolumeBlend = StrataSlabDiffuseToVolumeBlend(PM);

			
				const float3 SlabDirectionalAlbedo = IsotropicMediumSlabPunctualDirectionalAlbedoLUT(PM, BSDFContext.Context.NoV, BSDFContext.Context.NoL);
			



				
				const float3 SlabTransmittanceV = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), BSDFContext.Context.NoV);
				const float SpecularTransmissionV = DirectionalAlbedo_SpecularTransmission;

				
				
				const float3 SlabTransmittanceN = IsotropicMediumSlabTransmittance(PM, (100.0f * (1.0f / 100.0f)), 1.f );
				

				const float Phase = IsotropicPhase();

				
				
				Sample.DiffusePathValue		= lerp(Sample.DiffusePathValue,		SlabDirectionalAlbedo * SpecularTransmissionV,		DiffuseToVolumeBlend);
				Sample.DiffusePDF			= lerp(Sample.DiffusePDF,			Phase,												DiffuseToVolumeBlend);
				Sample.ThroughputV			= lerp(Sample.ThroughputV,			SlabTransmittanceV    * SpecularTransmissionV,		DiffuseToVolumeBlend);
				Sample.TransmittanceAlongN	= lerp(Sample.TransmittanceAlongN,	SlabTransmittanceN,									DiffuseToVolumeBlend);

				Sample.bSubsurface = false;	

				
				


				const float MediumNoL = saturate(BSDFContext.Context.NoL);
				

				Sample.IntegratedDiffuseValue = lerp(
					Sample.IntegratedDiffuseValue, 
					(ShadowTerms.SurfaceShadow * MediumNoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * SlabDirectionalAlbedo * DirectionalAlbedo_SpecularTransmission,
					DiffuseToVolumeBlend);
				Sample.DiffuseColor		= SlabDirectionalAlbedo;
			}
			

			break;
		}

		
		case 3:
		{
			FGBufferData GBuffer	= (FGBufferData)0;
			GBuffer.BaseColor		=   BSDFContext.BSDF .VGPRs[0].xyz;
			GBuffer.Specular		=   BSDFContext.BSDF .VGPRs[1].y;
			GBuffer.Roughness		=   BSDFContext.BSDF .VGPRs[1].x;
			GBuffer.Metallic		=   BSDFContext.BSDF .VGPRs[0].w;
			GBuffer.CustomData.z	=   BSDFContext.BSDF .VGPRs[1].z;
			GBuffer.ShadingModelID	= 7;
			GBuffer.WorldNormal		= BSDFContext.N;

			FHairTransmittanceData HairTransmittance = InitHairTransmittanceData();
			if (  BSDFContext.BSDF .VGPRs[1].w)
			{
				HairTransmittance = EvaluateDualScattering(GBuffer.BaseColor, BSDFContext.N, GBuffer.Roughness, BSDFContext.V, BSDFContext.L);
				HairTransmittance.OpaqueVisibility = ShadowTerms.SurfaceShadow;
			}

			float BacklitEnabled = 1.0f;
			float Area = 0.0f;
			uint2 Random = uint2(0, 0);
			Sample.SpecularPathValue	= HairShading(GBuffer, BSDFContext.L, BSDFContext.V, BSDFContext.N, ShadowTerms.TransmissionShadow, HairTransmittance, BacklitEnabled, Area, Random);
			Sample.SpecularPDF			= 1.0f / (4.0f * PI);		
			Sample.ThroughputV			= OpaqueBSDFThroughput; 
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;
			Sample.IntegratedSpecularValue = (ShadowTerms.TransmissionShadow * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.SpecularPathValue;
		}
		break;
		
		case 5:
		{
			float3 DiffuseColor	=   BSDFContext.BSDF .VGPRs[0].xyz;
			float3 F0			=   BSDFContext.BSDF .VGPRs[2].w;
			float3 F90			=   BSDFContext.BSDF .VGPRs[3].w;
			const float SafeRoughness	= MakeRoughnessSafe(  BSDFContext.BSDF .VGPRs[0].w);

			
			F90 *= F0RGBToMicroOcclusion(F0);

			if (Settings.bForceFullyRough)
			{
				
				EnvBRDFApproxFullyRough(DiffuseColor, F0, F90);
			}

			float Alpha2 = Pow4(SafeRoughness);

			Init(BSDFContext.Context, BSDFContext.N, BSDFContext.V, AreaLightContext.L);
			SphereMaxNoH(BSDFContext.Context, AreaLightContext.AreaLight.SphereSinAlpha, true);

			BSDFContext.Context.NoV = saturate(max(abs(BSDFContext.Context.NoV), 1e-10f));

			
			
			

			const float IrisNoL = saturate(dot(  BSDFContext.BSDF .VGPRs[2].xyz, BSDFContext.L));

			
			
			
			
			const float3 CausticNormal = normalize(lerp(  BSDFContext.BSDF .VGPRs[3].xyz, -BSDFContext.N,   BSDFContext.BSDF .VGPRs[1].y *   BSDFContext.BSDF .VGPRs[1].x));

			
			const float Power = lerp(12, 1, IrisNoL);
			const float Caustic = 0.8 + 0.2 * (Power + 1) * pow(saturate(dot(CausticNormal, BSDFContext.L)), Power);

			const float Iris   = IrisNoL * Caustic;
			const float Sclera = BSDFContext.Context.NoL;

			Sample.DiffusePathValue = Diffuse_Lambert(DiffuseColor) * lerp(Sclera, Iris,   BSDFContext.BSDF .VGPRs[1].y);
			Sample.IntegratedDiffuseValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.DiffusePathValue;

			Sample.DiffuseColor		= DiffuseColor;
			Sample.DiffusePDF		= BSDFContext.SatNoL / PI;
			Sample.bSubsurface		=   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u) ||   uint(( BSDFContext.BSDF .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);

			
			
			
			
			float3 MSScale = 1;
			float DirectionalAlbedo_SpecularTransmission = 1.0f;
			{
				FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(SafeRoughness, BSDFContext.Context.NoV, F0, F90);
				DirectionalAlbedo_SpecularTransmission = ComputeEnergyPreservation(EnergyTerms);
				MSScale = ComputeEnergyConservation(EnergyTerms);
			}
			
			Sample.DiffusePathValue *= DirectionalAlbedo_SpecularTransmission;
			Sample.IntegratedDiffuseValue *= DirectionalAlbedo_SpecularTransmission;

			
			
			
			
			

			float3 RectLightSpec = 0;
			float3 RectLightSpecHaze = 0;
			float D = 0;
			float Vis = 0;
			float PDF = 0;
			const bool bIsRectLight = IntegrationType == 2;

			if (bIsRectLight)
			{
				
				RectLightSpec = RectGGXApproxLTC(SafeRoughness, F0, BSDFContext.N, BSDFContext.V, AreaLightContext.AreaLight.Rect, AreaLightContext.AreaLight.Texture);

				const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2);
				PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
			}
			else
			{
				

				
				float Alpha2Spec = Alpha2;
				if(IntegrationType == 0)
				{
					D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH);
				}
				else
				{
					const float Energy = EnergyNormalization(Alpha2Spec, BSDFContext.Context.VoH, AreaLightContext.AreaLight);
					D = Strata_D_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoH) * Energy;
				}
				Vis = Strata_Vis_GGX(SafeRoughness, Alpha2Spec, BSDFContext.Context.NoV, AreaLightContext.NoL);
				const float H_PDF = VisibleGGXPDF(BSDFContext.TangentV, BSDFContext.TangentH, Alpha2Spec);
				PDF = RayPDFToReflectionRayPDF(BSDFContext.Context.VoH, H_PDF);
			}

			const float3 FresnelTerm = Strata_F_GGX(F0, F90, BSDFContext.Context.VoH);

			Sample.SpecularPathProbability	= 1.0f;
			Sample.SpecularPDF				= PDF * Sample.SpecularPathProbability;

			if (bIsRectLight)
			{
				Sample.SpecularPathValue       = RectLightSpec * MSScale;
				Sample.IntegratedSpecularValue = (ShadowTerms.SurfaceShadow *  Sample.SpecularPathProbability) * Sample.SpecularPathValue;
			}
			else
			{
				Sample.SpecularPathValue        = D * Vis * MSScale * FresnelTerm;
				Sample.IntegratedSpecularValue += (ShadowTerms.SurfaceShadow * AreaLightContext.NoL * AreaLightContext.Falloff) * AreaLightContext.AreaLight.FalloffColor * Sample.SpecularPathValue * Sample.SpecularPathProbability;
			}

			
			
			
			
			
			Sample.EmissivePathValue =   BSDFContext.BSDF .Emissive;

			Sample.ThroughputV			= OpaqueBSDFThroughput;
			Sample.TransmittanceAlongN	= OpaqueBSDFThroughput;

			break;
		}
		break;

		
		
		
		
		
		
	}

	return Sample;
}

#line 1119 "/Engine/Private/Strata/StrataEvaluation.ush"
FStrataEvaluateResult StrataEvaluateBSDF(FStrataBSDFContext BSDFContext, FStrataIntegrationSettings Settings)
{
	FShadowTerms IdentityShadow = { 1, 1, 1, InitHairTransmittanceData() };
	FAreaLightIntegrateContext DummyAreaLightContext = InitAreaLightIntegrateContext();
	DummyAreaLightContext.L = BSDFContext.L;
	DummyAreaLightContext.NoL = BSDFContext.Context.NoL;
	DummyAreaLightContext.Falloff = 1;
	return StrataEvaluateBSDFCommon(BSDFContext, IdentityShadow, DummyAreaLightContext, Settings, 0);
}

#line 22 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateSingleBSDFOperatorCoverageTransmittance(
	FStrataPixelHeader StrataPixelHeader,
	int BSDFIndex,
	FStrataIntegrationSettings Settings,
	FStrataAddressing NullStrataAddressing,
	float3 V)
{


	



	

	
	this.BSDFs[BSDFIndex].Coverage = int(this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].LayerDepth) < Settings.PeelLayersAboveDepth && !this.BSDFs[BSDFIndex].bIsBottom ? 0.0f : this.BSDFs[BSDFIndex].Coverage;


	float CurrentBSDFCoverage = this.BSDFs[BSDFIndex].Coverage;
	float Roughness = StrataGetBSDFRoughness(this.BSDFs[BSDFIndex]);
	float3x3 TangentBasis = StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, this.BSDFs[BSDFIndex], NullStrataAddressing);


	Roughness = Settings.bRoughnessTracking ? Roughness : 0.0;


	
	this.BSDFs[BSDFIndex].StrataSanitizeBSDF();

	


	
	
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractThicknessCm  = this.BSDFs[BSDFIndex].bIsBottom ? 0.0f					: this.BSDFs[BSDFIndex].ThicknessCm;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractCoverage	  = this.BSDFs[BSDFIndex].bIsTop    ? this.BSDFs[BSDFIndex].Coverage	: 0.0f;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].OpaqueRoughRefractTopRoughness = this.BSDFs[BSDFIndex].bIsTop    ? Roughness				: 0.0f;

	const bool bIsStrataOpaqueMaterial = ((1 && 1) && ((!(0 > 0) && (0 || 0 || 0 || 0 || 0 || 0)<=0) || ((0 > 0) && (0 == 0)))) > 0;
	this.BSDFs[BSDFIndex].PostProcessBSDFBeforeLighting(bIsStrataOpaqueMaterial);

	
	float3 LEqualN = TangentBasis[2];
	FStrataBSDFContext StrataBSDFContext = StrataCreateBSDFContext(StrataPixelHeader, this.BSDFs[BSDFIndex], NullStrataAddressing, V, LEqualN);
	FStrataEvaluateResult BSDFEvaluate = StrataEvaluateBSDF(StrataBSDFContext, Settings);

	
	
	
	
	this.BSDFs[BSDFIndex].LuminanceWeightV = float3(1.0f, 1.0f, 1.0f) * CurrentBSDFCoverage;

	
	this.BSDFs[BSDFIndex].CoverageAboveAlongN = 0.0f;
	this.BSDFs[BSDFIndex].TransmittanceAboveAlongN = float3(1.0f, 1.0f, 1.0f);

	
	this.BSDFs[BSDFIndex].TopLayerDataWeight = 1.0f;

	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].Coverage				= CurrentBSDFCoverage;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].ThroughputAlongV		= BSDFEvaluate.ThroughputV;
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TransmittanceAlongN	= BSDFEvaluate.TransmittanceAlongN;

	
	const FBxDFEnergyTermsRGB EnergyTerms = ComputeGGXSpecEnergyTermsRGB(Roughness, StrataBSDFContext.SatNoV, StrataGetBSDFSpecularColor(this.BSDFs[BSDFIndex]), StrataGetBSDFSpecularF90(this.BSDFs[BSDFIndex]));
	{
		const float TopDownInterfaceEta = this.BSDFs[BSDFIndex].bIsTop ? 1.0f / 1.0f : 1.0f;
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataGetDiracLobe(V), EnergyTerms.E, Roughness, TopDownInterfaceEta);
		
		RefractedLobe.E *= BSDFEvaluate.ThroughputV;
		
		RefractedLobe = StrataWeightLobe(RefractedLobe, CurrentBSDFCoverage);
		this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TopDownRefractionLobeStat = RefractedLobe;
	}

	
	{
		const float BottomUpInterfaceEta = this.BSDFs[BSDFIndex].bIsTop ? 1.0f / 1.0f : 1.0f;
		const float3 NormalDown = float3(0, 0, -1);
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataGetDiracLobe(NormalDown), EnergyTerms.E, Roughness, BottomUpInterfaceEta);
		
		RefractedLobe.E *= BSDFEvaluate.ThroughputV;
		
		RefractedLobe = StrataWeightLobe(RefractedLobe, CurrentBSDFCoverage);
		this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].BottomUpRefractionLobeStat = RefractedLobe;
	}

#line 128 "/Engine/Private/Strata/StrataTree.ush"

	
	this.Operators[this.BSDFs[BSDFIndex].OperatorIndex].TopDownRefractionWorldNormal = TangentBasis[2];





}

#line 139 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateSingleOperatorCoverageTransmittance(int OpIndex)
{






	
	
	
	
	this.Operators[OpIndex].LayerDepth = this.Operators[this.Operators[OpIndex].LeftIndex].LayerDepth;

	switch (this.Operators[OpIndex].Type)
	{

	case 0:
	{
		const float Weight = saturate(this.Operators[OpIndex].Weight);
		this.Operators[OpIndex].Coverage				= Weight * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		this.Operators[OpIndex].ThroughputAlongV		= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		this.Operators[OpIndex].TransmittanceAlongN	= this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataWeightLobe(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, Weight);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal * Weight;

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataWeightLobe(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, Weight);

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm;
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage * Weight;
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness;
		break;
	}

	case 1:
	{
		const float3 TopThroughputAlongV	= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		const float3 TopTransmittanceAlongN = this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;
		const float3 BotThroughputAlongV	= this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV;
		const float3 BotTransmittanceAlongN = this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN;
		const float TopCoverage = this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		const float BotCoverage = this.Operators[this.Operators[OpIndex].RightIndex].Coverage;

#line 200 "/Engine/Private/Strata/StrataTree.ush"

		FVerticalLayeringInfo Info = GetVerticalLayeringInfo(TopCoverage, BotCoverage);

		this.Operators[OpIndex].Coverage				= Info.Coverage;
		this.Operators[OpIndex].ThroughputAlongV		= Info.TransmittanceOnlyTop * TopThroughputAlongV +		Info.TransmittanceOnlyBottom * BotThroughputAlongV +	Info.TransmittanceTopAndBottom * TopThroughputAlongV * BotThroughputAlongV;
		this.Operators[OpIndex].TransmittanceAlongN  = Info.TransmittanceOnlyTop* TopTransmittanceAlongN + Info.TransmittanceOnlyBottom * BotTransmittanceAlongN + Info.TransmittanceTopAndBottom * TopTransmittanceAlongN * BotTransmittanceAlongN;


		this.Operators[OpIndex].VerticalTop_Coverage				= this.Operators[this.Operators[OpIndex].LeftIndex].Coverage;
		this.Operators[OpIndex].VerticalTop_ThroughputAlongV		= this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV;
		this.Operators[OpIndex].VerticalTop_TransmittanceAlongN  = this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN;

		this.Operators[OpIndex].VerticalBot_Coverage				= this.Operators[this.Operators[OpIndex].RightIndex].Coverage;
		this.Operators[OpIndex].VerticalBot_ThroughputAlongV		= this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV;
		this.Operators[OpIndex].VerticalBot_TransmittanceAlongN	= this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN;

		
		{
			const float TopDownInterfaceEta = 1.0f;
			this.Operators[OpIndex].TopDownRefractionLobeStat = StrataGetRefractedLobe(StrataOppositeLobe(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat), 
				0.0f, StrataLobeVarianceToRoughness(this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat.Sigma), TopDownInterfaceEta);
			this.Operators[OpIndex].TopDownRefractionLobeStat.E *= saturate(this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV + (1.0f - this.Operators[this.Operators[OpIndex].RightIndex].Coverage)); 

			
			const float RefractionNormalMix = saturate((Info.SurfaceBottom + 0.5f * Info.TransmittanceTopAndBottom * dot(TopThroughputAlongV, 0.33.xxx)) / max(1e-10f, Info.Coverage));
			this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, RefractionNormalMix);
		}

		
		{
			const bool bIsTop = this.Operators[OpIndex].LayerDepth == 0;
			const float BottomUpInterfaceEta = bIsTop ? 1.0f / 1.0f : 1.0f;
			this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataGetRefractedLobe(StrataOppositeLobe(this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat), 
				0.0f, StrataLobeVarianceToRoughness(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat.Sigma), BottomUpInterfaceEta);
			this.Operators[OpIndex].BottomUpRefractionLobeStat.E *= saturate(this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV + (1.0f - this.Operators[this.Operators[OpIndex].LeftIndex].Coverage)); 
		}

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm + this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm;
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage;
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness;

		this.Operators[OpIndex].VerticalTop_TopDownRefractionLobeStat = this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat;
		this.Operators[OpIndex].VerticalTop_BottomUpRefractionLobeStat = this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat;
		break;
	}

	case 2:
	{
		const float Mix = saturate(this.Operators[OpIndex].Weight);
		const float AMix = 1.0 - Mix;
		const float BMix = Mix;

		this.Operators[OpIndex].Coverage = AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage;
		this.Operators[OpIndex].ThroughputAlongV    = (AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage * this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV    + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage * this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV)    / max(1e-10f, AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		this.Operators[OpIndex].TransmittanceAlongN = (AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage * this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage * this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN) / max(1e-10f, AMix * this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + BMix * this.Operators[this.Operators[OpIndex].RightIndex].Coverage);

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat, BMix);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, BMix);

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat, BMix);

		
		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm,  this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm,  BMix);
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage,     this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractCoverage,     BMix);
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness, this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractTopRoughness, BMix);
		break;
	}

	case 3:
	{
		const float SafeABSDFCoverage = saturate(this.Operators[this.Operators[OpIndex].LeftIndex].Coverage);
		const float SafeBBSDFCoverage = saturate(this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		const float AMixFactor = SafeABSDFCoverage / max(1e-10f, SafeABSDFCoverage + SafeBBSDFCoverage);

		this.Operators[OpIndex].Coverage = saturate(this.Operators[this.Operators[OpIndex].LeftIndex].Coverage + this.Operators[this.Operators[OpIndex].RightIndex].Coverage);
		this.Operators[OpIndex].ThroughputAlongV    = lerp(this.Operators[this.Operators[OpIndex].RightIndex].ThroughputAlongV,    this.Operators[this.Operators[OpIndex].LeftIndex].ThroughputAlongV,    AMixFactor);
		this.Operators[OpIndex].TransmittanceAlongN = lerp(this.Operators[this.Operators[OpIndex].RightIndex].TransmittanceAlongN, this.Operators[this.Operators[OpIndex].LeftIndex].TransmittanceAlongN, AMixFactor);

		this.Operators[OpIndex].TopDownRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionLobeStat, 0.5f);
		this.Operators[OpIndex].TopDownRefractionWorldNormal = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].TopDownRefractionWorldNormal, this.Operators[this.Operators[OpIndex].RightIndex].TopDownRefractionWorldNormal, 0.5f);

		this.Operators[OpIndex].BottomUpRefractionLobeStat = StrataHorizontalMixLobes(this.Operators[this.Operators[OpIndex].LeftIndex].BottomUpRefractionLobeStat, this.Operators[this.Operators[OpIndex].RightIndex].BottomUpRefractionLobeStat, 0.5f);

		this.Operators[OpIndex].OpaqueRoughRefractThicknessCm  = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractThicknessCm,  this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractThicknessCm,  0.5f);
		this.Operators[OpIndex].OpaqueRoughRefractCoverage     = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractCoverage,     this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractCoverage,     0.5f);
		this.Operators[OpIndex].OpaqueRoughRefractTopRoughness = lerp(this.Operators[this.Operators[OpIndex].LeftIndex].OpaqueRoughRefractTopRoughness, this.Operators[this.Operators[OpIndex].RightIndex].OpaqueRoughRefractTopRoughness, 0.5f);
		break;
	}

	}






}

#line 305 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Weight(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	const float Weight = saturate(this.Operators[OpIndex].Weight);
	this.BSDFs[BSDFIndex].LuminanceWeightV *= Weight;
	this.BSDFs[BSDFIndex].Coverage *= Weight;

	this.BSDFs[BSDFIndex].TopLayerDataWeight *= Weight;


}

#line 321 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Horizontal(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	const float Mix = saturate(this.Operators[OpIndex].Weight);
	const float AMix = 1.0 - Mix;
	const float BMix = Mix;
	const float Weight = PreviousIsInputA > 0 ? AMix : BMix;
	this.BSDFs[BSDFIndex].LuminanceWeightV *= Weight;
	this.BSDFs[BSDFIndex].Coverage *= Weight;

	this.BSDFs[BSDFIndex].TopLayerDataWeight *= Weight;


}

#line 340 "/Engine/Private/Strata/StrataTree.ush"
void FStrataTree::UpdateAllBSDFWithBottomUpOperatorVisit_Vertical(
	int BSDFIndex,
	int OpIndex,
	int PreviousIsInputA)
{


	
	const bool bBSDFComesFromTopLayer = PreviousIsInputA > 0;

	
	this.BSDFs[BSDFIndex].LuminanceWeightV		 *= bBSDFComesFromTopLayer ? 1.0f : saturate(1.0f - this.Operators[OpIndex].VerticalTop_Coverage) + saturate(this.Operators[OpIndex].VerticalTop_Coverage) * this.Operators[OpIndex].VerticalTop_ThroughputAlongV;

	
	const float BotCover  = this.BSDFs[BSDFIndex].CoverageAboveAlongN;
	const float TopCover  = this.Operators[OpIndex].VerticalTop_Coverage;
	const float3 BotTrans = this.BSDFs[BSDFIndex].TransmittanceAboveAlongN;
	const float3 TopTrans = this.Operators[OpIndex].VerticalTop_TransmittanceAlongN;
	FVerticalLayeringInfo Info = GetVerticalLayeringInfo(this.Operators[OpIndex].VerticalTop_Coverage, this.BSDFs[BSDFIndex].CoverageAboveAlongN);
	
	const float3 PreCoverageTransmittance = saturate((Info.TransmittanceOnlyTop * TopTrans + Info.TransmittanceOnlyBottom * BotTrans + Info.TransmittanceTopAndBottom * (TopTrans * BotTrans)) / max(1e-10f, Info.Coverage));
	this.BSDFs[BSDFIndex].CoverageAboveAlongN		  = bBSDFComesFromTopLayer ? this.BSDFs[BSDFIndex].CoverageAboveAlongN		: Info.Coverage;			
	this.BSDFs[BSDFIndex].TransmittanceAboveAlongN  = bBSDFComesFromTopLayer ? this.BSDFs[BSDFIndex].TransmittanceAboveAlongN	: PreCoverageTransmittance;	

	
	this.BSDFs[BSDFIndex].TopLayerDataWeight *= bBSDFComesFromTopLayer ? 1.0 : saturate(1.0f - this.Operators[OpIndex].VerticalTop_Coverage);

	if (!bBSDFComesFromTopLayer)	
	{
		
		
		

		
		const float3 DummyWi = float3(0, 0, 1);
		const float DummyInterfaceDFG = 0.5f;
		FStrataLobeStatistic ReflectedLobe = StrataGetReflectedLobe(StrataGetDiracLobe(DummyWi), DummyInterfaceDFG, StrataGetBSDFRoughness(this.BSDFs[BSDFIndex]));

		
		
		
		const float DiracLobeSigma = 0.0f;
		const float TopLayerSigma = lerp(DiracLobeSigma, this.Operators[OpIndex].VerticalTop_BottomUpRefractionLobeStat.Sigma, this.Operators[OpIndex].VerticalTop_Coverage * dot(this.Operators[OpIndex].VerticalTop_TransmittanceAlongN, (1.0f/3.0f).xxx));
		const bool bIsTop = this.Operators[OpIndex].LayerDepth == 0;
		const float BottomUpInterfaceEta = bIsTop ? 1.0f / 1.0f : 1.0f;
		FStrataLobeStatistic RefractedLobe = StrataGetRefractedLobe(StrataOppositeLobe(ReflectedLobe), DummyInterfaceDFG, StrataLobeVarianceToRoughness(TopLayerSigma), BottomUpInterfaceEta);

		this.BSDFs[BSDFIndex].StrataSetBSDFRoughness(StrataLobeVarianceToRoughness(RefractedLobe.Sigma));
	}


}

#line 10 "/Engine/Private/Strata/StrataLegacyConversion.ush"
void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal);

#line 21 "/Engine/Private/Strata/StrataLegacyConversion.ush"
struct FStrataLegacyParameters
{
	FStrataPixelFootprint PixelFootprint;
	bool UseMetalness;
	float3 DiffuseAlbedo;
	float3 F0;
	float3 F90;

	float3 BaseColor;
	float  Specular;
	float  Metallic;
	float  Roughness;
	float  Anisotropy;
	float  SSSProfileID;
	float3 SSSMFP;
	float  SSSMFPScale;
	float  SSSPhaseAniso;
	bool   UseSSSDiffusion;
	float3 Emissive;
	float  SecondRoughness;
	float  SecondRoughnessWeight;
	bool   SecondRoughnessAsSimpleClearCoat;
	float  FuzzAmount;
	float3 FuzzColor;
	float  Thickness;
	bool   bIsThinSurface;
	uint   SharedLocalBasisIndex;

	float Weight;
};

#line 52 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataLegacyParameters InitStrataLegacyParameters(FStrataPixelFootprint InPixelFootprint, uint InSharedLocalBasisIndex, float InWeight)
{
	const float3 Zeros = float3(0, 0, 0);

	FStrataLegacyParameters Out;

	Out.UseMetalness = true;
	Out.DiffuseAlbedo = Zeros;
	Out.F0 = Zeros;
	Out.F90 = Zeros;

	Out.BaseColor = Zeros;
	Out.Specular = 0.5f;
	Out.Metallic = 0.f;
	Out.Roughness = 0.5f;
	Out.Anisotropy = 0.f;
	Out.SSSProfileID = 0.f;
	Out.SSSMFP = Zeros;
	Out.SSSMFPScale = 1.f;
	Out.SSSPhaseAniso = 0.f;
	Out.UseSSSDiffusion = false;
	Out.Emissive = Zeros;
	Out.SecondRoughness = 0.0f;
	Out.SecondRoughnessWeight = 0.0f;
	Out.SecondRoughnessAsSimpleClearCoat = false;
	Out.FuzzAmount = 0.f;
	Out.FuzzColor = Zeros;
	Out.Thickness = 0.01f;
	Out.bIsThinSurface = false;
	Out.SharedLocalBasisIndex = InSharedLocalBasisIndex;
	Out.Weight = InWeight;
	Out.PixelFootprint = InPixelFootprint;
	return Out;
}

#line 87 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData CreateLegacySlab(
	FStrataLegacyParameters In, inout uint SharedLocalBasisTypes)
{
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones  = float3(1, 1, 1);

	float3 DiffuseAlbedo = In.DiffuseAlbedo;
	float3 F0 = In.F0;
	float3 F90 = In.F90;
	if (In.UseMetalness > 0.0f)
	{
		DiffuseAlbedo = ComputeDiffuseAlbedo(In.BaseColor, In.Metallic);
		F0 = ComputeF0(In.Specular, In.BaseColor, In.Metallic);
		F90 = Ones;
	}

	
	return GetStrataSlabBSDF(
		In.PixelFootprint,
		DiffuseAlbedo,										
		F0,													
		F90,												
		In.Roughness,										
		In.Anisotropy,										
		In.SSSProfileID,									
		In.SSSMFP,											
		In.SSSMFPScale,										
		In.SSSPhaseAniso,									
		In.UseSSSDiffusion,									
		In.Emissive,										
		In.SecondRoughness,									
		In.SecondRoughnessWeight,							
		In.SecondRoughnessAsSimpleClearCoat ? 1.0f : 0.0f,	
		In.FuzzAmount,										
		In.FuzzColor,										
		In.Roughness,										
		0.0f, 0.0f.xx,										
		0.0f,												
		In.Thickness,
		In.bIsThinSurface,
		true,												
		In.SharedLocalBasisIndex, SharedLocalBasisTypes);
}

#line 136 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData StrataConvertLegacyMaterialDynamic(
	FStrataPixelFootprint PixelFootprint,
	float3 BaseColor, float Specular, float Metallic,
	float Roughness, float Anisotropy,
	float3 SubSurfaceColor, float SubSurfaceProfileId,
	float ClearCoat, float ClearCoatRoughness,
	float3 Emissive,
	float Opacity,
	float3 TransmittanceColor,
	float3 WaterScatteringCoefficients, float3 WaterAbsorptionCoefficients, float WaterPhaseG, float3 ColorScaleBehindWater,
	uint ShadingModel,
	float3 RawNormal,
	float3 RawTangent,
	float3 RawClearCoatNormal,
	float3 RawCustomTangent,
	uint SharedLocalBasisIndex,
	uint ClearCoatBottomNormal_SharedLocalBasisIndex,
	inout uint SharedLocalBasisTypes)
{
	const float DefaultThickness = 0.01f;
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones  = float3(1, 1, 1);

	

	
	
	if (ShadingModel == 10)
	{
		const float3 WaterExtinction = WaterScatteringCoefficients + WaterAbsorptionCoefficients;
		const float3 WaterAlbedo = WaterScatteringCoefficients / WaterExtinction;

		return GetStrataSingleLayerWaterBSDF(
			BaseColor, 				
			Metallic, 				
			Specular, 				
			Roughness, 				
			Emissive, 				
			Opacity,				
			WaterAlbedo, 			
			WaterExtinction, 		
			WaterPhaseG, 			
			ColorScaleBehindWater,	
			SharedLocalBasisIndex);
	}
	
	
#line 194 "/Engine/Private/Strata/StrataLegacyConversion.ush"

	
#line 216 "/Engine/Private/Strata/StrataLegacyConversion.ush"


	FStrataLegacyParameters LegacySlab = InitStrataLegacyParameters(PixelFootprint, SharedLocalBasisIndex, 1.0f);

	float FinalWeight = 1.0f;

	if (ShadingModel == 0)
	{
		
		LegacySlab.BaseColor = Zeros;
		LegacySlab.Specular = 0.f;
		LegacySlab.Metallic = 0.f;
		LegacySlab.Roughness = 0.f;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 1)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 2)
	{
		const float ThicknessInCm = 100.0f;
		const float3 MFPInCm = TransmittanceToMeanFreePath(SubSurfaceColor, ThicknessInCm * (1.0f / 100.0f)) * 100.0f;

		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSPhaseAniso = saturate(1.f - Opacity); 
		LegacySlab.Emissive = Emissive;
		LegacySlab.UseSSSDiffusion = false;
		LegacySlab.Thickness = ThicknessInCm;

		FinalWeight = 1.0f;













	}
	else if (ShadingModel == 3)
	{
		
		const float3 MFPInCm = float3(1.0f, 0.088964f, 0.072095f) * 2.6748f * 0.1f;

		
		
		LegacySlab.BaseColor = max(SubSurfaceColor, BaseColor); 
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFPScale = 1.f - Opacity;
		LegacySlab.SSSPhaseAniso = 0.93f;
		LegacySlab.UseSSSDiffusion = true;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 5)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = SubSurfaceProfileId;
		LegacySlab.SSSMFPScale = Opacity;
		LegacySlab.SSSPhaseAniso = 0.93f;
		LegacySlab.UseSSSDiffusion = true;
		LegacySlab.Emissive = Emissive;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 4)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = Zeros;
		LegacySlab.SSSMFPScale = 0.f;
		LegacySlab.SecondRoughnessWeight = ClearCoat;
		LegacySlab.SecondRoughness = ClearCoatRoughness;
		LegacySlab.SecondRoughnessAsSimpleClearCoat = ClearCoat > 0.0f; 
		LegacySlab.Emissive = Zeros;
		LegacySlab.Weight = 1.f;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 6)
	{
		
		const float Thickness = 0.01f;
		const float3 MFPInCm = TransmittanceToMeanFreePath(SubSurfaceColor , Thickness * (1.0f / 100.0f)) * 100.0f;

		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = max(1e-05f, MFPInCm); 
		LegacySlab.SSSMFPScale = 1.0f;
		LegacySlab.SSSPhaseAniso = 1.0f - saturate(Opacity); 
		LegacySlab.Emissive = Emissive;
		LegacySlab.UseSSSDiffusion = false;
		LegacySlab.Thickness = Thickness;
		LegacySlab.bIsThinSurface = true;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 8)
	{
		LegacySlab.BaseColor = BaseColor;
		LegacySlab.Specular = Specular;
		LegacySlab.Metallic = Metallic;
		LegacySlab.Roughness = Roughness;
		LegacySlab.Anisotropy = Anisotropy;
		LegacySlab.SSSProfileID = 0.f;
		LegacySlab.SSSMFP = 0.f;
		LegacySlab.SSSMFPScale = 0.f;
		LegacySlab.Emissive = Emissive;
		LegacySlab.FuzzAmount = ClearCoat;
		LegacySlab.FuzzColor = SubSurfaceColor;

		FinalWeight = 1.0f;



	}
	else if (ShadingModel == 11)	
	{
		const float Thickness = DefaultThickness;

		
		Opacity = lerp(1.f - Square(1.f - Opacity), Opacity, Metallic);

		
		
		
		const float3 BaseColor_LAB			= LinearRGB_2_LAB(BaseColor);
		const float3 TransmittanceColor_LAB = LinearRGB_2_LAB(TransmittanceColor);
		const float3 Color_LAB			    = lerp(TransmittanceColor_LAB, BaseColor_LAB, Opacity);
		const float3 Color					= LAB_2_LinearRGB(Color_LAB);

		
		const float3 MFP = TransmittanceToMeanFreePath(lerp(Color, Zeros, Opacity), Thickness * (1.0f / 100.0f)) * 100.0f;

		const float F0Dieletrict = DielectricSpecularToF0(Specular);

		const float3 TopF0     = lerp(F0Dieletrict, BaseColor, Metallic);
		const float3 TopAlbedo = Color * (1.f - Metallic);
		const float3 TopMFP    = 0;

		const float3 BotF0     = F0Dieletrict;
		const float3 BotAlbedo = Zeros;
		const float3 BotMFP    = MFP;

		LegacySlab.DiffuseAlbedo	= lerp(BotAlbedo, TopAlbedo, Opacity);
		LegacySlab.SSSMFP			= lerp(BotMFP,    TopMFP,    Opacity);
		LegacySlab.F0				= lerp(BotF0,     TopF0,     Opacity);
		LegacySlab.F90				= Ones;
		LegacySlab.UseMetalness	= false;
		LegacySlab.Roughness 		= Roughness;
		LegacySlab.Anisotropy 		= 0.f;
		LegacySlab.SSSProfileID 	= 0.f;
		LegacySlab.SSSMFPScale 	= 1.f;
		LegacySlab.Emissive 		= Emissive;
		LegacySlab.Thickness 		= Thickness;
		LegacySlab.SharedLocalBasisIndex = SharedLocalBasisIndex;

		
		FinalWeight = 1.0f;
	}

	
	FStrataData Slab = CreateLegacySlab(LegacySlab, SharedLocalBasisTypes);

	Slab.InlinedBSDF.Coverage = LegacySlab.Weight * FinalWeight;	


	return Slab;
}

#line 449 "/Engine/Private/Strata/StrataLegacyConversion.ush"
FStrataData StrataConvertLegacyMaterialStatic(
	FStrataPixelFootprint PixelFootprint,
	float3 BaseColor, float Specular, float Metallic,
	float Roughness, float Anisotropy,
	float3 SubSurfaceColor, float SubSurfaceProfileId,
	float ClearCoat, float ClearCoatRoughness,
	float3 Emissive,
	float Opacity,
	float3 TransmittanceColor,
	float3 WaterScatteringCoefficients, float3 WaterAbsorptionCoefficients, float WaterPhaseG, float3 ColorScaleBehindWater,
	uint ShadingModel,
	float3 RawNormal,
	float3 RawTangent,
	float3 RawClearCoatNormal,
	float3 RawCustomTangent,
	uint SharedLocalBasisIndex,
	uint ClearCoatBottomNormal_SharedLocalBasisIndex,
	inout uint SharedLocalBasisTypes)
{
	FStrataData Out = GetInitialisedStrataData();

	const float DefaultThickness = 0.01f;
	const float3 Zeros = float3(0, 0, 0);
	const float3 Ones = float3(1, 1, 1);







	if (ShadingModel == 0)
	{
		const float GreyTransmittance = saturate(1.0f - Opacity);
	
		
		Out = GetStrataUnlitBSDF(Emissive, 0.0f, RawNormal);
	
#line 510 "/Engine/Private/Strata/StrataLegacyConversion.ush"

	}
	else if (ShadingModel == 7)
	{
		Out = GetStrataHairBSDF(
				BaseColor,	   
				Metallic,	   
				Specular,	   
				Roughness,	   
				ClearCoat,	   
				Emissive,	   
				SharedLocalBasisIndex);
	}
	else if (ShadingModel == 9)
	{
		const float IrisMask = ClearCoat;
		const float IrisDistance = ClearCoatRoughness;

		float3 IrisNormal = RawNormal;
		float3 IrisPlaneNormal = RawNormal;
		GetEyeNormals(IrisMask, IrisDistance, RawNormal, RawClearCoatNormal, RawCustomTangent, IrisNormal, IrisPlaneNormal);

		Out = GetStrataEyeBSDF(
				BaseColor,	         
				Roughness,	         
				IrisMask,	         
				IrisDistance,        
				IrisNormal,	         
				IrisPlaneNormal,	 
				SubSurfaceProfileId, 
				Emissive,	         
				SharedLocalBasisIndex);
	}
	else if (ShadingModel == 10)
	{
		const float3 WaterExtinction= WaterScatteringCoefficients + WaterAbsorptionCoefficients;
		const float3 WaterAlbedo	= WaterScatteringCoefficients / WaterExtinction;

		Out = GetStrataSingleLayerWaterBSDF(
				BaseColor, 				
				Metallic, 				
				Specular, 				
				Roughness, 				
				Emissive, 				
				Opacity,				
				WaterAlbedo, 			
				WaterExtinction, 		
				WaterPhaseG, 			
				ColorScaleBehindWater,	
				SharedLocalBasisIndex);
	}
	else
	{
		Out = StrataConvertLegacyMaterialDynamic(
			PixelFootprint,
			BaseColor, Specular, Metallic,
			Roughness, Anisotropy,
			SubSurfaceColor, SubSurfaceProfileId,
			ClearCoat, ClearCoatRoughness,
			Emissive,
			Opacity,
			TransmittanceColor,
			WaterScatteringCoefficients, WaterAbsorptionCoefficients, WaterPhaseG, ColorScaleBehindWater,
			ShadingModel,
			RawNormal,
			RawTangent,
			RawClearCoatNormal,
			RawCustomTangent,
			SharedLocalBasisIndex,
			ClearCoatBottomNormal_SharedLocalBasisIndex,
			SharedLocalBasisTypes);
	}

	return Out;
}

#line 186 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{
	
	float RelativeTime;
	
	float MotionBlurFade;
	
	float Random;
	
	float4 Velocity;
	
	float4 Color;
	
	float4 TranslatedWorldPositionAndSize;
	
	float4 MacroUV;

	



	float4 DynamicParameter;













	
	FLWCMatrix ParticleToWorld;

	
	FLWCInverseMatrix WorldToParticle;








	
	float2 Size;

	
	float SpriteRotation;
};

#line 296 "/Engine/Generated/Material.ush"
struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float Displacement;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	float SurfaceThickness;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;
	float3 TransmittanceColor;
};

#line 373 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 Normal;
	float3 Tangent;
	float4 Subsurface;
	float AmbientOcclusion;
	float3 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	float SurfaceThickness;
	float Displacement;
	
	FStrataData FullySimplifiedFrontMaterial;
	



FStrataData GetFrontStrataData()
{

	return FullySimplifiedFrontMaterial;



}

};

#line 414 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{




	
	float4 VertexColor;

	
	float3 WorldNormal;
	
	
	float3 WorldTangent;

	
	float3 ReflectionVector;

	
	float3 CameraVector;

	
	float3 LightVector;

	




	float4 SvPosition;
		
	
	float4 ScreenPosition;

	



	float2 ViewBufferUV;





	float UnMirrored;

	float TwoSidedSign;

	



	float3x3 TangentToWorld;






	



	FLWCVector3 AbsoluteWorldPosition;

	


	float3 WorldPosition_CamRelative;

	



	FLWCVector3 WorldPosition_NoOffsets;

	



	float3 WorldPosition_NoOffsets_CamRelative;

	
	float3 LightingPositionOffset;

	
	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;
	





	float AOMaterialMask;















	
	uint PrimitiveId;










	


















	
	FMaterialParticleParameters Particle;











	
	
	
	uint Dummy;






















	FSharedLocalBases SharedLocalBases;
	FStrataTree StrataTree;


	FSharedLocalBases SharedLocalBasesFullySimplified;
	FStrataTree StrataTreeFullySimplified;


	FStrataPixelFootprint StrataPixelFootprint;

	FStrataPixelHeader GetFrontStrataHeader()
	{
		FStrataPixelHeader StrataPixelHeader = InitialiseStrataPixelHeader();

		StrataPixelHeader.StrataTree = StrataTreeFullySimplified;
		StrataPixelHeader.BSDFCount = StrataTreeFullySimplified.BSDFCount;
		StrataPixelHeader.SharedLocalBases = SharedLocalBasesFullySimplified;





		StrataPixelHeader.IrradianceAO = InitIrradianceAndOcclusion();
		return StrataPixelHeader;
	}


	FMaterialAttributes MaterialAttributes;
};

#line 642 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}

#line 654 "/Engine/Generated/Material.ush"
struct FMaterialVertexParameters
{
	
	
	
	float3 WorldPosition;
	
	float3x3 TangentToWorld;










	













	
	
	FLWCMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	float4 VertexColor;












	
	FMaterialParticleParameters Particle;





	FMaterialAttributes MaterialAttributes;

	
	FSceneDataIntermediates SceneData;

	
	
	uint PrimitiveId;

	bool bEvaluateWorldPositionOffset;
};

#line 725 "/Engine/Generated/Material.ush"
FMaterialVertexParameters MakeInitializedMaterialVertexParameters()
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.PrimitiveId = ((1u << (20u)) - 1u);
	Result.bEvaluateWorldPositionOffset = true;

	return Result;
}

#line 754 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}

#line 759 "/Engine/Generated/Material.ush"
FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}

#line 865 "/Engine/Generated/Material.ush"
float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}

#line 880 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetTranslatedWorldPosition(Parameters), ResolvedView.PreViewTranslation);
}

#line 890 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.AbsoluteWorldPosition;
}

#line 895 "/Engine/Generated/Material.ush"
FLWCVector3 GetWorldPosition_NoMaterialOffsets(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_NoOffsets;
}

#line 900 "/Engine/Generated/Material.ush"
float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}

#line 2099 "/Engine/Generated/Material.ush"
float3 ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters, float3 WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}

#line 3258 "/Engine/Generated/Material.ush"
void  FStrataPixelHeader::PreUpdateAllBSDFWithBottomUpOperatorVisit(FStrataAddressing NullStrataAddressing, float3 V)
{
	{
	}
}

#line 3263 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFsOperatorCoverageTransmittance(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V)
{
	 StrataTree.UpdateSingleBSDFOperatorCoverageTransmittance(this, 0, Settings, NullStrataAddressing, V);
}

#line 3267 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllOperatorsCoverageTransmittance()
{
}

#line 3270 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFWithBottomUpOperatorVisit()
{
}

#line 3273 "/Engine/Generated/Material.ush"
void  FStrataPixelHeader::PreUpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified(FStrataAddressing NullStrataAddressing, float3 V)
{
	{
	}
}

#line 3278 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFsOperatorCoverageTransmittance_FullySimplified(FStrataIntegrationSettings Settings, FStrataAddressing NullStrataAddressing, float3 V)
{
	 StrataTree.UpdateSingleBSDFOperatorCoverageTransmittance(this, 0, Settings, NullStrataAddressing, V);
}

#line 3282 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllOperatorsCoverageTransmittance_FullySimplified()
{
}

#line 3285 "/Engine/Generated/Material.ush"
void FStrataPixelHeader::UpdateAllBSDFWithBottomUpOperatorVisit_FullySimplified()
{
}

#line 3382 "/Engine/Generated/Material.ush"
float3 GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

#line 3387 "/Engine/Generated/Material.ush"
float3 GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);
		
	
	{
		
		float3 OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;

		
			OverrideNormal = Parameters.TangentToWorld[2] * (1 - ResolvedView.NormalOverrideParameter.w);
		

		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}
	

	return RetNormal;
}

#line 3439 "/Engine/Generated/Material.ush"
uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

#line 3543 "/Engine/Generated/Material.ush"
float GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}

#line 3582 "/Engine/Generated/Material.ush"
float GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}

#line 3589 "/Engine/Generated/Material.ush"
float GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}

#line 3688 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

#line 3693 "/Engine/Generated/Material.ush"
float GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

#line 3813 "/Engine/Generated/Material.ush"
float GetRoughnessFromNormalCurvature(FMaterialPixelParameters InMaterialParameters)
{









	return 0.f;

}

#line 3834 "/Engine/Generated/Material.ush"
void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{
	

	
	PixelMaterialInputs.Normal = Parameters.TangentToWorld[2];



	Parameters.StrataPixelFootprint = StrataGetPixelFootprint(Parameters.WorldPosition_CamRelative, GetRoughnessFromNormalCurvature(Parameters));
	Parameters.SharedLocalBases = StrataInitialiseSharedLocalBases();
	Parameters.StrataTree = GetInitialisedStrataTree();

	Parameters.SharedLocalBasesFullySimplified = StrataInitialiseSharedLocalBases();
	Parameters.StrataTreeFullySimplified = GetInitialisedStrataTree();



	
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);














	Parameters.WorldNormal = normalize(MaterialNormal);








	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;


	
	float3 Local0 = lerp(float3(0.00000000,0.00000000,0.00000000),Material_PreshaderBuffer[1].yzw,Material_PreshaderBuffer[1].x);
	float4 Local1 = MaterialCollection0_Vectors[4];
	FLWCVector3 Local2 = GetWorldPosition(Parameters);
	FLWCVector3 Local3 = LWCMultiply(  Local2 , LWCPromote(float3(1.00000000,1.00000000,0.00000000)));
	FLWCVector3 Local4 = LWCSubtract(LWCPromote(float3(float2(Local1.rgba.xyz.r,Local1.rgba.xyz.g),Local1.rgba.xyz.b)),   Local3 );
	FLWCScalar Local5 = LWCLength(  Local4 );
	float4 Local6 = MaterialCollection0_Vectors[1];
	float Local7 = max(0.00001000,Local6.r);
	float Local8 = (1.00000000 / Local7);
	FLWCScalar Local9 = LWCMultiply(  Local5 , LWCPromote(Local8));
	FLWCScalar Local10 = LWCSubtract(LWCPromote(1.00000000),   Local9 );
	FLWCScalar Local11 = LWCMultiply(  Local10 , LWCPromote(100000.00000000));
	float Local12 = LWCSaturate(  Local11 );
	float Local13 = lerp(1.00000000,0.00000000,  Local12 );
	FLWCVector3 Local14 = LWCMultiply(  Local2 , LWCPromote(((float3)Material_PreshaderBuffer[2].x)));
	float3 Local15 = LWCNormalizeTile(  Local14 ).Offset;
	float Local16 = MaterialExpressionNoise(Local15,1.00000000,1.00000000,2.00000000,1.00000000,6.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local17 = saturate(Local16);
	FLWCVector3 Local18 = ResolvedView.WorldCameraOrigin;
	FLWCVector3 Local19 = LWCMultiply(Local18, LWCPromote(float3(1.00000000,1.00000000,0.00000000)));
	FLWCVector3 Local20 = LWCSubtract(Local19,   Local3 );
	float3 Local21 = LWCToFloat(  Local20 );
	float Local22 = length(  Local21 );
	float4 Local23 = MaterialCollection0_Vectors[0];
	float Local24 = (Local23.r * Material_PreshaderBuffer[2].y);
	float Local25 = max(0.00001000,Local24);
	float Local26 = (1.00000000 / Local25);
	float Local27 = (  Local22  * Local26);
	float Local28 = (1.00000000 -   Local27 );
	float Local29 = (  Local28  * Material_PreshaderBuffer[3].y);
	float Local30 = saturate(  Local29 );
	float Local31 = lerp(Local17,1.00000000,  Local30 );
	float Local32 = GetDistanceToNearestSurfaceGlobal(  Local2 );
	float Local33 = (Local32 * Material_PreshaderBuffer[3].w);
	float Local34 = (Local33 - Material_PreshaderBuffer[4].x);
	float Local35 = (Local34 * Material_PreshaderBuffer[4].w);
	float Local36 = (Local35 * (0.00000000 - 1.00000000));
	float Local37 = (Local36 + 1.00000000);
	float Local38 = saturate(Local37);
	FLWCVector3 Local39 = GetWorldPosition_NoMaterialOffsets(Parameters);
	float3 Local40 = GetDistanceFieldGradientGlobal(  Local2 );
	float3 Local41 = (Local40 * ((float3)Material_PreshaderBuffer[5].y));
	FLWCVector3 Local42 = LWCAdd(  Local39 , LWCPromote(Local41));
	FLWCVector3 Local43 = LWCMultiply(Local42, LWCPromote(((float3)Material_PreshaderBuffer[5].z)));
	float Local44 = lerp(View_GameTime,Local23.b,Local23.a);
	float Local45 = (Local44 * Material_PreshaderBuffer[6].x);
	float2 Local46 = (float2(Local45,Local45) + float2(1.00000000,0.00000000));
	float3 Local47 = LWCNormalizeTile(MakeLWCVector(LWCPromote(MakeLWCVector(LWCPromote( LWCGetComponent( Local43 , 0)),LWCPromote( LWCGetComponent( Local43 , 1)))),LWCPromote(Local46.r))).Offset;
	float Local48 = MaterialExpressionNoise(Local47,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local49 = (Local38 * Material_PreshaderBuffer[6].y);
	float Local50 = (Local48 - Local49);
	float Local51 = (Local49 + 1.00000000);
	float Local52 = (Local51 - Local49);
	float Local53 = (Local50 / Local52);
	float Local54 = (Local53 * (0.00000000 - 1.00000000));
	float Local55 = (Local54 + 1.00000000);
	float Local56 = saturate(Local55);
	float Local57 = PositiveClampedPow(Local56,2.00000000);
	float Local58 = lerp(Material_PreshaderBuffer[6].w,Material_PreshaderBuffer[6].z,Local57);
	float Local59 = saturate(Local58);
	float Local60 = (Local38 * Local59.r);
	FLWCVector3 Local61 = LWCMultiply(  Local39 , LWCPromote(((float3)Material_PreshaderBuffer[7].x)));
	float3 Local62 = LWCNormalizeTile(  Local61 ).Offset;
	float Local63 = MaterialExpressionNoise(Local62,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local64 = saturate(Local63);
	FLWCVector3 Local65 = LWCMultiply(  Local61 , LWCPromote(((float3)1.20000005)));
	float3 Local66 = LWCNormalizeTile(  Local65 ).Offset;
	float Local67 = MaterialExpressionNoise(Local66,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local68 = saturate(Local67);
	float Local69 = (Local64 + Local68);
	float Local70 = (Local60 - Local69);
	float Local71 = (Local70 * Material_PreshaderBuffer[7].y);
	float Local72 =  select_internal( (abs(Material_PreshaderBuffer[7].z - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[7].z >= -1.00000000) , Material_PreshaderBuffer[7].z , Material_PreshaderBuffer[7].w ) , Material_PreshaderBuffer[7].z );
	float Local73 =  select_internal( (abs(Local72 - 1.00000000) > 0.00001000) ,  select_internal( (Local72 >= 1.00000000) , Material_PreshaderBuffer[8].x , Material_PreshaderBuffer[7].z ) , Material_PreshaderBuffer[7].z );
	float Local74 =  select_internal( (abs(Local73 - 0.00000000) > 0.00001000) ,  select_internal( (Local73 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local75 = max(Local74,-1.00000000);
	float Local76 = min(Local75,1.00000000);
	float3 Local77 = (float3(float2(Local76,Material_PreshaderBuffer[10].y),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local78 = max(Local77,((float3)-1.00000000));
	float3 Local79 = min(Local78,((float3)1.00000000));
	FLWCScalar Local80 =  LWCGetComponent(   Local39  , 0);
	FLWCScalar Local81 =  LWCGetComponent(   Local39  , 1);
	FLWCVector2 Local82 = MakeLWCVector(LWCPromote(  Local80 ),LWCPromote(  Local81 ));
	FLWCScalar Local83 =  LWCGetComponent(   Local39  , 2);
	FLWCVector3 Local84 = MakeLWCVector(LWCPromote(  Local82 ),LWCPromote(  Local83 ));
	FLWCVector2 Local85 = MakeLWCVector( LWCGetComponent(   Local84  , 0),  LWCGetComponent(   Local84  , 1));
	FLWCScalar Local86 = LWCDot(LWCPromote(float2(Local79.r,Local79.g)),   Local85 );
	FLWCScalar Local87 = LWCMultiply(  Local86 , LWCPromote(Material_PreshaderBuffer[14].x));
	float Local88 = (Local44 - Material_PreshaderBuffer[14].z);
	FLWCVector3 Local89 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[14].w)),   Local39 );
	FLWCVector3 Local90 = LWCMultiply(  Local89 , LWCPromote(((float3)Material_PreshaderBuffer[15].x)));
	FLWCVector3 Local91 = LWCMultiply(  Local90 , LWCPromote(((float3)Local23.g)));
	FLWCVector3 Local92 = LWCMultiply(  Local91 , LWCPromote(((float3)0.10000000)));
	FLWCScalar Local93 =  LWCGetComponent(   Local92  , 0);
	FLWCScalar Local94 =  LWCGetComponent(   Local92  , 1);
	FLWCVector2 Local95 = MakeLWCVector(LWCPromote(  Local93 ),LWCPromote(  Local94 ));
	float Local96 = (Local44 * Material_PreshaderBuffer[15].z);
	FLWCScalar Local97 =  LWCGetComponent(   Local92  , 2);
	FLWCVector2 Local98 = LWCAdd(LWCPromote(float2(Local96,Local96)), MakeLWCVector(LWCGetComponent(  Local97 , 0),LWCGetComponent(  Local97 , 0)));
	FLWCScalar Local99 = MakeLWCVector(LWCGetComponent(  Local98 , 0));
	FLWCVector3 Local100 = MakeLWCVector(LWCPromote(  Local95 ),LWCPromote(  Local99 ));
	float3 Local101 = LWCNormalizeTile(  Local100 ).Offset;
	float Local102 = MaterialExpressionNoise(Local101,1.00000000,1.00000000,3.00000000,0.00000000,6.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local103 = (Local102 - 0.00000000);
	float Local104 = (Local103 + 0.00000000);
	float Local105 = saturate(Local104);
	float Local106 = lerp(Local44,Local88,Local105);
	float Local107 = (Material_PreshaderBuffer[15].w * Local106);
	FLWCScalar Local108 = LWCAdd(  Local87 , LWCPromote(Local107));
	FLWCScalar Local109 = LWCMultiply(Local108, LWCPromote(6.28318548));
	float Local110 = LWCCos(Local109);
	float Local111 = (Local110 * Local79.r);
	FLWCVector3 Local112 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[17].x)),   Local39 );
	FLWCVector3 Local113 = LWCMultiply(  Local112 , LWCPromote(((float3)Material_PreshaderBuffer[17].y)));
	FLWCVector3 Local114 = LWCMultiply(  Local113 , LWCPromote(((float3)0.00100000)));
	FLWCVector3 Local115 = LWCMultiply(  Local114 , LWCPromote(((float3)0.10000000)));
	FLWCScalar Local116 =  LWCGetComponent(   Local115  , 0);
	FLWCScalar Local117 =  LWCGetComponent(   Local115  , 1);
	FLWCVector2 Local118 = MakeLWCVector(LWCPromote(  Local116 ),LWCPromote(  Local117 ));
	float Local119 = (Local44 * Material_PreshaderBuffer[17].w);
	FLWCScalar Local120 =  LWCGetComponent(   Local115  , 2);
	FLWCVector2 Local121 = LWCAdd(LWCPromote(float2(Local119,Local119)), MakeLWCVector(LWCGetComponent(  Local120 , 0),LWCGetComponent(  Local120 , 0)));
	FLWCScalar Local122 = MakeLWCVector(LWCGetComponent(  Local121 , 0));
	FLWCVector3 Local123 = MakeLWCVector(LWCPromote(  Local118 ),LWCPromote(  Local122 ));
	float3 Local124 = LWCNormalizeTile(  Local123 ).Offset;
	float Local125 = MaterialExpressionNoise(Local124,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	FLWCVector3 Local126 = LWCMultiply(  Local113 , LWCPromote(((float3)0.00200000)));
	FLWCVector3 Local127 = LWCMultiply(  Local126 , LWCPromote(((float3)0.10000000)));
	FLWCScalar Local128 =  LWCGetComponent(   Local127  , 0);
	FLWCScalar Local129 =  LWCGetComponent(   Local127  , 1);
	FLWCVector2 Local130 = MakeLWCVector(LWCPromote(  Local128 ),LWCPromote(  Local129 ));
	FLWCScalar Local131 =  LWCGetComponent(   Local127  , 2);
	FLWCVector2 Local132 = LWCAdd(LWCPromote(float2(Local119,Local119)), MakeLWCVector(LWCGetComponent(  Local131 , 0),LWCGetComponent(  Local131 , 0)));
	FLWCScalar Local133 = MakeLWCVector(LWCGetComponent(  Local132 , 0));
	FLWCVector3 Local134 = MakeLWCVector(LWCPromote(  Local130 ),LWCPromote(  Local133 ));
	float3 Local135 = LWCNormalizeTile(  Local134 ).Offset;
	float Local136 = MaterialExpressionNoise(Local135,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local137 = (Local136 - 0.00000000);
	float Local138 = (Local137 * Material_PreshaderBuffer[18].y);
	float Local139 = (Local138 + Material_PreshaderBuffer[18].x);
	float Local140 = (Local125 * Local139);
	float Local141 = lerp(Material_PreshaderBuffer[16].w,Material_PreshaderBuffer[18].z,Local140);
	float Local142 = (Material_PreshaderBuffer[14].x * Local141);
	float Local143 = (Material_PreshaderBuffer[18].w * Local142);
	float Local144 = (Material_PreshaderBuffer[19].x / Local143);
	float Local145 = (Local144 * Local141);
	float Local146 = (Local111 * Local145);
	float Local147 = (Local110 * Local79.g);
	float Local148 = (Local147 * Local145);
	float Local149 = LWCSin(Local109);
	float Local150 = (Local149 * Local141);
	float3 Local151 = (float3(float2(Local76,Material_PreshaderBuffer[10].y),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local152 = max(Local151,((float3)-1.00000000));
	float3 Local153 = min(Local152,((float3)1.00000000));
	FLWCScalar Local154 = LWCDot(LWCPromote(float2(Local153.r,Local153.g)),   Local85 );
	FLWCScalar Local155 = LWCMultiply(  Local154 , LWCPromote(Material_PreshaderBuffer[21].y));
	float Local156 = (Material_PreshaderBuffer[22].x * Local106);
	FLWCScalar Local157 = LWCAdd(  Local155 , LWCPromote(Local156));
	FLWCScalar Local158 = LWCMultiply(Local157, LWCPromote(6.28318548));
	float Local159 = LWCCos(Local158);
	float Local160 = (Local159 * Local153.r);
	float Local161 = (Local141 * Material_PreshaderBuffer[22].z);
	float Local162 = (Material_PreshaderBuffer[21].y * Local161);
	float Local163 = (Material_PreshaderBuffer[18].w * Local162);
	float Local164 = (Material_PreshaderBuffer[22].w / Local163);
	float Local165 = (Local164 * Local161);
	float Local166 = (Local160 * Local165);
	float Local167 = (Local159 * Local153.g);
	float Local168 = (Local167 * Local165);
	float Local169 = LWCSin(Local158);
	float Local170 = (Local169 * Local161);
	float3 Local171 = (float3(float2(Local146,Local148),Local150) + float3(float2(Local166,Local168),Local170));
	float3 Local172 = (float3(float2(Local76,Material_PreshaderBuffer[10].y),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local173 = max(Local172,((float3)-1.00000000));
	float3 Local174 = min(Local173,((float3)1.00000000));
	FLWCScalar Local175 = LWCDot(LWCPromote(float2(Local174.r,Local174.g)),   Local85 );
	FLWCScalar Local176 = LWCMultiply(  Local175 , LWCPromote(Material_PreshaderBuffer[23].y));
	float Local177 = (Material_PreshaderBuffer[23].w * Local106);
	FLWCScalar Local178 = LWCAdd(  Local176 , LWCPromote(Local177));
	FLWCScalar Local179 = LWCMultiply(Local178, LWCPromote(6.28318548));
	float Local180 = LWCCos(Local179);
	float Local181 = (Local180 * Local174.r);
	float Local182 = (Local161 * Material_PreshaderBuffer[22].z);
	float Local183 = (Material_PreshaderBuffer[23].y * Local182);
	float Local184 = (Material_PreshaderBuffer[18].w * Local183);
	float Local185 = (Material_PreshaderBuffer[24].x / Local184);
	float Local186 = (Local185 * Local182);
	float Local187 = (Local181 * Local186);
	float Local188 = (Local180 * Local174.g);
	float Local189 = (Local188 * Local186);
	float Local190 = LWCSin(Local179);
	float Local191 = (Local190 * Local182);
	float3 Local192 = (Local171 + float3(float2(Local187,Local189),Local191));
	float3 Local193 = (float3(float2(Local76,Material_PreshaderBuffer[10].y),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local194 = max(Local193,((float3)-1.00000000));
	float3 Local195 = min(Local194,((float3)1.00000000));
	FLWCScalar Local196 = LWCDot(LWCPromote(float2(Local195.r,Local195.g)),   Local85 );
	FLWCScalar Local197 = LWCMultiply(  Local196 , LWCPromote(Material_PreshaderBuffer[24].z));
	float Local198 = (Material_PreshaderBuffer[25].x * Local106);
	FLWCScalar Local199 = LWCAdd(  Local197 , LWCPromote(Local198));
	FLWCScalar Local200 = LWCMultiply(Local199, LWCPromote(6.28318548));
	float Local201 = LWCCos(Local200);
	float Local202 = (Local201 * Local195.r);
	float Local203 = (Local182 * Material_PreshaderBuffer[22].z);
	float Local204 = (Material_PreshaderBuffer[24].z * Local203);
	float Local205 = (Material_PreshaderBuffer[18].w * Local204);
	float Local206 = (Material_PreshaderBuffer[25].y / Local205);
	float Local207 = (Local206 * Local203);
	float Local208 = (Local202 * Local207);
	float Local209 = (Local201 * Local195.g);
	float Local210 = (Local209 * Local207);
	float Local211 = LWCSin(Local200);
	float Local212 = (Local211 * Local203);
	float3 Local213 = (Local192 + float3(float2(Local208,Local210),Local212));
	float Local214 =  select_internal( (abs(Material_PreshaderBuffer[25].w - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[25].w >= -1.00000000) , Material_PreshaderBuffer[25].w , Material_PreshaderBuffer[26].x ) , Material_PreshaderBuffer[25].w );
	float Local215 =  select_internal( (abs(Local214 - 1.00000000) > 0.00001000) ,  select_internal( (Local214 >= 1.00000000) , Material_PreshaderBuffer[26].y , Material_PreshaderBuffer[25].w ) , Material_PreshaderBuffer[25].w );
	float Local216 =  select_internal( (abs(Local215 - 0.00000000) > 0.00001000) ,  select_internal( (Local215 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local217 = max(Local216,-1.00000000);
	float Local218 = min(Local217,1.00000000);
	float3 Local219 = (float3(float2(Local218,Material_PreshaderBuffer[27].z),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local220 = max(Local219,((float3)-1.00000000));
	float3 Local221 = min(Local220,((float3)1.00000000));
	FLWCScalar Local222 = LWCDot(LWCPromote(float2(Local221.r,Local221.g)),   Local85 );
	FLWCScalar Local223 = LWCMultiply(  Local222 , LWCPromote(Material_PreshaderBuffer[29].w));
	float Local224 = (Material_PreshaderBuffer[30].z * Local106);
	FLWCScalar Local225 = LWCAdd(  Local223 , LWCPromote(Local224));
	FLWCScalar Local226 = LWCMultiply(Local225, LWCPromote(6.28318548));
	float Local227 = LWCCos(Local226);
	float Local228 = (Local227 * Local221.r);
	float Local229 = (Local141 * Material_PreshaderBuffer[30].w);
	float Local230 = (Material_PreshaderBuffer[29].w * Local229);
	float Local231 = (Material_PreshaderBuffer[18].w * Local230);
	float Local232 = (Material_PreshaderBuffer[19].x / Local231);
	float Local233 = (Local232 * Local229);
	float Local234 = (Local228 * Local233);
	float Local235 = (Local227 * Local221.g);
	float Local236 = (Local235 * Local233);
	float Local237 = LWCSin(Local226);
	float Local238 = (Local237 * Local229);
	float3 Local239 = (float3(float2(Local218,Material_PreshaderBuffer[27].z),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local240 = max(Local239,((float3)-1.00000000));
	float3 Local241 = min(Local240,((float3)1.00000000));
	FLWCScalar Local242 = LWCDot(LWCPromote(float2(Local241.r,Local241.g)),   Local85 );
	FLWCScalar Local243 = LWCMultiply(  Local242 , LWCPromote(Material_PreshaderBuffer[31].y));
	float Local244 = (Material_PreshaderBuffer[31].w * Local106);
	FLWCScalar Local245 = LWCAdd(  Local243 , LWCPromote(Local244));
	FLWCScalar Local246 = LWCMultiply(Local245, LWCPromote(6.28318548));
	float Local247 = LWCCos(Local246);
	float Local248 = (Local247 * Local241.r);
	float Local249 = (Local229 * Material_PreshaderBuffer[22].z);
	float Local250 = (Material_PreshaderBuffer[31].y * Local249);
	float Local251 = (Material_PreshaderBuffer[18].w * Local250);
	float Local252 = (Material_PreshaderBuffer[22].w / Local251);
	float Local253 = (Local252 * Local249);
	float Local254 = (Local248 * Local253);
	float Local255 = (Local247 * Local241.g);
	float Local256 = (Local255 * Local253);
	float Local257 = LWCSin(Local246);
	float Local258 = (Local257 * Local249);
	float3 Local259 = (float3(float2(Local234,Local236),Local238) + float3(float2(Local254,Local256),Local258));
	float3 Local260 = (float3(float2(Local218,Material_PreshaderBuffer[27].z),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local261 = max(Local260,((float3)-1.00000000));
	float3 Local262 = min(Local261,((float3)1.00000000));
	FLWCScalar Local263 = LWCDot(LWCPromote(float2(Local262.r,Local262.g)),   Local85 );
	FLWCScalar Local264 = LWCMultiply(  Local263 , LWCPromote(Material_PreshaderBuffer[32].y));
	float Local265 = (Material_PreshaderBuffer[32].w * Local106);
	FLWCScalar Local266 = LWCAdd(  Local264 , LWCPromote(Local265));
	FLWCScalar Local267 = LWCMultiply(Local266, LWCPromote(6.28318548));
	float Local268 = LWCCos(Local267);
	float Local269 = (Local268 * Local262.r);
	float Local270 = (Local249 * Material_PreshaderBuffer[22].z);
	float Local271 = (Material_PreshaderBuffer[32].y * Local270);
	float Local272 = (Material_PreshaderBuffer[18].w * Local271);
	float Local273 = (Material_PreshaderBuffer[24].x / Local272);
	float Local274 = (Local273 * Local270);
	float Local275 = (Local269 * Local274);
	float Local276 = (Local268 * Local262.g);
	float Local277 = (Local276 * Local274);
	float Local278 = LWCSin(Local267);
	float Local279 = (Local278 * Local270);
	float3 Local280 = (Local259 + float3(float2(Local275,Local277),Local279));
	float3 Local281 = (float3(float2(Local218,Material_PreshaderBuffer[27].z),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local282 = max(Local281,((float3)-1.00000000));
	float3 Local283 = min(Local282,((float3)1.00000000));
	FLWCScalar Local284 = LWCDot(LWCPromote(float2(Local283.r,Local283.g)),   Local85 );
	FLWCScalar Local285 = LWCMultiply(  Local284 , LWCPromote(Material_PreshaderBuffer[33].y));
	float Local286 = (Material_PreshaderBuffer[33].w * Local106);
	FLWCScalar Local287 = LWCAdd(  Local285 , LWCPromote(Local286));
	FLWCScalar Local288 = LWCMultiply(Local287, LWCPromote(6.28318548));
	float Local289 = LWCCos(Local288);
	float Local290 = (Local289 * Local283.r);
	float Local291 = (Local270 * Material_PreshaderBuffer[22].z);
	float Local292 = (Material_PreshaderBuffer[33].y * Local291);
	float Local293 = (Material_PreshaderBuffer[18].w * Local292);
	float Local294 = (Material_PreshaderBuffer[25].y / Local293);
	float Local295 = (Local294 * Local291);
	float Local296 = (Local290 * Local295);
	float Local297 = (Local289 * Local283.g);
	float Local298 = (Local297 * Local295);
	float Local299 = LWCSin(Local288);
	float Local300 = (Local299 * Local291);
	float3 Local301 = (Local280 + float3(float2(Local296,Local298),Local300));
	float3 Local302 = (Local213 + Local301);
	float Local303 =  select_internal( (abs(Material_PreshaderBuffer[34].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[34].x >= -1.00000000) , Material_PreshaderBuffer[34].x , Material_PreshaderBuffer[34].y ) , Material_PreshaderBuffer[34].x );
	float Local304 =  select_internal( (abs(Local303 - 1.00000000) > 0.00001000) ,  select_internal( (Local303 >= 1.00000000) , Material_PreshaderBuffer[34].z , Material_PreshaderBuffer[34].x ) , Material_PreshaderBuffer[34].x );
	float Local305 =  select_internal( (abs(Local304 - 0.00000000) > 0.00001000) ,  select_internal( (Local304 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local306 = max(Local305,-1.00000000);
	float Local307 = min(Local306,1.00000000);
	float3 Local308 = (float3(float2(Local307,Material_PreshaderBuffer[35].w),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local309 = max(Local308,((float3)-1.00000000));
	float3 Local310 = min(Local309,((float3)1.00000000));
	FLWCScalar Local311 = LWCDot(LWCPromote(float2(Local310.r,Local310.g)),   Local85 );
	FLWCScalar Local312 = LWCMultiply(  Local311 , LWCPromote(Material_PreshaderBuffer[37].z));
	float Local313 = (Material_PreshaderBuffer[37].w * Local106);
	FLWCScalar Local314 = LWCAdd(  Local312 , LWCPromote(Local313));
	FLWCScalar Local315 = LWCMultiply(Local314, LWCPromote(6.28318548));
	float Local316 = LWCCos(Local315);
	float Local317 = (Local316 * Local310.r);
	float Local318 = (Material_PreshaderBuffer[37].z * Local229);
	float Local319 = (Material_PreshaderBuffer[18].w * Local318);
	float Local320 = (Material_PreshaderBuffer[19].x / Local319);
	float Local321 = (Local320 * Local229);
	float Local322 = (Local317 * Local321);
	float Local323 = (Local316 * Local310.g);
	float Local324 = (Local323 * Local321);
	float Local325 = LWCSin(Local315);
	float Local326 = (Local325 * Local229);
	float3 Local327 = (float3(float2(Local307,Material_PreshaderBuffer[35].w),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local328 = max(Local327,((float3)-1.00000000));
	float3 Local329 = min(Local328,((float3)1.00000000));
	FLWCScalar Local330 = LWCDot(LWCPromote(float2(Local329.r,Local329.g)),   Local85 );
	FLWCScalar Local331 = LWCMultiply(  Local330 , LWCPromote(Material_PreshaderBuffer[38].y));
	float Local332 = (Material_PreshaderBuffer[38].z * Local106);
	FLWCScalar Local333 = LWCAdd(  Local331 , LWCPromote(Local332));
	FLWCScalar Local334 = LWCMultiply(Local333, LWCPromote(6.28318548));
	float Local335 = LWCCos(Local334);
	float Local336 = (Local335 * Local329.r);
	float Local337 = (Material_PreshaderBuffer[38].y * Local249);
	float Local338 = (Material_PreshaderBuffer[18].w * Local337);
	float Local339 = (Material_PreshaderBuffer[22].w / Local338);
	float Local340 = (Local339 * Local249);
	float Local341 = (Local336 * Local340);
	float Local342 = (Local335 * Local329.g);
	float Local343 = (Local342 * Local340);
	float Local344 = LWCSin(Local334);
	float Local345 = (Local344 * Local249);
	float3 Local346 = (float3(float2(Local322,Local324),Local326) + float3(float2(Local341,Local343),Local345));
	float3 Local347 = (float3(float2(Local307,Material_PreshaderBuffer[35].w),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local348 = max(Local347,((float3)-1.00000000));
	float3 Local349 = min(Local348,((float3)1.00000000));
	FLWCScalar Local350 = LWCDot(LWCPromote(float2(Local349.r,Local349.g)),   Local85 );
	FLWCScalar Local351 = LWCMultiply(  Local350 , LWCPromote(Material_PreshaderBuffer[39].x));
	float Local352 = (Material_PreshaderBuffer[39].y * Local106);
	FLWCScalar Local353 = LWCAdd(  Local351 , LWCPromote(Local352));
	FLWCScalar Local354 = LWCMultiply(Local353, LWCPromote(6.28318548));
	float Local355 = LWCCos(Local354);
	float Local356 = (Local355 * Local349.r);
	float Local357 = (Material_PreshaderBuffer[39].x * Local270);
	float Local358 = (Material_PreshaderBuffer[18].w * Local357);
	float Local359 = (Material_PreshaderBuffer[24].x / Local358);
	float Local360 = (Local359 * Local270);
	float Local361 = (Local356 * Local360);
	float Local362 = (Local355 * Local349.g);
	float Local363 = (Local362 * Local360);
	float Local364 = LWCSin(Local354);
	float Local365 = (Local364 * Local270);
	float3 Local366 = (Local346 + float3(float2(Local361,Local363),Local365));
	float3 Local367 = (float3(float2(Local307,Material_PreshaderBuffer[35].w),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local368 = max(Local367,((float3)-1.00000000));
	float3 Local369 = min(Local368,((float3)1.00000000));
	FLWCScalar Local370 = LWCDot(LWCPromote(float2(Local369.r,Local369.g)),   Local85 );
	FLWCScalar Local371 = LWCMultiply(  Local370 , LWCPromote(Material_PreshaderBuffer[39].w));
	float Local372 = (Material_PreshaderBuffer[40].x * Local106);
	FLWCScalar Local373 = LWCAdd(  Local371 , LWCPromote(Local372));
	FLWCScalar Local374 = LWCMultiply(Local373, LWCPromote(6.28318548));
	float Local375 = LWCCos(Local374);
	float Local376 = (Local375 * Local369.r);
	float Local377 = (Material_PreshaderBuffer[39].w * Local291);
	float Local378 = (Material_PreshaderBuffer[18].w * Local377);
	float Local379 = (Material_PreshaderBuffer[25].y / Local378);
	float Local380 = (Local379 * Local291);
	float Local381 = (Local376 * Local380);
	float Local382 = (Local375 * Local369.g);
	float Local383 = (Local382 * Local380);
	float Local384 = LWCSin(Local374);
	float Local385 = (Local384 * Local291);
	float3 Local386 = (Local366 + float3(float2(Local381,Local383),Local385));
	float3 Local387 = (Local302 + Local386);
	float Local388 =  select_internal( (abs(Material_PreshaderBuffer[40].y - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[40].y >= -1.00000000) , Material_PreshaderBuffer[40].y , Material_PreshaderBuffer[40].z ) , Material_PreshaderBuffer[40].y );
	float Local389 =  select_internal( (abs(Local388 - 1.00000000) > 0.00001000) ,  select_internal( (Local388 >= 1.00000000) , Material_PreshaderBuffer[40].w , Material_PreshaderBuffer[40].y ) , Material_PreshaderBuffer[40].y );
	float Local390 =  select_internal( (abs(Local389 - 0.00000000) > 0.00001000) ,  select_internal( (Local389 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local391 = max(Local390,-1.00000000);
	float Local392 = min(Local391,1.00000000);
	float3 Local393 = (float3(float2(Local392,Material_PreshaderBuffer[42].x),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local394 = max(Local393,((float3)-1.00000000));
	float3 Local395 = min(Local394,((float3)1.00000000));
	FLWCScalar Local396 = LWCDot(LWCPromote(float2(Local395.r,Local395.g)),   Local85 );
	FLWCScalar Local397 = LWCMultiply(  Local396 , LWCPromote(Material_PreshaderBuffer[43].w));
	float Local398 = (Material_PreshaderBuffer[44].x * Local106);
	FLWCScalar Local399 = LWCAdd(  Local397 , LWCPromote(Local398));
	FLWCScalar Local400 = LWCMultiply(Local399, LWCPromote(6.28318548));
	float Local401 = LWCCos(Local400);
	float Local402 = (Local401 * Local395.r);
	float Local403 = (Material_PreshaderBuffer[43].w * Local141);
	float Local404 = (Material_PreshaderBuffer[18].w * Local403);
	float Local405 = (Material_PreshaderBuffer[19].x / Local404);
	float Local406 = (Local405 * Local141);
	float Local407 = (Local402 * Local406);
	float Local408 = (Local401 * Local395.g);
	float Local409 = (Local408 * Local406);
	float Local410 = LWCSin(Local400);
	float Local411 = (Local410 * Local141);
	float3 Local412 = (float3(float2(Local392,Material_PreshaderBuffer[42].x),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local413 = max(Local412,((float3)-1.00000000));
	float3 Local414 = min(Local413,((float3)1.00000000));
	FLWCScalar Local415 = LWCDot(LWCPromote(float2(Local414.r,Local414.g)),   Local85 );
	FLWCScalar Local416 = LWCMultiply(  Local415 , LWCPromote(Material_PreshaderBuffer[44].z));
	float Local417 = (Material_PreshaderBuffer[44].w * Local106);
	FLWCScalar Local418 = LWCAdd(  Local416 , LWCPromote(Local417));
	FLWCScalar Local419 = LWCMultiply(Local418, LWCPromote(6.28318548));
	float Local420 = LWCCos(Local419);
	float Local421 = (Local420 * Local414.r);
	float Local422 = (Material_PreshaderBuffer[44].z * Local161);
	float Local423 = (Material_PreshaderBuffer[18].w * Local422);
	float Local424 = (Material_PreshaderBuffer[22].w / Local423);
	float Local425 = (Local424 * Local161);
	float Local426 = (Local421 * Local425);
	float Local427 = (Local420 * Local414.g);
	float Local428 = (Local427 * Local425);
	float Local429 = LWCSin(Local419);
	float Local430 = (Local429 * Local161);
	float3 Local431 = (float3(float2(Local407,Local409),Local411) + float3(float2(Local426,Local428),Local430));
	float3 Local432 = (float3(float2(Local392,Material_PreshaderBuffer[42].x),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local433 = max(Local432,((float3)-1.00000000));
	float3 Local434 = min(Local433,((float3)1.00000000));
	FLWCScalar Local435 = LWCDot(LWCPromote(float2(Local434.r,Local434.g)),   Local85 );
	FLWCScalar Local436 = LWCMultiply(  Local435 , LWCPromote(Material_PreshaderBuffer[45].y));
	float Local437 = (Material_PreshaderBuffer[45].z * Local106);
	FLWCScalar Local438 = LWCAdd(  Local436 , LWCPromote(Local437));
	FLWCScalar Local439 = LWCMultiply(Local438, LWCPromote(6.28318548));
	float Local440 = LWCCos(Local439);
	float Local441 = (Local440 * Local434.r);
	float Local442 = (Material_PreshaderBuffer[45].y * Local182);
	float Local443 = (Material_PreshaderBuffer[18].w * Local442);
	float Local444 = (Material_PreshaderBuffer[24].x / Local443);
	float Local445 = (Local444 * Local182);
	float Local446 = (Local441 * Local445);
	float Local447 = (Local440 * Local434.g);
	float Local448 = (Local447 * Local445);
	float Local449 = LWCSin(Local439);
	float Local450 = (Local449 * Local182);
	float3 Local451 = (Local431 + float3(float2(Local446,Local448),Local450));
	float3 Local452 = (float3(float2(Local392,Material_PreshaderBuffer[42].x),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local453 = max(Local452,((float3)-1.00000000));
	float3 Local454 = min(Local453,((float3)1.00000000));
	FLWCScalar Local455 = LWCDot(LWCPromote(float2(Local454.r,Local454.g)),   Local85 );
	FLWCScalar Local456 = LWCMultiply(  Local455 , LWCPromote(Material_PreshaderBuffer[46].x));
	float Local457 = (Material_PreshaderBuffer[46].y * Local106);
	FLWCScalar Local458 = LWCAdd(  Local456 , LWCPromote(Local457));
	FLWCScalar Local459 = LWCMultiply(Local458, LWCPromote(6.28318548));
	float Local460 = LWCCos(Local459);
	float Local461 = (Local460 * Local454.r);
	float Local462 = (Material_PreshaderBuffer[46].x * Local203);
	float Local463 = (Material_PreshaderBuffer[18].w * Local462);
	float Local464 = (Material_PreshaderBuffer[25].y / Local463);
	float Local465 = (Local464 * Local203);
	float Local466 = (Local461 * Local465);
	float Local467 = (Local460 * Local454.g);
	float Local468 = (Local467 * Local465);
	float Local469 = LWCSin(Local459);
	float Local470 = (Local469 * Local203);
	float3 Local471 = (Local451 + float3(float2(Local466,Local468),Local470));
	float Local472 =  select_internal( (abs(Material_PreshaderBuffer[46].z - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[46].z >= -1.00000000) , Material_PreshaderBuffer[46].z , Material_PreshaderBuffer[46].w ) , Material_PreshaderBuffer[46].z );
	float Local473 =  select_internal( (abs(Local472 - 1.00000000) > 0.00001000) ,  select_internal( (Local472 >= 1.00000000) , Material_PreshaderBuffer[47].x , Material_PreshaderBuffer[46].z ) , Material_PreshaderBuffer[46].z );
	float Local474 =  select_internal( (abs(Local473 - 0.00000000) > 0.00001000) ,  select_internal( (Local473 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local475 = max(Local474,-1.00000000);
	float Local476 = min(Local475,1.00000000);
	float3 Local477 = (float3(float2(Local476,Material_PreshaderBuffer[48].y),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local478 = max(Local477,((float3)-1.00000000));
	float3 Local479 = min(Local478,((float3)1.00000000));
	FLWCScalar Local480 = LWCDot(LWCPromote(float2(Local479.r,Local479.g)),   Local85 );
	FLWCScalar Local481 = LWCMultiply(  Local480 , LWCPromote(Material_PreshaderBuffer[50].x));
	float Local482 = (Material_PreshaderBuffer[50].y * Local106);
	FLWCScalar Local483 = LWCAdd(  Local481 , LWCPromote(Local482));
	FLWCScalar Local484 = LWCMultiply(Local483, LWCPromote(6.28318548));
	float Local485 = LWCCos(Local484);
	float Local486 = (Local485 * Local479.r);
	float Local487 = (Material_PreshaderBuffer[50].x * Local229);
	float Local488 = (Material_PreshaderBuffer[18].w * Local487);
	float Local489 = (Material_PreshaderBuffer[19].x / Local488);
	float Local490 = (Local489 * Local229);
	float Local491 = (Local486 * Local490);
	float Local492 = (Local485 * Local479.g);
	float Local493 = (Local492 * Local490);
	float Local494 = LWCSin(Local484);
	float Local495 = (Local494 * Local229);
	float3 Local496 = (float3(float2(Local476,Material_PreshaderBuffer[48].y),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local497 = max(Local496,((float3)-1.00000000));
	float3 Local498 = min(Local497,((float3)1.00000000));
	FLWCScalar Local499 = LWCDot(LWCPromote(float2(Local498.r,Local498.g)),   Local85 );
	FLWCScalar Local500 = LWCMultiply(  Local499 , LWCPromote(Material_PreshaderBuffer[50].w));
	float Local501 = (Material_PreshaderBuffer[51].x * Local106);
	FLWCScalar Local502 = LWCAdd(  Local500 , LWCPromote(Local501));
	FLWCScalar Local503 = LWCMultiply(Local502, LWCPromote(6.28318548));
	float Local504 = LWCCos(Local503);
	float Local505 = (Local504 * Local498.r);
	float Local506 = (Material_PreshaderBuffer[50].w * Local249);
	float Local507 = (Material_PreshaderBuffer[18].w * Local506);
	float Local508 = (Material_PreshaderBuffer[22].w / Local507);
	float Local509 = (Local508 * Local249);
	float Local510 = (Local505 * Local509);
	float Local511 = (Local504 * Local498.g);
	float Local512 = (Local511 * Local509);
	float Local513 = LWCSin(Local503);
	float Local514 = (Local513 * Local249);
	float3 Local515 = (float3(float2(Local491,Local493),Local495) + float3(float2(Local510,Local512),Local514));
	float3 Local516 = (float3(float2(Local476,Material_PreshaderBuffer[48].y),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local517 = max(Local516,((float3)-1.00000000));
	float3 Local518 = min(Local517,((float3)1.00000000));
	FLWCScalar Local519 = LWCDot(LWCPromote(float2(Local518.r,Local518.g)),   Local85 );
	FLWCScalar Local520 = LWCMultiply(  Local519 , LWCPromote(Material_PreshaderBuffer[51].z));
	float Local521 = (Material_PreshaderBuffer[51].w * Local106);
	FLWCScalar Local522 = LWCAdd(  Local520 , LWCPromote(Local521));
	FLWCScalar Local523 = LWCMultiply(Local522, LWCPromote(6.28318548));
	float Local524 = LWCCos(Local523);
	float Local525 = (Local524 * Local518.r);
	float Local526 = (Material_PreshaderBuffer[51].z * Local270);
	float Local527 = (Material_PreshaderBuffer[18].w * Local526);
	float Local528 = (Material_PreshaderBuffer[24].x / Local527);
	float Local529 = (Local528 * Local270);
	float Local530 = (Local525 * Local529);
	float Local531 = (Local524 * Local518.g);
	float Local532 = (Local531 * Local529);
	float Local533 = LWCSin(Local523);
	float Local534 = (Local533 * Local270);
	float3 Local535 = (Local515 + float3(float2(Local530,Local532),Local534));
	float3 Local536 = (float3(float2(Local476,Material_PreshaderBuffer[48].y),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local537 = max(Local536,((float3)-1.00000000));
	float3 Local538 = min(Local537,((float3)1.00000000));
	FLWCScalar Local539 = LWCDot(LWCPromote(float2(Local538.r,Local538.g)),   Local85 );
	FLWCScalar Local540 = LWCMultiply(  Local539 , LWCPromote(Material_PreshaderBuffer[52].y));
	float Local541 = (Material_PreshaderBuffer[52].z * Local106);
	FLWCScalar Local542 = LWCAdd(  Local540 , LWCPromote(Local541));
	FLWCScalar Local543 = LWCMultiply(Local542, LWCPromote(6.28318548));
	float Local544 = LWCCos(Local543);
	float Local545 = (Local544 * Local538.r);
	float Local546 = (Material_PreshaderBuffer[52].y * Local291);
	float Local547 = (Material_PreshaderBuffer[18].w * Local546);
	float Local548 = (Material_PreshaderBuffer[25].y / Local547);
	float Local549 = (Local548 * Local291);
	float Local550 = (Local545 * Local549);
	float Local551 = (Local544 * Local538.g);
	float Local552 = (Local551 * Local549);
	float Local553 = LWCSin(Local543);
	float Local554 = (Local553 * Local291);
	float3 Local555 = (Local535 + float3(float2(Local550,Local552),Local554));
	float3 Local556 = (Local471 + Local555);
	float Local557 =  select_internal( (abs(Material_PreshaderBuffer[52].w - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[52].w >= -1.00000000) , Material_PreshaderBuffer[52].w , Material_PreshaderBuffer[53].x ) , Material_PreshaderBuffer[52].w );
	float Local558 =  select_internal( (abs(Local557 - 1.00000000) > 0.00001000) ,  select_internal( (Local557 >= 1.00000000) , Material_PreshaderBuffer[53].y , Material_PreshaderBuffer[52].w ) , Material_PreshaderBuffer[52].w );
	float Local559 =  select_internal( (abs(Local558 - 0.00000000) > 0.00001000) ,  select_internal( (Local558 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local560 = max(Local559,-1.00000000);
	float Local561 = min(Local560,1.00000000);
	float3 Local562 = (float3(float2(Local561,Material_PreshaderBuffer[54].z),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local563 = max(Local562,((float3)-1.00000000));
	float3 Local564 = min(Local563,((float3)1.00000000));
	FLWCScalar Local565 = LWCDot(LWCPromote(float2(Local564.r,Local564.g)),   Local85 );
	FLWCScalar Local566 = LWCMultiply(  Local565 , LWCPromote(Material_PreshaderBuffer[56].y));
	float Local567 = (Material_PreshaderBuffer[56].z * Local106);
	FLWCScalar Local568 = LWCAdd(  Local566 , LWCPromote(Local567));
	FLWCScalar Local569 = LWCMultiply(Local568, LWCPromote(6.28318548));
	float Local570 = LWCCos(Local569);
	float Local571 = (Local570 * Local564.r);
	float Local572 = (Material_PreshaderBuffer[56].y * Local229);
	float Local573 = (Material_PreshaderBuffer[18].w * Local572);
	float Local574 = (Material_PreshaderBuffer[19].x / Local573);
	float Local575 = (Local574 * Local229);
	float Local576 = (Local571 * Local575);
	float Local577 = (Local570 * Local564.g);
	float Local578 = (Local577 * Local575);
	float Local579 = LWCSin(Local569);
	float Local580 = (Local579 * Local229);
	float3 Local581 = (float3(float2(Local561,Material_PreshaderBuffer[54].z),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local582 = max(Local581,((float3)-1.00000000));
	float3 Local583 = min(Local582,((float3)1.00000000));
	FLWCScalar Local584 = LWCDot(LWCPromote(float2(Local583.r,Local583.g)),   Local85 );
	FLWCScalar Local585 = LWCMultiply(  Local584 , LWCPromote(Material_PreshaderBuffer[57].x));
	float Local586 = (Material_PreshaderBuffer[57].y * Local106);
	FLWCScalar Local587 = LWCAdd(  Local585 , LWCPromote(Local586));
	FLWCScalar Local588 = LWCMultiply(Local587, LWCPromote(6.28318548));
	float Local589 = LWCCos(Local588);
	float Local590 = (Local589 * Local583.r);
	float Local591 = (Material_PreshaderBuffer[57].x * Local249);
	float Local592 = (Material_PreshaderBuffer[18].w * Local591);
	float Local593 = (Material_PreshaderBuffer[22].w / Local592);
	float Local594 = (Local593 * Local249);
	float Local595 = (Local590 * Local594);
	float Local596 = (Local589 * Local583.g);
	float Local597 = (Local596 * Local594);
	float Local598 = LWCSin(Local588);
	float Local599 = (Local598 * Local249);
	float3 Local600 = (float3(float2(Local576,Local578),Local580) + float3(float2(Local595,Local597),Local599));
	float3 Local601 = (float3(float2(Local561,Material_PreshaderBuffer[54].z),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local602 = max(Local601,((float3)-1.00000000));
	float3 Local603 = min(Local602,((float3)1.00000000));
	FLWCScalar Local604 = LWCDot(LWCPromote(float2(Local603.r,Local603.g)),   Local85 );
	FLWCScalar Local605 = LWCMultiply(  Local604 , LWCPromote(Material_PreshaderBuffer[57].w));
	float Local606 = (Material_PreshaderBuffer[58].x * Local106);
	FLWCScalar Local607 = LWCAdd(  Local605 , LWCPromote(Local606));
	FLWCScalar Local608 = LWCMultiply(Local607, LWCPromote(6.28318548));
	float Local609 = LWCCos(Local608);
	float Local610 = (Local609 * Local603.r);
	float Local611 = (Material_PreshaderBuffer[57].w * Local270);
	float Local612 = (Material_PreshaderBuffer[18].w * Local611);
	float Local613 = (Material_PreshaderBuffer[24].x / Local612);
	float Local614 = (Local613 * Local270);
	float Local615 = (Local610 * Local614);
	float Local616 = (Local609 * Local603.g);
	float Local617 = (Local616 * Local614);
	float Local618 = LWCSin(Local608);
	float Local619 = (Local618 * Local270);
	float3 Local620 = (Local600 + float3(float2(Local615,Local617),Local619));
	float3 Local621 = (float3(float2(Local561,Material_PreshaderBuffer[54].z),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local622 = max(Local621,((float3)-1.00000000));
	float3 Local623 = min(Local622,((float3)1.00000000));
	FLWCScalar Local624 = LWCDot(LWCPromote(float2(Local623.r,Local623.g)),   Local85 );
	FLWCScalar Local625 = LWCMultiply(  Local624 , LWCPromote(Material_PreshaderBuffer[58].z));
	float Local626 = (Material_PreshaderBuffer[58].w * Local106);
	FLWCScalar Local627 = LWCAdd(  Local625 , LWCPromote(Local626));
	FLWCScalar Local628 = LWCMultiply(Local627, LWCPromote(6.28318548));
	float Local629 = LWCCos(Local628);
	float Local630 = (Local629 * Local623.r);
	float Local631 = (Material_PreshaderBuffer[58].z * Local291);
	float Local632 = (Material_PreshaderBuffer[18].w * Local631);
	float Local633 = (Material_PreshaderBuffer[25].y / Local632);
	float Local634 = (Local633 * Local291);
	float Local635 = (Local630 * Local634);
	float Local636 = (Local629 * Local623.g);
	float Local637 = (Local636 * Local634);
	float Local638 = LWCSin(Local628);
	float Local639 = (Local638 * Local291);
	float3 Local640 = (Local620 + float3(float2(Local635,Local637),Local639));
	float3 Local641 = (Local556 + Local640);
	float3 Local642 = (Local387 + Local641);
	float3 Local643 = (Local642 * ((float3)Material_PreshaderBuffer[59].x));
	float Local644 =  select_internal( (abs(Material_PreshaderBuffer[59].y - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[59].y >= -1.00000000) , Material_PreshaderBuffer[59].y , Material_PreshaderBuffer[59].z ) , Material_PreshaderBuffer[59].y );
	float Local645 =  select_internal( (abs(Local644 - 1.00000000) > 0.00001000) ,  select_internal( (Local644 >= 1.00000000) , Material_PreshaderBuffer[59].w , Material_PreshaderBuffer[59].y ) , Material_PreshaderBuffer[59].y );
	float Local646 =  select_internal( (abs(Local645 - 0.00000000) > 0.00001000) ,  select_internal( (Local645 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local647 = max(Local646,-1.00000000);
	float Local648 = min(Local647,1.00000000);
	float3 Local649 = (float3(float2(Local648,Material_PreshaderBuffer[61].x),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local650 = max(Local649,((float3)-1.00000000));
	float3 Local651 = min(Local650,((float3)1.00000000));
	FLWCScalar Local652 = LWCDot(LWCPromote(float2(Local651.r,Local651.g)),   Local85 );
	float Local653 = (Material_PreshaderBuffer[62].y * Local23.g);
	float Local654 = (Material_PreshaderBuffer[62].z * Local653);
	float Local655 = (2.00000000 / Local654);
	FLWCScalar Local656 = LWCMultiply(  Local652 , LWCPromote(Local655));
	float Local657 = (Local655 * Material_PreshaderBuffer[62].w);
	FLWCVector3 Local658 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[63].x)),   Local39 );
	FLWCVector3 Local659 = LWCMultiply(  Local658 , LWCPromote(((float3)Material_PreshaderBuffer[63].y)));
	float Local660 = (1.00000000 / Local23.g);
	FLWCVector3 Local661 = LWCMultiply(  Local659 , LWCPromote(((float3)Local660)));
	FLWCScalar Local662 =  LWCGetComponent(   Local661  , 0);
	FLWCScalar Local663 =  LWCGetComponent(   Local661  , 1);
	FLWCVector2 Local664 = MakeLWCVector(LWCPromote(  Local662 ),LWCPromote(  Local663 ));
	float Local665 = (Local44 * Material_PreshaderBuffer[63].w);
	FLWCScalar Local666 =  LWCGetComponent(   Local661  , 2);
	FLWCVector2 Local667 = LWCAdd(LWCPromote(float2(Local665,Local665)), MakeLWCVector(LWCGetComponent(  Local666 , 0),LWCGetComponent(  Local666 , 0)));
	FLWCScalar Local668 = MakeLWCVector(LWCGetComponent(  Local667 , 0));
	FLWCVector3 Local669 = MakeLWCVector(LWCPromote(  Local664 ),LWCPromote(  Local668 ));
	float3 Local670 = LWCNormalizeTile(  Local669 ).Offset;
	float Local671 = MaterialExpressionNoise(Local670,1.00000000,1.00000000,3.00000000,0.00000000,6.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local672 = (Local671 - 0.00000000);
	float Local673 = (Local672 + 0.00000000);
	float Local674 = saturate(Local673);
	float Local675 = lerp(Local44,Local88,Local674);
	float Local676 = (Local657 * Local675);
	FLWCScalar Local677 = LWCAdd(  Local656 , LWCPromote(Local676));
	FLWCScalar Local678 = LWCMultiply(Local677, LWCPromote(6.28318548));
	float Local679 = LWCCos(Local678);
	float Local680 = (Local679 * Local651.r);
	float Local681 = (Material_PreshaderBuffer[64].x * Local23.g);
	float Local682 = (Material_PreshaderBuffer[64].y * Local23.g);
	float Local683 = (Local681 - Local682);
	FLWCVector3 Local684 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[64].z)),   Local39 );
	FLWCVector3 Local685 = LWCMultiply(  Local684 , LWCPromote(((float3)Material_PreshaderBuffer[64].w)));
	FLWCVector3 Local686 = LWCMultiply(  Local685 , LWCPromote(((float3)Local660)));
	FLWCScalar Local687 =  LWCGetComponent(   Local686  , 0);
	FLWCScalar Local688 =  LWCGetComponent(   Local686  , 1);
	FLWCVector2 Local689 = MakeLWCVector(LWCPromote(  Local687 ),LWCPromote(  Local688 ));
	float Local690 = (Local44 * Material_PreshaderBuffer[65].y);
	FLWCScalar Local691 =  LWCGetComponent(   Local686  , 2);
	FLWCVector2 Local692 = LWCAdd(LWCPromote(float2(Local690,Local690)), MakeLWCVector(LWCGetComponent(  Local691 , 0),LWCGetComponent(  Local691 , 0)));
	FLWCScalar Local693 = MakeLWCVector(LWCGetComponent(  Local692 , 0));
	FLWCVector3 Local694 = MakeLWCVector(LWCPromote(  Local689 ),LWCPromote(  Local693 ));
	float3 Local695 = LWCNormalizeTile(  Local694 ).Offset;
	float Local696 = MaterialExpressionNoise(Local695,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	FLWCVector3 Local697 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[65].z)),   Local39 );
	FLWCVector3 Local698 = LWCMultiply(  Local697 , LWCPromote(((float3)Material_PreshaderBuffer[65].w)));
	FLWCVector3 Local699 = LWCMultiply(  Local698 , LWCPromote(((float3)Local660)));
	FLWCScalar Local700 =  LWCGetComponent(   Local699  , 0);
	FLWCScalar Local701 =  LWCGetComponent(   Local699  , 1);
	FLWCVector2 Local702 = MakeLWCVector(LWCPromote(  Local700 ),LWCPromote(  Local701 ));
	float Local703 = (Local44 * Material_PreshaderBuffer[66].y);
	FLWCScalar Local704 =  LWCGetComponent(   Local699  , 2);
	FLWCVector2 Local705 = LWCAdd(LWCPromote(float2(Local703,Local703)), MakeLWCVector(LWCGetComponent(  Local704 , 0),LWCGetComponent(  Local704 , 0)));
	FLWCScalar Local706 = MakeLWCVector(LWCGetComponent(  Local705 , 0));
	FLWCVector3 Local707 = MakeLWCVector(LWCPromote(  Local702 ),LWCPromote(  Local706 ));
	float3 Local708 = LWCNormalizeTile(  Local707 ).Offset;
	float Local709 = MaterialExpressionNoise(Local708,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local710 = (Local709 - 0.00000000);
	float Local711 = (Local710 * Material_PreshaderBuffer[66].w);
	float Local712 = (Local711 + Material_PreshaderBuffer[66].z);
	float Local713 = (Local696 * Local712);
	float Local714 = lerp(Local681,Local683,Local713);
	float Local715 = (Local655 * Local714);
	float Local716 = (Material_PreshaderBuffer[18].w * Local715);
	float Local717 = (Material_PreshaderBuffer[67].x / Local716);
	float Local718 = (Local717 * Local714);
	float Local719 = (Local680 * Local718);
	float Local720 = (Local679 * Local651.g);
	float Local721 = (Local720 * Local718);
	float Local722 = LWCSin(Local678);
	float Local723 = (Local722 * Local714);
	float3 Local724 = (float3(float2(Local648,Material_PreshaderBuffer[61].x),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local725 = max(Local724,((float3)-1.00000000));
	float3 Local726 = min(Local725,((float3)1.00000000));
	FLWCScalar Local727 = LWCDot(LWCPromote(float2(Local726.r,Local726.g)),   Local85 );
	float Local728 = (Local654 * Material_PreshaderBuffer[20].w);
	float Local729 = (2.00000000 / Local728);
	FLWCScalar Local730 = LWCMultiply(  Local727 , LWCPromote(Local729));
	float Local731 = (Local729 * Material_PreshaderBuffer[67].y);
	float Local732 = (Local731 * Local675);
	FLWCScalar Local733 = LWCAdd(  Local730 , LWCPromote(Local732));
	FLWCScalar Local734 = LWCMultiply(Local733, LWCPromote(6.28318548));
	float Local735 = LWCCos(Local734);
	float Local736 = (Local735 * Local726.r);
	float Local737 = (Local714 * Material_PreshaderBuffer[22].z);
	float Local738 = (Local729 * Local737);
	float Local739 = (Material_PreshaderBuffer[18].w * Local738);
	float Local740 = (Material_PreshaderBuffer[67].z / Local739);
	float Local741 = (Local740 * Local737);
	float Local742 = (Local736 * Local741);
	float Local743 = (Local735 * Local726.g);
	float Local744 = (Local743 * Local741);
	float Local745 = LWCSin(Local734);
	float Local746 = (Local745 * Local737);
	float3 Local747 = (float3(float2(Local719,Local721),Local723) + float3(float2(Local742,Local744),Local746));
	float3 Local748 = (float3(float2(Local648,Material_PreshaderBuffer[61].x),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local749 = max(Local748,((float3)-1.00000000));
	float3 Local750 = min(Local749,((float3)1.00000000));
	FLWCScalar Local751 = LWCDot(LWCPromote(float2(Local750.r,Local750.g)),   Local85 );
	float Local752 = (Local728 * Material_PreshaderBuffer[20].w);
	float Local753 = (2.00000000 / Local752);
	FLWCScalar Local754 = LWCMultiply(  Local751 , LWCPromote(Local753));
	float Local755 = (Local753 * Material_PreshaderBuffer[67].w);
	float Local756 = (Local755 * Local675);
	FLWCScalar Local757 = LWCAdd(  Local754 , LWCPromote(Local756));
	FLWCScalar Local758 = LWCMultiply(Local757, LWCPromote(6.28318548));
	float Local759 = LWCCos(Local758);
	float Local760 = (Local759 * Local750.r);
	float Local761 = (Local737 * Material_PreshaderBuffer[22].z);
	float Local762 = (Local753 * Local761);
	float Local763 = (Material_PreshaderBuffer[18].w * Local762);
	float Local764 = (Material_PreshaderBuffer[68].x / Local763);
	float Local765 = (Local764 * Local761);
	float Local766 = (Local760 * Local765);
	float Local767 = (Local759 * Local750.g);
	float Local768 = (Local767 * Local765);
	float Local769 = LWCSin(Local758);
	float Local770 = (Local769 * Local761);
	float3 Local771 = (Local747 + float3(float2(Local766,Local768),Local770));
	float3 Local772 = (float3(float2(Local648,Material_PreshaderBuffer[61].x),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local773 = max(Local772,((float3)-1.00000000));
	float3 Local774 = min(Local773,((float3)1.00000000));
	FLWCScalar Local775 = LWCDot(LWCPromote(float2(Local774.r,Local774.g)),   Local85 );
	float Local776 = (Local752 * Material_PreshaderBuffer[20].w);
	float Local777 = (2.00000000 / Local776);
	FLWCScalar Local778 = LWCMultiply(  Local775 , LWCPromote(Local777));
	float Local779 = (Local777 * Material_PreshaderBuffer[68].y);
	float Local780 = (Local779 * Local675);
	FLWCScalar Local781 = LWCAdd(  Local778 , LWCPromote(Local780));
	FLWCScalar Local782 = LWCMultiply(Local781, LWCPromote(6.28318548));
	float Local783 = LWCCos(Local782);
	float Local784 = (Local783 * Local774.r);
	float Local785 = (Local761 * Material_PreshaderBuffer[22].z);
	float Local786 = (Local777 * Local785);
	float Local787 = (Material_PreshaderBuffer[18].w * Local786);
	float Local788 = (Material_PreshaderBuffer[68].z / Local787);
	float Local789 = (Local788 * Local785);
	float Local790 = (Local784 * Local789);
	float Local791 = (Local783 * Local774.g);
	float Local792 = (Local791 * Local789);
	float Local793 = LWCSin(Local782);
	float Local794 = (Local793 * Local785);
	float3 Local795 = (Local771 + float3(float2(Local790,Local792),Local794));
	float Local796 =  select_internal( (abs(Material_PreshaderBuffer[69].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[69].x >= -1.00000000) , Material_PreshaderBuffer[69].x , Material_PreshaderBuffer[69].y ) , Material_PreshaderBuffer[69].x );
	float Local797 =  select_internal( (abs(Local796 - 1.00000000) > 0.00001000) ,  select_internal( (Local796 >= 1.00000000) , Material_PreshaderBuffer[69].z , Material_PreshaderBuffer[69].x ) , Material_PreshaderBuffer[69].x );
	float Local798 =  select_internal( (abs(Local797 - 0.00000000) > 0.00001000) ,  select_internal( (Local797 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local799 = max(Local798,-1.00000000);
	float Local800 = min(Local799,1.00000000);
	float3 Local801 = (float3(float2(Local800,Material_PreshaderBuffer[70].w),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local802 = max(Local801,((float3)-1.00000000));
	float3 Local803 = min(Local802,((float3)1.00000000));
	FLWCScalar Local804 = LWCDot(LWCPromote(float2(Local803.r,Local803.g)),   Local85 );
	float Local805 = (Local653 * Material_PreshaderBuffer[28].w);
	float Local806 = (Material_PreshaderBuffer[72].x * Local805);
	float Local807 = (2.00000000 / Local806);
	FLWCScalar Local808 = LWCMultiply(  Local804 , LWCPromote(Local807));
	float Local809 = (Local807 * Material_PreshaderBuffer[72].y);
	float Local810 = (Local809 * Local675);
	FLWCScalar Local811 = LWCAdd(  Local808 , LWCPromote(Local810));
	FLWCScalar Local812 = LWCMultiply(Local811, LWCPromote(6.28318548));
	float Local813 = LWCCos(Local812);
	float Local814 = (Local813 * Local803.r);
	float Local815 = (Local714 * Material_PreshaderBuffer[30].w);
	float Local816 = (Local807 * Local815);
	float Local817 = (Material_PreshaderBuffer[18].w * Local816);
	float Local818 = (Material_PreshaderBuffer[67].x / Local817);
	float Local819 = (Local818 * Local815);
	float Local820 = (Local814 * Local819);
	float Local821 = (Local813 * Local803.g);
	float Local822 = (Local821 * Local819);
	float Local823 = LWCSin(Local812);
	float Local824 = (Local823 * Local815);
	float3 Local825 = (float3(float2(Local800,Material_PreshaderBuffer[70].w),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local826 = max(Local825,((float3)-1.00000000));
	float3 Local827 = min(Local826,((float3)1.00000000));
	FLWCScalar Local828 = LWCDot(LWCPromote(float2(Local827.r,Local827.g)),   Local85 );
	float Local829 = (Local806 * Material_PreshaderBuffer[20].w);
	float Local830 = (2.00000000 / Local829);
	FLWCScalar Local831 = LWCMultiply(  Local828 , LWCPromote(Local830));
	float Local832 = (Local830 * Material_PreshaderBuffer[72].z);
	float Local833 = (Local832 * Local675);
	FLWCScalar Local834 = LWCAdd(  Local831 , LWCPromote(Local833));
	FLWCScalar Local835 = LWCMultiply(Local834, LWCPromote(6.28318548));
	float Local836 = LWCCos(Local835);
	float Local837 = (Local836 * Local827.r);
	float Local838 = (Local815 * Material_PreshaderBuffer[22].z);
	float Local839 = (Local830 * Local838);
	float Local840 = (Material_PreshaderBuffer[18].w * Local839);
	float Local841 = (Material_PreshaderBuffer[67].z / Local840);
	float Local842 = (Local841 * Local838);
	float Local843 = (Local837 * Local842);
	float Local844 = (Local836 * Local827.g);
	float Local845 = (Local844 * Local842);
	float Local846 = LWCSin(Local835);
	float Local847 = (Local846 * Local838);
	float3 Local848 = (float3(float2(Local820,Local822),Local824) + float3(float2(Local843,Local845),Local847));
	float3 Local849 = (float3(float2(Local800,Material_PreshaderBuffer[70].w),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local850 = max(Local849,((float3)-1.00000000));
	float3 Local851 = min(Local850,((float3)1.00000000));
	FLWCScalar Local852 = LWCDot(LWCPromote(float2(Local851.r,Local851.g)),   Local85 );
	float Local853 = (Local829 * Material_PreshaderBuffer[20].w);
	float Local854 = (2.00000000 / Local853);
	FLWCScalar Local855 = LWCMultiply(  Local852 , LWCPromote(Local854));
	float Local856 = (Local854 * Material_PreshaderBuffer[72].w);
	float Local857 = (Local856 * Local675);
	FLWCScalar Local858 = LWCAdd(  Local855 , LWCPromote(Local857));
	FLWCScalar Local859 = LWCMultiply(Local858, LWCPromote(6.28318548));
	float Local860 = LWCCos(Local859);
	float Local861 = (Local860 * Local851.r);
	float Local862 = (Local838 * Material_PreshaderBuffer[22].z);
	float Local863 = (Local854 * Local862);
	float Local864 = (Material_PreshaderBuffer[18].w * Local863);
	float Local865 = (Material_PreshaderBuffer[68].x / Local864);
	float Local866 = (Local865 * Local862);
	float Local867 = (Local861 * Local866);
	float Local868 = (Local860 * Local851.g);
	float Local869 = (Local868 * Local866);
	float Local870 = LWCSin(Local859);
	float Local871 = (Local870 * Local862);
	float3 Local872 = (Local848 + float3(float2(Local867,Local869),Local871));
	float3 Local873 = (float3(float2(Local800,Material_PreshaderBuffer[70].w),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local874 = max(Local873,((float3)-1.00000000));
	float3 Local875 = min(Local874,((float3)1.00000000));
	FLWCScalar Local876 = LWCDot(LWCPromote(float2(Local875.r,Local875.g)),   Local85 );
	float Local877 = (Local853 * Material_PreshaderBuffer[20].w);
	float Local878 = (2.00000000 / Local877);
	FLWCScalar Local879 = LWCMultiply(  Local876 , LWCPromote(Local878));
	float Local880 = (Local878 * Material_PreshaderBuffer[73].x);
	float Local881 = (Local880 * Local675);
	FLWCScalar Local882 = LWCAdd(  Local879 , LWCPromote(Local881));
	FLWCScalar Local883 = LWCMultiply(Local882, LWCPromote(6.28318548));
	float Local884 = LWCCos(Local883);
	float Local885 = (Local884 * Local875.r);
	float Local886 = (Local862 * Material_PreshaderBuffer[22].z);
	float Local887 = (Local878 * Local886);
	float Local888 = (Material_PreshaderBuffer[18].w * Local887);
	float Local889 = (Material_PreshaderBuffer[68].z / Local888);
	float Local890 = (Local889 * Local886);
	float Local891 = (Local885 * Local890);
	float Local892 = (Local884 * Local875.g);
	float Local893 = (Local892 * Local890);
	float Local894 = LWCSin(Local883);
	float Local895 = (Local894 * Local886);
	float3 Local896 = (Local872 + float3(float2(Local891,Local893),Local895));
	float3 Local897 = (Local795 + Local896);
	float Local898 =  select_internal( (abs(Material_PreshaderBuffer[73].y - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[73].y >= -1.00000000) , Material_PreshaderBuffer[73].y , Material_PreshaderBuffer[73].z ) , Material_PreshaderBuffer[73].y );
	float Local899 =  select_internal( (abs(Local898 - 1.00000000) > 0.00001000) ,  select_internal( (Local898 >= 1.00000000) , Material_PreshaderBuffer[73].w , Material_PreshaderBuffer[73].y ) , Material_PreshaderBuffer[73].y );
	float Local900 =  select_internal( (abs(Local899 - 0.00000000) > 0.00001000) ,  select_internal( (Local899 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local901 = max(Local900,-1.00000000);
	float Local902 = min(Local901,1.00000000);
	float3 Local903 = (float3(float2(Local902,Material_PreshaderBuffer[75].x),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local904 = max(Local903,((float3)-1.00000000));
	float3 Local905 = min(Local904,((float3)1.00000000));
	FLWCScalar Local906 = LWCDot(LWCPromote(float2(Local905.r,Local905.g)),   Local85 );
	float Local907 = (Material_PreshaderBuffer[76].y * Local805);
	float Local908 = (2.00000000 / Local907);
	FLWCScalar Local909 = LWCMultiply(  Local906 , LWCPromote(Local908));
	float Local910 = (Local908 * Material_PreshaderBuffer[72].y);
	float Local911 = (Local910 * Local675);
	FLWCScalar Local912 = LWCAdd(  Local909 , LWCPromote(Local911));
	FLWCScalar Local913 = LWCMultiply(Local912, LWCPromote(6.28318548));
	float Local914 = LWCCos(Local913);
	float Local915 = (Local914 * Local905.r);
	float Local916 = (Local908 * Local815);
	float Local917 = (Material_PreshaderBuffer[18].w * Local916);
	float Local918 = (Material_PreshaderBuffer[67].x / Local917);
	float Local919 = (Local918 * Local815);
	float Local920 = (Local915 * Local919);
	float Local921 = (Local914 * Local905.g);
	float Local922 = (Local921 * Local919);
	float Local923 = LWCSin(Local913);
	float Local924 = (Local923 * Local815);
	float3 Local925 = (float3(float2(Local902,Material_PreshaderBuffer[75].x),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local926 = max(Local925,((float3)-1.00000000));
	float3 Local927 = min(Local926,((float3)1.00000000));
	FLWCScalar Local928 = LWCDot(LWCPromote(float2(Local927.r,Local927.g)),   Local85 );
	float Local929 = (Local907 * Material_PreshaderBuffer[20].w);
	float Local930 = (2.00000000 / Local929);
	FLWCScalar Local931 = LWCMultiply(  Local928 , LWCPromote(Local930));
	float Local932 = (Local930 * Material_PreshaderBuffer[72].z);
	float Local933 = (Local932 * Local675);
	FLWCScalar Local934 = LWCAdd(  Local931 , LWCPromote(Local933));
	FLWCScalar Local935 = LWCMultiply(Local934, LWCPromote(6.28318548));
	float Local936 = LWCCos(Local935);
	float Local937 = (Local936 * Local927.r);
	float Local938 = (Local930 * Local838);
	float Local939 = (Material_PreshaderBuffer[18].w * Local938);
	float Local940 = (Material_PreshaderBuffer[67].z / Local939);
	float Local941 = (Local940 * Local838);
	float Local942 = (Local937 * Local941);
	float Local943 = (Local936 * Local927.g);
	float Local944 = (Local943 * Local941);
	float Local945 = LWCSin(Local935);
	float Local946 = (Local945 * Local838);
	float3 Local947 = (float3(float2(Local920,Local922),Local924) + float3(float2(Local942,Local944),Local946));
	float3 Local948 = (float3(float2(Local902,Material_PreshaderBuffer[75].x),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local949 = max(Local948,((float3)-1.00000000));
	float3 Local950 = min(Local949,((float3)1.00000000));
	FLWCScalar Local951 = LWCDot(LWCPromote(float2(Local950.r,Local950.g)),   Local85 );
	float Local952 = (Local929 * Material_PreshaderBuffer[20].w);
	float Local953 = (2.00000000 / Local952);
	FLWCScalar Local954 = LWCMultiply(  Local951 , LWCPromote(Local953));
	float Local955 = (Local953 * Material_PreshaderBuffer[72].w);
	float Local956 = (Local955 * Local675);
	FLWCScalar Local957 = LWCAdd(  Local954 , LWCPromote(Local956));
	FLWCScalar Local958 = LWCMultiply(Local957, LWCPromote(6.28318548));
	float Local959 = LWCCos(Local958);
	float Local960 = (Local959 * Local950.r);
	float Local961 = (Local953 * Local862);
	float Local962 = (Material_PreshaderBuffer[18].w * Local961);
	float Local963 = (Material_PreshaderBuffer[68].x / Local962);
	float Local964 = (Local963 * Local862);
	float Local965 = (Local960 * Local964);
	float Local966 = (Local959 * Local950.g);
	float Local967 = (Local966 * Local964);
	float Local968 = LWCSin(Local958);
	float Local969 = (Local968 * Local862);
	float3 Local970 = (Local947 + float3(float2(Local965,Local967),Local969));
	float3 Local971 = (float3(float2(Local902,Material_PreshaderBuffer[75].x),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local972 = max(Local971,((float3)-1.00000000));
	float3 Local973 = min(Local972,((float3)1.00000000));
	FLWCScalar Local974 = LWCDot(LWCPromote(float2(Local973.r,Local973.g)),   Local85 );
	float Local975 = (Local952 * Material_PreshaderBuffer[20].w);
	float Local976 = (2.00000000 / Local975);
	FLWCScalar Local977 = LWCMultiply(  Local974 , LWCPromote(Local976));
	float Local978 = (Local976 * Material_PreshaderBuffer[73].x);
	float Local979 = (Local978 * Local675);
	FLWCScalar Local980 = LWCAdd(  Local977 , LWCPromote(Local979));
	FLWCScalar Local981 = LWCMultiply(Local980, LWCPromote(6.28318548));
	float Local982 = LWCCos(Local981);
	float Local983 = (Local982 * Local973.r);
	float Local984 = (Local976 * Local886);
	float Local985 = (Material_PreshaderBuffer[18].w * Local984);
	float Local986 = (Material_PreshaderBuffer[68].z / Local985);
	float Local987 = (Local986 * Local886);
	float Local988 = (Local983 * Local987);
	float Local989 = (Local982 * Local973.g);
	float Local990 = (Local989 * Local987);
	float Local991 = LWCSin(Local981);
	float Local992 = (Local991 * Local886);
	float3 Local993 = (Local970 + float3(float2(Local988,Local990),Local992));
	float3 Local994 = (Local897 + Local993);
	float Local995 = (Local653 * 0.80000001);
	float Local996 = (Material_PreshaderBuffer[62].z * Local995);
	float Local997 = (2.00000000 / Local996);
	FLWCScalar Local998 = LWCMultiply(  Local652 , LWCPromote(Local997));
	float Local999 = (Local997 * Material_PreshaderBuffer[76].z);
	float Local1000 = (Local999 * Local675);
	FLWCScalar Local1001 = LWCAdd(  Local998 , LWCPromote(Local1000));
	FLWCScalar Local1002 = LWCMultiply(Local1001, LWCPromote(6.28318548));
	float Local1003 = LWCCos(Local1002);
	float Local1004 = (Local1003 * Local651.r);
	float Local1005 = (Local714 * 0.80000001);
	float Local1006 = (Local997 * Local1005);
	float Local1007 = (Material_PreshaderBuffer[18].w * Local1006);
	float Local1008 = (Material_PreshaderBuffer[67].x / Local1007);
	float Local1009 = (Local1008 * Local1005);
	float Local1010 = (Local1004 * Local1009);
	float Local1011 = (Local1003 * Local651.g);
	float Local1012 = (Local1011 * Local1009);
	float Local1013 = LWCSin(Local1002);
	float Local1014 = (Local1013 * Local1005);
	float Local1015 = (Local996 * Material_PreshaderBuffer[20].w);
	float Local1016 = (2.00000000 / Local1015);
	FLWCScalar Local1017 = LWCMultiply(  Local727 , LWCPromote(Local1016));
	float Local1018 = (Local1016 * Material_PreshaderBuffer[76].w);
	float Local1019 = (Local1018 * Local675);
	FLWCScalar Local1020 = LWCAdd(  Local1017 , LWCPromote(Local1019));
	FLWCScalar Local1021 = LWCMultiply(Local1020, LWCPromote(6.28318548));
	float Local1022 = LWCCos(Local1021);
	float Local1023 = (Local1022 * Local726.r);
	float Local1024 = (Local1005 * Material_PreshaderBuffer[22].z);
	float Local1025 = (Local1016 * Local1024);
	float Local1026 = (Material_PreshaderBuffer[18].w * Local1025);
	float Local1027 = (Material_PreshaderBuffer[67].z / Local1026);
	float Local1028 = (Local1027 * Local1024);
	float Local1029 = (Local1023 * Local1028);
	float Local1030 = (Local1022 * Local726.g);
	float Local1031 = (Local1030 * Local1028);
	float Local1032 = LWCSin(Local1021);
	float Local1033 = (Local1032 * Local1024);
	float3 Local1034 = (float3(float2(Local1010,Local1012),Local1014) + float3(float2(Local1029,Local1031),Local1033));
	float Local1035 = (Local1015 * Material_PreshaderBuffer[20].w);
	float Local1036 = (2.00000000 / Local1035);
	FLWCScalar Local1037 = LWCMultiply(  Local751 , LWCPromote(Local1036));
	float Local1038 = (Local1036 * Material_PreshaderBuffer[77].x);
	float Local1039 = (Local1038 * Local675);
	FLWCScalar Local1040 = LWCAdd(  Local1037 , LWCPromote(Local1039));
	FLWCScalar Local1041 = LWCMultiply(Local1040, LWCPromote(6.28318548));
	float Local1042 = LWCCos(Local1041);
	float Local1043 = (Local1042 * Local750.r);
	float Local1044 = (Local1024 * Material_PreshaderBuffer[22].z);
	float Local1045 = (Local1036 * Local1044);
	float Local1046 = (Material_PreshaderBuffer[18].w * Local1045);
	float Local1047 = (Material_PreshaderBuffer[68].x / Local1046);
	float Local1048 = (Local1047 * Local1044);
	float Local1049 = (Local1043 * Local1048);
	float Local1050 = (Local1042 * Local750.g);
	float Local1051 = (Local1050 * Local1048);
	float Local1052 = LWCSin(Local1041);
	float Local1053 = (Local1052 * Local1044);
	float3 Local1054 = (Local1034 + float3(float2(Local1049,Local1051),Local1053));
	float Local1055 = (Local1035 * Material_PreshaderBuffer[20].w);
	float Local1056 = (2.00000000 / Local1055);
	FLWCScalar Local1057 = LWCMultiply(  Local775 , LWCPromote(Local1056));
	float Local1058 = (Local1056 * Material_PreshaderBuffer[77].y);
	float Local1059 = (Local1058 * Local675);
	FLWCScalar Local1060 = LWCAdd(  Local1057 , LWCPromote(Local1059));
	FLWCScalar Local1061 = LWCMultiply(Local1060, LWCPromote(6.28318548));
	float Local1062 = LWCCos(Local1061);
	float Local1063 = (Local1062 * Local774.r);
	float Local1064 = (Local1044 * Material_PreshaderBuffer[22].z);
	float Local1065 = (Local1056 * Local1064);
	float Local1066 = (Material_PreshaderBuffer[18].w * Local1065);
	float Local1067 = (Material_PreshaderBuffer[68].z / Local1066);
	float Local1068 = (Local1067 * Local1064);
	float Local1069 = (Local1063 * Local1068);
	float Local1070 = (Local1062 * Local774.g);
	float Local1071 = (Local1070 * Local1068);
	float Local1072 = LWCSin(Local1061);
	float Local1073 = (Local1072 * Local1064);
	float3 Local1074 = (Local1054 + float3(float2(Local1069,Local1071),Local1073));
	float Local1075 = (Local995 * Material_PreshaderBuffer[28].w);
	float Local1076 = (Material_PreshaderBuffer[72].x * Local1075);
	float Local1077 = (2.00000000 / Local1076);
	FLWCScalar Local1078 = LWCMultiply(  Local804 , LWCPromote(Local1077));
	float Local1079 = (Local1077 * Material_PreshaderBuffer[77].z);
	float Local1080 = (Local1079 * Local675);
	FLWCScalar Local1081 = LWCAdd(  Local1078 , LWCPromote(Local1080));
	FLWCScalar Local1082 = LWCMultiply(Local1081, LWCPromote(6.28318548));
	float Local1083 = LWCCos(Local1082);
	float Local1084 = (Local1083 * Local803.r);
	float Local1085 = (Local1005 * Material_PreshaderBuffer[30].w);
	float Local1086 = (Local1077 * Local1085);
	float Local1087 = (Material_PreshaderBuffer[18].w * Local1086);
	float Local1088 = (Material_PreshaderBuffer[67].x / Local1087);
	float Local1089 = (Local1088 * Local1085);
	float Local1090 = (Local1084 * Local1089);
	float Local1091 = (Local1083 * Local803.g);
	float Local1092 = (Local1091 * Local1089);
	float Local1093 = LWCSin(Local1082);
	float Local1094 = (Local1093 * Local1085);
	float Local1095 = (Local1076 * Material_PreshaderBuffer[20].w);
	float Local1096 = (2.00000000 / Local1095);
	FLWCScalar Local1097 = LWCMultiply(  Local828 , LWCPromote(Local1096));
	float Local1098 = (Local1096 * Material_PreshaderBuffer[77].w);
	float Local1099 = (Local1098 * Local675);
	FLWCScalar Local1100 = LWCAdd(  Local1097 , LWCPromote(Local1099));
	FLWCScalar Local1101 = LWCMultiply(Local1100, LWCPromote(6.28318548));
	float Local1102 = LWCCos(Local1101);
	float Local1103 = (Local1102 * Local827.r);
	float Local1104 = (Local1085 * Material_PreshaderBuffer[22].z);
	float Local1105 = (Local1096 * Local1104);
	float Local1106 = (Material_PreshaderBuffer[18].w * Local1105);
	float Local1107 = (Material_PreshaderBuffer[67].z / Local1106);
	float Local1108 = (Local1107 * Local1104);
	float Local1109 = (Local1103 * Local1108);
	float Local1110 = (Local1102 * Local827.g);
	float Local1111 = (Local1110 * Local1108);
	float Local1112 = LWCSin(Local1101);
	float Local1113 = (Local1112 * Local1104);
	float3 Local1114 = (float3(float2(Local1090,Local1092),Local1094) + float3(float2(Local1109,Local1111),Local1113));
	float Local1115 = (Local1095 * Material_PreshaderBuffer[20].w);
	float Local1116 = (2.00000000 / Local1115);
	FLWCScalar Local1117 = LWCMultiply(  Local852 , LWCPromote(Local1116));
	float Local1118 = (Local1116 * Material_PreshaderBuffer[78].x);
	float Local1119 = (Local1118 * Local675);
	FLWCScalar Local1120 = LWCAdd(  Local1117 , LWCPromote(Local1119));
	FLWCScalar Local1121 = LWCMultiply(Local1120, LWCPromote(6.28318548));
	float Local1122 = LWCCos(Local1121);
	float Local1123 = (Local1122 * Local851.r);
	float Local1124 = (Local1104 * Material_PreshaderBuffer[22].z);
	float Local1125 = (Local1116 * Local1124);
	float Local1126 = (Material_PreshaderBuffer[18].w * Local1125);
	float Local1127 = (Material_PreshaderBuffer[68].x / Local1126);
	float Local1128 = (Local1127 * Local1124);
	float Local1129 = (Local1123 * Local1128);
	float Local1130 = (Local1122 * Local851.g);
	float Local1131 = (Local1130 * Local1128);
	float Local1132 = LWCSin(Local1121);
	float Local1133 = (Local1132 * Local1124);
	float3 Local1134 = (Local1114 + float3(float2(Local1129,Local1131),Local1133));
	float Local1135 = (Local1115 * Material_PreshaderBuffer[20].w);
	float Local1136 = (2.00000000 / Local1135);
	FLWCScalar Local1137 = LWCMultiply(  Local876 , LWCPromote(Local1136));
	float Local1138 = (Local1136 * Material_PreshaderBuffer[78].y);
	float Local1139 = (Local1138 * Local675);
	FLWCScalar Local1140 = LWCAdd(  Local1137 , LWCPromote(Local1139));
	FLWCScalar Local1141 = LWCMultiply(Local1140, LWCPromote(6.28318548));
	float Local1142 = LWCCos(Local1141);
	float Local1143 = (Local1142 * Local875.r);
	float Local1144 = (Local1124 * Material_PreshaderBuffer[22].z);
	float Local1145 = (Local1136 * Local1144);
	float Local1146 = (Material_PreshaderBuffer[18].w * Local1145);
	float Local1147 = (Material_PreshaderBuffer[68].z / Local1146);
	float Local1148 = (Local1147 * Local1144);
	float Local1149 = (Local1143 * Local1148);
	float Local1150 = (Local1142 * Local875.g);
	float Local1151 = (Local1150 * Local1148);
	float Local1152 = LWCSin(Local1141);
	float Local1153 = (Local1152 * Local1144);
	float3 Local1154 = (Local1134 + float3(float2(Local1149,Local1151),Local1153));
	float3 Local1155 = (Local1074 + Local1154);
	float Local1156 = (Material_PreshaderBuffer[76].y * Local1075);
	float Local1157 = (2.00000000 / Local1156);
	FLWCScalar Local1158 = LWCMultiply(  Local906 , LWCPromote(Local1157));
	float Local1159 = (Local1157 * Material_PreshaderBuffer[77].z);
	float Local1160 = (Local1159 * Local675);
	FLWCScalar Local1161 = LWCAdd(  Local1158 , LWCPromote(Local1160));
	FLWCScalar Local1162 = LWCMultiply(Local1161, LWCPromote(6.28318548));
	float Local1163 = LWCCos(Local1162);
	float Local1164 = (Local1163 * Local905.r);
	float Local1165 = (Local1157 * Local1085);
	float Local1166 = (Material_PreshaderBuffer[18].w * Local1165);
	float Local1167 = (Material_PreshaderBuffer[67].x / Local1166);
	float Local1168 = (Local1167 * Local1085);
	float Local1169 = (Local1164 * Local1168);
	float Local1170 = (Local1163 * Local905.g);
	float Local1171 = (Local1170 * Local1168);
	float Local1172 = LWCSin(Local1162);
	float Local1173 = (Local1172 * Local1085);
	float Local1174 = (Local1156 * Material_PreshaderBuffer[20].w);
	float Local1175 = (2.00000000 / Local1174);
	FLWCScalar Local1176 = LWCMultiply(  Local928 , LWCPromote(Local1175));
	float Local1177 = (Local1175 * Material_PreshaderBuffer[77].w);
	float Local1178 = (Local1177 * Local675);
	FLWCScalar Local1179 = LWCAdd(  Local1176 , LWCPromote(Local1178));
	FLWCScalar Local1180 = LWCMultiply(Local1179, LWCPromote(6.28318548));
	float Local1181 = LWCCos(Local1180);
	float Local1182 = (Local1181 * Local927.r);
	float Local1183 = (Local1175 * Local1104);
	float Local1184 = (Material_PreshaderBuffer[18].w * Local1183);
	float Local1185 = (Material_PreshaderBuffer[67].z / Local1184);
	float Local1186 = (Local1185 * Local1104);
	float Local1187 = (Local1182 * Local1186);
	float Local1188 = (Local1181 * Local927.g);
	float Local1189 = (Local1188 * Local1186);
	float Local1190 = LWCSin(Local1180);
	float Local1191 = (Local1190 * Local1104);
	float3 Local1192 = (float3(float2(Local1169,Local1171),Local1173) + float3(float2(Local1187,Local1189),Local1191));
	float Local1193 = (Local1174 * Material_PreshaderBuffer[20].w);
	float Local1194 = (2.00000000 / Local1193);
	FLWCScalar Local1195 = LWCMultiply(  Local951 , LWCPromote(Local1194));
	float Local1196 = (Local1194 * Material_PreshaderBuffer[78].x);
	float Local1197 = (Local1196 * Local675);
	FLWCScalar Local1198 = LWCAdd(  Local1195 , LWCPromote(Local1197));
	FLWCScalar Local1199 = LWCMultiply(Local1198, LWCPromote(6.28318548));
	float Local1200 = LWCCos(Local1199);
	float Local1201 = (Local1200 * Local950.r);
	float Local1202 = (Local1194 * Local1124);
	float Local1203 = (Material_PreshaderBuffer[18].w * Local1202);
	float Local1204 = (Material_PreshaderBuffer[68].x / Local1203);
	float Local1205 = (Local1204 * Local1124);
	float Local1206 = (Local1201 * Local1205);
	float Local1207 = (Local1200 * Local950.g);
	float Local1208 = (Local1207 * Local1205);
	float Local1209 = LWCSin(Local1199);
	float Local1210 = (Local1209 * Local1124);
	float3 Local1211 = (Local1192 + float3(float2(Local1206,Local1208),Local1210));
	float Local1212 = (Local1193 * Material_PreshaderBuffer[20].w);
	float Local1213 = (2.00000000 / Local1212);
	FLWCScalar Local1214 = LWCMultiply(  Local974 , LWCPromote(Local1213));
	float Local1215 = (Local1213 * Material_PreshaderBuffer[78].y);
	float Local1216 = (Local1215 * Local675);
	FLWCScalar Local1217 = LWCAdd(  Local1214 , LWCPromote(Local1216));
	FLWCScalar Local1218 = LWCMultiply(Local1217, LWCPromote(6.28318548));
	float Local1219 = LWCCos(Local1218);
	float Local1220 = (Local1219 * Local973.r);
	float Local1221 = (Local1213 * Local1144);
	float Local1222 = (Material_PreshaderBuffer[18].w * Local1221);
	float Local1223 = (Material_PreshaderBuffer[68].z / Local1222);
	float Local1224 = (Local1223 * Local1144);
	float Local1225 = (Local1220 * Local1224);
	float Local1226 = (Local1219 * Local973.g);
	float Local1227 = (Local1226 * Local1224);
	float Local1228 = LWCSin(Local1218);
	float Local1229 = (Local1228 * Local1144);
	float3 Local1230 = (Local1211 + float3(float2(Local1225,Local1227),Local1229));
	float3 Local1231 = (Local1155 + Local1230);
	float Local1232 = (Local653 * 4.00000000);
	float Local1233 = (Material_PreshaderBuffer[62].z * Local1232);
	float Local1234 = (2.00000000 / Local1233);
	FLWCScalar Local1235 = LWCMultiply(  Local652 , LWCPromote(Local1234));
	float Local1236 = (Local1234 * Material_PreshaderBuffer[78].z);
	float Local1237 = (Local1236 * Local675);
	FLWCScalar Local1238 = LWCAdd(  Local1235 , LWCPromote(Local1237));
	FLWCScalar Local1239 = LWCMultiply(Local1238, LWCPromote(6.28318548));
	float Local1240 = LWCCos(Local1239);
	float Local1241 = (Local1240 * Local651.r);
	float Local1242 = (Local1234 * Local1005);
	float Local1243 = (Material_PreshaderBuffer[18].w * Local1242);
	float Local1244 = (Material_PreshaderBuffer[67].x / Local1243);
	float Local1245 = (Local1244 * Local1005);
	float Local1246 = (Local1241 * Local1245);
	float Local1247 = (Local1240 * Local651.g);
	float Local1248 = (Local1247 * Local1245);
	float Local1249 = LWCSin(Local1239);
	float Local1250 = (Local1249 * Local1005);
	float Local1251 = (Local1233 * Material_PreshaderBuffer[20].w);
	float Local1252 = (2.00000000 / Local1251);
	FLWCScalar Local1253 = LWCMultiply(  Local727 , LWCPromote(Local1252));
	float Local1254 = (Local1252 * Material_PreshaderBuffer[78].w);
	float Local1255 = (Local1254 * Local675);
	FLWCScalar Local1256 = LWCAdd(  Local1253 , LWCPromote(Local1255));
	FLWCScalar Local1257 = LWCMultiply(Local1256, LWCPromote(6.28318548));
	float Local1258 = LWCCos(Local1257);
	float Local1259 = (Local1258 * Local726.r);
	float Local1260 = (Local1252 * Local1024);
	float Local1261 = (Material_PreshaderBuffer[18].w * Local1260);
	float Local1262 = (Material_PreshaderBuffer[67].z / Local1261);
	float Local1263 = (Local1262 * Local1024);
	float Local1264 = (Local1259 * Local1263);
	float Local1265 = (Local1258 * Local726.g);
	float Local1266 = (Local1265 * Local1263);
	float Local1267 = LWCSin(Local1257);
	float Local1268 = (Local1267 * Local1024);
	float3 Local1269 = (float3(float2(Local1246,Local1248),Local1250) + float3(float2(Local1264,Local1266),Local1268));
	float Local1270 = (Local1251 * Material_PreshaderBuffer[20].w);
	float Local1271 = (2.00000000 / Local1270);
	FLWCScalar Local1272 = LWCMultiply(  Local751 , LWCPromote(Local1271));
	float Local1273 = (Local1271 * Material_PreshaderBuffer[79].x);
	float Local1274 = (Local1273 * Local675);
	FLWCScalar Local1275 = LWCAdd(  Local1272 , LWCPromote(Local1274));
	FLWCScalar Local1276 = LWCMultiply(Local1275, LWCPromote(6.28318548));
	float Local1277 = LWCCos(Local1276);
	float Local1278 = (Local1277 * Local750.r);
	float Local1279 = (Local1271 * Local1044);
	float Local1280 = (Material_PreshaderBuffer[18].w * Local1279);
	float Local1281 = (Material_PreshaderBuffer[68].x / Local1280);
	float Local1282 = (Local1281 * Local1044);
	float Local1283 = (Local1278 * Local1282);
	float Local1284 = (Local1277 * Local750.g);
	float Local1285 = (Local1284 * Local1282);
	float Local1286 = LWCSin(Local1276);
	float Local1287 = (Local1286 * Local1044);
	float3 Local1288 = (Local1269 + float3(float2(Local1283,Local1285),Local1287));
	float Local1289 = (Local1270 * Material_PreshaderBuffer[20].w);
	float Local1290 = (2.00000000 / Local1289);
	FLWCScalar Local1291 = LWCMultiply(  Local775 , LWCPromote(Local1290));
	float Local1292 = (Local1290 * Material_PreshaderBuffer[79].y);
	float Local1293 = (Local1292 * Local675);
	FLWCScalar Local1294 = LWCAdd(  Local1291 , LWCPromote(Local1293));
	FLWCScalar Local1295 = LWCMultiply(Local1294, LWCPromote(6.28318548));
	float Local1296 = LWCCos(Local1295);
	float Local1297 = (Local1296 * Local774.r);
	float Local1298 = (Local1290 * Local1064);
	float Local1299 = (Material_PreshaderBuffer[18].w * Local1298);
	float Local1300 = (Material_PreshaderBuffer[68].z / Local1299);
	float Local1301 = (Local1300 * Local1064);
	float Local1302 = (Local1297 * Local1301);
	float Local1303 = (Local1296 * Local774.g);
	float Local1304 = (Local1303 * Local1301);
	float Local1305 = LWCSin(Local1295);
	float Local1306 = (Local1305 * Local1064);
	float3 Local1307 = (Local1288 + float3(float2(Local1302,Local1304),Local1306));
	float Local1308 = (Local1232 * Material_PreshaderBuffer[28].w);
	float Local1309 = (Material_PreshaderBuffer[72].x * Local1308);
	float Local1310 = (2.00000000 / Local1309);
	FLWCScalar Local1311 = LWCMultiply(  Local804 , LWCPromote(Local1310));
	float Local1312 = (Local1310 * Material_PreshaderBuffer[79].z);
	float Local1313 = (Local1312 * Local675);
	FLWCScalar Local1314 = LWCAdd(  Local1311 , LWCPromote(Local1313));
	FLWCScalar Local1315 = LWCMultiply(Local1314, LWCPromote(6.28318548));
	float Local1316 = LWCCos(Local1315);
	float Local1317 = (Local1316 * Local803.r);
	float Local1318 = (Local1310 * Local1085);
	float Local1319 = (Material_PreshaderBuffer[18].w * Local1318);
	float Local1320 = (Material_PreshaderBuffer[67].x / Local1319);
	float Local1321 = (Local1320 * Local1085);
	float Local1322 = (Local1317 * Local1321);
	float Local1323 = (Local1316 * Local803.g);
	float Local1324 = (Local1323 * Local1321);
	float Local1325 = LWCSin(Local1315);
	float Local1326 = (Local1325 * Local1085);
	float Local1327 = (Local1309 * Material_PreshaderBuffer[20].w);
	float Local1328 = (2.00000000 / Local1327);
	FLWCScalar Local1329 = LWCMultiply(  Local828 , LWCPromote(Local1328));
	float Local1330 = (Local1328 * Material_PreshaderBuffer[79].w);
	float Local1331 = (Local1330 * Local675);
	FLWCScalar Local1332 = LWCAdd(  Local1329 , LWCPromote(Local1331));
	FLWCScalar Local1333 = LWCMultiply(Local1332, LWCPromote(6.28318548));
	float Local1334 = LWCCos(Local1333);
	float Local1335 = (Local1334 * Local827.r);
	float Local1336 = (Local1328 * Local1104);
	float Local1337 = (Material_PreshaderBuffer[18].w * Local1336);
	float Local1338 = (Material_PreshaderBuffer[67].z / Local1337);
	float Local1339 = (Local1338 * Local1104);
	float Local1340 = (Local1335 * Local1339);
	float Local1341 = (Local1334 * Local827.g);
	float Local1342 = (Local1341 * Local1339);
	float Local1343 = LWCSin(Local1333);
	float Local1344 = (Local1343 * Local1104);
	float3 Local1345 = (float3(float2(Local1322,Local1324),Local1326) + float3(float2(Local1340,Local1342),Local1344));
	float Local1346 = (Local1327 * Material_PreshaderBuffer[20].w);
	float Local1347 = (2.00000000 / Local1346);
	FLWCScalar Local1348 = LWCMultiply(  Local852 , LWCPromote(Local1347));
	float Local1349 = (Local1347 * Material_PreshaderBuffer[80].x);
	float Local1350 = (Local1349 * Local675);
	FLWCScalar Local1351 = LWCAdd(  Local1348 , LWCPromote(Local1350));
	FLWCScalar Local1352 = LWCMultiply(Local1351, LWCPromote(6.28318548));
	float Local1353 = LWCCos(Local1352);
	float Local1354 = (Local1353 * Local851.r);
	float Local1355 = (Local1347 * Local1124);
	float Local1356 = (Material_PreshaderBuffer[18].w * Local1355);
	float Local1357 = (Material_PreshaderBuffer[68].x / Local1356);
	float Local1358 = (Local1357 * Local1124);
	float Local1359 = (Local1354 * Local1358);
	float Local1360 = (Local1353 * Local851.g);
	float Local1361 = (Local1360 * Local1358);
	float Local1362 = LWCSin(Local1352);
	float Local1363 = (Local1362 * Local1124);
	float3 Local1364 = (Local1345 + float3(float2(Local1359,Local1361),Local1363));
	float Local1365 = (Local1346 * Material_PreshaderBuffer[20].w);
	float Local1366 = (2.00000000 / Local1365);
	FLWCScalar Local1367 = LWCMultiply(  Local876 , LWCPromote(Local1366));
	float Local1368 = (Local1366 * Material_PreshaderBuffer[80].y);
	float Local1369 = (Local1368 * Local675);
	FLWCScalar Local1370 = LWCAdd(  Local1367 , LWCPromote(Local1369));
	FLWCScalar Local1371 = LWCMultiply(Local1370, LWCPromote(6.28318548));
	float Local1372 = LWCCos(Local1371);
	float Local1373 = (Local1372 * Local875.r);
	float Local1374 = (Local1366 * Local1144);
	float Local1375 = (Material_PreshaderBuffer[18].w * Local1374);
	float Local1376 = (Material_PreshaderBuffer[68].z / Local1375);
	float Local1377 = (Local1376 * Local1144);
	float Local1378 = (Local1373 * Local1377);
	float Local1379 = (Local1372 * Local875.g);
	float Local1380 = (Local1379 * Local1377);
	float Local1381 = LWCSin(Local1371);
	float Local1382 = (Local1381 * Local1144);
	float3 Local1383 = (Local1364 + float3(float2(Local1378,Local1380),Local1382));
	float3 Local1384 = (Local1307 + Local1383);
	float Local1385 = (Material_PreshaderBuffer[76].y * Local1308);
	float Local1386 = (2.00000000 / Local1385);
	FLWCScalar Local1387 = LWCMultiply(  Local906 , LWCPromote(Local1386));
	float Local1388 = (Local1386 * Material_PreshaderBuffer[79].z);
	float Local1389 = (Local1388 * Local675);
	FLWCScalar Local1390 = LWCAdd(  Local1387 , LWCPromote(Local1389));
	FLWCScalar Local1391 = LWCMultiply(Local1390, LWCPromote(6.28318548));
	float Local1392 = LWCCos(Local1391);
	float Local1393 = (Local1392 * Local905.r);
	float Local1394 = (Local1386 * Local1085);
	float Local1395 = (Material_PreshaderBuffer[18].w * Local1394);
	float Local1396 = (Material_PreshaderBuffer[67].x / Local1395);
	float Local1397 = (Local1396 * Local1085);
	float Local1398 = (Local1393 * Local1397);
	float Local1399 = (Local1392 * Local905.g);
	float Local1400 = (Local1399 * Local1397);
	float Local1401 = LWCSin(Local1391);
	float Local1402 = (Local1401 * Local1085);
	float Local1403 = (Local1385 * Material_PreshaderBuffer[20].w);
	float Local1404 = (2.00000000 / Local1403);
	FLWCScalar Local1405 = LWCMultiply(  Local928 , LWCPromote(Local1404));
	float Local1406 = (Local1404 * Material_PreshaderBuffer[79].w);
	float Local1407 = (Local1406 * Local675);
	FLWCScalar Local1408 = LWCAdd(  Local1405 , LWCPromote(Local1407));
	FLWCScalar Local1409 = LWCMultiply(Local1408, LWCPromote(6.28318548));
	float Local1410 = LWCCos(Local1409);
	float Local1411 = (Local1410 * Local927.r);
	float Local1412 = (Local1404 * Local1104);
	float Local1413 = (Material_PreshaderBuffer[18].w * Local1412);
	float Local1414 = (Material_PreshaderBuffer[67].z / Local1413);
	float Local1415 = (Local1414 * Local1104);
	float Local1416 = (Local1411 * Local1415);
	float Local1417 = (Local1410 * Local927.g);
	float Local1418 = (Local1417 * Local1415);
	float Local1419 = LWCSin(Local1409);
	float Local1420 = (Local1419 * Local1104);
	float3 Local1421 = (float3(float2(Local1398,Local1400),Local1402) + float3(float2(Local1416,Local1418),Local1420));
	float Local1422 = (Local1403 * Material_PreshaderBuffer[20].w);
	float Local1423 = (2.00000000 / Local1422);
	FLWCScalar Local1424 = LWCMultiply(  Local951 , LWCPromote(Local1423));
	float Local1425 = (Local1423 * Material_PreshaderBuffer[80].x);
	float Local1426 = (Local1425 * Local675);
	FLWCScalar Local1427 = LWCAdd(  Local1424 , LWCPromote(Local1426));
	FLWCScalar Local1428 = LWCMultiply(Local1427, LWCPromote(6.28318548));
	float Local1429 = LWCCos(Local1428);
	float Local1430 = (Local1429 * Local950.r);
	float Local1431 = (Local1423 * Local1124);
	float Local1432 = (Material_PreshaderBuffer[18].w * Local1431);
	float Local1433 = (Material_PreshaderBuffer[68].x / Local1432);
	float Local1434 = (Local1433 * Local1124);
	float Local1435 = (Local1430 * Local1434);
	float Local1436 = (Local1429 * Local950.g);
	float Local1437 = (Local1436 * Local1434);
	float Local1438 = LWCSin(Local1428);
	float Local1439 = (Local1438 * Local1124);
	float3 Local1440 = (Local1421 + float3(float2(Local1435,Local1437),Local1439));
	float Local1441 = (Local1422 * Material_PreshaderBuffer[20].w);
	float Local1442 = (2.00000000 / Local1441);
	FLWCScalar Local1443 = LWCMultiply(  Local974 , LWCPromote(Local1442));
	float Local1444 = (Local1442 * Material_PreshaderBuffer[80].y);
	float Local1445 = (Local1444 * Local675);
	FLWCScalar Local1446 = LWCAdd(  Local1443 , LWCPromote(Local1445));
	FLWCScalar Local1447 = LWCMultiply(Local1446, LWCPromote(6.28318548));
	float Local1448 = LWCCos(Local1447);
	float Local1449 = (Local1448 * Local973.r);
	float Local1450 = (Local1442 * Local1144);
	float Local1451 = (Material_PreshaderBuffer[18].w * Local1450);
	float Local1452 = (Material_PreshaderBuffer[68].z / Local1451);
	float Local1453 = (Local1452 * Local1144);
	float Local1454 = (Local1449 * Local1453);
	float Local1455 = (Local1448 * Local973.g);
	float Local1456 = (Local1455 * Local1453);
	float Local1457 = LWCSin(Local1447);
	float Local1458 = (Local1457 * Local1144);
	float3 Local1459 = (Local1440 + float3(float2(Local1454,Local1456),Local1458));
	float3 Local1460 = (Local1384 + Local1459);
	float Local1461 = (Local653 * 0.75000000);
	float Local1462 = (Material_PreshaderBuffer[62].z * Local1461);
	float Local1463 = (2.00000000 / Local1462);
	FLWCScalar Local1464 = LWCMultiply(  Local652 , LWCPromote(Local1463));
	float Local1465 = (Local1463 * Material_PreshaderBuffer[76].z);
	float Local1466 = (Local1465 * Local675);
	FLWCScalar Local1467 = LWCAdd(  Local1464 , LWCPromote(Local1466));
	FLWCScalar Local1468 = LWCMultiply(Local1467, LWCPromote(6.28318548));
	float Local1469 = LWCCos(Local1468);
	float Local1470 = (Local1469 * Local651.r);
	float Local1471 = (Local714 * 0.50000000);
	float Local1472 = (Local1463 * Local1471);
	float Local1473 = (Material_PreshaderBuffer[18].w * Local1472);
	float Local1474 = (Material_PreshaderBuffer[67].x / Local1473);
	float Local1475 = (Local1474 * Local1471);
	float Local1476 = (Local1470 * Local1475);
	float Local1477 = (Local1469 * Local651.g);
	float Local1478 = (Local1477 * Local1475);
	float Local1479 = LWCSin(Local1468);
	float Local1480 = (Local1479 * Local1471);
	float Local1481 = (Local1462 * Material_PreshaderBuffer[20].w);
	float Local1482 = (2.00000000 / Local1481);
	FLWCScalar Local1483 = LWCMultiply(  Local727 , LWCPromote(Local1482));
	float Local1484 = (Local1482 * Material_PreshaderBuffer[76].w);
	float Local1485 = (Local1484 * Local675);
	FLWCScalar Local1486 = LWCAdd(  Local1483 , LWCPromote(Local1485));
	FLWCScalar Local1487 = LWCMultiply(Local1486, LWCPromote(6.28318548));
	float Local1488 = LWCCos(Local1487);
	float Local1489 = (Local1488 * Local726.r);
	float Local1490 = (Local1471 * Material_PreshaderBuffer[22].z);
	float Local1491 = (Local1482 * Local1490);
	float Local1492 = (Material_PreshaderBuffer[18].w * Local1491);
	float Local1493 = (Material_PreshaderBuffer[67].z / Local1492);
	float Local1494 = (Local1493 * Local1490);
	float Local1495 = (Local1489 * Local1494);
	float Local1496 = (Local1488 * Local726.g);
	float Local1497 = (Local1496 * Local1494);
	float Local1498 = LWCSin(Local1487);
	float Local1499 = (Local1498 * Local1490);
	float3 Local1500 = (float3(float2(Local1476,Local1478),Local1480) + float3(float2(Local1495,Local1497),Local1499));
	float Local1501 = (Local1481 * Material_PreshaderBuffer[20].w);
	float Local1502 = (2.00000000 / Local1501);
	FLWCScalar Local1503 = LWCMultiply(  Local751 , LWCPromote(Local1502));
	float Local1504 = (Local1502 * Material_PreshaderBuffer[77].x);
	float Local1505 = (Local1504 * Local675);
	FLWCScalar Local1506 = LWCAdd(  Local1503 , LWCPromote(Local1505));
	FLWCScalar Local1507 = LWCMultiply(Local1506, LWCPromote(6.28318548));
	float Local1508 = LWCCos(Local1507);
	float Local1509 = (Local1508 * Local750.r);
	float Local1510 = (Local1490 * Material_PreshaderBuffer[22].z);
	float Local1511 = (Local1502 * Local1510);
	float Local1512 = (Material_PreshaderBuffer[18].w * Local1511);
	float Local1513 = (Material_PreshaderBuffer[68].x / Local1512);
	float Local1514 = (Local1513 * Local1510);
	float Local1515 = (Local1509 * Local1514);
	float Local1516 = (Local1508 * Local750.g);
	float Local1517 = (Local1516 * Local1514);
	float Local1518 = LWCSin(Local1507);
	float Local1519 = (Local1518 * Local1510);
	float3 Local1520 = (Local1500 + float3(float2(Local1515,Local1517),Local1519));
	float Local1521 = (Local1501 * Material_PreshaderBuffer[20].w);
	float Local1522 = (2.00000000 / Local1521);
	FLWCScalar Local1523 = LWCMultiply(  Local775 , LWCPromote(Local1522));
	float Local1524 = (Local1522 * Material_PreshaderBuffer[77].y);
	float Local1525 = (Local1524 * Local675);
	FLWCScalar Local1526 = LWCAdd(  Local1523 , LWCPromote(Local1525));
	FLWCScalar Local1527 = LWCMultiply(Local1526, LWCPromote(6.28318548));
	float Local1528 = LWCCos(Local1527);
	float Local1529 = (Local1528 * Local774.r);
	float Local1530 = (Local1510 * Material_PreshaderBuffer[22].z);
	float Local1531 = (Local1522 * Local1530);
	float Local1532 = (Material_PreshaderBuffer[18].w * Local1531);
	float Local1533 = (Material_PreshaderBuffer[68].z / Local1532);
	float Local1534 = (Local1533 * Local1530);
	float Local1535 = (Local1529 * Local1534);
	float Local1536 = (Local1528 * Local774.g);
	float Local1537 = (Local1536 * Local1534);
	float Local1538 = LWCSin(Local1527);
	float Local1539 = (Local1538 * Local1530);
	float3 Local1540 = (Local1520 + float3(float2(Local1535,Local1537),Local1539));
	float Local1541 = (Local1461 * Material_PreshaderBuffer[28].w);
	float Local1542 = (Material_PreshaderBuffer[72].x * Local1541);
	float Local1543 = (2.00000000 / Local1542);
	FLWCScalar Local1544 = LWCMultiply(  Local804 , LWCPromote(Local1543));
	float Local1545 = (Local1543 * Material_PreshaderBuffer[77].z);
	float Local1546 = (Local1545 * Local675);
	FLWCScalar Local1547 = LWCAdd(  Local1544 , LWCPromote(Local1546));
	FLWCScalar Local1548 = LWCMultiply(Local1547, LWCPromote(6.28318548));
	float Local1549 = LWCCos(Local1548);
	float Local1550 = (Local1549 * Local803.r);
	float Local1551 = (Local1471 * Material_PreshaderBuffer[30].w);
	float Local1552 = (Local1543 * Local1551);
	float Local1553 = (Material_PreshaderBuffer[18].w * Local1552);
	float Local1554 = (Material_PreshaderBuffer[67].x / Local1553);
	float Local1555 = (Local1554 * Local1551);
	float Local1556 = (Local1550 * Local1555);
	float Local1557 = (Local1549 * Local803.g);
	float Local1558 = (Local1557 * Local1555);
	float Local1559 = LWCSin(Local1548);
	float Local1560 = (Local1559 * Local1551);
	float Local1561 = (Local1542 * Material_PreshaderBuffer[20].w);
	float Local1562 = (2.00000000 / Local1561);
	FLWCScalar Local1563 = LWCMultiply(  Local828 , LWCPromote(Local1562));
	float Local1564 = (Local1562 * Material_PreshaderBuffer[77].w);
	float Local1565 = (Local1564 * Local675);
	FLWCScalar Local1566 = LWCAdd(  Local1563 , LWCPromote(Local1565));
	FLWCScalar Local1567 = LWCMultiply(Local1566, LWCPromote(6.28318548));
	float Local1568 = LWCCos(Local1567);
	float Local1569 = (Local1568 * Local827.r);
	float Local1570 = (Local1551 * Material_PreshaderBuffer[22].z);
	float Local1571 = (Local1562 * Local1570);
	float Local1572 = (Material_PreshaderBuffer[18].w * Local1571);
	float Local1573 = (Material_PreshaderBuffer[67].z / Local1572);
	float Local1574 = (Local1573 * Local1570);
	float Local1575 = (Local1569 * Local1574);
	float Local1576 = (Local1568 * Local827.g);
	float Local1577 = (Local1576 * Local1574);
	float Local1578 = LWCSin(Local1567);
	float Local1579 = (Local1578 * Local1570);
	float3 Local1580 = (float3(float2(Local1556,Local1558),Local1560) + float3(float2(Local1575,Local1577),Local1579));
	float Local1581 = (Local1561 * Material_PreshaderBuffer[20].w);
	float Local1582 = (2.00000000 / Local1581);
	FLWCScalar Local1583 = LWCMultiply(  Local852 , LWCPromote(Local1582));
	float Local1584 = (Local1582 * Material_PreshaderBuffer[78].x);
	float Local1585 = (Local1584 * Local675);
	FLWCScalar Local1586 = LWCAdd(  Local1583 , LWCPromote(Local1585));
	FLWCScalar Local1587 = LWCMultiply(Local1586, LWCPromote(6.28318548));
	float Local1588 = LWCCos(Local1587);
	float Local1589 = (Local1588 * Local851.r);
	float Local1590 = (Local1570 * Material_PreshaderBuffer[22].z);
	float Local1591 = (Local1582 * Local1590);
	float Local1592 = (Material_PreshaderBuffer[18].w * Local1591);
	float Local1593 = (Material_PreshaderBuffer[68].x / Local1592);
	float Local1594 = (Local1593 * Local1590);
	float Local1595 = (Local1589 * Local1594);
	float Local1596 = (Local1588 * Local851.g);
	float Local1597 = (Local1596 * Local1594);
	float Local1598 = LWCSin(Local1587);
	float Local1599 = (Local1598 * Local1590);
	float3 Local1600 = (Local1580 + float3(float2(Local1595,Local1597),Local1599));
	float Local1601 = (Local1581 * Material_PreshaderBuffer[20].w);
	float Local1602 = (2.00000000 / Local1601);
	FLWCScalar Local1603 = LWCMultiply(  Local876 , LWCPromote(Local1602));
	float Local1604 = (Local1602 * Material_PreshaderBuffer[78].y);
	float Local1605 = (Local1604 * Local675);
	FLWCScalar Local1606 = LWCAdd(  Local1603 , LWCPromote(Local1605));
	FLWCScalar Local1607 = LWCMultiply(Local1606, LWCPromote(6.28318548));
	float Local1608 = LWCCos(Local1607);
	float Local1609 = (Local1608 * Local875.r);
	float Local1610 = (Local1590 * Material_PreshaderBuffer[22].z);
	float Local1611 = (Local1602 * Local1610);
	float Local1612 = (Material_PreshaderBuffer[18].w * Local1611);
	float Local1613 = (Material_PreshaderBuffer[68].z / Local1612);
	float Local1614 = (Local1613 * Local1610);
	float Local1615 = (Local1609 * Local1614);
	float Local1616 = (Local1608 * Local875.g);
	float Local1617 = (Local1616 * Local1614);
	float Local1618 = LWCSin(Local1607);
	float Local1619 = (Local1618 * Local1610);
	float3 Local1620 = (Local1600 + float3(float2(Local1615,Local1617),Local1619));
	float3 Local1621 = (Local1540 + Local1620);
	float Local1622 = (Material_PreshaderBuffer[76].y * Local1541);
	float Local1623 = (2.00000000 / Local1622);
	FLWCScalar Local1624 = LWCMultiply(  Local906 , LWCPromote(Local1623));
	float Local1625 = (Local1623 * Material_PreshaderBuffer[77].z);
	float Local1626 = (Local1625 * Local675);
	FLWCScalar Local1627 = LWCAdd(  Local1624 , LWCPromote(Local1626));
	FLWCScalar Local1628 = LWCMultiply(Local1627, LWCPromote(6.28318548));
	float Local1629 = LWCCos(Local1628);
	float Local1630 = (Local1629 * Local905.r);
	float Local1631 = (Local1623 * Local1551);
	float Local1632 = (Material_PreshaderBuffer[18].w * Local1631);
	float Local1633 = (Material_PreshaderBuffer[67].x / Local1632);
	float Local1634 = (Local1633 * Local1551);
	float Local1635 = (Local1630 * Local1634);
	float Local1636 = (Local1629 * Local905.g);
	float Local1637 = (Local1636 * Local1634);
	float Local1638 = LWCSin(Local1628);
	float Local1639 = (Local1638 * Local1551);
	float Local1640 = (Local1622 * Material_PreshaderBuffer[20].w);
	float Local1641 = (2.00000000 / Local1640);
	FLWCScalar Local1642 = LWCMultiply(  Local928 , LWCPromote(Local1641));
	float Local1643 = (Local1641 * Material_PreshaderBuffer[77].w);
	float Local1644 = (Local1643 * Local675);
	FLWCScalar Local1645 = LWCAdd(  Local1642 , LWCPromote(Local1644));
	FLWCScalar Local1646 = LWCMultiply(Local1645, LWCPromote(6.28318548));
	float Local1647 = LWCCos(Local1646);
	float Local1648 = (Local1647 * Local927.r);
	float Local1649 = (Local1641 * Local1570);
	float Local1650 = (Material_PreshaderBuffer[18].w * Local1649);
	float Local1651 = (Material_PreshaderBuffer[67].z / Local1650);
	float Local1652 = (Local1651 * Local1570);
	float Local1653 = (Local1648 * Local1652);
	float Local1654 = (Local1647 * Local927.g);
	float Local1655 = (Local1654 * Local1652);
	float Local1656 = LWCSin(Local1646);
	float Local1657 = (Local1656 * Local1570);
	float3 Local1658 = (float3(float2(Local1635,Local1637),Local1639) + float3(float2(Local1653,Local1655),Local1657));
	float Local1659 = (Local1640 * Material_PreshaderBuffer[20].w);
	float Local1660 = (2.00000000 / Local1659);
	FLWCScalar Local1661 = LWCMultiply(  Local951 , LWCPromote(Local1660));
	float Local1662 = (Local1660 * Material_PreshaderBuffer[78].x);
	float Local1663 = (Local1662 * Local675);
	FLWCScalar Local1664 = LWCAdd(  Local1661 , LWCPromote(Local1663));
	FLWCScalar Local1665 = LWCMultiply(Local1664, LWCPromote(6.28318548));
	float Local1666 = LWCCos(Local1665);
	float Local1667 = (Local1666 * Local950.r);
	float Local1668 = (Local1660 * Local1590);
	float Local1669 = (Material_PreshaderBuffer[18].w * Local1668);
	float Local1670 = (Material_PreshaderBuffer[68].x / Local1669);
	float Local1671 = (Local1670 * Local1590);
	float Local1672 = (Local1667 * Local1671);
	float Local1673 = (Local1666 * Local950.g);
	float Local1674 = (Local1673 * Local1671);
	float Local1675 = LWCSin(Local1665);
	float Local1676 = (Local1675 * Local1590);
	float3 Local1677 = (Local1658 + float3(float2(Local1672,Local1674),Local1676));
	float Local1678 = (Local1659 * Material_PreshaderBuffer[20].w);
	float Local1679 = (2.00000000 / Local1678);
	FLWCScalar Local1680 = LWCMultiply(  Local974 , LWCPromote(Local1679));
	float Local1681 = (Local1679 * Material_PreshaderBuffer[78].y);
	float Local1682 = (Local1681 * Local675);
	FLWCScalar Local1683 = LWCAdd(  Local1680 , LWCPromote(Local1682));
	FLWCScalar Local1684 = LWCMultiply(Local1683, LWCPromote(6.28318548));
	float Local1685 = LWCCos(Local1684);
	float Local1686 = (Local1685 * Local973.r);
	float Local1687 = (Local1679 * Local1610);
	float Local1688 = (Material_PreshaderBuffer[18].w * Local1687);
	float Local1689 = (Material_PreshaderBuffer[68].z / Local1688);
	float Local1690 = (Local1689 * Local1610);
	float Local1691 = (Local1686 * Local1690);
	float Local1692 = (Local1685 * Local973.g);
	float Local1693 = (Local1692 * Local1690);
	float Local1694 = LWCSin(Local1684);
	float Local1695 = (Local1694 * Local1610);
	float3 Local1696 = (Local1677 + float3(float2(Local1691,Local1693),Local1695));
	float3 Local1697 = (Local1621 + Local1696);
	float3 Local1698 = (Local1460 + Local1697);
	float3 Local1699 = (Local1231 + Local1698);
	float3 Local1700 = (Local994 + Local1699);
	float Local1701 =  select_internal( (abs(Material_PreshaderBuffer[80].z - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[80].z >= -1.00000000) , Material_PreshaderBuffer[80].z , Material_PreshaderBuffer[80].w ) , Material_PreshaderBuffer[80].z );
	float Local1702 =  select_internal( (abs(Local1701 - 1.00000000) > 0.00001000) ,  select_internal( (Local1701 >= 1.00000000) , Material_PreshaderBuffer[81].x , Material_PreshaderBuffer[80].z ) , Material_PreshaderBuffer[80].z );
	float Local1703 =  select_internal( (abs(Local1702 - 0.00000000) > 0.00001000) ,  select_internal( (Local1702 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local1704 = max(Local1703,-1.00000000);
	float Local1705 = min(Local1704,1.00000000);
	float3 Local1706 = (float3(float2(Local1705,Material_PreshaderBuffer[82].y),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local1707 = max(Local1706,((float3)-1.00000000));
	float3 Local1708 = min(Local1707,((float3)1.00000000));
	FLWCScalar Local1709 = LWCDot(LWCPromote(float2(Local1708.r,Local1708.g)),   Local85 );
	float Local1710 = (Material_PreshaderBuffer[83].z * Local653);
	float Local1711 = (2.00000000 / Local1710);
	FLWCScalar Local1712 = LWCMultiply(  Local1709 , LWCPromote(Local1711));
	float Local1713 = (Local1711 * Material_PreshaderBuffer[62].w);
	FLWCVector3 Local1714 = LWCAdd(  Local39 , LWCPromote(((float3)10000.00000000)));
	FLWCVector3 Local1715 = LWCMultiply(  Local1714 , LWCPromote(((float3)Local660)));
	FLWCVector3 Local1716 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[63].x)),   Local1715 );
	FLWCVector3 Local1717 = LWCMultiply(  Local1716 , LWCPromote(((float3)Material_PreshaderBuffer[63].y)));
	FLWCScalar Local1718 =  LWCGetComponent(   Local1717  , 0);
	FLWCScalar Local1719 =  LWCGetComponent(   Local1717  , 1);
	FLWCVector2 Local1720 = MakeLWCVector(LWCPromote(  Local1718 ),LWCPromote(  Local1719 ));
	FLWCScalar Local1721 =  LWCGetComponent(   Local1717  , 2);
	FLWCVector2 Local1722 = LWCAdd(LWCPromote(float2(Local665,Local665)), MakeLWCVector(LWCGetComponent(  Local1721 , 0),LWCGetComponent(  Local1721 , 0)));
	FLWCScalar Local1723 = MakeLWCVector(LWCGetComponent(  Local1722 , 0));
	FLWCVector3 Local1724 = MakeLWCVector(LWCPromote(  Local1720 ),LWCPromote(  Local1723 ));
	float3 Local1725 = LWCNormalizeTile(  Local1724 ).Offset;
	float Local1726 = MaterialExpressionNoise(Local1725,1.00000000,1.00000000,3.00000000,0.00000000,6.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local1727 = (Local1726 - 0.00000000);
	float Local1728 = (Local1727 + 0.00000000);
	float Local1729 = saturate(Local1728);
	float Local1730 = lerp(Local44,Local88,Local1729);
	float Local1731 = (Local1713 * Local1730);
	FLWCScalar Local1732 = LWCAdd(  Local1712 , LWCPromote(Local1731));
	FLWCScalar Local1733 = LWCMultiply(Local1732, LWCPromote(6.28318548));
	float Local1734 = LWCCos(Local1733);
	float Local1735 = (Local1734 * Local1708.r);
	FLWCVector3 Local1736 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[64].z)),   Local1715 );
	FLWCVector3 Local1737 = LWCMultiply(  Local1736 , LWCPromote(((float3)Material_PreshaderBuffer[64].w)));
	FLWCScalar Local1738 =  LWCGetComponent(   Local1737  , 0);
	FLWCScalar Local1739 =  LWCGetComponent(   Local1737  , 1);
	FLWCVector2 Local1740 = MakeLWCVector(LWCPromote(  Local1738 ),LWCPromote(  Local1739 ));
	FLWCScalar Local1741 =  LWCGetComponent(   Local1737  , 2);
	FLWCVector2 Local1742 = LWCAdd(LWCPromote(float2(Local690,Local690)), MakeLWCVector(LWCGetComponent(  Local1741 , 0),LWCGetComponent(  Local1741 , 0)));
	FLWCScalar Local1743 = MakeLWCVector(LWCGetComponent(  Local1742 , 0));
	FLWCVector3 Local1744 = MakeLWCVector(LWCPromote(  Local1740 ),LWCPromote(  Local1743 ));
	float3 Local1745 = LWCNormalizeTile(  Local1744 ).Offset;
	float Local1746 = MaterialExpressionNoise(Local1745,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	FLWCVector3 Local1747 = LWCMultiply(LWCPromote(((float3)Material_PreshaderBuffer[65].z)),   Local1715 );
	FLWCVector3 Local1748 = LWCMultiply(  Local1747 , LWCPromote(((float3)Material_PreshaderBuffer[65].w)));
	FLWCScalar Local1749 =  LWCGetComponent(   Local1748  , 0);
	FLWCScalar Local1750 =  LWCGetComponent(   Local1748  , 1);
	FLWCVector2 Local1751 = MakeLWCVector(LWCPromote(  Local1749 ),LWCPromote(  Local1750 ));
	FLWCScalar Local1752 =  LWCGetComponent(   Local1748  , 2);
	FLWCVector2 Local1753 = LWCAdd(LWCPromote(float2(Local703,Local703)), MakeLWCVector(LWCGetComponent(  Local1752 , 0),LWCGetComponent(  Local1752 , 0)));
	FLWCScalar Local1754 = MakeLWCVector(LWCGetComponent(  Local1753 , 0));
	FLWCVector3 Local1755 = MakeLWCVector(LWCPromote(  Local1751 ),LWCPromote(  Local1754 ));
	float3 Local1756 = LWCNormalizeTile(  Local1755 ).Offset;
	float Local1757 = MaterialExpressionNoise(Local1756,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local1758 = (Local1757 - 0.00000000);
	float Local1759 = (Local1758 * Material_PreshaderBuffer[66].w);
	float Local1760 = (Local1759 + Material_PreshaderBuffer[66].z);
	float Local1761 = (Local1746 * Local1760);
	float Local1762 = lerp(Local681,Local683,Local1761);
	float Local1763 = (Local1711 * Local1762);
	float Local1764 = (Material_PreshaderBuffer[18].w * Local1763);
	float Local1765 = (Material_PreshaderBuffer[67].x / Local1764);
	float Local1766 = (Local1765 * Local1762);
	float Local1767 = (Local1735 * Local1766);
	float Local1768 = (Local1734 * Local1708.g);
	float Local1769 = (Local1768 * Local1766);
	float Local1770 = LWCSin(Local1733);
	float Local1771 = (Local1770 * Local1762);
	float3 Local1772 = (float3(float2(Local1705,Material_PreshaderBuffer[82].y),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local1773 = max(Local1772,((float3)-1.00000000));
	float3 Local1774 = min(Local1773,((float3)1.00000000));
	FLWCScalar Local1775 = LWCDot(LWCPromote(float2(Local1774.r,Local1774.g)),   Local85 );
	float Local1776 = (Local1710 * Material_PreshaderBuffer[20].w);
	float Local1777 = (2.00000000 / Local1776);
	FLWCScalar Local1778 = LWCMultiply(  Local1775 , LWCPromote(Local1777));
	float Local1779 = (Local1777 * Material_PreshaderBuffer[67].y);
	float Local1780 = (Local1779 * Local1730);
	FLWCScalar Local1781 = LWCAdd(  Local1778 , LWCPromote(Local1780));
	FLWCScalar Local1782 = LWCMultiply(Local1781, LWCPromote(6.28318548));
	float Local1783 = LWCCos(Local1782);
	float Local1784 = (Local1783 * Local1774.r);
	float Local1785 = (Local1762 * Material_PreshaderBuffer[22].z);
	float Local1786 = (Local1777 * Local1785);
	float Local1787 = (Material_PreshaderBuffer[18].w * Local1786);
	float Local1788 = (Material_PreshaderBuffer[67].z / Local1787);
	float Local1789 = (Local1788 * Local1785);
	float Local1790 = (Local1784 * Local1789);
	float Local1791 = (Local1783 * Local1774.g);
	float Local1792 = (Local1791 * Local1789);
	float Local1793 = LWCSin(Local1782);
	float Local1794 = (Local1793 * Local1785);
	float3 Local1795 = (float3(float2(Local1767,Local1769),Local1771) + float3(float2(Local1790,Local1792),Local1794));
	float3 Local1796 = (float3(float2(Local1705,Material_PreshaderBuffer[82].y),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local1797 = max(Local1796,((float3)-1.00000000));
	float3 Local1798 = min(Local1797,((float3)1.00000000));
	FLWCScalar Local1799 = LWCDot(LWCPromote(float2(Local1798.r,Local1798.g)),   Local85 );
	float Local1800 = (Local1776 * Material_PreshaderBuffer[20].w);
	float Local1801 = (2.00000000 / Local1800);
	FLWCScalar Local1802 = LWCMultiply(  Local1799 , LWCPromote(Local1801));
	float Local1803 = (Local1801 * Material_PreshaderBuffer[67].w);
	float Local1804 = (Local1803 * Local1730);
	FLWCScalar Local1805 = LWCAdd(  Local1802 , LWCPromote(Local1804));
	FLWCScalar Local1806 = LWCMultiply(Local1805, LWCPromote(6.28318548));
	float Local1807 = LWCCos(Local1806);
	float Local1808 = (Local1807 * Local1798.r);
	float Local1809 = (Local1785 * Material_PreshaderBuffer[22].z);
	float Local1810 = (Local1801 * Local1809);
	float Local1811 = (Material_PreshaderBuffer[18].w * Local1810);
	float Local1812 = (Material_PreshaderBuffer[68].x / Local1811);
	float Local1813 = (Local1812 * Local1809);
	float Local1814 = (Local1808 * Local1813);
	float Local1815 = (Local1807 * Local1798.g);
	float Local1816 = (Local1815 * Local1813);
	float Local1817 = LWCSin(Local1806);
	float Local1818 = (Local1817 * Local1809);
	float3 Local1819 = (Local1795 + float3(float2(Local1814,Local1816),Local1818));
	float3 Local1820 = (float3(float2(Local1705,Material_PreshaderBuffer[82].y),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local1821 = max(Local1820,((float3)-1.00000000));
	float3 Local1822 = min(Local1821,((float3)1.00000000));
	FLWCScalar Local1823 = LWCDot(LWCPromote(float2(Local1822.r,Local1822.g)),   Local85 );
	float Local1824 = (Local1800 * Material_PreshaderBuffer[20].w);
	float Local1825 = (2.00000000 / Local1824);
	FLWCScalar Local1826 = LWCMultiply(  Local1823 , LWCPromote(Local1825));
	float Local1827 = (Local1825 * Material_PreshaderBuffer[68].y);
	float Local1828 = (Local1827 * Local1730);
	FLWCScalar Local1829 = LWCAdd(  Local1826 , LWCPromote(Local1828));
	FLWCScalar Local1830 = LWCMultiply(Local1829, LWCPromote(6.28318548));
	float Local1831 = LWCCos(Local1830);
	float Local1832 = (Local1831 * Local1822.r);
	float Local1833 = (Local1809 * Material_PreshaderBuffer[22].z);
	float Local1834 = (Local1825 * Local1833);
	float Local1835 = (Material_PreshaderBuffer[18].w * Local1834);
	float Local1836 = (Material_PreshaderBuffer[68].z / Local1835);
	float Local1837 = (Local1836 * Local1833);
	float Local1838 = (Local1832 * Local1837);
	float Local1839 = (Local1831 * Local1822.g);
	float Local1840 = (Local1839 * Local1837);
	float Local1841 = LWCSin(Local1830);
	float Local1842 = (Local1841 * Local1833);
	float3 Local1843 = (Local1819 + float3(float2(Local1838,Local1840),Local1842));
	float Local1844 =  select_internal( (abs(Material_PreshaderBuffer[83].w - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[83].w >= -1.00000000) , Material_PreshaderBuffer[83].w , Material_PreshaderBuffer[84].x ) , Material_PreshaderBuffer[83].w );
	float Local1845 =  select_internal( (abs(Local1844 - 1.00000000) > 0.00001000) ,  select_internal( (Local1844 >= 1.00000000) , Material_PreshaderBuffer[84].y , Material_PreshaderBuffer[83].w ) , Material_PreshaderBuffer[83].w );
	float Local1846 =  select_internal( (abs(Local1845 - 0.00000000) > 0.00001000) ,  select_internal( (Local1845 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local1847 = max(Local1846,-1.00000000);
	float Local1848 = min(Local1847,1.00000000);
	float3 Local1849 = (float3(float2(Local1848,Material_PreshaderBuffer[85].z),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local1850 = max(Local1849,((float3)-1.00000000));
	float3 Local1851 = min(Local1850,((float3)1.00000000));
	FLWCScalar Local1852 = LWCDot(LWCPromote(float2(Local1851.r,Local1851.g)),   Local85 );
	float Local1853 = (Material_PreshaderBuffer[86].w * Local805);
	float Local1854 = (2.00000000 / Local1853);
	FLWCScalar Local1855 = LWCMultiply(  Local1852 , LWCPromote(Local1854));
	float Local1856 = (Local1854 * Material_PreshaderBuffer[72].y);
	float Local1857 = (Local1856 * Local1730);
	FLWCScalar Local1858 = LWCAdd(  Local1855 , LWCPromote(Local1857));
	FLWCScalar Local1859 = LWCMultiply(Local1858, LWCPromote(6.28318548));
	float Local1860 = LWCCos(Local1859);
	float Local1861 = (Local1860 * Local1851.r);
	float Local1862 = (Local1762 * Material_PreshaderBuffer[30].w);
	float Local1863 = (Local1854 * Local1862);
	float Local1864 = (Material_PreshaderBuffer[18].w * Local1863);
	float Local1865 = (Material_PreshaderBuffer[67].x / Local1864);
	float Local1866 = (Local1865 * Local1862);
	float Local1867 = (Local1861 * Local1866);
	float Local1868 = (Local1860 * Local1851.g);
	float Local1869 = (Local1868 * Local1866);
	float Local1870 = LWCSin(Local1859);
	float Local1871 = (Local1870 * Local1862);
	float3 Local1872 = (float3(float2(Local1848,Material_PreshaderBuffer[85].z),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local1873 = max(Local1872,((float3)-1.00000000));
	float3 Local1874 = min(Local1873,((float3)1.00000000));
	FLWCScalar Local1875 = LWCDot(LWCPromote(float2(Local1874.r,Local1874.g)),   Local85 );
	float Local1876 = (Local1853 * Material_PreshaderBuffer[20].w);
	float Local1877 = (2.00000000 / Local1876);
	FLWCScalar Local1878 = LWCMultiply(  Local1875 , LWCPromote(Local1877));
	float Local1879 = (Local1877 * Material_PreshaderBuffer[72].z);
	float Local1880 = (Local1879 * Local1730);
	FLWCScalar Local1881 = LWCAdd(  Local1878 , LWCPromote(Local1880));
	FLWCScalar Local1882 = LWCMultiply(Local1881, LWCPromote(6.28318548));
	float Local1883 = LWCCos(Local1882);
	float Local1884 = (Local1883 * Local1874.r);
	float Local1885 = (Local1862 * Material_PreshaderBuffer[22].z);
	float Local1886 = (Local1877 * Local1885);
	float Local1887 = (Material_PreshaderBuffer[18].w * Local1886);
	float Local1888 = (Material_PreshaderBuffer[67].z / Local1887);
	float Local1889 = (Local1888 * Local1885);
	float Local1890 = (Local1884 * Local1889);
	float Local1891 = (Local1883 * Local1874.g);
	float Local1892 = (Local1891 * Local1889);
	float Local1893 = LWCSin(Local1882);
	float Local1894 = (Local1893 * Local1885);
	float3 Local1895 = (float3(float2(Local1867,Local1869),Local1871) + float3(float2(Local1890,Local1892),Local1894));
	float3 Local1896 = (float3(float2(Local1848,Material_PreshaderBuffer[85].z),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local1897 = max(Local1896,((float3)-1.00000000));
	float3 Local1898 = min(Local1897,((float3)1.00000000));
	FLWCScalar Local1899 = LWCDot(LWCPromote(float2(Local1898.r,Local1898.g)),   Local85 );
	float Local1900 = (Local1876 * Material_PreshaderBuffer[20].w);
	float Local1901 = (2.00000000 / Local1900);
	FLWCScalar Local1902 = LWCMultiply(  Local1899 , LWCPromote(Local1901));
	float Local1903 = (Local1901 * Material_PreshaderBuffer[72].w);
	float Local1904 = (Local1903 * Local1730);
	FLWCScalar Local1905 = LWCAdd(  Local1902 , LWCPromote(Local1904));
	FLWCScalar Local1906 = LWCMultiply(Local1905, LWCPromote(6.28318548));
	float Local1907 = LWCCos(Local1906);
	float Local1908 = (Local1907 * Local1898.r);
	float Local1909 = (Local1885 * Material_PreshaderBuffer[22].z);
	float Local1910 = (Local1901 * Local1909);
	float Local1911 = (Material_PreshaderBuffer[18].w * Local1910);
	float Local1912 = (Material_PreshaderBuffer[68].x / Local1911);
	float Local1913 = (Local1912 * Local1909);
	float Local1914 = (Local1908 * Local1913);
	float Local1915 = (Local1907 * Local1898.g);
	float Local1916 = (Local1915 * Local1913);
	float Local1917 = LWCSin(Local1906);
	float Local1918 = (Local1917 * Local1909);
	float3 Local1919 = (Local1895 + float3(float2(Local1914,Local1916),Local1918));
	float3 Local1920 = (float3(float2(Local1848,Material_PreshaderBuffer[85].z),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local1921 = max(Local1920,((float3)-1.00000000));
	float3 Local1922 = min(Local1921,((float3)1.00000000));
	FLWCScalar Local1923 = LWCDot(LWCPromote(float2(Local1922.r,Local1922.g)),   Local85 );
	float Local1924 = (Local1900 * Material_PreshaderBuffer[20].w);
	float Local1925 = (2.00000000 / Local1924);
	FLWCScalar Local1926 = LWCMultiply(  Local1923 , LWCPromote(Local1925));
	float Local1927 = (Local1925 * Material_PreshaderBuffer[73].x);
	float Local1928 = (Local1927 * Local1730);
	FLWCScalar Local1929 = LWCAdd(  Local1926 , LWCPromote(Local1928));
	FLWCScalar Local1930 = LWCMultiply(Local1929, LWCPromote(6.28318548));
	float Local1931 = LWCCos(Local1930);
	float Local1932 = (Local1931 * Local1922.r);
	float Local1933 = (Local1909 * Material_PreshaderBuffer[22].z);
	float Local1934 = (Local1925 * Local1933);
	float Local1935 = (Material_PreshaderBuffer[18].w * Local1934);
	float Local1936 = (Material_PreshaderBuffer[68].z / Local1935);
	float Local1937 = (Local1936 * Local1933);
	float Local1938 = (Local1932 * Local1937);
	float Local1939 = (Local1931 * Local1922.g);
	float Local1940 = (Local1939 * Local1937);
	float Local1941 = LWCSin(Local1930);
	float Local1942 = (Local1941 * Local1933);
	float3 Local1943 = (Local1919 + float3(float2(Local1938,Local1940),Local1942));
	float3 Local1944 = (Local1843 + Local1943);
	float Local1945 =  select_internal( (abs(Material_PreshaderBuffer[87].x - -1.00000000) > 0.00001000) ,  select_internal( (Material_PreshaderBuffer[87].x >= -1.00000000) , Material_PreshaderBuffer[87].x , Material_PreshaderBuffer[87].y ) , Material_PreshaderBuffer[87].x );
	float Local1946 =  select_internal( (abs(Local1945 - 1.00000000) > 0.00001000) ,  select_internal( (Local1945 >= 1.00000000) , Material_PreshaderBuffer[87].z , Material_PreshaderBuffer[87].x ) , Material_PreshaderBuffer[87].x );
	float Local1947 =  select_internal( (abs(Local1946 - 0.00000000) > 0.00001000) ,  select_internal( (Local1946 >= 0.00000000) , 1.00000000 , -1.00000000 ) , 1.00000000 );
	float Local1948 = max(Local1947,-1.00000000);
	float Local1949 = min(Local1948,1.00000000);
	float3 Local1950 = (float3(float2(Local1949,Material_PreshaderBuffer[88].w),0.00000000) + Material_PreshaderBuffer[11].xyz);
	float3 Local1951 = max(Local1950,((float3)-1.00000000));
	float3 Local1952 = min(Local1951,((float3)1.00000000));
	FLWCScalar Local1953 = LWCDot(LWCPromote(float2(Local1952.r,Local1952.g)),   Local85 );
	float Local1954 = (Material_PreshaderBuffer[90].x * Local805);
	float Local1955 = (2.00000000 / Local1954);
	FLWCScalar Local1956 = LWCMultiply(  Local1953 , LWCPromote(Local1955));
	float Local1957 = (Local1955 * Material_PreshaderBuffer[72].y);
	float Local1958 = (Local1957 * Local1730);
	FLWCScalar Local1959 = LWCAdd(  Local1956 , LWCPromote(Local1958));
	FLWCScalar Local1960 = LWCMultiply(Local1959, LWCPromote(6.28318548));
	float Local1961 = LWCCos(Local1960);
	float Local1962 = (Local1961 * Local1952.r);
	float Local1963 = (Local1955 * Local1862);
	float Local1964 = (Material_PreshaderBuffer[18].w * Local1963);
	float Local1965 = (Material_PreshaderBuffer[67].x / Local1964);
	float Local1966 = (Local1965 * Local1862);
	float Local1967 = (Local1962 * Local1966);
	float Local1968 = (Local1961 * Local1952.g);
	float Local1969 = (Local1968 * Local1966);
	float Local1970 = LWCSin(Local1960);
	float Local1971 = (Local1970 * Local1862);
	float3 Local1972 = (float3(float2(Local1949,Material_PreshaderBuffer[88].w),0.00000000) + Material_PreshaderBuffer[20].xyz);
	float3 Local1973 = max(Local1972,((float3)-1.00000000));
	float3 Local1974 = min(Local1973,((float3)1.00000000));
	FLWCScalar Local1975 = LWCDot(LWCPromote(float2(Local1974.r,Local1974.g)),   Local85 );
	float Local1976 = (Local1954 * Material_PreshaderBuffer[20].w);
	float Local1977 = (2.00000000 / Local1976);
	FLWCScalar Local1978 = LWCMultiply(  Local1975 , LWCPromote(Local1977));
	float Local1979 = (Local1977 * Material_PreshaderBuffer[72].z);
	float Local1980 = (Local1979 * Local1730);
	FLWCScalar Local1981 = LWCAdd(  Local1978 , LWCPromote(Local1980));
	FLWCScalar Local1982 = LWCMultiply(Local1981, LWCPromote(6.28318548));
	float Local1983 = LWCCos(Local1982);
	float Local1984 = (Local1983 * Local1974.r);
	float Local1985 = (Local1977 * Local1885);
	float Local1986 = (Material_PreshaderBuffer[18].w * Local1985);
	float Local1987 = (Material_PreshaderBuffer[67].z / Local1986);
	float Local1988 = (Local1987 * Local1885);
	float Local1989 = (Local1984 * Local1988);
	float Local1990 = (Local1983 * Local1974.g);
	float Local1991 = (Local1990 * Local1988);
	float Local1992 = LWCSin(Local1982);
	float Local1993 = (Local1992 * Local1885);
	float3 Local1994 = (float3(float2(Local1967,Local1969),Local1971) + float3(float2(Local1989,Local1991),Local1993));
	float3 Local1995 = (float3(float2(Local1949,Material_PreshaderBuffer[88].w),0.00000000) - Material_PreshaderBuffer[11].xyz);
	float3 Local1996 = max(Local1995,((float3)-1.00000000));
	float3 Local1997 = min(Local1996,((float3)1.00000000));
	FLWCScalar Local1998 = LWCDot(LWCPromote(float2(Local1997.r,Local1997.g)),   Local85 );
	float Local1999 = (Local1976 * Material_PreshaderBuffer[20].w);
	float Local2000 = (2.00000000 / Local1999);
	FLWCScalar Local2001 = LWCMultiply(  Local1998 , LWCPromote(Local2000));
	float Local2002 = (Local2000 * Material_PreshaderBuffer[72].w);
	float Local2003 = (Local2002 * Local1730);
	FLWCScalar Local2004 = LWCAdd(  Local2001 , LWCPromote(Local2003));
	FLWCScalar Local2005 = LWCMultiply(Local2004, LWCPromote(6.28318548));
	float Local2006 = LWCCos(Local2005);
	float Local2007 = (Local2006 * Local1997.r);
	float Local2008 = (Local2000 * Local1909);
	float Local2009 = (Material_PreshaderBuffer[18].w * Local2008);
	float Local2010 = (Material_PreshaderBuffer[68].x / Local2009);
	float Local2011 = (Local2010 * Local1909);
	float Local2012 = (Local2007 * Local2011);
	float Local2013 = (Local2006 * Local1997.g);
	float Local2014 = (Local2013 * Local2011);
	float Local2015 = LWCSin(Local2005);
	float Local2016 = (Local2015 * Local1909);
	float3 Local2017 = (Local1994 + float3(float2(Local2012,Local2014),Local2016));
	float3 Local2018 = (float3(float2(Local1949,Material_PreshaderBuffer[88].w),0.00000000) - Material_PreshaderBuffer[20].xyz);
	float3 Local2019 = max(Local2018,((float3)-1.00000000));
	float3 Local2020 = min(Local2019,((float3)1.00000000));
	FLWCScalar Local2021 = LWCDot(LWCPromote(float2(Local2020.r,Local2020.g)),   Local85 );
	float Local2022 = (Local1999 * Material_PreshaderBuffer[20].w);
	float Local2023 = (2.00000000 / Local2022);
	FLWCScalar Local2024 = LWCMultiply(  Local2021 , LWCPromote(Local2023));
	float Local2025 = (Local2023 * Material_PreshaderBuffer[73].x);
	float Local2026 = (Local2025 * Local1730);
	FLWCScalar Local2027 = LWCAdd(  Local2024 , LWCPromote(Local2026));
	FLWCScalar Local2028 = LWCMultiply(Local2027, LWCPromote(6.28318548));
	float Local2029 = LWCCos(Local2028);
	float Local2030 = (Local2029 * Local2020.r);
	float Local2031 = (Local2023 * Local1933);
	float Local2032 = (Material_PreshaderBuffer[18].w * Local2031);
	float Local2033 = (Material_PreshaderBuffer[68].z / Local2032);
	float Local2034 = (Local2033 * Local1933);
	float Local2035 = (Local2030 * Local2034);
	float Local2036 = (Local2029 * Local2020.g);
	float Local2037 = (Local2036 * Local2034);
	float Local2038 = LWCSin(Local2028);
	float Local2039 = (Local2038 * Local1933);
	float3 Local2040 = (Local2017 + float3(float2(Local2035,Local2037),Local2039));
	float3 Local2041 = (Local1944 + Local2040);
	float Local2042 = (Local653 * 8.00000000);
	float Local2043 = (Material_PreshaderBuffer[83].z * Local2042);
	float Local2044 = (2.00000000 / Local2043);
	FLWCScalar Local2045 = LWCMultiply(  Local1709 , LWCPromote(Local2044));
	float Local2046 = (Local2044 * Material_PreshaderBuffer[76].z);
	float Local2047 = (Local2046 * Local1730);
	FLWCScalar Local2048 = LWCAdd(  Local2045 , LWCPromote(Local2047));
	FLWCScalar Local2049 = LWCMultiply(Local2048, LWCPromote(6.28318548));
	float Local2050 = LWCCos(Local2049);
	float Local2051 = (Local2050 * Local1708.r);
	float Local2052 = (Local1762 * 8.00000000);
	float Local2053 = (Local2044 * Local2052);
	float Local2054 = (Material_PreshaderBuffer[18].w * Local2053);
	float Local2055 = (Material_PreshaderBuffer[67].x / Local2054);
	float Local2056 = (Local2055 * Local2052);
	float Local2057 = (Local2051 * Local2056);
	float Local2058 = (Local2050 * Local1708.g);
	float Local2059 = (Local2058 * Local2056);
	float Local2060 = LWCSin(Local2049);
	float Local2061 = (Local2060 * Local2052);
	float Local2062 = (Local2043 * Material_PreshaderBuffer[20].w);
	float Local2063 = (2.00000000 / Local2062);
	FLWCScalar Local2064 = LWCMultiply(  Local1775 , LWCPromote(Local2063));
	float Local2065 = (Local2063 * Material_PreshaderBuffer[76].w);
	float Local2066 = (Local2065 * Local1730);
	FLWCScalar Local2067 = LWCAdd(  Local2064 , LWCPromote(Local2066));
	FLWCScalar Local2068 = LWCMultiply(Local2067, LWCPromote(6.28318548));
	float Local2069 = LWCCos(Local2068);
	float Local2070 = (Local2069 * Local1774.r);
	float Local2071 = (Local2052 * Material_PreshaderBuffer[22].z);
	float Local2072 = (Local2063 * Local2071);
	float Local2073 = (Material_PreshaderBuffer[18].w * Local2072);
	float Local2074 = (Material_PreshaderBuffer[67].z / Local2073);
	float Local2075 = (Local2074 * Local2071);
	float Local2076 = (Local2070 * Local2075);
	float Local2077 = (Local2069 * Local1774.g);
	float Local2078 = (Local2077 * Local2075);
	float Local2079 = LWCSin(Local2068);
	float Local2080 = (Local2079 * Local2071);
	float3 Local2081 = (float3(float2(Local2057,Local2059),Local2061) + float3(float2(Local2076,Local2078),Local2080));
	float Local2082 = (Local2062 * Material_PreshaderBuffer[20].w);
	float Local2083 = (2.00000000 / Local2082);
	FLWCScalar Local2084 = LWCMultiply(  Local1799 , LWCPromote(Local2083));
	float Local2085 = (Local2083 * Material_PreshaderBuffer[77].x);
	float Local2086 = (Local2085 * Local1730);
	FLWCScalar Local2087 = LWCAdd(  Local2084 , LWCPromote(Local2086));
	FLWCScalar Local2088 = LWCMultiply(Local2087, LWCPromote(6.28318548));
	float Local2089 = LWCCos(Local2088);
	float Local2090 = (Local2089 * Local1798.r);
	float Local2091 = (Local2071 * Material_PreshaderBuffer[22].z);
	float Local2092 = (Local2083 * Local2091);
	float Local2093 = (Material_PreshaderBuffer[18].w * Local2092);
	float Local2094 = (Material_PreshaderBuffer[68].x / Local2093);
	float Local2095 = (Local2094 * Local2091);
	float Local2096 = (Local2090 * Local2095);
	float Local2097 = (Local2089 * Local1798.g);
	float Local2098 = (Local2097 * Local2095);
	float Local2099 = LWCSin(Local2088);
	float Local2100 = (Local2099 * Local2091);
	float3 Local2101 = (Local2081 + float3(float2(Local2096,Local2098),Local2100));
	float Local2102 = (Local2082 * Material_PreshaderBuffer[20].w);
	float Local2103 = (2.00000000 / Local2102);
	FLWCScalar Local2104 = LWCMultiply(  Local1823 , LWCPromote(Local2103));
	float Local2105 = (Local2103 * Material_PreshaderBuffer[77].y);
	float Local2106 = (Local2105 * Local1730);
	FLWCScalar Local2107 = LWCAdd(  Local2104 , LWCPromote(Local2106));
	FLWCScalar Local2108 = LWCMultiply(Local2107, LWCPromote(6.28318548));
	float Local2109 = LWCCos(Local2108);
	float Local2110 = (Local2109 * Local1822.r);
	float Local2111 = (Local2091 * Material_PreshaderBuffer[22].z);
	float Local2112 = (Local2103 * Local2111);
	float Local2113 = (Material_PreshaderBuffer[18].w * Local2112);
	float Local2114 = (Material_PreshaderBuffer[68].z / Local2113);
	float Local2115 = (Local2114 * Local2111);
	float Local2116 = (Local2110 * Local2115);
	float Local2117 = (Local2109 * Local1822.g);
	float Local2118 = (Local2117 * Local2115);
	float Local2119 = LWCSin(Local2108);
	float Local2120 = (Local2119 * Local2111);
	float3 Local2121 = (Local2101 + float3(float2(Local2116,Local2118),Local2120));
	float Local2122 = (Local2042 * Material_PreshaderBuffer[28].w);
	float Local2123 = (Material_PreshaderBuffer[86].w * Local2122);
	float Local2124 = (2.00000000 / Local2123);
	FLWCScalar Local2125 = LWCMultiply(  Local1852 , LWCPromote(Local2124));
	float Local2126 = (Local2124 * Material_PreshaderBuffer[77].z);
	float Local2127 = (Local2126 * Local1730);
	FLWCScalar Local2128 = LWCAdd(  Local2125 , LWCPromote(Local2127));
	FLWCScalar Local2129 = LWCMultiply(Local2128, LWCPromote(6.28318548));
	float Local2130 = LWCCos(Local2129);
	float Local2131 = (Local2130 * Local1851.r);
	float Local2132 = (Local2052 * Material_PreshaderBuffer[30].w);
	float Local2133 = (Local2124 * Local2132);
	float Local2134 = (Material_PreshaderBuffer[18].w * Local2133);
	float Local2135 = (Material_PreshaderBuffer[67].x / Local2134);
	float Local2136 = (Local2135 * Local2132);
	float Local2137 = (Local2131 * Local2136);
	float Local2138 = (Local2130 * Local1851.g);
	float Local2139 = (Local2138 * Local2136);
	float Local2140 = LWCSin(Local2129);
	float Local2141 = (Local2140 * Local2132);
	float Local2142 = (Local2123 * Material_PreshaderBuffer[20].w);
	float Local2143 = (2.00000000 / Local2142);
	FLWCScalar Local2144 = LWCMultiply(  Local1875 , LWCPromote(Local2143));
	float Local2145 = (Local2143 * Material_PreshaderBuffer[77].w);
	float Local2146 = (Local2145 * Local1730);
	FLWCScalar Local2147 = LWCAdd(  Local2144 , LWCPromote(Local2146));
	FLWCScalar Local2148 = LWCMultiply(Local2147, LWCPromote(6.28318548));
	float Local2149 = LWCCos(Local2148);
	float Local2150 = (Local2149 * Local1874.r);
	float Local2151 = (Local2132 * Material_PreshaderBuffer[22].z);
	float Local2152 = (Local2143 * Local2151);
	float Local2153 = (Material_PreshaderBuffer[18].w * Local2152);
	float Local2154 = (Material_PreshaderBuffer[67].z / Local2153);
	float Local2155 = (Local2154 * Local2151);
	float Local2156 = (Local2150 * Local2155);
	float Local2157 = (Local2149 * Local1874.g);
	float Local2158 = (Local2157 * Local2155);
	float Local2159 = LWCSin(Local2148);
	float Local2160 = (Local2159 * Local2151);
	float3 Local2161 = (float3(float2(Local2137,Local2139),Local2141) + float3(float2(Local2156,Local2158),Local2160));
	float Local2162 = (Local2142 * Material_PreshaderBuffer[20].w);
	float Local2163 = (2.00000000 / Local2162);
	FLWCScalar Local2164 = LWCMultiply(  Local1899 , LWCPromote(Local2163));
	float Local2165 = (Local2163 * Material_PreshaderBuffer[78].x);
	float Local2166 = (Local2165 * Local1730);
	FLWCScalar Local2167 = LWCAdd(  Local2164 , LWCPromote(Local2166));
	FLWCScalar Local2168 = LWCMultiply(Local2167, LWCPromote(6.28318548));
	float Local2169 = LWCCos(Local2168);
	float Local2170 = (Local2169 * Local1898.r);
	float Local2171 = (Local2151 * Material_PreshaderBuffer[22].z);
	float Local2172 = (Local2163 * Local2171);
	float Local2173 = (Material_PreshaderBuffer[18].w * Local2172);
	float Local2174 = (Material_PreshaderBuffer[68].x / Local2173);
	float Local2175 = (Local2174 * Local2171);
	float Local2176 = (Local2170 * Local2175);
	float Local2177 = (Local2169 * Local1898.g);
	float Local2178 = (Local2177 * Local2175);
	float Local2179 = LWCSin(Local2168);
	float Local2180 = (Local2179 * Local2171);
	float3 Local2181 = (Local2161 + float3(float2(Local2176,Local2178),Local2180));
	float Local2182 = (Local2162 * Material_PreshaderBuffer[20].w);
	float Local2183 = (2.00000000 / Local2182);
	FLWCScalar Local2184 = LWCMultiply(  Local1923 , LWCPromote(Local2183));
	float Local2185 = (Local2183 * Material_PreshaderBuffer[78].y);
	float Local2186 = (Local2185 * Local1730);
	FLWCScalar Local2187 = LWCAdd(  Local2184 , LWCPromote(Local2186));
	FLWCScalar Local2188 = LWCMultiply(Local2187, LWCPromote(6.28318548));
	float Local2189 = LWCCos(Local2188);
	float Local2190 = (Local2189 * Local1922.r);
	float Local2191 = (Local2171 * Material_PreshaderBuffer[22].z);
	float Local2192 = (Local2183 * Local2191);
	float Local2193 = (Material_PreshaderBuffer[18].w * Local2192);
	float Local2194 = (Material_PreshaderBuffer[68].z / Local2193);
	float Local2195 = (Local2194 * Local2191);
	float Local2196 = (Local2190 * Local2195);
	float Local2197 = (Local2189 * Local1922.g);
	float Local2198 = (Local2197 * Local2195);
	float Local2199 = LWCSin(Local2188);
	float Local2200 = (Local2199 * Local2191);
	float3 Local2201 = (Local2181 + float3(float2(Local2196,Local2198),Local2200));
	float3 Local2202 = (Local2121 + Local2201);
	float Local2203 = (Material_PreshaderBuffer[90].x * Local2122);
	float Local2204 = (2.00000000 / Local2203);
	FLWCScalar Local2205 = LWCMultiply(  Local1953 , LWCPromote(Local2204));
	float Local2206 = (Local2204 * Material_PreshaderBuffer[77].z);
	float Local2207 = (Local2206 * Local1730);
	FLWCScalar Local2208 = LWCAdd(  Local2205 , LWCPromote(Local2207));
	FLWCScalar Local2209 = LWCMultiply(Local2208, LWCPromote(6.28318548));
	float Local2210 = LWCCos(Local2209);
	float Local2211 = (Local2210 * Local1952.r);
	float Local2212 = (Local2204 * Local2132);
	float Local2213 = (Material_PreshaderBuffer[18].w * Local2212);
	float Local2214 = (Material_PreshaderBuffer[67].x / Local2213);
	float Local2215 = (Local2214 * Local2132);
	float Local2216 = (Local2211 * Local2215);
	float Local2217 = (Local2210 * Local1952.g);
	float Local2218 = (Local2217 * Local2215);
	float Local2219 = LWCSin(Local2209);
	float Local2220 = (Local2219 * Local2132);
	float Local2221 = (Local2203 * Material_PreshaderBuffer[20].w);
	float Local2222 = (2.00000000 / Local2221);
	FLWCScalar Local2223 = LWCMultiply(  Local1975 , LWCPromote(Local2222));
	float Local2224 = (Local2222 * Material_PreshaderBuffer[77].w);
	float Local2225 = (Local2224 * Local1730);
	FLWCScalar Local2226 = LWCAdd(  Local2223 , LWCPromote(Local2225));
	FLWCScalar Local2227 = LWCMultiply(Local2226, LWCPromote(6.28318548));
	float Local2228 = LWCCos(Local2227);
	float Local2229 = (Local2228 * Local1974.r);
	float Local2230 = (Local2222 * Local2151);
	float Local2231 = (Material_PreshaderBuffer[18].w * Local2230);
	float Local2232 = (Material_PreshaderBuffer[67].z / Local2231);
	float Local2233 = (Local2232 * Local2151);
	float Local2234 = (Local2229 * Local2233);
	float Local2235 = (Local2228 * Local1974.g);
	float Local2236 = (Local2235 * Local2233);
	float Local2237 = LWCSin(Local2227);
	float Local2238 = (Local2237 * Local2151);
	float3 Local2239 = (float3(float2(Local2216,Local2218),Local2220) + float3(float2(Local2234,Local2236),Local2238));
	float Local2240 = (Local2221 * Material_PreshaderBuffer[20].w);
	float Local2241 = (2.00000000 / Local2240);
	FLWCScalar Local2242 = LWCMultiply(  Local1998 , LWCPromote(Local2241));
	float Local2243 = (Local2241 * Material_PreshaderBuffer[78].x);
	float Local2244 = (Local2243 * Local1730);
	FLWCScalar Local2245 = LWCAdd(  Local2242 , LWCPromote(Local2244));
	FLWCScalar Local2246 = LWCMultiply(Local2245, LWCPromote(6.28318548));
	float Local2247 = LWCCos(Local2246);
	float Local2248 = (Local2247 * Local1997.r);
	float Local2249 = (Local2241 * Local2171);
	float Local2250 = (Material_PreshaderBuffer[18].w * Local2249);
	float Local2251 = (Material_PreshaderBuffer[68].x / Local2250);
	float Local2252 = (Local2251 * Local2171);
	float Local2253 = (Local2248 * Local2252);
	float Local2254 = (Local2247 * Local1997.g);
	float Local2255 = (Local2254 * Local2252);
	float Local2256 = LWCSin(Local2246);
	float Local2257 = (Local2256 * Local2171);
	float3 Local2258 = (Local2239 + float3(float2(Local2253,Local2255),Local2257));
	float Local2259 = (Local2240 * Material_PreshaderBuffer[20].w);
	float Local2260 = (2.00000000 / Local2259);
	FLWCScalar Local2261 = LWCMultiply(  Local2021 , LWCPromote(Local2260));
	float Local2262 = (Local2260 * Material_PreshaderBuffer[78].y);
	float Local2263 = (Local2262 * Local1730);
	FLWCScalar Local2264 = LWCAdd(  Local2261 , LWCPromote(Local2263));
	FLWCScalar Local2265 = LWCMultiply(Local2264, LWCPromote(6.28318548));
	float Local2266 = LWCCos(Local2265);
	float Local2267 = (Local2266 * Local2020.r);
	float Local2268 = (Local2260 * Local2191);
	float Local2269 = (Material_PreshaderBuffer[18].w * Local2268);
	float Local2270 = (Material_PreshaderBuffer[68].z / Local2269);
	float Local2271 = (Local2270 * Local2191);
	float Local2272 = (Local2267 * Local2271);
	float Local2273 = (Local2266 * Local2020.g);
	float Local2274 = (Local2273 * Local2271);
	float Local2275 = LWCSin(Local2265);
	float Local2276 = (Local2275 * Local2191);
	float3 Local2277 = (Local2258 + float3(float2(Local2272,Local2274),Local2276));
	float3 Local2278 = (Local2202 + Local2277);
	float Local2279 = (Material_PreshaderBuffer[83].z * Local1232);
	float Local2280 = (2.00000000 / Local2279);
	FLWCScalar Local2281 = LWCMultiply(  Local1709 , LWCPromote(Local2280));
	float Local2282 = (Local2280 * Material_PreshaderBuffer[78].z);
	float Local2283 = (Local2282 * Local1730);
	FLWCScalar Local2284 = LWCAdd(  Local2281 , LWCPromote(Local2283));
	FLWCScalar Local2285 = LWCMultiply(Local2284, LWCPromote(6.28318548));
	float Local2286 = LWCCos(Local2285);
	float Local2287 = (Local2286 * Local1708.r);
	float Local2288 = (Local1762 * 4.00000000);
	float Local2289 = (Local2280 * Local2288);
	float Local2290 = (Material_PreshaderBuffer[18].w * Local2289);
	float Local2291 = (Material_PreshaderBuffer[67].x / Local2290);
	float Local2292 = (Local2291 * Local2288);
	float Local2293 = (Local2287 * Local2292);
	float Local2294 = (Local2286 * Local1708.g);
	float Local2295 = (Local2294 * Local2292);
	float Local2296 = LWCSin(Local2285);
	float Local2297 = (Local2296 * Local2288);
	float Local2298 = (Local2279 * Material_PreshaderBuffer[20].w);
	float Local2299 = (2.00000000 / Local2298);
	FLWCScalar Local2300 = LWCMultiply(  Local1775 , LWCPromote(Local2299));
	float Local2301 = (Local2299 * Material_PreshaderBuffer[78].w);
	float Local2302 = (Local2301 * Local1730);
	FLWCScalar Local2303 = LWCAdd(  Local2300 , LWCPromote(Local2302));
	FLWCScalar Local2304 = LWCMultiply(Local2303, LWCPromote(6.28318548));
	float Local2305 = LWCCos(Local2304);
	float Local2306 = (Local2305 * Local1774.r);
	float Local2307 = (Local2288 * Material_PreshaderBuffer[22].z);
	float Local2308 = (Local2299 * Local2307);
	float Local2309 = (Material_PreshaderBuffer[18].w * Local2308);
	float Local2310 = (Material_PreshaderBuffer[67].z / Local2309);
	float Local2311 = (Local2310 * Local2307);
	float Local2312 = (Local2306 * Local2311);
	float Local2313 = (Local2305 * Local1774.g);
	float Local2314 = (Local2313 * Local2311);
	float Local2315 = LWCSin(Local2304);
	float Local2316 = (Local2315 * Local2307);
	float3 Local2317 = (float3(float2(Local2293,Local2295),Local2297) + float3(float2(Local2312,Local2314),Local2316));
	float Local2318 = (Local2298 * Material_PreshaderBuffer[20].w);
	float Local2319 = (2.00000000 / Local2318);
	FLWCScalar Local2320 = LWCMultiply(  Local1799 , LWCPromote(Local2319));
	float Local2321 = (Local2319 * Material_PreshaderBuffer[79].x);
	float Local2322 = (Local2321 * Local1730);
	FLWCScalar Local2323 = LWCAdd(  Local2320 , LWCPromote(Local2322));
	FLWCScalar Local2324 = LWCMultiply(Local2323, LWCPromote(6.28318548));
	float Local2325 = LWCCos(Local2324);
	float Local2326 = (Local2325 * Local1798.r);
	float Local2327 = (Local2307 * Material_PreshaderBuffer[22].z);
	float Local2328 = (Local2319 * Local2327);
	float Local2329 = (Material_PreshaderBuffer[18].w * Local2328);
	float Local2330 = (Material_PreshaderBuffer[68].x / Local2329);
	float Local2331 = (Local2330 * Local2327);
	float Local2332 = (Local2326 * Local2331);
	float Local2333 = (Local2325 * Local1798.g);
	float Local2334 = (Local2333 * Local2331);
	float Local2335 = LWCSin(Local2324);
	float Local2336 = (Local2335 * Local2327);
	float3 Local2337 = (Local2317 + float3(float2(Local2332,Local2334),Local2336));
	float Local2338 = (Local2318 * Material_PreshaderBuffer[20].w);
	float Local2339 = (2.00000000 / Local2338);
	FLWCScalar Local2340 = LWCMultiply(  Local1823 , LWCPromote(Local2339));
	float Local2341 = (Local2339 * Material_PreshaderBuffer[79].y);
	float Local2342 = (Local2341 * Local1730);
	FLWCScalar Local2343 = LWCAdd(  Local2340 , LWCPromote(Local2342));
	FLWCScalar Local2344 = LWCMultiply(Local2343, LWCPromote(6.28318548));
	float Local2345 = LWCCos(Local2344);
	float Local2346 = (Local2345 * Local1822.r);
	float Local2347 = (Local2327 * Material_PreshaderBuffer[22].z);
	float Local2348 = (Local2339 * Local2347);
	float Local2349 = (Material_PreshaderBuffer[18].w * Local2348);
	float Local2350 = (Material_PreshaderBuffer[68].z / Local2349);
	float Local2351 = (Local2350 * Local2347);
	float Local2352 = (Local2346 * Local2351);
	float Local2353 = (Local2345 * Local1822.g);
	float Local2354 = (Local2353 * Local2351);
	float Local2355 = LWCSin(Local2344);
	float Local2356 = (Local2355 * Local2347);
	float3 Local2357 = (Local2337 + float3(float2(Local2352,Local2354),Local2356));
	float Local2358 = (Material_PreshaderBuffer[86].w * Local1308);
	float Local2359 = (2.00000000 / Local2358);
	FLWCScalar Local2360 = LWCMultiply(  Local1852 , LWCPromote(Local2359));
	float Local2361 = (Local2359 * Material_PreshaderBuffer[79].z);
	float Local2362 = (Local2361 * Local1730);
	FLWCScalar Local2363 = LWCAdd(  Local2360 , LWCPromote(Local2362));
	FLWCScalar Local2364 = LWCMultiply(Local2363, LWCPromote(6.28318548));
	float Local2365 = LWCCos(Local2364);
	float Local2366 = (Local2365 * Local1851.r);
	float Local2367 = (Local2288 * Material_PreshaderBuffer[30].w);
	float Local2368 = (Local2359 * Local2367);
	float Local2369 = (Material_PreshaderBuffer[18].w * Local2368);
	float Local2370 = (Material_PreshaderBuffer[67].x / Local2369);
	float Local2371 = (Local2370 * Local2367);
	float Local2372 = (Local2366 * Local2371);
	float Local2373 = (Local2365 * Local1851.g);
	float Local2374 = (Local2373 * Local2371);
	float Local2375 = LWCSin(Local2364);
	float Local2376 = (Local2375 * Local2367);
	float Local2377 = (Local2358 * Material_PreshaderBuffer[20].w);
	float Local2378 = (2.00000000 / Local2377);
	FLWCScalar Local2379 = LWCMultiply(  Local1875 , LWCPromote(Local2378));
	float Local2380 = (Local2378 * Material_PreshaderBuffer[79].w);
	float Local2381 = (Local2380 * Local1730);
	FLWCScalar Local2382 = LWCAdd(  Local2379 , LWCPromote(Local2381));
	FLWCScalar Local2383 = LWCMultiply(Local2382, LWCPromote(6.28318548));
	float Local2384 = LWCCos(Local2383);
	float Local2385 = (Local2384 * Local1874.r);
	float Local2386 = (Local2367 * Material_PreshaderBuffer[22].z);
	float Local2387 = (Local2378 * Local2386);
	float Local2388 = (Material_PreshaderBuffer[18].w * Local2387);
	float Local2389 = (Material_PreshaderBuffer[67].z / Local2388);
	float Local2390 = (Local2389 * Local2386);
	float Local2391 = (Local2385 * Local2390);
	float Local2392 = (Local2384 * Local1874.g);
	float Local2393 = (Local2392 * Local2390);
	float Local2394 = LWCSin(Local2383);
	float Local2395 = (Local2394 * Local2386);
	float3 Local2396 = (float3(float2(Local2372,Local2374),Local2376) + float3(float2(Local2391,Local2393),Local2395));
	float Local2397 = (Local2377 * Material_PreshaderBuffer[20].w);
	float Local2398 = (2.00000000 / Local2397);
	FLWCScalar Local2399 = LWCMultiply(  Local1899 , LWCPromote(Local2398));
	float Local2400 = (Local2398 * Material_PreshaderBuffer[80].x);
	float Local2401 = (Local2400 * Local1730);
	FLWCScalar Local2402 = LWCAdd(  Local2399 , LWCPromote(Local2401));
	FLWCScalar Local2403 = LWCMultiply(Local2402, LWCPromote(6.28318548));
	float Local2404 = LWCCos(Local2403);
	float Local2405 = (Local2404 * Local1898.r);
	float Local2406 = (Local2386 * Material_PreshaderBuffer[22].z);
	float Local2407 = (Local2398 * Local2406);
	float Local2408 = (Material_PreshaderBuffer[18].w * Local2407);
	float Local2409 = (Material_PreshaderBuffer[68].x / Local2408);
	float Local2410 = (Local2409 * Local2406);
	float Local2411 = (Local2405 * Local2410);
	float Local2412 = (Local2404 * Local1898.g);
	float Local2413 = (Local2412 * Local2410);
	float Local2414 = LWCSin(Local2403);
	float Local2415 = (Local2414 * Local2406);
	float3 Local2416 = (Local2396 + float3(float2(Local2411,Local2413),Local2415));
	float Local2417 = (Local2397 * Material_PreshaderBuffer[20].w);
	float Local2418 = (2.00000000 / Local2417);
	FLWCScalar Local2419 = LWCMultiply(  Local1923 , LWCPromote(Local2418));
	float Local2420 = (Local2418 * Material_PreshaderBuffer[80].y);
	float Local2421 = (Local2420 * Local1730);
	FLWCScalar Local2422 = LWCAdd(  Local2419 , LWCPromote(Local2421));
	FLWCScalar Local2423 = LWCMultiply(Local2422, LWCPromote(6.28318548));
	float Local2424 = LWCCos(Local2423);
	float Local2425 = (Local2424 * Local1922.r);
	float Local2426 = (Local2406 * Material_PreshaderBuffer[22].z);
	float Local2427 = (Local2418 * Local2426);
	float Local2428 = (Material_PreshaderBuffer[18].w * Local2427);
	float Local2429 = (Material_PreshaderBuffer[68].z / Local2428);
	float Local2430 = (Local2429 * Local2426);
	float Local2431 = (Local2425 * Local2430);
	float Local2432 = (Local2424 * Local1922.g);
	float Local2433 = (Local2432 * Local2430);
	float Local2434 = LWCSin(Local2423);
	float Local2435 = (Local2434 * Local2426);
	float3 Local2436 = (Local2416 + float3(float2(Local2431,Local2433),Local2435));
	float3 Local2437 = (Local2357 + Local2436);
	float Local2438 = (Material_PreshaderBuffer[90].x * Local1308);
	float Local2439 = (2.00000000 / Local2438);
	FLWCScalar Local2440 = LWCMultiply(  Local1953 , LWCPromote(Local2439));
	float Local2441 = (Local2439 * Material_PreshaderBuffer[79].z);
	float Local2442 = (Local2441 * Local1730);
	FLWCScalar Local2443 = LWCAdd(  Local2440 , LWCPromote(Local2442));
	FLWCScalar Local2444 = LWCMultiply(Local2443, LWCPromote(6.28318548));
	float Local2445 = LWCCos(Local2444);
	float Local2446 = (Local2445 * Local1952.r);
	float Local2447 = (Local2439 * Local2367);
	float Local2448 = (Material_PreshaderBuffer[18].w * Local2447);
	float Local2449 = (Material_PreshaderBuffer[67].x / Local2448);
	float Local2450 = (Local2449 * Local2367);
	float Local2451 = (Local2446 * Local2450);
	float Local2452 = (Local2445 * Local1952.g);
	float Local2453 = (Local2452 * Local2450);
	float Local2454 = LWCSin(Local2444);
	float Local2455 = (Local2454 * Local2367);
	float Local2456 = (Local2438 * Material_PreshaderBuffer[20].w);
	float Local2457 = (2.00000000 / Local2456);
	FLWCScalar Local2458 = LWCMultiply(  Local1975 , LWCPromote(Local2457));
	float Local2459 = (Local2457 * Material_PreshaderBuffer[79].w);
	float Local2460 = (Local2459 * Local1730);
	FLWCScalar Local2461 = LWCAdd(  Local2458 , LWCPromote(Local2460));
	FLWCScalar Local2462 = LWCMultiply(Local2461, LWCPromote(6.28318548));
	float Local2463 = LWCCos(Local2462);
	float Local2464 = (Local2463 * Local1974.r);
	float Local2465 = (Local2457 * Local2386);
	float Local2466 = (Material_PreshaderBuffer[18].w * Local2465);
	float Local2467 = (Material_PreshaderBuffer[67].z / Local2466);
	float Local2468 = (Local2467 * Local2386);
	float Local2469 = (Local2464 * Local2468);
	float Local2470 = (Local2463 * Local1974.g);
	float Local2471 = (Local2470 * Local2468);
	float Local2472 = LWCSin(Local2462);
	float Local2473 = (Local2472 * Local2386);
	float3 Local2474 = (float3(float2(Local2451,Local2453),Local2455) + float3(float2(Local2469,Local2471),Local2473));
	float Local2475 = (Local2456 * Material_PreshaderBuffer[20].w);
	float Local2476 = (2.00000000 / Local2475);
	FLWCScalar Local2477 = LWCMultiply(  Local1998 , LWCPromote(Local2476));
	float Local2478 = (Local2476 * Material_PreshaderBuffer[80].x);
	float Local2479 = (Local2478 * Local1730);
	FLWCScalar Local2480 = LWCAdd(  Local2477 , LWCPromote(Local2479));
	FLWCScalar Local2481 = LWCMultiply(Local2480, LWCPromote(6.28318548));
	float Local2482 = LWCCos(Local2481);
	float Local2483 = (Local2482 * Local1997.r);
	float Local2484 = (Local2476 * Local2406);
	float Local2485 = (Material_PreshaderBuffer[18].w * Local2484);
	float Local2486 = (Material_PreshaderBuffer[68].x / Local2485);
	float Local2487 = (Local2486 * Local2406);
	float Local2488 = (Local2483 * Local2487);
	float Local2489 = (Local2482 * Local1997.g);
	float Local2490 = (Local2489 * Local2487);
	float Local2491 = LWCSin(Local2481);
	float Local2492 = (Local2491 * Local2406);
	float3 Local2493 = (Local2474 + float3(float2(Local2488,Local2490),Local2492));
	float Local2494 = (Local2475 * Material_PreshaderBuffer[20].w);
	float Local2495 = (2.00000000 / Local2494);
	FLWCScalar Local2496 = LWCMultiply(  Local2021 , LWCPromote(Local2495));
	float Local2497 = (Local2495 * Material_PreshaderBuffer[80].y);
	float Local2498 = (Local2497 * Local1730);
	FLWCScalar Local2499 = LWCAdd(  Local2496 , LWCPromote(Local2498));
	FLWCScalar Local2500 = LWCMultiply(Local2499, LWCPromote(6.28318548));
	float Local2501 = LWCCos(Local2500);
	float Local2502 = (Local2501 * Local2020.r);
	float Local2503 = (Local2495 * Local2426);
	float Local2504 = (Material_PreshaderBuffer[18].w * Local2503);
	float Local2505 = (Material_PreshaderBuffer[68].z / Local2504);
	float Local2506 = (Local2505 * Local2426);
	float Local2507 = (Local2502 * Local2506);
	float Local2508 = (Local2501 * Local2020.g);
	float Local2509 = (Local2508 * Local2506);
	float Local2510 = LWCSin(Local2500);
	float Local2511 = (Local2510 * Local2426);
	float3 Local2512 = (Local2493 + float3(float2(Local2507,Local2509),Local2511));
	float3 Local2513 = (Local2437 + Local2512);
	float Local2514 = (Material_PreshaderBuffer[83].z * Local1461);
	float Local2515 = (2.00000000 / Local2514);
	FLWCScalar Local2516 = LWCMultiply(  Local1709 , LWCPromote(Local2515));
	float Local2517 = (Local2515 * Material_PreshaderBuffer[76].z);
	float Local2518 = (Local2517 * Local1730);
	FLWCScalar Local2519 = LWCAdd(  Local2516 , LWCPromote(Local2518));
	FLWCScalar Local2520 = LWCMultiply(Local2519, LWCPromote(6.28318548));
	float Local2521 = LWCCos(Local2520);
	float Local2522 = (Local2521 * Local1708.r);
	float Local2523 = (Local1762 * 0.50000000);
	float Local2524 = (Local2515 * Local2523);
	float Local2525 = (Material_PreshaderBuffer[18].w * Local2524);
	float Local2526 = (Material_PreshaderBuffer[67].x / Local2525);
	float Local2527 = (Local2526 * Local2523);
	float Local2528 = (Local2522 * Local2527);
	float Local2529 = (Local2521 * Local1708.g);
	float Local2530 = (Local2529 * Local2527);
	float Local2531 = LWCSin(Local2520);
	float Local2532 = (Local2531 * Local2523);
	float Local2533 = (Local2514 * Material_PreshaderBuffer[20].w);
	float Local2534 = (2.00000000 / Local2533);
	FLWCScalar Local2535 = LWCMultiply(  Local1775 , LWCPromote(Local2534));
	float Local2536 = (Local2534 * Material_PreshaderBuffer[76].w);
	float Local2537 = (Local2536 * Local1730);
	FLWCScalar Local2538 = LWCAdd(  Local2535 , LWCPromote(Local2537));
	FLWCScalar Local2539 = LWCMultiply(Local2538, LWCPromote(6.28318548));
	float Local2540 = LWCCos(Local2539);
	float Local2541 = (Local2540 * Local1774.r);
	float Local2542 = (Local2523 * Material_PreshaderBuffer[22].z);
	float Local2543 = (Local2534 * Local2542);
	float Local2544 = (Material_PreshaderBuffer[18].w * Local2543);
	float Local2545 = (Material_PreshaderBuffer[67].z / Local2544);
	float Local2546 = (Local2545 * Local2542);
	float Local2547 = (Local2541 * Local2546);
	float Local2548 = (Local2540 * Local1774.g);
	float Local2549 = (Local2548 * Local2546);
	float Local2550 = LWCSin(Local2539);
	float Local2551 = (Local2550 * Local2542);
	float3 Local2552 = (float3(float2(Local2528,Local2530),Local2532) + float3(float2(Local2547,Local2549),Local2551));
	float Local2553 = (Local2533 * Material_PreshaderBuffer[20].w);
	float Local2554 = (2.00000000 / Local2553);
	FLWCScalar Local2555 = LWCMultiply(  Local1799 , LWCPromote(Local2554));
	float Local2556 = (Local2554 * Material_PreshaderBuffer[77].x);
	float Local2557 = (Local2556 * Local1730);
	FLWCScalar Local2558 = LWCAdd(  Local2555 , LWCPromote(Local2557));
	FLWCScalar Local2559 = LWCMultiply(Local2558, LWCPromote(6.28318548));
	float Local2560 = LWCCos(Local2559);
	float Local2561 = (Local2560 * Local1798.r);
	float Local2562 = (Local2542 * Material_PreshaderBuffer[22].z);
	float Local2563 = (Local2554 * Local2562);
	float Local2564 = (Material_PreshaderBuffer[18].w * Local2563);
	float Local2565 = (Material_PreshaderBuffer[68].x / Local2564);
	float Local2566 = (Local2565 * Local2562);
	float Local2567 = (Local2561 * Local2566);
	float Local2568 = (Local2560 * Local1798.g);
	float Local2569 = (Local2568 * Local2566);
	float Local2570 = LWCSin(Local2559);
	float Local2571 = (Local2570 * Local2562);
	float3 Local2572 = (Local2552 + float3(float2(Local2567,Local2569),Local2571));
	float Local2573 = (Local2553 * Material_PreshaderBuffer[20].w);
	float Local2574 = (2.00000000 / Local2573);
	FLWCScalar Local2575 = LWCMultiply(  Local1823 , LWCPromote(Local2574));
	float Local2576 = (Local2574 * Material_PreshaderBuffer[77].y);
	float Local2577 = (Local2576 * Local1730);
	FLWCScalar Local2578 = LWCAdd(  Local2575 , LWCPromote(Local2577));
	FLWCScalar Local2579 = LWCMultiply(Local2578, LWCPromote(6.28318548));
	float Local2580 = LWCCos(Local2579);
	float Local2581 = (Local2580 * Local1822.r);
	float Local2582 = (Local2562 * Material_PreshaderBuffer[22].z);
	float Local2583 = (Local2574 * Local2582);
	float Local2584 = (Material_PreshaderBuffer[18].w * Local2583);
	float Local2585 = (Material_PreshaderBuffer[68].z / Local2584);
	float Local2586 = (Local2585 * Local2582);
	float Local2587 = (Local2581 * Local2586);
	float Local2588 = (Local2580 * Local1822.g);
	float Local2589 = (Local2588 * Local2586);
	float Local2590 = LWCSin(Local2579);
	float Local2591 = (Local2590 * Local2582);
	float3 Local2592 = (Local2572 + float3(float2(Local2587,Local2589),Local2591));
	float Local2593 = (Material_PreshaderBuffer[86].w * Local1541);
	float Local2594 = (2.00000000 / Local2593);
	FLWCScalar Local2595 = LWCMultiply(  Local1852 , LWCPromote(Local2594));
	float Local2596 = (Local2594 * Material_PreshaderBuffer[77].z);
	float Local2597 = (Local2596 * Local1730);
	FLWCScalar Local2598 = LWCAdd(  Local2595 , LWCPromote(Local2597));
	FLWCScalar Local2599 = LWCMultiply(Local2598, LWCPromote(6.28318548));
	float Local2600 = LWCCos(Local2599);
	float Local2601 = (Local2600 * Local1851.r);
	float Local2602 = (Local2523 * Material_PreshaderBuffer[30].w);
	float Local2603 = (Local2594 * Local2602);
	float Local2604 = (Material_PreshaderBuffer[18].w * Local2603);
	float Local2605 = (Material_PreshaderBuffer[67].x / Local2604);
	float Local2606 = (Local2605 * Local2602);
	float Local2607 = (Local2601 * Local2606);
	float Local2608 = (Local2600 * Local1851.g);
	float Local2609 = (Local2608 * Local2606);
	float Local2610 = LWCSin(Local2599);
	float Local2611 = (Local2610 * Local2602);
	float Local2612 = (Local2593 * Material_PreshaderBuffer[20].w);
	float Local2613 = (2.00000000 / Local2612);
	FLWCScalar Local2614 = LWCMultiply(  Local1875 , LWCPromote(Local2613));
	float Local2615 = (Local2613 * Material_PreshaderBuffer[77].w);
	float Local2616 = (Local2615 * Local1730);
	FLWCScalar Local2617 = LWCAdd(  Local2614 , LWCPromote(Local2616));
	FLWCScalar Local2618 = LWCMultiply(Local2617, LWCPromote(6.28318548));
	float Local2619 = LWCCos(Local2618);
	float Local2620 = (Local2619 * Local1874.r);
	float Local2621 = (Local2602 * Material_PreshaderBuffer[22].z);
	float Local2622 = (Local2613 * Local2621);
	float Local2623 = (Material_PreshaderBuffer[18].w * Local2622);
	float Local2624 = (Material_PreshaderBuffer[67].z / Local2623);
	float Local2625 = (Local2624 * Local2621);
	float Local2626 = (Local2620 * Local2625);
	float Local2627 = (Local2619 * Local1874.g);
	float Local2628 = (Local2627 * Local2625);
	float Local2629 = LWCSin(Local2618);
	float Local2630 = (Local2629 * Local2621);
	float3 Local2631 = (float3(float2(Local2607,Local2609),Local2611) + float3(float2(Local2626,Local2628),Local2630));
	float Local2632 = (Local2612 * Material_PreshaderBuffer[20].w);
	float Local2633 = (2.00000000 / Local2632);
	FLWCScalar Local2634 = LWCMultiply(  Local1899 , LWCPromote(Local2633));
	float Local2635 = (Local2633 * Material_PreshaderBuffer[78].x);
	float Local2636 = (Local2635 * Local1730);
	FLWCScalar Local2637 = LWCAdd(  Local2634 , LWCPromote(Local2636));
	FLWCScalar Local2638 = LWCMultiply(Local2637, LWCPromote(6.28318548));
	float Local2639 = LWCCos(Local2638);
	float Local2640 = (Local2639 * Local1898.r);
	float Local2641 = (Local2621 * Material_PreshaderBuffer[22].z);
	float Local2642 = (Local2633 * Local2641);
	float Local2643 = (Material_PreshaderBuffer[18].w * Local2642);
	float Local2644 = (Material_PreshaderBuffer[68].x / Local2643);
	float Local2645 = (Local2644 * Local2641);
	float Local2646 = (Local2640 * Local2645);
	float Local2647 = (Local2639 * Local1898.g);
	float Local2648 = (Local2647 * Local2645);
	float Local2649 = LWCSin(Local2638);
	float Local2650 = (Local2649 * Local2641);
	float3 Local2651 = (Local2631 + float3(float2(Local2646,Local2648),Local2650));
	float Local2652 = (Local2632 * Material_PreshaderBuffer[20].w);
	float Local2653 = (2.00000000 / Local2652);
	FLWCScalar Local2654 = LWCMultiply(  Local1923 , LWCPromote(Local2653));
	float Local2655 = (Local2653 * Material_PreshaderBuffer[78].y);
	float Local2656 = (Local2655 * Local1730);
	FLWCScalar Local2657 = LWCAdd(  Local2654 , LWCPromote(Local2656));
	FLWCScalar Local2658 = LWCMultiply(Local2657, LWCPromote(6.28318548));
	float Local2659 = LWCCos(Local2658);
	float Local2660 = (Local2659 * Local1922.r);
	float Local2661 = (Local2641 * Material_PreshaderBuffer[22].z);
	float Local2662 = (Local2653 * Local2661);
	float Local2663 = (Material_PreshaderBuffer[18].w * Local2662);
	float Local2664 = (Material_PreshaderBuffer[68].z / Local2663);
	float Local2665 = (Local2664 * Local2661);
	float Local2666 = (Local2660 * Local2665);
	float Local2667 = (Local2659 * Local1922.g);
	float Local2668 = (Local2667 * Local2665);
	float Local2669 = LWCSin(Local2658);
	float Local2670 = (Local2669 * Local2661);
	float3 Local2671 = (Local2651 + float3(float2(Local2666,Local2668),Local2670));
	float3 Local2672 = (Local2592 + Local2671);
	float Local2673 = (Material_PreshaderBuffer[90].x * Local1541);
	float Local2674 = (2.00000000 / Local2673);
	FLWCScalar Local2675 = LWCMultiply(  Local1953 , LWCPromote(Local2674));
	float Local2676 = (Local2674 * Material_PreshaderBuffer[77].z);
	float Local2677 = (Local2676 * Local1730);
	FLWCScalar Local2678 = LWCAdd(  Local2675 , LWCPromote(Local2677));
	FLWCScalar Local2679 = LWCMultiply(Local2678, LWCPromote(6.28318548));
	float Local2680 = LWCCos(Local2679);
	float Local2681 = (Local2680 * Local1952.r);
	float Local2682 = (Local2674 * Local2602);
	float Local2683 = (Material_PreshaderBuffer[18].w * Local2682);
	float Local2684 = (Material_PreshaderBuffer[67].x / Local2683);
	float Local2685 = (Local2684 * Local2602);
	float Local2686 = (Local2681 * Local2685);
	float Local2687 = (Local2680 * Local1952.g);
	float Local2688 = (Local2687 * Local2685);
	float Local2689 = LWCSin(Local2679);
	float Local2690 = (Local2689 * Local2602);
	float Local2691 = (Local2673 * Material_PreshaderBuffer[20].w);
	float Local2692 = (2.00000000 / Local2691);
	FLWCScalar Local2693 = LWCMultiply(  Local1975 , LWCPromote(Local2692));
	float Local2694 = (Local2692 * Material_PreshaderBuffer[77].w);
	float Local2695 = (Local2694 * Local1730);
	FLWCScalar Local2696 = LWCAdd(  Local2693 , LWCPromote(Local2695));
	FLWCScalar Local2697 = LWCMultiply(Local2696, LWCPromote(6.28318548));
	float Local2698 = LWCCos(Local2697);
	float Local2699 = (Local2698 * Local1974.r);
	float Local2700 = (Local2692 * Local2621);
	float Local2701 = (Material_PreshaderBuffer[18].w * Local2700);
	float Local2702 = (Material_PreshaderBuffer[67].z / Local2701);
	float Local2703 = (Local2702 * Local2621);
	float Local2704 = (Local2699 * Local2703);
	float Local2705 = (Local2698 * Local1974.g);
	float Local2706 = (Local2705 * Local2703);
	float Local2707 = LWCSin(Local2697);
	float Local2708 = (Local2707 * Local2621);
	float3 Local2709 = (float3(float2(Local2686,Local2688),Local2690) + float3(float2(Local2704,Local2706),Local2708));
	float Local2710 = (Local2691 * Material_PreshaderBuffer[20].w);
	float Local2711 = (2.00000000 / Local2710);
	FLWCScalar Local2712 = LWCMultiply(  Local1998 , LWCPromote(Local2711));
	float Local2713 = (Local2711 * Material_PreshaderBuffer[78].x);
	float Local2714 = (Local2713 * Local1730);
	FLWCScalar Local2715 = LWCAdd(  Local2712 , LWCPromote(Local2714));
	FLWCScalar Local2716 = LWCMultiply(Local2715, LWCPromote(6.28318548));
	float Local2717 = LWCCos(Local2716);
	float Local2718 = (Local2717 * Local1997.r);
	float Local2719 = (Local2711 * Local2641);
	float Local2720 = (Material_PreshaderBuffer[18].w * Local2719);
	float Local2721 = (Material_PreshaderBuffer[68].x / Local2720);
	float Local2722 = (Local2721 * Local2641);
	float Local2723 = (Local2718 * Local2722);
	float Local2724 = (Local2717 * Local1997.g);
	float Local2725 = (Local2724 * Local2722);
	float Local2726 = LWCSin(Local2716);
	float Local2727 = (Local2726 * Local2641);
	float3 Local2728 = (Local2709 + float3(float2(Local2723,Local2725),Local2727));
	float Local2729 = (Local2710 * Material_PreshaderBuffer[20].w);
	float Local2730 = (2.00000000 / Local2729);
	FLWCScalar Local2731 = LWCMultiply(  Local2021 , LWCPromote(Local2730));
	float Local2732 = (Local2730 * Material_PreshaderBuffer[78].y);
	float Local2733 = (Local2732 * Local1730);
	FLWCScalar Local2734 = LWCAdd(  Local2731 , LWCPromote(Local2733));
	FLWCScalar Local2735 = LWCMultiply(Local2734, LWCPromote(6.28318548));
	float Local2736 = LWCCos(Local2735);
	float Local2737 = (Local2736 * Local2020.r);
	float Local2738 = (Local2730 * Local2661);
	float Local2739 = (Material_PreshaderBuffer[18].w * Local2738);
	float Local2740 = (Material_PreshaderBuffer[68].z / Local2739);
	float Local2741 = (Local2740 * Local2661);
	float Local2742 = (Local2737 * Local2741);
	float Local2743 = (Local2736 * Local2020.g);
	float Local2744 = (Local2743 * Local2741);
	float Local2745 = LWCSin(Local2735);
	float Local2746 = (Local2745 * Local2661);
	float3 Local2747 = (Local2728 + float3(float2(Local2742,Local2744),Local2746));
	float3 Local2748 = (Local2672 + Local2747);
	float3 Local2749 = (Local2513 + Local2748);
	float3 Local2750 = (Local2278 + Local2749);
	float3 Local2751 = (Local2041 + Local2750);
	float3 Local2752 = (Local1700 + Local2751);
	float3 Local2753 = (Local643 + Local2752);
	float Local2754 = (Local2753.b * Local23.g);
	float Local2755 = (Local2754 - Material_PreshaderBuffer[90].y);
	float Local2756 = (Local2755 * Material_PreshaderBuffer[91].x);
	float Local2757 = (Local2756 + 0.00000000);
	float Local2758 = saturate(Local2757);
	float Local2759 = (Local2758 * Material_PreshaderBuffer[91].y);
	float Local2760 = (Local2759 - Material_PreshaderBuffer[91].z);
	float Local2761 = (Local2760 * Material_PreshaderBuffer[92].y);
	float Local2762 = (Local2761 + 0.00000000);
	float Local2763 = saturate(Local2762);
	float3 Local2764 = (((float3)Local2753.b) * Parameters.TangentToWorld[2]);
	FLWCVector3 Local2765 = LWCAdd(LWCPromote(Local2764),   Local2 );
	float3 Local2766 = LWCDdx(Local2765);
	float3 Local2767 = LWCDdy(Local2765);
	float3 Local2768 = cross(Local2766,Local2767);
	float3 Local2769 = normalize(Local2768);
	float3 Local2770 = LWCDdx(  Local2 );
	float3 Local2771 = LWCDdy(  Local2 );
	float3 Local2772 = cross(  Local2770 ,  Local2771 );
	float3 Local2773 = normalize(  Local2772 );
	float3 Local2774 = (Local2769 -   Local2773 );
	float3 Local2775 = (Local2774 + Parameters.TangentToWorld[2]);
	float3 Local2776 = lerp(Local2775,float3(0.00000000,0.00000000,1.00000000),Material_PreshaderBuffer[92].w);
	float3 Local2777 = (Local2776 * ((float3)Material_PreshaderBuffer[93].x));
	FLWCVector3 Local2778 = LWCAdd(LWCPromote(Local2777),   Local39 );
	FLWCVector3 Local2779 = LWCMultiply(Local2778, LWCPromote(((float3)Material_PreshaderBuffer[93].y)));
	float Local2780 = (Local44 * Material_PreshaderBuffer[93].w);
	float2 Local2781 = (float2(Local2780,Local2780) + float2(1.00000000,0.00000000));
	float3 Local2782 = LWCNormalizeTile(MakeLWCVector(LWCPromote(MakeLWCVector(LWCPromote( LWCGetComponent( Local2779 , 0)),LWCPromote( LWCGetComponent( Local2779 , 1)))),LWCPromote(Local2781.r))).Offset;
	float Local2783 = MaterialExpressionNoise(Local2782,1.00000000,1.00000000,3.00000000,1.00000000,10.00000000,0.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2784 = (Local2763 * Material_PreshaderBuffer[94].x);
	float Local2785 = (Local2783 - Local2784);
	float Local2786 = (Local2784 + 1.00000000);
	float Local2787 = (Local2786 - Local2784);
	float Local2788 = (Local2785 / Local2787);
	float Local2789 = (Local2788 * (0.00000000 - 1.00000000));
	float Local2790 = (Local2789 + 1.00000000);
	float Local2791 = saturate(Local2790);
	float Local2792 = PositiveClampedPow(Local2791,2.00000000);
	float Local2793 = lerp(Material_PreshaderBuffer[94].z,Material_PreshaderBuffer[94].y,Local2792);
	float Local2794 = saturate(Local2793);
	float Local2795 = (Local2763 * Local2794.r);
	FLWCVector3 Local2796 = LWCMultiply(  Local39 , LWCPromote(((float3)Material_PreshaderBuffer[94].w)));
	float3 Local2797 = LWCNormalizeTile(  Local2796 ).Offset;
	float Local2798 = MaterialExpressionNoise(Local2797,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2799 = saturate(Local2798);
	FLWCVector3 Local2800 = LWCMultiply(  Local2796 , LWCPromote(((float3)1.20000005)));
	float3 Local2801 = LWCNormalizeTile(  Local2800 ).Offset;
	float Local2802 = MaterialExpressionNoise(Local2801,1.00000000,1.00000000,5.00000000,1.00000000,1.00000000,-1.00000000,1.00000000,2.00000000,0.00000000,0.00000000,512.00000000);
	float Local2803 = saturate(Local2802);
	float Local2804 = (Local2799 + Local2803);
	float Local2805 = (Local2795 - Local2804);
	float Local2806 = (Local71 + Local2805);
	float Local2807 = (Local31 * Local2806);
	float Local2808 = saturate(Local2807);
	float Local2809 = lerp(Material_PreshaderBuffer[95].y,Material_PreshaderBuffer[95].x,Local2808);
	float3 Local2810 = (((float3)Local642.b) * Parameters.TangentToWorld[2]);
	FLWCVector3 Local2811 = LWCAdd(LWCPromote(Local2810),   Local2 );
	float3 Local2812 = LWCDdx(Local2811);
	float3 Local2813 = LWCDdy(Local2811);
	float3 Local2814 = cross(Local2812,Local2813);
	float3 Local2815 = normalize(Local2814);
	float3 Local2816 = (Local2815 -   Local2773 );
	float3 Local2817 = (Local2816 + Parameters.TangentToWorld[2]);
	float Local2818 = dot(Local2776,Parameters.CameraVector);
	float Local2819 = max(0.00000000,Local2818);
	float Local2820 = (1.00000000 - Local2819);
	float Local2821 = abs(Local2820);
	float Local2822 = max(Local2821,0.00010000);
	float Local2823 = PositiveClampedPow(Local2822,Material_PreshaderBuffer[95].z);
	float Local2824 = (Local2823 * Material_PreshaderBuffer[96].x);
	float Local2825 = (Local2824 + Material_PreshaderBuffer[95].w);
	float Local2826 = lerp(Material_PreshaderBuffer[96].z,Material_PreshaderBuffer[96].y,Local2825);
	float3 Local2827 = lerp(Local2776,float3(0.00000000,0.00000000,1.00000000),Local2826);
	float3 Local2828 = lerp(Local2817,Local2827,  Local30 );
	float Local2829 = lerp(Material_PreshaderBuffer[96].w,0.00000000,  Local30 );
	float3 Local2830 = lerp(Local2828,float3(0.00000000,0.00000000,1.00000000),  Local2829 );
	float Local2831 = (Local60 * Local69);
	float Local2832 = (Local60 + Local2831);
	float Local2833 = (Local2795 * Local2804);
	float Local2834 = (Local2795 + Local2833);
	float Local2835 = (Local2832 + Local2834);
	float Local2836 = (Local31 * Local2835);
	float3 Local2837 = (((float3)Local2836) * Parameters.TangentToWorld[2]);
	FLWCVector3 Local2838 = LWCAdd(LWCPromote(Local2837),   Local2 );
	float3 Local2839 = LWCDdx(Local2838);
	float3 Local2840 = LWCDdy(Local2838);
	float3 Local2841 = cross(Local2839,Local2840);
	float3 Local2842 = normalize(Local2841);
	float3 Local2843 = (Local2842 -   Local2773 );
	float3 Local2844 = (Local2843 + Parameters.TangentToWorld[2]);
	float3 Local2845 = lerp(Local2830,Local2844,Local60);
	float Local2846 = lerp(Material_PreshaderBuffer[97].x,1.00000000,Local2808);
	float Local2847 = PositiveClampedPow(Local2822,Material_PreshaderBuffer[104].y);
	float Local2848 = (Local2847 * Material_PreshaderBuffer[104].w);
	float Local2849 = (Local2848 + Material_PreshaderBuffer[104].z);
	float Local2850 = lerp(Material_PreshaderBuffer[105].x,Material_PreshaderBuffer[103].w,Local2849);
	float Local2851 = lerp(Local2850,1.00000000,Local2808);
	float Local2852 = lerp(0.00000000,Material_PreshaderBuffer[105].y,Local2808);
	FStrataData Local2853 = Parameters.StrataTree.PromoteParameterBlendedBSDFToOperator(StrataConvertLegacyMaterialStatic(Parameters.StrataPixelFootprint, Local2852, Local2851, 0.00000000, Local2809, 0.00000000, float3(1.00000000,1.00000000,1.00000000), 0.00000000, 1.00000000, 0.10000000, float3(0.00000000,0.00000000,0.00000000), Local2846, float3(0.50000000,0.50000000,0.50000000), Material_PreshaderBuffer[107].xyz, Material_PreshaderBuffer[106].xyz, 0.00000000, Material_PreshaderBuffer[105].z, 10, Local2845, Local2845, Local2845, Local2845, 0, 0, Parameters.SharedLocalBases.Types) , 0, 0, 0, 1);
	
	FStrataData Local2854 = Parameters.StrataTreeFullySimplified.PromoteParameterBlendedBSDFToOperator(StrataConvertLegacyMaterialStatic(Parameters.StrataPixelFootprint, Local2852, Local2851, 0.00000000, Local2809, 0.00000000, float3(1.00000000,1.00000000,1.00000000), 0.00000000, 1.00000000, 0.10000000, float3(0.00000000,0.00000000,0.00000000), Local2846, float3(0.50000000,0.50000000,0.50000000), Material_PreshaderBuffer[107].xyz, Material_PreshaderBuffer[106].xyz, 0.00000000, Material_PreshaderBuffer[105].z, 10, Local2845, Local2845, Local2845, Local2845, 0, 0, Parameters.SharedLocalBasesFullySimplified.Types) , 0, 0, 0, 1);
	

	PixelMaterialInputs.EmissiveColor = Local0;
	PixelMaterialInputs.Opacity = 1.00000000;
	PixelMaterialInputs.OpacityMask = Local13;
	PixelMaterialInputs.BaseColor = float3(0.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Metallic = 0.00000000;
	PixelMaterialInputs.Specular = 0.50000000;
	PixelMaterialInputs.Roughness = 0.50000000;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Parameters.TangentToWorld[2];
	PixelMaterialInputs.Tangent = Parameters.TangentToWorld[0];
	PixelMaterialInputs.Subsurface = 0;
	PixelMaterialInputs.AmbientOcclusion = 1.00000000;
	PixelMaterialInputs.Refraction = float3(float2(Material_PreshaderBuffer[107].w,0.0f),Material_PreshaderBuffer[108].x);
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 10;
	PixelMaterialInputs.FrontMaterial = Local2853;
	PixelMaterialInputs.SurfaceThickness = 0.01000000;
	PixelMaterialInputs.Displacement = 0.00000000;
	
	PixelMaterialInputs.FullySimplifiedFrontMaterial = Local2854;
	



	
	Parameters.SharedLocalBases.Normals[0] = Local2845;
	


	Parameters.SharedLocalBases.Tangents[0] = Parameters.TangentToWorld[0];
	


	Parameters.SharedLocalBases.Count = 1;



	
	
	Parameters.SharedLocalBasesFullySimplified.Normals[0] = Local2845;
	


	Parameters.SharedLocalBasesFullySimplified.Tangents[0] = Parameters.TangentToWorld[0];
	


	Parameters.SharedLocalBasesFullySimplified.Count = 1;
	





	Parameters.WorldTangent = 0;

}

#line 9937 "/Engine/Generated/Material.ush"
float GetFloatFacingSign(bool bIsFrontFace)
	{





		return bIsFrontFace ? +1 : -1;

}

#line 9962 "/Engine/Generated/Material.ush"
void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{
	
	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);

	
	

	Parameters.WorldPosition_NoOffsets_CamRelative = TranslatedWorldPositionExcludingShaderOffsets;
	Parameters.WorldPosition_NoOffsets = LWCSubtract(TranslatedWorldPositionExcludingShaderOffsets, ResolvedView.PreViewTranslation);


	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);

	
	
		Parameters.CameraVector = -WorldRayDirection();
	












	Parameters.LightVector = 0;







	Parameters.TwoSidedSign = 1.0f;









	
	
	


		Parameters.TwoSidedSign *= GetFloatFacingSign(bIsFrontFace);
	











	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}

#line 10070 "/Engine/Generated/Material.ush"
float3x3 AssembleTangentToWorld( float3 TangentToWorld0, float4 TangentToWorld2 )
{
	
	

	
	
	float3 TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;
	
	return float3x3(TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}

#line 10151 "/Engine/Generated/Material.ush"
float3 GetWorldBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{







	return MaterialParameters.WorldNormal;

}

#line 10165 "/Engine/Generated/Material.ush"
void GetEyeNormals(
	float IrisMask,
	float IrisDistance,
	in float3 InNormal,
	in float3 InClearCoatNormal,
	in float3 InCustomTangent,
	inout float3 OutIrisNormal,
	inout float3 OutIrisPlaneNormal)
{
#line 10186 "/Engine/Generated/Material.ush"

  



	OutIrisNormal = InNormal;
	OutIrisPlaneNormal = InNormal;
  

}

#line 125 "/Engine/Private/VertexFactoryCommon.ush"
float4 TransformLocalToTranslatedWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{
	
	float3 RotatedScaledPosition = (LocalPosition.xxx * LocalToWorld.M[0].xyz + LocalPosition.yyy * LocalToWorld.M[1].xyz + LocalPosition.zzz * LocalToWorld.M[2].xyz);
	FLWCVector3 TranslatedWorldPositionOrigin = LWCAdd(LWCGetOrigin(LocalToWorld), ResolvedView.PreViewTranslation);
	return float4(RotatedScaledPosition + LWCToFloat(TranslatedWorldPositionOrigin), 1.0f);
}

#line 133 "/Engine/Private/VertexFactoryCommon.ush"
float4 TransformLocalToTranslatedWorld(float3 LocalPosition, float4x4 LocalToWorld)
{
	return TransformLocalToTranslatedWorld(LocalPosition, LWCPromote(LocalToWorld));
}

#line 7 "/Engine/Private/LocalVertexFactoryCommon.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4	TangentToWorld2	: TEXCOORD11_centroid;
























	nointerpolation uint PrimitiveId : PRIMITIVE_ID;
	


	



	























};

#line 89 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetColor(FVertexFactoryInterpolantsVSToPS Interpolants)
{



	return 0;

}

#line 98 "/Engine/Private/LocalVertexFactoryCommon.ush"
void SetColor(inout FVertexFactoryInterpolantsVSToPS Interpolants, float4 InValue)
{



}

#line 135 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld2(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld2;
}

#line 140 "/Engine/Private/LocalVertexFactoryCommon.ush"
float4 GetTangentToWorld0(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return Interpolants.TangentToWorld0;
}

#line 145 "/Engine/Private/LocalVertexFactoryCommon.ush"
void SetTangents(inout FVertexFactoryInterpolantsVSToPS Interpolants, float3 InTangentToWorld0, float3 InTangentToWorld2, float InTangentToWorldSign)
{
	Interpolants.TangentToWorld0 = float4(InTangentToWorld0,0);
	Interpolants.TangentToWorld2 = float4(InTangentToWorld2,InTangentToWorldSign);



}

#line 154 "/Engine/Private/LocalVertexFactoryCommon.ush"
uint GetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;



}

#line 163 "/Engine/Private/LocalVertexFactoryCommon.ush"
void SetPrimitiveId(inout FVertexFactoryInterpolantsVSToPS Interpolants, uint PrimitiveId)
{

	Interpolants.PrimitiveId = PrimitiveId;

}

#line 467 "/Engine/Private/ShaderPrintCommon.ush"
// Hashes are computed using the CityHash32 function

#line 50 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;

#line  68 "/Engine/Private/LocalVertexFactory.ush"


#line  99 "/Engine/Private/LocalVertexFactory.ush"

	
	 uint InstanceIdOffset : ATTRIBUTE13 ; 		uint DrawInstanceId : SV_InstanceID;












	 










	uint VertexId : SV_VertexID;
};

#line 129 "/Engine/Private/LocalVertexFactory.ush"
uint bIsGPUSkinPassThrough;

#line 132 "/Engine/Private/LocalVertexFactory.ush"
bool IsGPUSkinPassThrough()
{
	
		return bIsGPUSkinPassThrough;
	


}

#line 150 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryInput LoadVertexFactoryInputForHGS(uint TriangleIndex, int VertexIndex)
{
	FVertexFactoryInput Input = (FVertexFactoryInput)0;

	FTriangleBaseAttributes Tri = LoadTriangleBaseAttributes(TriangleIndex);

	Input.VertexId = Tri.Indices[VertexIndex];
	Input.Position = float4(Tri.LocalPositions[VertexIndex], 1.0f);

	
	int PrimitiveId = GetInstanceUserData();
	uint DrawInstanceId = 0;
	
	
	
	if (GetPrimitiveData(PrimitiveId).NumInstanceSceneDataEntries != 1)
	{
		DrawInstanceId = InstanceIndex() - GetBaseInstanceIndex();
	}

	  Input .InstanceIdOffset = ( PrimitiveId ) | (1U << 31U); Input .DrawInstanceId = DrawInstanceId ;;






	return Input;
}

#line 223 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;

	
	 uint InstanceIdOffset : ATTRIBUTE1 ; 		uint DrawInstanceId : SV_InstanceID;











	 



	uint VertexId : SV_VertexID;

};

#line 251 "/Engine/Private/LocalVertexFactory.ush"
struct FPositionAndNormalOnlyVertexFactoryInput
{
	float4	Position	: ATTRIBUTE0;
	float4	Normal		: ATTRIBUTE2;

	
	 uint InstanceIdOffset : ATTRIBUTE1 ; 		uint DrawInstanceId : SV_InstanceID;











	 



	uint VertexId : SV_VertexID;

};

#line 278 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryInstanceInput
{
	float4 Transform1;
	float4 Transform2;
	float4 Transform3;
	float4 Origin;
};

#line 287 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediatesCommon
{
	
	FSceneDataIntermediates SceneData;






};

#line 302 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryIntermediates
{
	FVertexFactoryIntermediatesCommon Common;

	int PrimitiveLocalInstanceIndex;


	float3x3 TangentToLocal;
	float3x3 TangentToWorld;
	float TangentToWorldSign;

	float4 Color;

	bool bEvaluateWorldPositionOffset;






	float IsVisible;







	float3 PreSkinPosition;
};

#line 333 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

#line 338 "/Engine/Private/LocalVertexFactory.ush"
FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return GetPrimitiveData(Intermediates.Common);
}

#line 343 "/Engine/Private/LocalVertexFactory.ush"
FInstanceSceneData GetInstanceData(FVertexFactoryIntermediatesCommon Intermediates)
{
	return Intermediates.SceneData.InstanceData;
}

#line 348 "/Engine/Private/LocalVertexFactory.ush"
FInstanceSceneData GetInstanceData(FVertexFactoryIntermediates Intermediates)
{
	return GetInstanceData(Intermediates.Common);
}

#line 375 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryInstanceInput MakeInstanceInput(float4 Transform1, float4 Transform2, float4 Transform3, float4 Origin)
{
	FVertexFactoryInstanceInput Result;
	Result.Transform1 = Transform1;
	Result.Transform2 = Transform2;
	Result.Transform3 = Transform3;
	Result.Origin = Origin;

	return Result;
}

#line 386 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryInstanceInput InitInstanceInput()
{
	return MakeInstanceInput(
		float4(1, 0, 0, 0),
		float4(0, 1, 0, 0),
		float4(0, 0, 1, 0),
		float4(0, 0, 0, 0)
	);
}

#line 516 "/Engine/Private/LocalVertexFactory.ush"
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{
	
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();















	float3 TangentToWorld0 = GetTangentToWorld0(Interpolants).xyz;
	float4 TangentToWorld2 = GetTangentToWorld2(Interpolants);
	Result.UnMirrored = TangentToWorld2.w;

	Result.VertexColor = GetColor(Interpolants);

	
	Result.Particle.Color = float4(1,1,1,1);




	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );















	Result.TwoSidedSign = 1;
	Result.PrimitiveId = GetPrimitiveId(Interpolants);





























	return Result;
}

#line 597 "/Engine/Private/LocalVertexFactory.ush"
float3x3 CalcTangentToWorldNoScale(FVertexFactoryIntermediates Intermediates, float3x3 TangentToLocal)
{
	float3x3 LocalToWorld = LWCToFloat3x3(GetInstanceData(Intermediates).LocalToWorld);
	float3 InvScale = GetInstanceData(Intermediates).InvNonUniformScale;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;
	return mul(TangentToLocal, LocalToWorld); 
}

#line 608 "/Engine/Private/LocalVertexFactory.ush"
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = MakeInitializedMaterialVertexParameters();
	Result.SceneData = Intermediates.Common.SceneData;
	
	Result.PrimitiveId = Intermediates.Common.SceneData.PrimitiveId;

	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;

	
	Result.TangentToWorld = Intermediates.TangentToWorld;

	Result.bEvaluateWorldPositionOffset = Intermediates.bEvaluateWorldPositionOffset;

	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);
	FInstanceSceneData InstanceData = GetInstanceData(Intermediates);

#line 654 "/Engine/Private/LocalVertexFactory.ush"

	Result.PrevFrameLocalToWorld = InstanceData.PrevLocalToWorld;
	





	



	




	Result.PreSkinnedPosition = Intermediates.PreSkinPosition.xyz;
	Result.PreSkinnedNormal = TangentToLocal[2]; 

#line 708 "/Engine/Private/LocalVertexFactory.ush"


	Result.Particle.Color = float4(1,1,1,1);












	return Result;
}

#line 726 "/Engine/Private/LocalVertexFactory.ush"
float4 CalcWorldPosition(FVertexFactoryIntermediatesCommon Intermediates, float4 Position, FLWCMatrix LocalToWorld)
{







	return TransformLocalToTranslatedWorld(Position.xyz, LocalToWorld);

}

#line 739 "/Engine/Private/LocalVertexFactory.ush"
float3x3 CalcTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, inout float TangentSign)
{

	float3 TangentInputX = LocalVF_VertexFetch_PackedTangentsBuffer[2 * (LocalVF_VertexFetch_Parameters[3] + Input.VertexId) + 0].xyz;
	float4 TangentInputZ = LocalVF_VertexFetch_PackedTangentsBuffer[2 * (LocalVF_VertexFetch_Parameters[3] + Input.VertexId) + 1].xyzw;





	float3 TangentX = TangentInputX;
	float4 TangentZ = TangentInputZ;
	if (!IsGPUSkinPassThrough())
	{
		TangentX =  ( TangentInputX );
		TangentZ =  ( TangentInputZ );
	}

	TangentSign = TangentZ.w;

#line 776 "/Engine/Private/LocalVertexFactory.ush"


	
	float3 TangentY = cross(TangentZ.xyz, TangentX) * TangentZ.w;
	
	
	
	
	float3x3 Result;
	Result[0] = cross(TangentY, TangentZ.xyz) * TangentZ.w;
	Result[1] = TangentY;
	Result[2] = TangentZ.xyz;

	return Result;
}

#line 792 "/Engine/Private/LocalVertexFactory.ush"
float3x3 CalcTangentToWorld(FVertexFactoryIntermediates Intermediates, float3x3 TangentToLocal)
{








	float3x3 TangentToWorld = CalcTangentToWorldNoScale(Intermediates, TangentToLocal);

	return TangentToWorld;
}

#line 807 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryIntermediatesCommon GetVertexFactoryCommonIntermediates(FSceneDataIntermediates SceneData, FVertexFactoryInstanceInput InstanceInput)
{
	FVertexFactoryIntermediatesCommon Intermediates = (FVertexFactoryIntermediatesCommon)0;
	Intermediates.SceneData = SceneData;









	return Intermediates;
}

#line 825 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
	Intermediates.Common =  GetVertexFactoryCommonIntermediates( GetSceneDataIntermediates( Input .InstanceIdOffset, Input .DrawInstanceId),  InitInstanceInput());

	FPrimitiveSceneData PrimitiveData = GetPrimitiveData(Intermediates);
	FInstanceSceneData InstanceData = GetInstanceData(Intermediates);










	Intermediates.IsVisible = 1.0f;


	
	Intermediates.PrimitiveLocalInstanceIndex = Intermediates.Common.SceneData.InstanceId - PrimitiveData.InstanceSceneDataOffset;

#line 892 "/Engine/Private/LocalVertexFactory.ush"




	Intermediates.Color = LocalVF_VertexFetch_ColorComponentsBuffer[(LocalVF_VertexFetch_Parameters[3] + Input.VertexId) & LocalVF_VertexFetch_Parameters[0]] .bgra; 











	float TangentSign = 1.0;
	Intermediates.TangentToLocal = CalcTangentToLocal(Input, Intermediates, TangentSign);
	Intermediates.TangentToWorld = CalcTangentToWorld(Intermediates, Intermediates.TangentToLocal);
	Intermediates.TangentToWorldSign = TangentSign * GetInstanceData(Intermediates).DeterminantSign;

#line 948 "/Engine/Private/LocalVertexFactory.ush"

	
	const float InstanceViewDistSq = length2(LWCToFloat(LWCAdd(PrimitiveData.ObjectWorldPosition, ResolvedView.PreViewTranslation)));


#line 965 "/Engine/Private/LocalVertexFactory.ush"


	if (IsGPUSkinPassThrough())
	{
	
	
		uint PreSkinVertexOffset = LocalVF_PreSkinBaseVertexIndex + Input.VertexId * 3;
		Intermediates.PreSkinPosition.x = LocalVF_VertexFetch_PreSkinPositionBuffer[PreSkinVertexOffset + 0];
		Intermediates.PreSkinPosition.y = LocalVF_VertexFetch_PreSkinPositionBuffer[PreSkinVertexOffset + 1];
		Intermediates.PreSkinPosition.z = LocalVF_VertexFetch_PreSkinPositionBuffer[PreSkinVertexOffset + 2];
	


	
	}
	else
	{
		Intermediates.PreSkinPosition = Input.Position.xyz;
	}

	return Intermediates;
}

#line 995 "/Engine/Private/LocalVertexFactory.ush"
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	return Intermediates.TangentToLocal;
}

#line 1001 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	FLWCMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;

	
	return CalcWorldPosition(Intermediates.Common, Input.Position, LocalToWorld) * Intermediates.IsVisible;
}

#line 1019 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

	
	
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;

	FInstanceSceneData InstanceData = GetInstanceData(Intermediates);

#line 1046 "/Engine/Private/LocalVertexFactory.ush"


#line 1080 "/Engine/Private/LocalVertexFactory.ush"


	SetTangents(Interpolants, Intermediates.TangentToWorld[0], Intermediates.TangentToWorld[2], Intermediates.TangentToWorldSign);
	SetColor(Interpolants, Intermediates.Color);


















	SetPrimitiveId(Interpolants, Intermediates.Common.SceneData.PrimitiveId);








	return Interpolants;
}

#line 1115 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetWorldPosition(FPositionOnlyVertexFactoryInput Input)
{
	FVertexFactoryIntermediatesCommon Intermediates =  GetVertexFactoryCommonIntermediates( GetSceneDataIntermediates( Input .InstanceIdOffset, Input .DrawInstanceId),  InitInstanceInput());
	FLWCMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;

	return CalcWorldPosition(Intermediates, Input.Position, LocalToWorld);
}

#line 1124 "/Engine/Private/LocalVertexFactory.ush"
float4 VertexFactoryGetWorldPosition(FPositionAndNormalOnlyVertexFactoryInput Input)
{
	FVertexFactoryIntermediatesCommon Intermediates =  GetVertexFactoryCommonIntermediates( GetSceneDataIntermediates( Input .InstanceIdOffset, Input .DrawInstanceId),  InitInstanceInput());
	FLWCMatrix LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;

	return CalcWorldPosition(Intermediates, Input.Position, LocalToWorld);
}

#line 1188 "/Engine/Private/LocalVertexFactory.ush"
struct FVertexFactoryRayTracingInterpolants
	{
		FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
	};

#line 1193 "/Engine/Private/LocalVertexFactory.ush"
float2 VertexFactoryGetRayTracingTextureCoordinate( FVertexFactoryRayTracingInterpolants Interpolants )
	{
	


		return float2(0,0);
	
	}

#line 1202 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryRayTracingInterpolants Input)
	{
		return Input.InterpolantsVSToPS;
	}

#line 1207 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryRayTracingInterpolants VertexFactoryGetRayTracingInterpolants(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
	{
		FVertexFactoryRayTracingInterpolants Interpolants;
		Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
		return Interpolants;
	}

#line 1214 "/Engine/Private/LocalVertexFactory.ush"
FVertexFactoryRayTracingInterpolants VertexFactoryInterpolate(FVertexFactoryRayTracingInterpolants a, float aInterp, FVertexFactoryRayTracingInterpolants b, float bInterp)
	{
		
		
		
		FVertexFactoryRayTracingInterpolants O = (FVertexFactoryRayTracingInterpolants)0;


		O.InterpolantsVSToPS.PrimitiveId = a.InterpolantsVSToPS.PrimitiveId;
    













		
		
	
		 O. InterpolantsVSToPS.TangentToWorld0.xyz = a. InterpolantsVSToPS.TangentToWorld0.xyz * aInterp + b. InterpolantsVSToPS.TangentToWorld0.xyz * bInterp;
		 O. InterpolantsVSToPS.TangentToWorld2 = a. InterpolantsVSToPS.TangentToWorld2 * aInterp + b. InterpolantsVSToPS.TangentToWorld2 * bInterp;
	


	



	



	









		return O;
	}

#line 1296 "/Engine/Private/LocalVertexFactory.ush"
FSceneDataIntermediates GetSceneDataIntermediates(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.Common.SceneData;
}

#line 5 "/Engine/Private/RayTracing/RayTracingCalcInterpolants.ush"
void CalcInterpolants(in FRayCone RayCone, in FRayTracingIntersectionAttributes Attributes, out FVertexFactoryInterpolantsVSToPS Interpolants, out float3 FaceNormal)
{
	FVertexFactoryRayTracingInterpolants Interpolated = (FVertexFactoryRayTracingInterpolants)0;

	float3 WorldPositions[3];
	float2 TexCoords[3];

	const float2 Barycentrics = Attributes.GetBarycentrics();

	float3 Weights = float3(
		1 - Barycentrics.x - Barycentrics.y,
		Barycentrics.x,
		Barycentrics.y);

	for (int i = 0; i < 3; i++)
	{
		FVertexFactoryInput Input = LoadVertexFactoryInputForHGS(PrimitiveIndex(), i);

		FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);
		float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);
		float4 WorldPositionExcludingWPO = VertexFactoryGetWorldPosition(Input, VFIntermediates);
		FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPositionExcludingWPO.xyz, TangentToLocal);

		FVertexFactoryRayTracingInterpolants PerVertexInterpolants = VertexFactoryGetRayTracingInterpolants(Input, VFIntermediates, VertexParameters);
		Interpolated = VertexFactoryInterpolate(PerVertexInterpolants, Weights[i], Interpolated, 1.0);

		WorldPositions[i] = WorldPositionExcludingWPO.xyz;
		TexCoords[i] = VertexFactoryGetRayTracingTextureCoordinate(PerVertexInterpolants);
	}

	Interpolants = VertexFactoryAssignInterpolants(Interpolated);

	float3 PA = WorldPositions[1] - WorldPositions[0];
	float3 PB = WorldPositions[2] - WorldPositions[0];
	float3 Unnormalized = cross(PB, PA);
	float InvWorldArea = rsqrt(dot(Unnormalized, Unnormalized));
	FaceNormal = Unnormalized * InvWorldArea;













}

#line 58 "/Engine/Private/RayTracing/RayTracingCalcInterpolants.ush"
void CalcInterpolants(in FRayCone RayCone, in FRayTracingIntersectionAttributes Attributes, out FVertexFactoryInterpolantsVSToPS Interpolants)
{
	float3 GeoNormal = 0; 
	CalcInterpolants(RayCone, Attributes, Interpolants, GeoNormal);
}

#line 196 "/Engine/Private/VirtualTextureCommon.ush"
struct VTPageTableResult
{
	float2 UV;
	float2 dUVdx;
	float2 dUVdy;
	uint4 PageTableValue[4];
	uint PackedRequest;
	float MipLevelFrac;
};

#line 716 "/Engine/Private/VirtualTextureCommon.ush"
bool IsValid(VTPageTableResult PageTableResult, uint LayerIndex)
{
	const uint PackedPageTableValue = PageTableResult.PageTableValue[LayerIndex / 4u][LayerIndex & 3u];
	return (PackedPageTableValue >> 4) != 0;
}

#line 97 "/Engine/Private/Strata/StrataExport.ush"
void PackStrataOut(
	inout FStrataRaytracingPayload StrataBuffer,



	float Dither,
	FStrataIntegrationSettings Settings,
	FStrataAddressing StrataAddressing,
	FStrataPixelHeader StrataPixelHeader,
	FStrataData Strata,
	float3 V,
	float3 WorldBentNormal0,
	inout bool bStrataSubsurfaceEnable,
	inout float3 EmissiveColor,
	inout FStrataSubsurfaceData SSSData,
	inout FStrataTopLayerData TopLayerData,
	inout FStrataOpaqueRoughRefractionData OpaqueRoughRefractionData








)
{
	


	bStrataSubsurfaceEnable = false;
	EmissiveColor = 0.0f;

	const float FullyRough = 1.0f;

	
	
	SSSData = (FStrataSubsurfaceData)0;
	TopLayerData = (FStrataTopLayerData)0;
	OpaqueRoughRefractionData = (FStrataOpaqueRoughRefractionData)0;

	uint BSDFVisibleCount = 0;
	
	if (StrataPixelHeader.StrataTree.BSDFCount > 0)
	{
		
		FStrataAddressing NullStrataAddressing = (FStrataAddressing)0;	
		StrataPixelHeader.StrataUpdateTree(NullStrataAddressing, V, Settings);

		const uint RootOperatorIndex = Strata.OperatorIndex;

	






		
		{
			const FStrataOperator RootOperator = StrataPixelHeader.StrataTree.Operators[Strata.OperatorIndex];
			OpaqueRoughRefractionData.Coverage = RootOperator.OpaqueRoughRefractCoverage;

			const float StandardDeviationCm = sqrt(GetVarianceFromRoughness(RootOperator.OpaqueRoughRefractTopRoughness));
			const float StandardDeviationCmForThickness = StandardDeviationCm * RootOperator.OpaqueRoughRefractThicknessCm;
			OpaqueRoughRefractionData.VarianceCm = StandardDeviationCmForThickness * StandardDeviationCmForThickness;
		}

		uint OptimisedLegacyMode = 0;
		bool bIsSimpleMaterial = true;
		bool bIsSingleMaterial = true;
		bool bIsOnlySlab = true;
		int OneBSDFMaterial_Index = 0; 
		float TopLayerTotalWeight = 0.0f;
		
		{
			 [loop]
			for (int BSDFIdx = 0; BSDFIdx < StrataPixelHeader.StrataTree.BSDFCount; ++BSDFIdx)
			{
			

				const bool bIsVisible = StrataIsBSDFVisible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

				if (bIsVisible)
				{
					BSDFVisibleCount++;

					switch (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
					{
					case 0:
					{
						EmissiveColor +=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Emissive * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV;

						
						const bool LuminanceWeightEqualOne = all(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV == 1.0f);

						


						const bool bForceComplexSpecialPath = false;
						
						const bool bForceComplexMaterial =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( 0 )) &  ((1u<<( 1 ))-1)) || bForceComplexSpecialPath;

						
						bIsSimpleMaterial = bIsSimpleMaterial && IsStrataSlabFastPathCompatible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]) && LuminanceWeightEqualOne && !bForceComplexMaterial;

						
						
						bIsSingleMaterial = bIsSingleMaterial && LuminanceWeightEqualOne && !bForceComplexMaterial;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						float TopLayerRoughnessContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight *   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w;
						float3 TopLayerBaseColorContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * StrataGetBSDFBaseColor(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);
						if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
						{
							FHaziness Haziness = UnpackHaziness(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Haziness);
							if (Haziness.bSimpleClearCoat)
							{
								TopLayerRoughnessContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * lerp(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w, Haziness.Roughness, Haziness.Weight);
								TopLayerBaseColorContribution = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * lerp(0.0, 0.04f, F0RGBToMetallic(0.04f));
							}
						}
						TopLayerData.Roughness += TopLayerRoughnessContribution;
						TopLayerData.BaseColor += TopLayerBaseColorContribution;

						TopLayerData.Material = 1;

						const bool bHasSSS =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (0u);
						const bool bIsSimpleVolume =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u);
						bStrataSubsurfaceEnable = bStrataSubsurfaceEnable || (bHasSSS && StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].Coverage > 0.0f && !bIsSimpleVolume); 

						const bool bSSSMask = StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].bIsBottom;	
						StrataPixelHeader.SetHasSubsurface(bSSSMask && bHasSSS && !bIsSimpleVolume);

						StrataPixelHeader.SetUsesComplexSpecialRenderPath(bForceComplexSpecialPath);
						break;
					}

					case 3:
					{
						bIsOnlySlab = false;
						bIsSimpleMaterial = false;
						bIsSingleMaterial = false;
						EmissiveColor +=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Emissive * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						TopLayerData.Roughness += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * FullyRough;
						TopLayerData.BaseColor += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * StrataGetBSDFBaseColor(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

						TopLayerData.Material = 1;

						StrataPixelHeader.SetMaterialMode(5);
						break;
					}

					case 5:
					{
						bIsOnlySlab = false;
						bIsSimpleMaterial = false;
						bIsSingleMaterial = false;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						TopLayerData.Roughness += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * FullyRough;

						TopLayerData.Material = 1;

						const bool bHasSSS =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);
						StrataPixelHeader.SetHasSubsurface(bHasSSS);
						StrataPixelHeader.SetMaterialMode(6);
						break;
					}

					case 4:
					{
						bIsOnlySlab = false;
						bIsSimpleMaterial = false;
						bIsSingleMaterial = false;
						EmissiveColor +=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Emissive * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV;

						TopLayerTotalWeight += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;
						TopLayerData.Roughness += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight *   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z;
						TopLayerData.BaseColor += StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight * StrataGetBSDFBaseColor(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

						TopLayerData.Material = 2;

						StrataPixelHeader.SetMaterialMode(4);
						break;
					}
					}

					float3x3 TangentBasis = StrataGetBSDFSharedBasis_InlineShading(StrataPixelHeader, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx], StrataAddressing);
					float3 N = TangentBasis[2];
					TopLayerData.WorldNormal += N * StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TopLayerDataWeight;

					OneBSDFMaterial_Index = BSDFIdx;

					
					   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (0			+ 1) )))) | ((( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].bIsTop ? 1 : 0 ) &  ((1u<<( 1 ))-1)) << ( (0			+ 1) ));
				}
		
		
			
			}
		}

		
		TopLayerData.WorldNormal= TopLayerTotalWeight > 0.0f	? normalize(TopLayerData.WorldNormal)			: 0.0f;
		TopLayerData.Roughness	= TopLayerTotalWeight > 0.0f	? TopLayerData.Roughness / TopLayerTotalWeight	: 0.0f;
		TopLayerData.BaseColor	= TopLayerTotalWeight > 0.0f	? TopLayerData.BaseColor / TopLayerTotalWeight	: 0.0f;

		
		if (bIsOnlySlab)
		{
			bIsSimpleMaterial = bIsSimpleMaterial && BSDFVisibleCount == 1;
			bIsSingleMaterial = bIsSingleMaterial && BSDFVisibleCount == 1;
			StrataPixelHeader.SetMaterialMode(bIsSimpleMaterial ? 1 : bIsSingleMaterial ? 2 : 3);

			if (bIsSingleMaterial)
			{
			
				const uint SingleHasHaziness		= 0x01;
				const uint SingleHasClearCoat		= 0x02;
				const uint SingleHasCloth			= 0x04;
				const uint SingleIsThin				= 0x08;
				const uint SingleIsSimpleVolume		= 0x10;
				const uint SingleIsWrap				= 0x20;
				const uint SingleIsSSSProfile		= 0x40;
				const uint SingleIsWrapThin			= SingleIsThin | SingleIsWrap;
				

				uint OptimisedModeMask = 0;
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
				{
					OptimisedModeMask |= SingleHasHaziness; 

					FHaziness Haziness = UnpackHaziness(  StrataPixelHeader.StrataTree.BSDFs[0] .Haziness);
					if (Haziness.bSimpleClearCoat)
					{
						OptimisedModeMask |= SingleHasClearCoat;
					}
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) &&   StrataPixelHeader.StrataTree.BSDFs[0] .VGPRs[0].w ==   StrataPixelHeader.StrataTree.BSDFs[0] .VGPRs[2].w)
				{
					OptimisedModeMask |= SingleHasCloth;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
				{
					OptimisedModeMask |= SingleIsThin;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (4u))
				{
					OptimisedModeMask |= SingleIsSimpleVolume;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
				{
					OptimisedModeMask |= SingleIsWrap;
				}
				if (  uint(( StrataPixelHeader.StrataTree.BSDFs[0] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
				{
					OptimisedModeMask |= SingleIsSSSProfile;
				}

				if (((OptimisedModeMask & SingleHasClearCoat) == SingleHasClearCoat) || ((OptimisedModeMask & SingleHasClearCoat) == (SingleHasHaziness | SingleHasClearCoat)))
				{
					OptimisedLegacyMode = 1;
				}
				else if ((OptimisedModeMask & SingleHasCloth) == SingleHasCloth)
				{
					OptimisedLegacyMode = 2;
				}				
				else if ((OptimisedModeMask & SingleIsWrapThin) == SingleIsWrapThin)
				{
					OptimisedLegacyMode = 5;
					SSSData.Header.Bytes = 0; 
				}
				else if ((OptimisedModeMask & SingleIsWrap) == SingleIsWrap)
				{
					OptimisedLegacyMode = 3;
					SSSData.Header.Bytes = 0; 
				}
				else if ((OptimisedModeMask & (SingleIsSSSProfile|SingleIsThin)) == SingleIsSSSProfile) 
				{
					
					OptimisedLegacyMode = 4;
					SSSData.Header.Bytes = 0; 
				}
			
			}
		}

		
		
#line 431 "/Engine/Private/Strata/StrataExport.ush"

		
		
	
		   StrataPixelHeader.State = ( StrataPixelHeader.State & (~ ( ((1u<<( 8 ))-1)<<( (0					+ 8) )))) | ((( StrataPackIrradianceAndOcclusion(StrataPixelHeader.IrradianceAO, 0) ) &  ((1u<<( 8 ))-1)) << ( (0					+ 8) ));
	

		

		
		
		
		
		
		
		
		const bool bHasFastEncoding = StrataPixelHeader.IsSimpleMaterial();
		const bool bHasFastWaterEncoding = StrataPixelHeader.IsSingleLayerWater();
		const bool bHasSingleEncoding = StrataPixelHeader.IsSingleMaterial();
		const bool bCustomEncoding = StrataPixelHeader.IsHair() || StrataPixelHeader.IsEye();

		
		if (!bHasFastEncoding && !bHasSingleEncoding && !bCustomEncoding && !bHasFastWaterEncoding)
		{
			
			const uint PackedHeader = PackStrataHeader(BSDFVisibleCount, StrataPixelHeader);
			 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedHeader );

			
		
			[unroll]
			for (uint i = 0; i < StrataPixelHeader.SharedLocalBases.Count; ++i)
			{
				const uint BasisType = StrataGetSharedLocalBasisType(StrataPixelHeader.SharedLocalBases.Types, i);
				if (BasisType == 0u)
				{
					 StrataStoreUint1(StrataBuffer, StrataAddressing, StrataPackNormal(StrataPixelHeader.SharedLocalBases.Normals[i]) );
				}
				else 
				{
					 StrataStoreUint1(StrataBuffer, StrataAddressing, StrataPackNormalAndTangent(StrataPixelHeader.SharedLocalBases.Normals[i], StrataPixelHeader.SharedLocalBases.Tangents[i]) );
				}
			}
		
		}

		{
			int BSDFCount = 0;
			 [loop]
			for (int BSDFIdx = 0; BSDFIdx < StrataPixelHeader.StrataTree.BSDFCount; ++BSDFIdx)
			{
			

				const bool bIsVisible = StrataIsBSDFVisible(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx]);

				
				[branch]
				if (bIsVisible)
				{
					const uint GreyScaleThroughputV = StrataHasGreyScaleWeight(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV) ? 1 : 0;
					   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (((0			+ 1)			+ 1)			+ 3) )))) | ((( GreyScaleThroughputV ) &  ((1u<<( 1 ))-1)) << ( (((0			+ 1)			+ 1)			+ 3) ));

					const bool bTransmittanceAboveAlongNRequired = any(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TransmittanceAboveAlongN < 1.0f);
					   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3)	+ 2) )))) | ((( bTransmittanceAboveAlongNRequired ) &  ((1u<<( 1 ))-1)) << ( (((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3)	+ 2) ));

					
					const bool bFastEncodedBSDF = bHasFastEncoding && BSDFIdx == OneBSDFMaterial_Index;
					if (bFastEncodedBSDF)
					{
						
						
						const uint PackedDiffuse20Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
						const uint PackedDiffuse12Bits = PackedDiffuse20Bits & 0xFFF;
						const uint PackedDiffuse8Bits = (PackedDiffuse20Bits >> 12) & 0xFF;
						const uint PackedF020Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz, Dither);
						const uint PackedRoughness8bits = PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w);

						
						{
							uint Out = 0;
							   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

							uint Packed16 = (PackedDiffuse8Bits << 8) | PackedRoughness8bits;
							Out = (Out & ((1u<<(8 + 8))-1u)) | (Packed16 << (8 + 8));
							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );

						


						}
						
						{
							uint Out = PackedF020Bits | (PackedDiffuse12Bits << 20);
							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );
						}
						
						StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
					}
					
					else if (bHasSingleEncoding && BSDFIdx == OneBSDFMaterial_Index)
					{
						
						
						   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 1 ))-1)<<( (0			+ 1) )))) | ((( 1 ) &  ((1u<<( 1 ))-1)) << ( (0			+ 1) ));

						
						uint Out = 0;
						   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

						Out = Out & ((1u<<(8 + 8))-1u);
						Out = Out | ((OptimisedLegacyMode & ((1u<<3)-1u))	<< ((8 + 8)));

						[branch]
						if (OptimisedLegacyMode == 0)
						{
							Out = Out | ((StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State & ((1u<<(((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) + 1))-1u)) << ((8 + 8) + 3));
							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );
						}
						
						
						else if(OptimisedLegacyMode == 1)
						{
							const uint PackedDiffuse20Bits	= PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
							const uint PackedF024Bits		= PackRGBA8(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz, 0.0f));
							const uint PackedClearCoat16Bits=   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Haziness;
							const uint PackedRoughness8Bits = PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w);

							
							


							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out					| ((PackedRoughness8Bits & 0xFF) << 24) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedDiffuse20Bits	| ((PackedClearCoat16Bits & 0xFF00) << 12) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedF024Bits		| (PackedClearCoat16Bits << 24) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}
						else if (OptimisedLegacyMode == 2)
						{
							const uint PackedDiffuse20Bits	= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz	, Dither);
							const uint PackedF020Bits		= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz				, Dither);
							const uint PackedFuzzColor20bits= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].xyz		, Dither);
							const uint PackedFuzzAmount8bits= PackR8(			  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].w);
							

							
							


							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out					| ((PackedFuzzAmount8bits & 0xFF) << ((8 + 8) + 3)) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedDiffuse20Bits	| ((PackedFuzzColor20bits & 0xFFC00) << 10) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedF020Bits		| ((PackedFuzzColor20bits & 0x3FF) << 20) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}
						else if (OptimisedLegacyMode == 3 || OptimisedLegacyMode == 5)
						{
							const float SSSWOpacity = StrataSubSurfaceGetWrapOpacityFromAnisotropy(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].w);

							const uint PackedDiffuse20Bits		= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz	, Dither);
							const uint PackedF020Bits			= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz				, Dither);
							const uint PackedSSSWOpacity7bits	= PackR7(			SSSWOpacity					, 0.5);	
							const uint PackedSSSMFP30bits		= PackR10G10B10F(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz);
							

							const uint PackedSSSMFP12BitsA = (PackedSSSMFP30bits      ) & 0xFFF; 
							const uint PackedSSSMFP12BitsB = (PackedSSSMFP30bits >> 12) & 0xFFF; 
							const uint PackedSSSMFP6BitsC  = (PackedSSSMFP30bits >> 24) & 0x03F; 

							
							


							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out					| ((PackedSSSWOpacity7bits & 0x7F) << ((8 + 8) + 3)) | (PackedSSSMFP6BitsC << (7 + (8 + 8) + 3)) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedDiffuse20Bits  | (PackedSSSMFP12BitsA << 20) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedF020Bits		| (PackedSSSMFP12BitsB << 20) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}
						else if (OptimisedLegacyMode == 4)
						{
							const uint PackedDiffuse20Bits		= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz	, Dither);
							const uint PackedF020Bits			= PackR7G7B6Gamma2(	  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz				, Dither);

							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out					| (PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w) << 24) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedDiffuse20Bits  | (PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].y) << 24) );
							
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedF020Bits		| (PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].x) << 24) );

							
							StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;
						}

						


					}
					
					else if (StrataPixelHeader.IsEye())
					{
						
						uint Out = 0;
						   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));
						Out = Out & ((1u<<(8 + 8))-1u);
						Out = Out | PackRGBA8(float4(0, 0,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].y,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].x));
						 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );

						


					}
					
					else if (StrataPixelHeader.IsHair())
					{
						
						uint Out = 0;
						   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));
						Out = Out & ((1u<<(8 + 8))-1u);
						 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );

						


					}
					
					else if (bHasFastWaterEncoding)
					{
						



						
						
						const uint PackedBaseColor20Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
						const uint PackedBaseColor12Bits = PackedBaseColor20Bits & 0xFFF;
						const uint PackedBaseColor8Bits = (PackedBaseColor20Bits >> 12) & 0xFF;

						
						const uint Roughness8Bits = PackR8(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z);
						const uint PackedOpacityMetalSpec20Bits = PackR7G7B6Linear(float3(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].w,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].x,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].y), Dither);

						
						{
							uint Out = 0;
							   Out = ( Out & (~ ( ((1u<<( (8 + 8) ))-1)<<( 0 )))) | ((( StrataPixelHeader.State ) &  ((1u<<( (8 + 8) ))-1)) << ( 0 ));

							uint Packed16 = (PackedBaseColor8Bits << 8) | Roughness8Bits;
							Out = (Out & ((1u<<(8 + 8))-1u)) | (Packed16 << (8 + 8));
							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );
						}
						
						{
							uint Out = (PackedBaseColor12Bits << 20) | PackedOpacityMetalSpec20Bits;
							 StrataStoreUint1(StrataBuffer, StrataAddressing, Out );
						}
						
						StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State = 0;

					}
					
					else if (GreyScaleThroughputV > 0)
					{
						   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State = ( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State & (~ ( ((1u<<( 10 ))-1)<<( 22 )))) | ((( Pack10F(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV.x) ) &  ((1u<<( 10 ))-1)) << ( 22 ));
						 StrataStoreUint1(StrataBuffer, StrataAddressing, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State );
					}
					else
					{
						 StrataStoreUint1(StrataBuffer, StrataAddressing, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].State );
						 StrataStoreUint1(StrataBuffer, StrataAddressing, PackR11G11B10F(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].LuminanceWeightV) );
					}

					
					if (!bFastEncodedBSDF && !bHasFastWaterEncoding && OptimisedLegacyMode == 0)
					{
						const uint BSDFType =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1));
						switch (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1) )) &  ((1u<<( 3 ))-1)))
						{
						case 0:
						{
							
							
							const uint PackedDiffuse20Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz, Dither);
							const uint PackedF020Bits = PackR7G7B6Gamma2(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].xyz, Dither);
							const uint PackedData32Bits = ((PackedDiffuse20Bits << 12) & 0xFFFFF000) | (PackedF020Bits & 0xFFF);
							const uint PackedData8Bits = (PackedF020Bits >> 12) & 0xFF;

							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedData32Bits );
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackedData8Bits | PackRGBA8(float4(0.0f,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w, (  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].w + 1.f) * 0.5f, (  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].w + 1.f) * 0.5f)) );

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) ||   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((((0			+ 1)			+ 1)			+ 3)		+ 1) )) &  ((1u<<( 1 ))-1)))
							{
								
								float3 F90 = saturate(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[2].xyz);
								const float Divisor = max(F90.r, max(F90.g, F90.b));
								F90 = Divisor > 0.0f ? F90 / Divisor : 1.0f;
								float3 F90YCoCg = LinearRGB_2_NormalisedYCoCg(F90);

								uint F90Data = PackRGBA8(float4(F90YCoCg.y, F90YCoCg.z, 0, 0));
								uint HazinessData =   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .Haziness;
								 StrataStoreUint1(StrataBuffer, StrataAddressing, HazinessData << 16 | F90Data );
							}

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (0u))
							{
								
								if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) != (4u))
								{
									StrataSubSurfaceHeaderSetSSSType(SSSData.Header,   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)));
									if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (1u))
									{
										StrataSubSurfaceHeaderSetWrap(SSSData.Header,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].w);
									}
									else if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
									{
										StrataSubSurfaceHeaderSetProfile(SSSData.Header,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].y, StrataSubsurfaceProfileIdTo8bits(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].x));
									}
									else
									{
										StrataSubSurfaceHeaderSetNonProfile(SSSData.Header,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz);
									}

									StrataSubsurfaceExtrasSetBaseColor(SSSData.Extras,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz);
								}

								if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u))
								{
									
									
									 StrataStoreUint1(StrataBuffer, StrataAddressing, PackSSSProfile(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].x,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].y,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .ThicknessCm) );
								}
								else
								{
									
									
									
									if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)) &&   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (2u))
									{
										  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz= RescaleMFPToComputationSpace(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .ThicknessCm, 100.0f);
									}

									
									 StrataStoreUint1(StrataBuffer, StrataAddressing, PackR11G11B10F(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz) );
								}
							}

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1) )) &  ((1u<<( 1 ))-1)))
							{
								 StrataStoreUint1(StrataBuffer, StrataAddressing, PackFuzz(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[4].w,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[2].w, Dither) );
							}

							if (  uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( (((((((((((0			+ 1)			+ 1)			+ 3)		+ 1)			+ 1)				+ 1)			+ 1)			+ 1)				+ 1)			+ 3)	+ 2) )) &  ((1u<<( 1 ))-1)))
							{
								 StrataStoreUint1(StrataBuffer, StrataAddressing, PackColorLinearToGamma2AlphaLinear(float4(StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].TransmittanceAboveAlongN, StrataPixelHeader.StrataTree.BSDFs[BSDFIdx].CoverageAboveAlongN)) );
							}

							
#line 817 "/Engine/Private/Strata/StrataExport.ush"


							
						}
						break;
						case 3:
						{
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackColorLinearToGamma2AlphaLinear(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].x)) );
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackRGBA8(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].y,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].w)) );
							
						}
						break;
						case 5:
						{
							const float2 EncodedIrisNormal = UnitVectorToOctahedron(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[2].xyz);
							const float2 EncodedIrisPlaneNormal = UnitVectorToOctahedron(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[3].xyz);
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackColorLinearToGamma2AlphaLinear(float4(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].w)) );
							 StrataStoreUint1(StrataBuffer, StrataAddressing, PackRGBA8(float4(EncodedIrisNormal * 0.5f + 0.5f, EncodedIrisPlaneNormal * 0.5f + 0.5f)) );
							

							
							const bool bHasSSS =   uint(( StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .State >>( ((0			+ 1)			+ 1) )) &  ((1u<<( 3 ))-1)) == (3u);
							if (bHasSSS)
							{
								StrataSubSurfaceHeaderSetSSSType(SSSData.Header, (3u));
								StrataSubSurfaceHeaderSetProfile(SSSData.Header, 1.0f, StrataSubsurfaceProfileIdTo8bits(  StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[1].z));
								StrataSubsurfaceExtrasSetBaseColor(SSSData.Extras,   StrataPixelHeader.StrataTree.BSDFs[BSDFIdx] .VGPRs[0].xyz);
							}
						}
						break;
						
						
						
						
						
						}
					}

					
					BSDFCount++;
				}

			
			}

			 { };
		}

		FinalizeWrites(StrataBuffer, StrataAddressing);
	}


}

#line 224 "/Engine/Private/RayTracing/RayTracingMaterialHitShaders.usf"
void GetMaterialPayload( 
	FPixelMaterialInputs PixelMaterialInputs,
	FMaterialPixelParameters MaterialParameters,
	FVertexFactoryInterpolantsVSToPS Interpolants,
	bool bIsEnableSkyLightContribution,
	inout FMaterialClosestHitPayload Payload)

{
  
	const float Dither = 0.5f;
	float3 EmissiveLuminance = 0.0f;
	float TotalCoverage = 1.f;
	bool bStrataSubsurfaceEnable = false;
	const float3 WorldBentNormal0 = GetWorldBentNormalZero(MaterialParameters);

  







	
	FStrataData StrataData = PixelMaterialInputs.GetFrontStrataData();
	FStrataPixelHeader StrataPixelHeader = MaterialParameters.GetFrontStrataHeader();
	StrataPixelHeader.IrradianceAO.MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);
	StrataPixelHeader.SetCastContactShadow(GetPrimitiveData(MaterialParameters).Flags & 0x200);
	StrataPixelHeader.SetDynamicIndirectShadowCasterRepresentation(GetPrimitiveData(MaterialParameters).Flags & 0x100);

	FStrataSubsurfaceData SSSData = (FStrataSubsurfaceData)0;
	FStrataTopLayerData TopLayerData = (FStrataTopLayerData)0;
	FStrataOpaqueRoughRefractionData OpaqueRoughRefractionData = (FStrataOpaqueRoughRefractionData)0;
	FStrataIntegrationSettings Settings = InitStrataIntegrationSettings();

	
	FStrataAddressing StrataAddressing = GetStrataPixelDataByteOffset(0,0,0);

	const float3 CamVector = MaterialParameters.CameraVector;	
	Payload.StrataData = InitialiseRWStrataMaterialContainer();
	PackStrataOut(
		Payload.StrataData,
		Dither,
		Settings,
		StrataAddressing,
		StrataPixelHeader, StrataData, 
		CamVector, 
		WorldBentNormal0,
		bStrataSubsurfaceEnable, 
		EmissiveLuminance,
		SSSData, TopLayerData, OpaqueRoughRefractionData
	);

	Payload.StrataData.PackedTopLayerData = StrataPackTopLayerData(TopLayerData);
  

	Payload.Radiance += EmissiveLuminance;
	Payload.TranslatedWorldPos = LWCToFloat(LWCAdd(MaterialParameters.AbsoluteWorldPosition, ResolvedView.PreViewTranslation));

	

	
	Payload.Opacity = TotalCoverage;
	
	
	if (GetMaterialMask(PixelMaterialInputs) < 0)
	{
		Payload.Opacity = 0;
	}
	
  
}

#line 458 "/Engine/Private/RayTracing/RayTracingMaterialHitShaders.usf"
[shader("closesthit")] void MaterialCHS (inout FPackedMaterialClosestHitPayload  PackedPayload , in FRayTracingIntersectionAttributes  Attributes )
{
	PackedPayload.HitT = RayTCurrent();




	GlobalTextureMipBias = PackedPayload.GetMipBias();

	ResolvedView = ResolveView();

	FVertexFactoryInterpolantsVSToPS Interpolants;
	const float3 TranslatedWorldPosition = TranslatedWorldRayOrigin() + RayTCurrent() * WorldRayDirection();
	float4 SvPosition = mul(float4(TranslatedWorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);
	
	FRayCone PropagatedCone = PropagateRayCone(PackedPayload.GetRayCone(), 0 , RayTCurrent());
	CalcInterpolants(PropagatedCone, Attributes, Interpolants);





	float3 GeoNormal = GetGeometryNormalFromTriangleBaseAttributes(PrimitiveIndex());
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);


	bool bIsLumenPayload = PackedPayload.IsLumenPayload();
	if (bIsLumenPayload)
	{
		const float3 SurfaceNormal = GeoNormal;
		const int PrimitiveIndex = GetInstanceUserData();
		const int PrimitiveInstanceIndex = InstanceIndex() - GetBaseInstanceIndex();

		PackedPayload.SetGeometryNormal(SurfaceNormal);
		PackedPayload.SetSceneInstanceIndex(
			GetGPUSceneInstanceIndex(PrimitiveIndex, PrimitiveInstanceIndex)
		);
	}

	if (PackedPayload.IsMinimalPayloadMode())
	{
		
		
		
		return;
	}

	CurrentPayloadInputFlags = PackedPayload.GetFlags();

	FPixelMaterialInputs PixelMaterialInputs;

	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = TranslatedWorldRayOrigin() + WorldRayDirection() * RayTCurrent();
		
		bool bIsFrontFace = HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE;

		
		
		
		
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
		
	}

	FMaterialClosestHitPayload Payload = (FMaterialClosestHitPayload)0;

	


	Payload.ShadingModelID = GetMaterialShadingModel(PixelMaterialInputs);

	










		uint MaterialBlendingMode = 0;
	

	Payload.BlendingMode = MaterialBlendingMode;
	Payload.PrimitiveLightingChannelMask = GetPrimitive_LightingChannelMask(MaterialParameters.PrimitiveId);

	Payload.HitT = RayTCurrent();
	if (HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE)
	{
		Payload.SetFrontFace();
	}





	
	GetMaterialPayload(PixelMaterialInputs, MaterialParameters, Interpolants, PackedPayload.IsEnableSkyLightContribution(), Payload); 

	PackedPayload = PackRayTracingPayload(Payload, PropagatedCone);

	
	if (bIsLumenPayload)
	{
		const int PrimitiveIndex = GetInstanceUserData();
		const int PrimitiveInstanceIndex = InstanceIndex() - GetBaseInstanceIndex();
		PackedPayload.SetSceneInstanceIndex(GetGPUSceneInstanceIndex(PrimitiveIndex, PrimitiveInstanceIndex));
		PackedPayload.SetGeometryNormal(GeoNormal);
	}


}

#line 574 "/Engine/Private/RayTracing/RayTracingMaterialHitShaders.usf"
[shader("anyhit")] void MaterialAHS (inout FPackedMaterialClosestHitPayload  PackedPayload , in FRayTracingIntersectionAttributes  Attributes )
{









	
	


	
	
#line 606 "/Engine/Private/RayTracing/RayTracingMaterialHitShaders.usf"


	

	GlobalTextureMipBias = PackedPayload.GetMipBias();

	ResolvedView = ResolveView();

	FVertexFactoryInterpolantsVSToPS Interpolants;
	const float3 TranslatedWorldPosition = TranslatedWorldRayOrigin() + RayTCurrent() * WorldRayDirection();
	float4 SvPosition = mul(float4(TranslatedWorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);

	CalcInterpolants(PackedPayload.GetRayCone(), Attributes, Interpolants);





	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, SvPosition);


	CurrentPayloadInputFlags = PackedPayload.GetFlags();

	FPixelMaterialInputs PixelMaterialInputs;

	{
		float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
		float3 TranslatedWorldPosition = TranslatedWorldRayOrigin() + WorldRayDirection() * RayTCurrent();
		
		bool bIsFrontFace = HitKind() == HIT_KIND_TRIANGLE_FRONT_FACE;

		MaterialParameters.CameraVector = -WorldRayDirection();
		
		
		
		
		
		CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
		
	}

	


	
	if (GetMaterialMask(PixelMaterialInputs) < 0)
	{
		IgnoreHit();
	}





}



#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 376963194
Strata, 158337041
DrawRectangleParameters, 3145984
InstancedView, 450888449
Primitive, 50331904
Scene, 273683233
InstanceCulling, 3146265
MobileSceneTextures, 147131313
SceneTexturesStruct, 158338568
NaniteRayTracing, 4588345
Nanite, 164563880
MobileReflectionCapture, 2425088
InstanceVF, 104204038
SingleLayerWater, 1641252
PrimitiveDither, 1048832
PrimitiveFade, 1048832
DeferredDecal, 2097668
HairCardsVF, 60686848
SpeedTreeData, 39846144
Atmosphere, 11534592
BlueNoise, 3473677
OpaqueBasePass, 159911720
BasePass, 148439296
ReflectionCaptureES31, 943719169
ReflectionCaptureSM5, -1076886783
ReflectionStruct, 206569728
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
ShaderPrintData, 5243136
LocalVFLooseParameters, 2490654
LocalVF, 105252632
InstancedVFLooseParameters, 6291712
MaterialCollection, 5243136
Material, 115867904
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_GlobalDistanceFieldPageAtlasTextureSampler, View, 8, 25
View_GlobalDistanceFieldCoverageAtlasTextureSampler, View, 8, 26
View_GlobalDistanceFieldMipTextureSampler, View, 8, 27
View_AtmosphereTransmittanceTexture, View, 5, 28
View_AtmosphereTransmittanceTextureSampler, View, 8, 29
View_AtmosphereIrradianceTexture, View, 5, 30
View_AtmosphereIrradianceTextureSampler, View, 8, 31
View_AtmosphereInscatterTexture, View, 5, 32
View_AtmosphereInscatterTextureSampler, View, 8, 33
View_PerlinNoiseGradientTexture, View, 5, 34
View_PerlinNoiseGradientTextureSampler, View, 8, 35
View_PerlinNoise3DTexture, View, 5, 36
View_PerlinNoise3DTextureSampler, View, 8, 37
View_SobolSamplingTexture, View, 5, 38
View_SharedPointWrappedSampler, View, 8, 39
View_SharedPointClampedSampler, View, 8, 40
View_SharedBilinearWrappedSampler, View, 8, 41
View_SharedBilinearClampedSampler, View, 8, 42
View_SharedBilinearAnisoClampedSampler, View, 8, 43
View_SharedTrilinearWrappedSampler, View, 8, 44
View_SharedTrilinearClampedSampler, View, 8, 45
View_PreIntegratedBRDF, View, 5, 46
View_PreIntegratedBRDFSampler, View, 8, 47
View_SkyIrradianceEnvironmentMap, View, 6, 48
View_TransmittanceLutTexture, View, 5, 49
View_TransmittanceLutTextureSampler, View, 8, 50
View_SkyViewLutTexture, View, 5, 51
View_SkyViewLutTextureSampler, View, 8, 52
View_DistantSkyLightLutTexture, View, 5, 53
View_DistantSkyLightLutTextureSampler, View, 8, 54
View_CameraAerialPerspectiveVolume, View, 5, 55
View_CameraAerialPerspectiveVolumeSampler, View, 8, 56
View_CameraAerialPerspectiveVolumeMieOnly, View, 5, 57
View_CameraAerialPerspectiveVolumeMieOnlySampler, View, 8, 58
View_CameraAerialPerspectiveVolumeRayOnly, View, 5, 59
View_CameraAerialPerspectiveVolumeRayOnlySampler, View, 8, 60
View_HairScatteringLUTTexture, View, 5, 61
View_HairScatteringLUTSampler, View, 8, 62
View_GGXLTCMatTexture, View, 5, 63
View_GGXLTCMatSampler, View, 8, 64
View_GGXLTCAmpTexture, View, 5, 65
View_GGXLTCAmpSampler, View, 8, 66
View_SheenLTCTexture, View, 5, 67
View_SheenLTCSampler, View, 8, 68
View_ShadingEnergyGGXSpecTexture, View, 5, 69
View_ShadingEnergyGGXGlassTexture, View, 5, 70
View_ShadingEnergyClothSpecTexture, View, 5, 71
View_ShadingEnergyDiffuseTexture, View, 5, 72
View_ShadingEnergySampler, View, 8, 73
View_GlintTexture, View, 5, 74
View_GlintSampler, View, 8, 75
View_SimpleVolumeTexture, View, 5, 76
View_SimpleVolumeTextureSampler, View, 8, 77
View_SimpleVolumeEnvTexture, View, 5, 78
View_SimpleVolumeEnvTextureSampler, View, 8, 79
View_SSProfilesTexture, View, 5, 80
View_SSProfilesSampler, View, 8, 81
View_SSProfilesTransmissionSampler, View, 8, 82
View_SSProfilesPreIntegratedTexture, View, 5, 83
View_SSProfilesPreIntegratedSampler, View, 8, 84
View_SpecularProfileTexture, View, 5, 85
View_SpecularProfileSampler, View, 8, 86
View_WaterIndirection, View, 6, 87
View_WaterData, View, 6, 88
View_RectLightAtlasTexture, View, 5, 89
View_RectLightAtlasSampler, View, 8, 90
View_IESAtlasTexture, View, 5, 91
View_IESAtlasSampler, View, 8, 92
View_LandscapeWeightmapSampler, View, 8, 93
View_LandscapeIndirection, View, 6, 94
View_LandscapePerComponentData, View, 6, 95
View_VTFeedbackBuffer, View, 7, 96
View_PhysicsFieldClipmapBuffer, View, 6, 97
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_OpaqueRoughRefractionTexture, Strata, 9, 2
Strata_BSDFOffsetTexture, Strata, 9, 3
Strata_BSDFTileTexture, Strata, 9, 4
Strata_BSDFTileCountBuffer, Strata, 16, 5
Scene_GPUScene_GPUSceneInstanceSceneData, Scene, 16, 0
Scene_GPUScene_GPUSceneInstancePayloadData, Scene, 16, 1
Scene_GPUScene_GPUScenePrimitiveSceneData, Scene, 16, 2
Scene_GPUScene_GPUSceneLightmapData, Scene, 16, 3
Scene_GPUScene_GPUSceneLightData, Scene, 16, 4
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_ScenePartialDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_ScenePartialDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_CustomStencilTexture, MobileSceneTextures, 12, 8
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 9
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 10
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 15
MobileSceneTextures_LocalLightTextureA, MobileSceneTextures, 9, 16
MobileSceneTextures_LocalLightTextureB, MobileSceneTextures, 9, 17
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 19
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 20
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 21
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 22
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_ScenePartialDepthTexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 11
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 12
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 13
NaniteRayTracing_ClusterPageData, NaniteRayTracing, 6, 0
NaniteRayTracing_HierarchyBuffer, NaniteRayTracing, 6, 1
NaniteRayTracing_RayTracingDataBuffer, NaniteRayTracing, 6, 2
Nanite_ClusterPageData, Nanite, 16, 0
Nanite_VisibleClustersSWHW, Nanite, 16, 1
Nanite_HierarchyBuffer, Nanite, 16, 2
Nanite_MaterialTileRemap, Nanite, 16, 3
Nanite_MaterialDepthTable, Nanite, 6, 4
Nanite_ShadingMask, Nanite, 9, 5
Nanite_VisBuffer64, Nanite, 9, 6
Nanite_DbgBuffer64, Nanite, 9, 7
Nanite_DbgBuffer32, Nanite, 9, 8
Nanite_RayTracingDataBuffer, Nanite, 16, 9
Nanite_ShadingBinMeta, Nanite, 16, 10
Nanite_ShadingBinData, Nanite, 16, 11
Nanite_MultiViewIndices, Nanite, 16, 12
Nanite_MultiViewRectScaleOffsets, Nanite, 16, 13
Nanite_InViews, Nanite, 16, 14
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
SingleLayerWater_SceneColorWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 0
SingleLayerWater_SceneColorWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 1
SingleLayerWater_SceneDepthWithoutSingleLayerWaterTexture, SingleLayerWater, 9, 2
SingleLayerWater_SceneDepthWithoutSingleLayerWaterSampler, SingleLayerWater, 8, 3
SingleLayerWater_CustomDepthTexture, SingleLayerWater, 9, 4
SingleLayerWater_CustomStencilTexture, SingleLayerWater, 12, 5
SingleLayerWater_CustomDepthSampler, SingleLayerWater, 8, 6
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapTexture, SingleLayerWater, 9, 7
SingleLayerWater_ForwardDirLightCloudShadow_CloudShadowmapSampler, SingleLayerWater, 8, 8
SingleLayerWater_BlueNoise_ScalarTexture, SingleLayerWater, 5, 9
SingleLayerWater_BlueNoise_Vec2Texture, SingleLayerWater, 5, 10
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
HairCardsVF_PositionBuffer, HairCardsVF, 6, 0
HairCardsVF_PreviousPositionBuffer, HairCardsVF, 6, 1
HairCardsVF_NormalsBuffer, HairCardsVF, 6, 2
HairCardsVF_UVsBuffer, HairCardsVF, 6, 3
HairCardsVF_MaterialsBuffer, HairCardsVF, 6, 4
HairCardsVF_DepthTexture, HairCardsVF, 5, 5
HairCardsVF_DepthSampler, HairCardsVF, 8, 6
HairCardsVF_TangentTexture, HairCardsVF, 5, 7
HairCardsVF_TangentSampler, HairCardsVF, 8, 8
HairCardsVF_CoverageTexture, HairCardsVF, 5, 9
HairCardsVF_CoverageSampler, HairCardsVF, 8, 10
HairCardsVF_AttributeTexture, HairCardsVF, 5, 11
HairCardsVF_AttributeSampler, HairCardsVF, 8, 12
HairCardsVF_AuxilaryDataTexture, HairCardsVF, 5, 13
HairCardsVF_AuxilaryDataSampler, HairCardsVF, 8, 14
HairCardsVF_MaterialTexture, HairCardsVF, 5, 15
HairCardsVF_MaterialSampler, HairCardsVF, 8, 16
BlueNoise_ScalarTexture, BlueNoise, 5, 0
BlueNoise_Vec2Texture, BlueNoise, 5, 1
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid32Bit, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid16Bit, OpaqueBasePass, 16, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 9, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_OpaqueRoughRefractionTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 46
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_EyeAdaptationBuffer, OpaqueBasePass, 16, 48
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid32Bit, BasePass, 16, 6
BasePass_Forward_CulledLightDataGrid16Bit, BasePass, 16, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid32Bit, BasePass, 16, 14
BasePass_ForwardISR_CulledLightDataGrid16Bit, BasePass, 16, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 9, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 9, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
LocalVFLooseParameters_GPUSkinPassThroughPositionBuffer, LocalVFLooseParameters, 6, 0
LocalVFLooseParameters_GPUSkinPassThroughPreviousPositionBuffer, LocalVFLooseParameters, 6, 1
LocalVF_VertexFetch_TexCoordBuffer, LocalVF, 6, 0
LocalVF_VertexFetch_PositionBuffer, LocalVF, 6, 1
LocalVF_VertexFetch_PreSkinPositionBuffer, LocalVF, 6, 2
LocalVF_VertexFetch_PackedTangentsBuffer, LocalVF, 6, 3
LocalVF_VertexFetch_ColorComponentsBuffer, LocalVF, 6, 4
Material_Wrap_WorldGroupSettings, Material, 8, 0
Material_Clamp_WorldGroupSettings, Material, 8, 1
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=closesthit=MaterialCHS anyhit=MaterialAHS -shaderPlatformName=PCD3D_SM5_Preview -rhs D:/active_labour/unreal/FinalPanopticon/FinalPanopticon/Saved/ShaderDebugInfo/PCD3D_SM5_Preview/M_Ocean_SLW_889df578732c28e9/Default/FLocalVertexFactory/TMaterialCHSFPrecomputedVolumetricLightmapLightingPolicyFAnyHitShader/0/RayTracingMaterialHitShaders.usf -cflags=8589938688 -nocrashreports
#endif /*DIRECT COMPILE*/
