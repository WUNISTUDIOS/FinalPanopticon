; shader hash: 1f234364927a254bdf74be621111fe8b
;
; Buffer Definitions:
;
; cbuffer UniformBufferConstants_View
; {
;
;   struct UniformBufferConstants_View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       uint4 View_ViewRectMinAndSize;                ; Offset: 2016
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2032
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2048
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2064
;       float4 View_ScreenToViewSpace;                ; Offset: 2080
;       float2 View_BufferToSceneTextureScale;        ; Offset: 2096
;       float2 View_ResolutionFractionAndInv;         ; Offset: 2104
;       int View_NumSceneColorMSAASamples;            ; Offset: 2112
;       float View_ProjectionDepthThicknessScale;     ; Offset: 2116
;       float View_PreExposure;                       ; Offset: 2120
;       float View_OneOverPreExposure;                ; Offset: 2124
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2128
;       float4 View_SpecularOverrideParameter;        ; Offset: 2144
;       float4 View_NormalOverrideParameter;          ; Offset: 2160
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2176
;       float View_PrevFrameGameTime;                 ; Offset: 2184
;       float View_PrevFrameRealTime;                 ; Offset: 2188
;       float View_OutOfBoundsMask;                   ; Offset: 2192
;       float PrePadding_View_2196;                   ; Offset: 2196
;       float PrePadding_View_2200;                   ; Offset: 2200
;       float PrePadding_View_2204;                   ; Offset: 2204
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2208
;       float View_CullingSign;                       ; Offset: 2220
;       float View_NearPlane;                         ; Offset: 2224
;       float View_GameTime;                          ; Offset: 2228
;       float View_RealTime;                          ; Offset: 2232
;       float View_DeltaTime;                         ; Offset: 2236
;       float View_MaterialTextureMipBias;            ; Offset: 2240
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2244
;       uint View_Random;                             ; Offset: 2248
;       uint View_FrameNumber;                        ; Offset: 2252
;       uint View_FrameCounter;                       ; Offset: 2256
;       uint View_StateFrameIndexMod8;                ; Offset: 2260
;       uint View_StateFrameIndex;                    ; Offset: 2264
;       uint View_DebugViewModeMask;                  ; Offset: 2268
;       uint View_WorldIsPaused;                      ; Offset: 2272
;       float View_CameraCut;                         ; Offset: 2276
;       float View_UnlitViewmodeMask;                 ; Offset: 2280
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_DirectionalLightColor;            ; Offset: 2288
;       float3 View_DirectionalLightDirection;        ; Offset: 2304
;       float PrePadding_View_2316;                   ; Offset: 2316
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2320
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2352
;       float4 View_TemporalAAParams;                 ; Offset: 2384
;       float4 View_CircleDOFParams;                  ; Offset: 2400
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2416
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2420
;       float View_DepthOfFieldScale;                 ; Offset: 2424
;       float View_DepthOfFieldFocalLength;           ; Offset: 2428
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2432
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2436
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2440
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2444
;       float View_GeneralPurposeTweak;               ; Offset: 2448
;       float View_GeneralPurposeTweak2;              ; Offset: 2452
;       float View_DemosaicVposOffset;                ; Offset: 2456
;       float View_DecalDepthBias;                    ; Offset: 2460
;       float3 View_IndirectLightingColorScale;       ; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2496
;       float PrePadding_View_2508;                   ; Offset: 2508
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2512
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2544
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2576
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2608
;       float4 View_AtmosphereLightDiscCosHalfApexAngle_PPTrans[2];; Offset: 2640
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2672
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2688
;       float PrePadding_View_2700;                   ; Offset: 2700
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2704
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2720
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2784
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2800
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2804
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2808
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2812
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2816
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2832
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2836
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2840
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2844
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2848
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2852
;       float PrePadding_View_2856;                   ; Offset: 2856
;       float PrePadding_View_2860;                   ; Offset: 2860
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2864
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2876
;       float View_RealTimeReflectionCapture;         ; Offset: 2880
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2884
;       float PrePadding_View_2888;                   ; Offset: 2888
;       float PrePadding_View_2892;                   ; Offset: 2892
;       float4 View_AmbientCubemapTint;               ; Offset: 2896
;       float View_AmbientCubemapIntensity;           ; Offset: 2912
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2916
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2920
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2924
;       float4 View_SkyLightColor;                    ; Offset: 2928
;       float4 View_MobileSkyIrradianceEnvironmentMap[8];; Offset: 2944
;       float View_MobilePreviewMode;                 ; Offset: 3072
;       float View_HMDEyePaddingOffset;               ; Offset: 3076
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3080
;       float View_ShowDecalsMask;                    ; Offset: 3084
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3088
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3092
;       float PrePadding_View_3096;                   ; Offset: 3096
;       float PrePadding_View_3100;                   ; Offset: 3100
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3104
;       int View_StereoPassIndex;                     ; Offset: 3116
;       float4 View_GlobalVolumeTranslatedCenterAndExtent[6];; Offset: 3120
;       float4 View_GlobalVolumeTranslatedWorldToUVAddAndMul[6];; Offset: 3216
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVScale[6];; Offset: 3312
;       float4 View_GlobalDistanceFieldMipTranslatedWorldToUVBias[6];; Offset: 3408
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3504
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3508
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3512
;       int PrePadding_View_3516;                     ; Offset: 3516
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3520
;       float PrePadding_View_3532;                   ; Offset: 3532
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3536
;       float View_GlobalVolumeDimension;             ; Offset: 3548
;       float View_GlobalVolumeTexelSize;             ; Offset: 3552
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3556
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3560
;       float View_CoveredExpandSurfaceScale;         ; Offset: 3564
;       float View_NotCoveredExpandSurfaceScale;      ; Offset: 3568
;       float View_NotCoveredMinStepScale;            ; Offset: 3572
;       float View_DitheredTransparencyStepThreshold; ; Offset: 3576
;       float View_DitheredTransparencyTraceThreshold;; Offset: 3580
;       int2 View_CursorPosition;                     ; Offset: 3584
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3592
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3600
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3632
;       float2 View_VolumetricFogViewGridUVToPrevViewRectUV;; Offset: 3640
;       float2 View_VolumetricFogPrevViewGridRectUVToResourceUV;; Offset: 3648
;       float2 View_VolumetricFogPrevUVMax;           ; Offset: 3656
;       float2 View_VolumetricFogScreenToResourceUV;  ; Offset: 3664
;       float2 View_VolumetricFogUVMax;               ; Offset: 3672
;       float View_VolumetricFogMaxDistance;          ; Offset: 3680
;       float PrePadding_View_3684;                   ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3696
;       float PrePadding_View_3708;                   ; Offset: 3708
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3712
;       float PrePadding_View_3724;                   ; Offset: 3724
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3728
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3740
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3744
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3756
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3760
;       float PrePadding_View_3764;                   ; Offset: 3764
;       float PrePadding_View_3768;                   ; Offset: 3768
;       float PrePadding_View_3772;                   ; Offset: 3772
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3776
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3808
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3812
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3816
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3820
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3824
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3828
;       uint PrePadding_View_3832;                    ; Offset: 3832
;       uint PrePadding_View_3836;                    ; Offset: 3836
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3840
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3856
;       float PrePadding_View_3864;                   ; Offset: 3864
;       float PrePadding_View_3868;                   ; Offset: 3868
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3872
;       float View_OverrideLandscapeLOD;              ; Offset: 3888
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3892
;       float View_MinRoughness;                      ; Offset: 3896
;       float PrePadding_View_3900;                   ; Offset: 3900
;       float4 View_HairRenderInfo;                   ; Offset: 3904
;       uint View_EnableSkyLight;                     ; Offset: 3920
;       uint View_HairRenderInfoBits;                 ; Offset: 3924
;       uint View_HairComponents;                     ; Offset: 3928
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3932
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3936
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3952
;       float4 View_SpecularProfileTextureSizeAndInvSize;; Offset: 3968
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3984
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3996
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 4000
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 4004
;       int View_PhysicsFieldClipmapCount;            ; Offset: 4008
;       int View_PhysicsFieldTargetCount;             ; Offset: 4012
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 4016
;       uint View_GPUSceneViewId;                     ; Offset: 4528
;       float View_ViewResolutionFraction;            ; Offset: 4532
;       float View_SubSurfaceColorAsTransmittanceAtDistanceInMeters;; Offset: 4536
;       float PrePadding_View_4540;                   ; Offset: 4540
;       float4 View_TanAndInvTanHalfFOV;              ; Offset: 4544
;       float4 View_PrevTanAndInvTanHalfFOV;          ; Offset: 4560
;       float4 View_GlintLUTParameters0;              ; Offset: 4576
;       float4 View_GlintLUTParameters1;              ; Offset: 4592
;       uint BindlessSampler_View_MaterialTextureBilinearWrapedSampler;; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint BindlessSampler_View_MaterialTextureBilinearClampedSampler;; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint BindlessResource_View_VolumetricLightmapIndirectionTexture;; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint BindlessResource_View_VolumetricLightmapBrickAmbientVector;; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients0;; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients1;; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients2;; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients3;; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients4;; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint BindlessResource_View_VolumetricLightmapBrickSHCoefficients5;; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint BindlessResource_View_SkyBentNormalBrickTexture;; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint BindlessResource_View_DirectionalLightShadowingBrickTexture;; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint BindlessSampler_View_VolumetricLightmapBrickAmbientVectorSampler;; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler0;; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler1;; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler2;; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler3;; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler4;; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint BindlessSampler_View_VolumetricLightmapTextureSampler5;; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint BindlessSampler_View_SkyBentNormalTextureSampler;; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint BindlessSampler_View_DirectionalLightShadowingTextureSampler;; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint BindlessResource_View_GlobalDistanceFieldPageAtlasTexture;; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint BindlessResource_View_GlobalDistanceFieldCoverageAtlasTexture;; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint BindlessResource_View_GlobalDistanceFieldPageTableTexture;; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint BindlessResource_View_GlobalDistanceFieldMipTexture;; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint BindlessSampler_View_GlobalDistanceFieldPageAtlasTextureSampler;; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint BindlessSampler_View_GlobalDistanceFieldCoverageAtlasTextureSampler;; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint BindlessSampler_View_GlobalDistanceFieldMipTextureSampler;; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint BindlessResource_View_AtmosphereTransmittanceTexture;; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint BindlessSampler_View_AtmosphereTransmittanceTextureSampler;; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint BindlessResource_View_AtmosphereIrradianceTexture;; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint BindlessSampler_View_AtmosphereIrradianceTextureSampler;; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint BindlessResource_View_AtmosphereInscatterTexture;; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint BindlessSampler_View_AtmosphereInscatterTextureSampler;; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint BindlessResource_View_PerlinNoiseGradientTexture;; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint BindlessSampler_View_PerlinNoiseGradientTextureSampler;; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint BindlessResource_View_PerlinNoise3DTexture;; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint BindlessSampler_View_PerlinNoise3DTextureSampler;; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint BindlessResource_View_SobolSamplingTexture;; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint BindlessSampler_View_SharedPointWrappedSampler;; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint BindlessSampler_View_SharedPointClampedSampler;; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint BindlessSampler_View_SharedBilinearWrappedSampler;; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint BindlessSampler_View_SharedBilinearClampedSampler;; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint BindlessSampler_View_SharedBilinearAnisoClampedSampler;; Offset: 4952
;       uint PrePadding_View_4956;                    ; Offset: 4956
;       uint BindlessSampler_View_SharedTrilinearWrappedSampler;; Offset: 4960
;       uint PrePadding_View_4964;                    ; Offset: 4964
;       uint BindlessSampler_View_SharedTrilinearClampedSampler;; Offset: 4968
;       uint PrePadding_View_4972;                    ; Offset: 4972
;       uint BindlessResource_View_PreIntegratedBRDF; ; Offset: 4976
;       uint PrePadding_View_4980;                    ; Offset: 4980
;       uint BindlessSampler_View_PreIntegratedBRDFSampler;; Offset: 4984
;       uint PrePadding_View_4988;                    ; Offset: 4988
;       uint BindlessResource_View_SkyIrradianceEnvironmentMap;; Offset: 4992
;       uint PrePadding_View_4996;                    ; Offset: 4996
;       uint BindlessResource_View_TransmittanceLutTexture;; Offset: 5000
;       uint PrePadding_View_5004;                    ; Offset: 5004
;       uint BindlessSampler_View_TransmittanceLutTextureSampler;; Offset: 5008
;       uint PrePadding_View_5012;                    ; Offset: 5012
;       uint BindlessResource_View_SkyViewLutTexture; ; Offset: 5016
;       uint PrePadding_View_5020;                    ; Offset: 5020
;       uint BindlessSampler_View_SkyViewLutTextureSampler;; Offset: 5024
;       uint PrePadding_View_5028;                    ; Offset: 5028
;       uint BindlessResource_View_DistantSkyLightLutTexture;; Offset: 5032
;       uint PrePadding_View_5036;                    ; Offset: 5036
;       uint BindlessSampler_View_DistantSkyLightLutTextureSampler;; Offset: 5040
;       uint PrePadding_View_5044;                    ; Offset: 5044
;       uint BindlessResource_View_CameraAerialPerspectiveVolume;; Offset: 5048
;       uint PrePadding_View_5052;                    ; Offset: 5052
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeSampler;; Offset: 5056
;       uint PrePadding_View_5060;                    ; Offset: 5060
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeMieOnly;; Offset: 5064
;       uint PrePadding_View_5068;                    ; Offset: 5068
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeMieOnlySampler;; Offset: 5072
;       uint PrePadding_View_5076;                    ; Offset: 5076
;       uint BindlessResource_View_CameraAerialPerspectiveVolumeRayOnly;; Offset: 5080
;       uint PrePadding_View_5084;                    ; Offset: 5084
;       uint BindlessSampler_View_CameraAerialPerspectiveVolumeRayOnlySampler;; Offset: 5088
;       uint PrePadding_View_5092;                    ; Offset: 5092
;       uint BindlessResource_View_HairScatteringLUTTexture;; Offset: 5096
;       uint PrePadding_View_5100;                    ; Offset: 5100
;       uint BindlessSampler_View_HairScatteringLUTSampler;; Offset: 5104
;       uint PrePadding_View_5108;                    ; Offset: 5108
;       uint BindlessResource_View_GGXLTCMatTexture;  ; Offset: 5112
;       uint PrePadding_View_5116;                    ; Offset: 5116
;       uint BindlessSampler_View_GGXLTCMatSampler;   ; Offset: 5120
;       uint PrePadding_View_5124;                    ; Offset: 5124
;       uint BindlessResource_View_GGXLTCAmpTexture;  ; Offset: 5128
;       uint PrePadding_View_5132;                    ; Offset: 5132
;       uint BindlessSampler_View_GGXLTCAmpSampler;   ; Offset: 5136
;       uint PrePadding_View_5140;                    ; Offset: 5140
;       uint BindlessResource_View_SheenLTCTexture;   ; Offset: 5144
;       uint PrePadding_View_5148;                    ; Offset: 5148
;       uint BindlessSampler_View_SheenLTCSampler;    ; Offset: 5152
;       uint PrePadding_View_5156;                    ; Offset: 5156
;       uint View_bShadingEnergyConservation;         ; Offset: 5160
;       uint View_bShadingEnergyPreservation;         ; Offset: 5164
;       uint BindlessResource_View_ShadingEnergyGGXSpecTexture;; Offset: 5168
;       uint PrePadding_View_5172;                    ; Offset: 5172
;       uint BindlessResource_View_ShadingEnergyGGXGlassTexture;; Offset: 5176
;       uint PrePadding_View_5180;                    ; Offset: 5180
;       uint BindlessResource_View_ShadingEnergyClothSpecTexture;; Offset: 5184
;       uint PrePadding_View_5188;                    ; Offset: 5188
;       uint BindlessResource_View_ShadingEnergyDiffuseTexture;; Offset: 5192
;       uint PrePadding_View_5196;                    ; Offset: 5196
;       uint BindlessSampler_View_ShadingEnergySampler;; Offset: 5200
;       uint PrePadding_View_5204;                    ; Offset: 5204
;       uint BindlessResource_View_GlintTexture;      ; Offset: 5208
;       uint PrePadding_View_5212;                    ; Offset: 5212
;       uint BindlessSampler_View_GlintSampler;       ; Offset: 5216
;       uint PrePadding_View_5220;                    ; Offset: 5220
;       uint BindlessResource_View_SimpleVolumeTexture;; Offset: 5224
;       uint PrePadding_View_5228;                    ; Offset: 5228
;       uint BindlessSampler_View_SimpleVolumeTextureSampler;; Offset: 5232
;       uint PrePadding_View_5236;                    ; Offset: 5236
;       uint BindlessResource_View_SimpleVolumeEnvTexture;; Offset: 5240
;       uint PrePadding_View_5244;                    ; Offset: 5244
;       uint BindlessSampler_View_SimpleVolumeEnvTextureSampler;; Offset: 5248
;       uint PrePadding_View_5252;                    ; Offset: 5252
;       uint BindlessResource_View_SSProfilesTexture; ; Offset: 5256
;       uint PrePadding_View_5260;                    ; Offset: 5260
;       uint BindlessSampler_View_SSProfilesSampler;  ; Offset: 5264
;       uint PrePadding_View_5268;                    ; Offset: 5268
;       uint BindlessSampler_View_SSProfilesTransmissionSampler;; Offset: 5272
;       uint PrePadding_View_5276;                    ; Offset: 5276
;       uint BindlessResource_View_SSProfilesPreIntegratedTexture;; Offset: 5280
;       uint PrePadding_View_5284;                    ; Offset: 5284
;       uint BindlessSampler_View_SSProfilesPreIntegratedSampler;; Offset: 5288
;       uint PrePadding_View_5292;                    ; Offset: 5292
;       uint BindlessResource_View_SpecularProfileTexture;; Offset: 5296
;       uint PrePadding_View_5300;                    ; Offset: 5300
;       uint BindlessSampler_View_SpecularProfileSampler;; Offset: 5304
;       uint PrePadding_View_5308;                    ; Offset: 5308
;       uint BindlessResource_View_WaterIndirection;  ; Offset: 5312
;       uint PrePadding_View_5316;                    ; Offset: 5316
;       uint BindlessResource_View_WaterData;         ; Offset: 5320
;       uint PrePadding_View_5324;                    ; Offset: 5324
;       float4 View_RectLightAtlasSizeAndInvSize;     ; Offset: 5328
;       float View_RectLightAtlasMaxMipLevel;         ; Offset: 5344
;       float PrePadding_View_5348;                   ; Offset: 5348
;       uint BindlessResource_View_RectLightAtlasTexture;; Offset: 5352
;       uint PrePadding_View_5356;                    ; Offset: 5356
;       uint BindlessSampler_View_RectLightAtlasSampler;; Offset: 5360
;       uint PrePadding_View_5364;                    ; Offset: 5364
;       uint PrePadding_View_5368;                    ; Offset: 5368
;       uint PrePadding_View_5372;                    ; Offset: 5372
;       float4 View_IESAtlasSizeAndInvSize;           ; Offset: 5376
;       uint BindlessResource_View_IESAtlasTexture;   ; Offset: 5392
;       uint PrePadding_View_5396;                    ; Offset: 5396
;       uint BindlessSampler_View_IESAtlasSampler;    ; Offset: 5400
;       uint PrePadding_View_5404;                    ; Offset: 5404
;       uint BindlessSampler_View_LandscapeWeightmapSampler;; Offset: 5408
;       uint PrePadding_View_5412;                    ; Offset: 5412
;       uint BindlessResource_View_LandscapeIndirection;; Offset: 5416
;       uint PrePadding_View_5420;                    ; Offset: 5420
;       uint BindlessResource_View_LandscapePerComponentData;; Offset: 5424
;       uint PrePadding_View_5428;                    ; Offset: 5428
;       uint BindlessResource_View_VTFeedbackBuffer;  ; Offset: 5432
;       uint PrePadding_View_5436;                    ; Offset: 5436
;       uint BindlessResource_View_PhysicsFieldClipmapBuffer;; Offset: 5440
;       uint PrePadding_View_5444;                    ; Offset: 5444
;       uint PrePadding_View_5448;                    ; Offset: 5448
;       uint PrePadding_View_5452;                    ; Offset: 5452
;       float3 View_TLASRelativePreViewTranslation;   ; Offset: 5456
;       float PrePadding_View_5468;                   ; Offset: 5468
;       float3 View_TLASViewTilePosition;             ; Offset: 5472
;   
;   } UniformBufferConstants_View;                    ; Offset:    0 Size:  5484
;
; }
;
; cbuffer UniformBufferConstants_MaterialCollection0
; {
;
;   struct UniformBufferConstants_MaterialCollection0
;   {
;
;       float4 MaterialCollection0_Vectors[5];        ; Offset:    0
;   
;   } UniformBufferConstants_MaterialCollection0;     ; Offset:    0 Size:    80
;
; }
;
; cbuffer UniformBufferConstants_Material
; {
;
;   struct UniformBufferConstants_Material
;   {
;
;       float4 Material_PreshaderBuffer[109];         ; Offset:    0
;       uint BindlessSampler_Material_Wrap_WorldGroupSettings;; Offset: 1744
;       uint PrePadding_Material_1748;                ; Offset: 1748
;       uint BindlessSampler_Material_Clamp_WorldGroupSettings;; Offset: 1752
;   
;   } UniformBufferConstants_Material;                ; Offset:    0 Size:  1756
;
; }
;
; cbuffer HitGroupSystemRootConstants
; {
;
;   struct HitGroupSystemRootConstants
;   {
;
;       struct struct.FHitGroupSystemRootConstants
;       {
;
;           uint Config;                              ; Offset:    0
;           uint IndexBufferOffsetInBytes;            ; Offset:    4
;           uint FirstPrimitive;                      ; Offset:    8
;           uint UserData;                            ; Offset:   12
;           uint BaseInstanceIndex;                   ; Offset:   16
;           uint Pad0;                                ; Offset:   20
;       
;       } HitGroupSystemRootConstants;                ; Offset:    0
;
;   
;   } HitGroupSystemRootConstants;                    ; Offset:    0 Size:    24
;
; }
;
; Resource bind info for Scene_GPUScene_GPUSceneInstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for Scene_GPUScene_GPUScenePrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; UniformBufferConstants_View       cbuffer      NA          NA     CB0            cb0     1
; UniformBufferConstants_MaterialCollection0   cbuffer      NA          NA     CB1            cb1     1
; UniformBufferConstants_Material   cbuffer      NA          NA     CB2            cb2     1
; HitGroupSystemRootConstants       cbuffer      NA          NA     CB3     cb0,space2     1
; D3DStaticTrilinearWrappedSampler   sampler      NA          NA      S0   s4,space1000     1
; View_PerlinNoise3DTextureSampler   sampler      NA          NA      S1             s0     1
; View_GlobalDistanceFieldPageAtlasTexture   texture     f32          3d      T0             t0     1
; View_GlobalDistanceFieldPageTableTexture   texture     u32          3d      T1             t1     1
; View_PerlinNoise3DTexture         texture     f32          3d      T2             t2     1
; Scene_GPUScene_GPUSceneInstanceSceneData   texture  struct         r/o      T3             t3     1
; Scene_GPUScene_GPUScenePrimitiveSceneData   texture  struct         r/o      T4             t4     1
; HitGroupSystemIndexBuffer         texture    byte         r/o      T5      t0,space2     1
; HitGroupSystemVertexBuffer        texture    byte         r/o      T6      t1,space2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%dx.types.Handle = type { i8* }
%struct.FPackedMaterialClosestHitPayload = type { %struct.FMinimalPayload, i32, i32, i32, i32, i32, %struct.FStrataRaytracingPayload }
%struct.FMinimalPayload = type { float }
%struct.FStrataRaytracingPayload = type { i32, [8 x i32] }
%struct.FRayTracingIntersectionAttributes = type { <2 x i32> }
%dx.types.ResourceProperties = type { i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.Texture3D<unsigned int>" = type { i32, %"class.Texture3D<unsigned int>::mips_type" }
%"class.Texture3D<unsigned int>::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%struct.ByteAddressBuffer = type { i32 }
%UniformBufferConstants_View = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x i32>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <2 x float>, <2 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, %class.matrix.float.4.4, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [8 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, float, float, <2 x i32>, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, <2 x float>, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, float, float, i32, i32, i32, i32, i32, i32, <4 x float>, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, <3 x float>, float, <3 x float> }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%UniformBufferConstants_MaterialCollection0 = type { [5 x <4 x float>] }
%UniformBufferConstants_Material = type { [109 x <4 x float>], i32, i32, i32 }
%HitGroupSystemRootConstants = type { %struct.FHitGroupSystemRootConstants }
%struct.FHitGroupSystemRootConstants = type { i32, i32, i32, i32, i32, i32 }
%struct.SamplerState = type { i32 }

@"\01?D3DStaticTrilinearWrappedSampler@@3USamplerState@@A" = external constant %dx.types.Handle, align 4
@"\01?View_GlobalDistanceFieldPageAtlasTexture@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4
@"\01?View_GlobalDistanceFieldPageTableTexture@@3V?$Texture3D@I@@A" = external constant %dx.types.Handle, align 4
@"\01?View_PerlinNoise3DTexture@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4
@"\01?View_PerlinNoise3DTextureSampler@@3USamplerState@@A" = external constant %dx.types.Handle, align 4
@"\01?Scene_GPUScene_GPUSceneInstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4
@"\01?Scene_GPUScene_GPUScenePrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %dx.types.Handle, align 4
@"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" = external constant %dx.types.Handle, align 4
@"\01?HitGroupSystemVertexBuffer@@3UByteAddressBuffer@@A" = external constant %dx.types.Handle, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@UniformBufferConstants_View = external constant %dx.types.Handle
@UniformBufferConstants_MaterialCollection0 = external constant %dx.types.Handle
@UniformBufferConstants_Material = external constant %dx.types.Handle
@HitGroupSystemRootConstants = external constant %dx.types.Handle

; Function Attrs: nounwind
define void @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFRayTracingIntersectionAttributes@@@Z"(%struct.FPackedMaterialClosestHitPayload* noalias %PackedPayload, %struct.FRayTracingIntersectionAttributes* nocapture readnone %Attributes) #0 {
  %1 = load %dx.types.Handle, %dx.types.Handle* @"\01?View_PerlinNoise3DTextureSampler@@3USamplerState@@A", align 4
  %2 = load %dx.types.Handle, %dx.types.Handle* @"\01?D3DStaticTrilinearWrappedSampler@@3USamplerState@@A", align 4
  %3 = load %dx.types.Handle, %dx.types.Handle* @"\01?HitGroupSystemVertexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !31
  %4 = load %dx.types.Handle, %dx.types.Handle* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !31
  %5 = load %dx.types.Handle, %dx.types.Handle* @"\01?Scene_GPUScene_GPUScenePrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4
  %6 = load %dx.types.Handle, %dx.types.Handle* @"\01?Scene_GPUScene_GPUSceneInstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !36
  %7 = load %dx.types.Handle, %dx.types.Handle* @"\01?View_PerlinNoise3DTexture@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4
  %8 = load %dx.types.Handle, %dx.types.Handle* @"\01?View_GlobalDistanceFieldPageTableTexture@@3V?$Texture3D@I@@A", align 4, !noalias !48
  %9 = load %dx.types.Handle, %dx.types.Handle* @"\01?View_GlobalDistanceFieldPageAtlasTexture@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4
  %10 = load %dx.types.Handle, %dx.types.Handle* @HitGroupSystemRootConstants, align 4
  %11 = load %dx.types.Handle, %dx.types.Handle* @UniformBufferConstants_Material, align 4
  %12 = load %dx.types.Handle, %dx.types.Handle* @UniformBufferConstants_MaterialCollection0, align 4
  %13 = load %dx.types.Handle, %dx.types.Handle* @UniformBufferConstants_View, align 4
  %14 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %10)  ; CreateHandleForLib(Resource)
  %15 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %14, %dx.types.ResourceProperties { i32 13, i32 24 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %16 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %11)  ; CreateHandleForLib(Resource)
  %17 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %12)  ; CreateHandleForLib(Resource)
  %18 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %13)  ; CreateHandleForLib(Resource)
  %19 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %18, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %20 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %21 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 0, i32 0
  store float %20, float* %21, align 4, !tbaa !51
  %22 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %23 = extractvalue %dx.types.CBufRet.f32 %22, 1
  %24 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %25 = extractvalue %dx.types.CBufRet.f32 %24, 0
  %26 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %27 = extractvalue %dx.types.CBufRet.f32 %26, 1
  %28 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %29 = extractvalue %dx.types.CBufRet.f32 %28, 0
  %30 = extractvalue %dx.types.CBufRet.f32 %28, 2
  %31 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %32 = extractvalue %dx.types.CBufRet.f32 %31, 0
  %33 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 136)  ; CBufferLoadLegacy(handle,regIndex)
  %34 = extractvalue %dx.types.CBufRet.f32 %33, 0
  %35 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 1
  %36 = load i32, i32* %35, align 4, !tbaa !55, !noalias !57
  %37 = and i32 %36, 65535
  %38 = lshr i32 %36, 16
  %39 = call float @dx.op.legacyF16ToF32(i32 131, i32 %38)  ; LegacyF16ToF32(value)
  %40 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %41 = fmul fast float %40, %39
  br label %42

; <label>:42                                      ; preds = %57, %0
  %43 = phi i32 [ 0, %0 ], [ %71, %57 ]
  %44 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %45 = mul i32 %44, 41
  %46 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %5)  ; CreateHandleForLib(Resource)
  %47 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %46, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %48 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %47, i32 %45, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %49 = extractvalue %dx.types.ResRet.f32 %48, 2
  %50 = bitcast float %49 to i32
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %57, label %52

; <label>:52                                      ; preds = %42
  %53 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %54 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %55 = extractvalue %dx.types.CBufRet.i32 %54, 0
  %56 = sub i32 %53, %55
  br label %57

; <label>:57                                      ; preds = %52, %42
  %58 = phi i32 [ %56, %52 ], [ 0, %42 ]
  %59 = and i32 %44, 2147483647
  %60 = mul i32 %59, 41
  %61 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %47, i32 %60, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %62 = extractvalue %dx.types.ResRet.f32 %61, 1
  %63 = bitcast float %62 to i32
  %64 = add i32 %63, %58
  %65 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %6)  ; CreateHandleForLib(Resource)
  %66 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %65, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %67 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %66, i32 %64, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %68 = extractvalue %dx.types.ResRet.f32 %67, 0
  %69 = bitcast float %68 to i32
  %70 = and i32 %69, 1048575
  %71 = add nuw nsw i32 %43, 1
  %72 = icmp eq i32 %71, 3
  br i1 %72, label %73, label %42

; <label>:73                                      ; preds = %57
  %74 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %16, %dx.types.ResourceProperties { i32 13, i32 1756 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %75 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %17, %dx.types.ResourceProperties { i32 13, i32 80 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %76 = extractvalue %dx.types.CBufRet.f32 %22, 0
  %77 = extractvalue %dx.types.CBufRet.f32 %22, 2
  %78 = extractvalue %dx.types.CBufRet.f32 %24, 1
  %79 = extractvalue %dx.types.CBufRet.f32 %26, 0
  %80 = extractvalue %dx.types.CBufRet.f32 %26, 2
  %81 = extractvalue %dx.types.CBufRet.f32 %28, 1
  %82 = extractvalue %dx.types.CBufRet.f32 %28, 3
  %83 = extractvalue %dx.types.CBufRet.f32 %31, 3
  %84 = extractvalue %dx.types.CBufRet.f32 %33, 1
  %85 = call float @dx.op.legacyF16ToF32(i32 131, i32 %37)  ; LegacyF16ToF32(value)
  %86 = fadd fast float %41, %85
  %87 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %88 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %89 = extractvalue %dx.types.CBufRet.i32 %88, 1
  %90 = extractvalue %dx.types.CBufRet.i32 %88, 0
  %91 = and i32 %90, 255
  %92 = lshr i32 %90, 8
  %93 = and i32 %92, 255
  %94 = mul i32 %87, 3
  %95 = icmp eq i32 %91, 0
  br i1 %95, label %96, label %99

; <label>:96                                      ; preds = %73
  %97 = add i32 %94, 1
  %98 = add i32 %94, 2
  br label %124

; <label>:99                                      ; preds = %73
  %100 = icmp eq i32 %91, 2
  %101 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %4)  ; CreateHandleForLib(Resource)
  %102 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %101, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  br i1 %100, label %103, label %117

; <label>:103                                     ; preds = %99
  %104 = mul i32 %87, 6
  %105 = add i32 %104, %89
  %106 = and i32 %105, -4
  %107 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %102, i32 %106, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %108 = extractvalue %dx.types.ResRet.i32 %107, 0
  %109 = extractvalue %dx.types.ResRet.i32 %107, 1
  %110 = icmp eq i32 %106, %105
  %111 = lshr i32 %108, 16
  %112 = and i32 %109, 65535
  br i1 %110, label %113, label %115

; <label>:113                                     ; preds = %103
  %114 = and i32 %108, 65535
  br label %124

; <label>:115                                     ; preds = %103
  %116 = lshr i32 %109, 16
  br label %124

; <label>:117                                     ; preds = %99
  %118 = mul i32 %91, %94
  %119 = add i32 %118, %89
  %120 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %102, i32 %119, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %121 = extractvalue %dx.types.ResRet.i32 %120, 0
  %122 = extractvalue %dx.types.ResRet.i32 %120, 1
  %123 = extractvalue %dx.types.ResRet.i32 %120, 2
  br label %124

; <label>:124                                     ; preds = %117, %115, %113, %96
  %125 = phi i32 [ %94, %96 ], [ %121, %117 ], [ %114, %113 ], [ %111, %115 ]
  %126 = phi i32 [ %97, %96 ], [ %122, %117 ], [ %111, %113 ], [ %112, %115 ]
  %127 = phi i32 [ %98, %96 ], [ %123, %117 ], [ %112, %113 ], [ %116, %115 ]
  %128 = mul i32 %125, %93
  %129 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %3)  ; CreateHandleForLib(Resource)
  %130 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %129, %dx.types.ResourceProperties { i32 11, i32 0 })  ; AnnotateHandle(res,props)  resource: ByteAddressBuffer
  %131 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %130, i32 %128, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %132 = extractvalue %dx.types.ResRet.i32 %131, 0
  %133 = extractvalue %dx.types.ResRet.i32 %131, 1
  %134 = extractvalue %dx.types.ResRet.i32 %131, 2
  %135 = bitcast i32 %132 to float
  %136 = bitcast i32 %133 to float
  %137 = bitcast i32 %134 to float
  %138 = mul i32 %126, %93
  %139 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %130, i32 %138, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %140 = extractvalue %dx.types.ResRet.i32 %139, 0
  %141 = extractvalue %dx.types.ResRet.i32 %139, 1
  %142 = extractvalue %dx.types.ResRet.i32 %139, 2
  %143 = bitcast i32 %140 to float
  %144 = bitcast i32 %141 to float
  %145 = bitcast i32 %142 to float
  %146 = mul i32 %127, %93
  %147 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %130, i32 %146, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %148 = extractvalue %dx.types.ResRet.i32 %147, 0
  %149 = extractvalue %dx.types.ResRet.i32 %147, 1
  %150 = extractvalue %dx.types.ResRet.i32 %147, 2
  %151 = bitcast i32 %148 to float
  %152 = bitcast i32 %149 to float
  %153 = bitcast i32 %150 to float
  %154 = fsub fast float %143, %135
  %155 = fsub fast float %144, %136
  %156 = fsub fast float %145, %137
  %157 = fsub fast float %151, %135
  %158 = fsub fast float %152, %136
  %159 = fsub fast float %153, %137
  %160 = fmul fast float %158, %156
  %161 = fmul fast float %159, %155
  %162 = fsub fast float %160, %161
  %163 = fmul fast float %159, %154
  %164 = fmul fast float %157, %156
  %165 = fsub fast float %163, %164
  %166 = fmul fast float %157, %155
  %167 = fmul fast float %158, %154
  %168 = fsub fast float %166, %167
  %169 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 0)  ; WorldToObject(row,col)
  %170 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 0)  ; WorldToObject(row,col)
  %171 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 0)  ; WorldToObject(row,col)
  %172 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 1)  ; WorldToObject(row,col)
  %173 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 1)  ; WorldToObject(row,col)
  %174 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 1)  ; WorldToObject(row,col)
  %175 = call float @dx.op.worldToObject.f32(i32 152, i32 0, i8 2)  ; WorldToObject(row,col)
  %176 = call float @dx.op.worldToObject.f32(i32 152, i32 1, i8 2)  ; WorldToObject(row,col)
  %177 = call float @dx.op.worldToObject.f32(i32 152, i32 2, i8 2)  ; WorldToObject(row,col)
  %178 = fmul fast float %162, %169
  %179 = call float @dx.op.tertiary.f32(i32 46, float %165, float %170, float %178)  ; FMad(a,b,c)
  %180 = call float @dx.op.tertiary.f32(i32 46, float %168, float %171, float %179)  ; FMad(a,b,c)
  %181 = fmul fast float %162, %172
  %182 = call float @dx.op.tertiary.f32(i32 46, float %165, float %173, float %181)  ; FMad(a,b,c)
  %183 = call float @dx.op.tertiary.f32(i32 46, float %168, float %174, float %182)  ; FMad(a,b,c)
  %184 = fmul fast float %175, %162
  %185 = call float @dx.op.tertiary.f32(i32 46, float %165, float %176, float %184)  ; FMad(a,b,c)
  %186 = call float @dx.op.tertiary.f32(i32 46, float %168, float %177, float %185)  ; FMad(a,b,c)
  %187 = call float @dx.op.dot3.f32(i32 55, float %180, float %183, float %186, float %180, float %183, float %186)  ; Dot3(ax,ay,az,bx,by,bz)
  %188 = call float @dx.op.unary.f32(i32 25, float %187)  ; Rsqrt(value)
  %189 = fmul fast float %188, %180
  %190 = fmul fast float %188, %183
  %191 = fmul fast float %188, %186
  %192 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 2
  %193 = load i32, i32* %192, align 4, !tbaa !55
  %194 = and i32 %193, 4
  %195 = icmp ne i32 %194, 0
  br i1 %195, label %196, label %247

; <label>:196                                     ; preds = %124
  %197 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %198 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %199 = extractvalue %dx.types.CBufRet.i32 %198, 0
  %200 = sub i32 %197, %199
  %201 = call float @dx.op.unary.f32(i32 6, float %189)  ; FAbs(value)
  %202 = call float @dx.op.unary.f32(i32 6, float %190)  ; FAbs(value)
  %203 = call float @dx.op.unary.f32(i32 6, float %191)  ; FAbs(value)
  %204 = call float @dx.op.dot3.f32(i32 55, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %201, float %202, float %203)  ; Dot3(ax,ay,az,bx,by,bz)
  %205 = fdiv fast float %189, %204
  %206 = fdiv fast float %190, %204
  %207 = fcmp fast ugt float %191, 0.000000e+00
  br i1 %207, label %219, label %208

; <label>:208                                     ; preds = %196
  %209 = call float @dx.op.unary.f32(i32 6, float %206)  ; FAbs(value)
  %210 = call float @dx.op.unary.f32(i32 6, float %205)  ; FAbs(value)
  %211 = fsub fast float 1.000000e+00, %209
  %212 = fsub fast float 1.000000e+00, %210
  %213 = fcmp fast oge float %205, 0.000000e+00
  %214 = fcmp fast oge float %206, 0.000000e+00
  %215 = select i1 %213, float 1.000000e+00, float -1.000000e+00
  %216 = select i1 %214, float 1.000000e+00, float -1.000000e+00
  %217 = fmul fast float %211, %215
  %218 = fmul fast float %212, %216
  br label %219

; <label>:219                                     ; preds = %208, %196
  %220 = phi float [ %217, %208 ], [ %205, %196 ]
  %221 = phi float [ %218, %208 ], [ %206, %196 ]
  %222 = fmul fast float %220, 3.276750e+04
  %223 = fmul fast float %221, 3.276750e+04
  %224 = fadd fast float %222, 3.276800e+04
  %225 = fadd fast float %223, 3.276800e+04
  %226 = call float @dx.op.binary.f32(i32 35, float %224, float 0.000000e+00)  ; FMax(a,b)
  %227 = call float @dx.op.binary.f32(i32 35, float %225, float 0.000000e+00)  ; FMax(a,b)
  %228 = call float @dx.op.binary.f32(i32 36, float %226, float 6.553500e+04)  ; FMin(a,b)
  %229 = call float @dx.op.binary.f32(i32 36, float %227, float 6.553500e+04)  ; FMin(a,b)
  %230 = fptoui float %228 to i32
  %231 = fptoui float %229 to i32
  %232 = shl i32 %230, 16
  %233 = and i32 %231, 65535
  %234 = or i32 %233, %232
  %235 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4
  store i32 %234, i32* %235, align 4, !tbaa !55
  %236 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %5)  ; CreateHandleForLib(Resource)
  %237 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %236, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %238 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %237, i32 %45, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %239 = extractvalue %dx.types.ResRet.f32 %238, 1
  %240 = bitcast float %239 to i32
  %241 = extractvalue %dx.types.ResRet.f32 %238, 2
  %242 = bitcast float %241 to i32
  %243 = icmp eq i32 %242, 1
  %244 = select i1 %243, i32 0, i32 %200
  %245 = add i32 %244, %240
  %246 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  store i32 %245, i32* %246, align 4, !tbaa !55
  br label %247

; <label>:247                                     ; preds = %219, %124
  %248 = and i32 %193, 1
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %9078

; <label>:250                                     ; preds = %247
  %251 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %252 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %253 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %254 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 341)  ; CBufferLoadLegacy(handle,regIndex)
  %255 = extractvalue %dx.types.CBufRet.f32 %254, 0
  %256 = extractvalue %dx.types.CBufRet.f32 %254, 1
  %257 = extractvalue %dx.types.CBufRet.f32 %254, 2
  %258 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 342)  ; CBufferLoadLegacy(handle,regIndex)
  %259 = extractvalue %dx.types.CBufRet.f32 %258, 0
  %260 = extractvalue %dx.types.CBufRet.f32 %258, 1
  %261 = extractvalue %dx.types.CBufRet.f32 %258, 2
  %262 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %263 = extractvalue %dx.types.CBufRet.f32 %262, 0
  %264 = extractvalue %dx.types.CBufRet.f32 %262, 1
  %265 = extractvalue %dx.types.CBufRet.f32 %262, 2
  %266 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %267 = extractvalue %dx.types.CBufRet.f32 %266, 0
  %268 = extractvalue %dx.types.CBufRet.f32 %266, 1
  %269 = extractvalue %dx.types.CBufRet.f32 %266, 2
  %270 = fsub fast float %259, %263
  %271 = fsub fast float %260, %264
  %272 = fsub fast float %261, %265
  %273 = fmul fast float %270, 2.097152e+06
  %274 = fmul fast float %271, 2.097152e+06
  %275 = fmul fast float %272, 2.097152e+06
  %276 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %277 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %278 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %279 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %280 = fmul fast float %279, %276
  %281 = fmul fast float %279, %277
  %282 = fmul fast float %279, %278
  %283 = fsub fast float %251, %255
  %284 = fadd fast float %283, %267
  %285 = fadd fast float %284, %273
  %286 = fadd fast float %285, %280
  %287 = fsub fast float %252, %256
  %288 = fadd fast float %287, %268
  %289 = fadd fast float %288, %274
  %290 = fadd fast float %289, %281
  %291 = fsub fast float %253, %257
  %292 = fadd fast float %291, %269
  %293 = fadd fast float %292, %275
  %294 = fadd fast float %293, %282
  %295 = fsub fast float %286, %79
  %296 = fsub fast float %290, %27
  %297 = fsub fast float %294, %80
  %298 = fsub fast float -0.000000e+00, %277
  %299 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %300 = extractvalue %dx.types.CBufRet.f32 %299, 0
  %301 = extractvalue %dx.types.CBufRet.f32 %299, 1
  %302 = extractvalue %dx.types.CBufRet.f32 %299, 2
  %303 = fsub fast float %300, %295
  %304 = fsub fast float %301, %296
  %305 = fmul fast float %303, %303
  %306 = fmul fast float %303, 0x3EB0000000000000
  %307 = fsub fast float %306, %76
  %308 = fmul fast float %307, %76
  %309 = fmul fast float %304, %304
  %310 = fmul fast float %304, 0x3EB0000000000000
  %311 = fsub fast float %310, %23
  %312 = fmul fast float %23, %311
  %313 = fmul fast float %302, %302
  %314 = fsub fast float -0.000000e+00, %308
  %315 = fsub fast float %314, %312
  %316 = fadd fast float %309, %313
  %317 = fadd fast float %316, %305
  %318 = fmul fast float %317, 0x3D50000000000000
  %319 = fadd fast float %315, %318
  %320 = call float @dx.op.unary.f32(i32 24, float %319)  ; Sqrt(value)
  %321 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %322 = extractvalue %dx.types.CBufRet.f32 %321, 0
  %323 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %322)  ; FMax(a,b)
  %324 = fdiv fast float 1.000000e+00, %323
  %325 = fmul fast float %320, 2.097152e+11
  %326 = fmul fast float %325, %324
  %327 = fsub fast float 1.000000e+05, %326
  %328 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %329 = extractvalue %dx.types.CBufRet.f32 %328, 0
  %330 = fmul fast float %329, %295
  %331 = fmul fast float %329, %296
  %332 = fmul fast float %329, %297
  %333 = fmul fast float %329, %76
  %334 = fmul fast float %329, %23
  %335 = fmul fast float %329, %77
  %336 = fmul fast float %330, 0x3EA0000000000000
  %337 = fmul fast float %331, 0x3EA0000000000000
  %338 = fmul fast float %332, 0x3EA0000000000000
  %339 = fadd fast float %333, 5.000000e-01
  %340 = fadd fast float %339, %336
  %341 = fadd fast float %334, 5.000000e-01
  %342 = fadd fast float %341, %337
  %343 = fadd fast float %335, 5.000000e-01
  %344 = fadd fast float %343, %338
  %345 = call float @dx.op.unary.f32(i32 27, float %340)  ; Round_ni(value)
  %346 = call float @dx.op.unary.f32(i32 27, float %342)  ; Round_ni(value)
  %347 = call float @dx.op.unary.f32(i32 27, float %344)  ; Round_ni(value)
  %348 = fsub fast float %333, %345
  %349 = fsub fast float %334, %346
  %350 = fsub fast float %335, %347
  %351 = fmul fast float %348, 2.097152e+06
  %352 = fmul fast float %349, 2.097152e+06
  %353 = fmul fast float %350, 2.097152e+06
  %354 = fadd fast float %351, %330
  %355 = fadd fast float %352, %331
  %356 = fadd fast float %353, %332
  br label %357

; <label>:357                                     ; preds = %357, %250
  %358 = phi float [ %354, %250 ], [ %431, %357 ]
  %359 = phi float [ %355, %250 ], [ %432, %357 ]
  %360 = phi float [ %356, %250 ], [ %433, %357 ]
  %361 = phi float [ 0.000000e+00, %250 ], [ %430, %357 ]
  %362 = phi float [ 1.000000e+00, %250 ], [ %434, %357 ]
  %363 = phi i32 [ 0, %250 ], [ %435, %357 ]
  %364 = fmul fast float %358, 0x3FB1111120000000
  %365 = fmul fast float %359, 0x3FB1111120000000
  %366 = fmul fast float %360, 0x3FB1111120000000
  %367 = call float @dx.op.unary.f32(i32 22, float %364)  ; Frc(value)
  %368 = call float @dx.op.unary.f32(i32 22, float %365)  ; Frc(value)
  %369 = call float @dx.op.unary.f32(i32 22, float %366)  ; Frc(value)
  %370 = fmul fast float %367, 1.500000e+01
  %371 = fmul fast float %368, 1.500000e+01
  %372 = fmul fast float %369, 1.500000e+01
  %373 = call float @dx.op.unary.f32(i32 22, float %370)  ; Frc(value)
  %374 = call float @dx.op.unary.f32(i32 22, float %371)  ; Frc(value)
  %375 = call float @dx.op.unary.f32(i32 22, float %372)  ; Frc(value)
  %376 = fsub fast float %370, %373
  %377 = fsub fast float %371, %374
  %378 = fsub fast float %372, %375
  %379 = fmul fast float %373, %373
  %380 = fmul fast float %374, %374
  %381 = fmul fast float %375, %375
  %382 = fmul fast float %379, %373
  %383 = fmul fast float %380, %374
  %384 = fmul fast float %381, %375
  %385 = fmul fast float %373, 6.000000e+00
  %386 = fmul fast float %374, 6.000000e+00
  %387 = fmul fast float %375, 6.000000e+00
  %388 = fadd fast float %385, -1.500000e+01
  %389 = fadd fast float %386, -1.500000e+01
  %390 = fadd fast float %387, -1.500000e+01
  %391 = fmul fast float %388, %373
  %392 = fmul fast float %389, %374
  %393 = fmul fast float %390, %375
  %394 = fadd fast float %391, 1.000000e+01
  %395 = fadd fast float %392, 1.000000e+01
  %396 = fadd fast float %393, 1.000000e+01
  %397 = fmul fast float %382, %394
  %398 = fmul fast float %383, %395
  %399 = fmul fast float %384, %396
  %400 = fadd fast float %376, %397
  %401 = fadd fast float %377, %398
  %402 = fadd fast float %378, %399
  %403 = fmul fast float %400, 6.250000e-02
  %404 = fmul fast float %401, 6.250000e-02
  %405 = fmul fast float %402, 6.250000e-02
  %406 = fadd fast float %403, 3.125000e-02
  %407 = fadd fast float %404, 3.125000e-02
  %408 = fadd fast float %405, 3.125000e-02
  %409 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %7)  ; CreateHandleForLib(Resource)
  %410 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %409, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %411 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %412 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %411, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %413 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %410, %dx.types.Handle %412, float %406, float %407, float %408, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %414 = extractvalue %dx.types.ResRet.f32 %413, 0
  %415 = extractvalue %dx.types.ResRet.f32 %413, 1
  %416 = extractvalue %dx.types.ResRet.f32 %413, 2
  %417 = extractvalue %dx.types.ResRet.f32 %413, 3
  %418 = fmul fast float %414, 0x4000102040000000
  %419 = fmul fast float %415, 0x4000102040000000
  %420 = fmul fast float %416, 0x4000102040000000
  %421 = fadd fast float %418, -1.000000e+00
  %422 = fadd fast float %419, -1.000000e+00
  %423 = fadd fast float %420, -1.000000e+00
  %424 = fmul fast float %417, 2.550000e+02
  %425 = call float @dx.op.dot3.f32(i32 55, float %370, float %371, float %372, float %421, float %422, float %423)  ; Dot3(ax,ay,az,bx,by,bz)
  %426 = fadd fast float %425, 1.270000e+02
  %427 = fsub fast float %426, %424
  %428 = call float @dx.op.unary.f32(i32 6, float %427)  ; FAbs(value)
  %429 = fmul fast float %428, %362
  %430 = fadd fast float %429, %361
  %431 = fmul fast float %358, 2.000000e+00
  %432 = fmul fast float %359, 2.000000e+00
  %433 = fmul fast float %360, 2.000000e+00
  %434 = fmul fast float %362, 5.000000e-01
  %435 = add nuw nsw i32 %363, 1
  %436 = icmp eq i32 %435, 6
  br i1 %436, label %437, label %357, !llvm.loop !60

; <label>:437                                     ; preds = %357
  %438 = fsub fast float -0.000000e+00, %276
  %439 = fsub fast float -0.000000e+00, %278
  %440 = call float @dx.op.unary.f32(i32 7, float %327)  ; Saturate(value)
  %441 = fmul fast float %430, 2.000000e+00
  %442 = fadd fast float %441, -1.000000e+00
  %443 = call float @dx.op.unary.f32(i32 7, float %442)  ; Saturate(value)
  %444 = fsub fast float %25, %295
  %445 = fsub fast float %78, %296
  %446 = fmul fast float %444, %444
  %447 = fmul fast float %445, %445
  %448 = fadd fast float %446, %447
  %449 = call float @dx.op.unary.f32(i32 24, float %448)  ; Sqrt(value)
  %450 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %451 = extractvalue %dx.types.CBufRet.f32 %450, 0
  %452 = extractvalue %dx.types.CBufRet.f32 %450, 1
  %453 = extractvalue %dx.types.CBufRet.f32 %450, 2
  %454 = extractvalue %dx.types.CBufRet.f32 %450, 3
  %455 = extractvalue %dx.types.CBufRet.f32 %328, 1
  %456 = fmul fast float %455, %451
  %457 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %456)  ; FMax(a,b)
  %458 = fdiv fast float 1.000000e+00, %457
  %459 = fmul fast float %458, %449
  %460 = fsub fast float 1.000000e+00, %459
  %461 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %462 = extractvalue %dx.types.CBufRet.f32 %461, 1
  %463 = fmul fast float %460, %462
  %464 = call float @dx.op.unary.f32(i32 7, float %463)  ; Saturate(value)
  %465 = fsub fast float 1.000000e+00, %443
  %466 = fmul fast float %464, %465
  %467 = fadd fast float %466, %443
  %468 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %469 = extractvalue %dx.types.CBufRet.i32 %468, 2
  %470 = icmp eq i32 %469, 0
  br i1 %470, label %596, label %471

; <label>:471                                     ; preds = %437
  br label %472

; <label>:472                                     ; preds = %590, %471
  %473 = phi i32 [ %591, %590 ], [ 0, %471 ]
  %474 = add i32 %473, 195
  %475 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %474)  ; CBufferLoadLegacy(handle,regIndex)
  %476 = extractvalue %dx.types.CBufRet.f32 %475, 3
  %477 = extractvalue %dx.types.CBufRet.f32 %475, 0
  %478 = extractvalue %dx.types.CBufRet.f32 %475, 1
  %479 = extractvalue %dx.types.CBufRet.f32 %475, 2
  %480 = fadd fast float %476, %286
  %481 = fsub fast float %480, %477
  %482 = fadd fast float %476, %290
  %483 = fsub fast float %482, %478
  %484 = fadd fast float %476, %294
  %485 = fsub fast float %484, %479
  %486 = call float @dx.op.binary.f32(i32 35, float %481, float 0.000000e+00)  ; FMax(a,b)
  %487 = call float @dx.op.binary.f32(i32 35, float %483, float 0.000000e+00)  ; FMax(a,b)
  %488 = call float @dx.op.binary.f32(i32 35, float %485, float 0.000000e+00)  ; FMax(a,b)
  %489 = fsub fast float %476, %286
  %490 = fadd fast float %489, %477
  %491 = fsub fast float %476, %290
  %492 = fadd fast float %491, %478
  %493 = fsub fast float %476, %294
  %494 = fadd fast float %493, %479
  %495 = call float @dx.op.binary.f32(i32 35, float %490, float 0.000000e+00)  ; FMax(a,b)
  %496 = call float @dx.op.binary.f32(i32 35, float %492, float 0.000000e+00)  ; FMax(a,b)
  %497 = call float @dx.op.binary.f32(i32 35, float %494, float 0.000000e+00)  ; FMax(a,b)
  %498 = call float @dx.op.binary.f32(i32 36, float %486, float %495)  ; FMin(a,b)
  %499 = call float @dx.op.binary.f32(i32 36, float %487, float %496)  ; FMin(a,b)
  %500 = call float @dx.op.binary.f32(i32 36, float %488, float %497)  ; FMin(a,b)
  %501 = call float @dx.op.binary.f32(i32 36, float %499, float %500)  ; FMin(a,b)
  %502 = call float @dx.op.binary.f32(i32 36, float %498, float %501)  ; FMin(a,b)
  %503 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %504 = extractvalue %dx.types.CBufRet.f32 %503, 0
  %505 = fmul fast float %504, %476
  %506 = fmul fast float %505, 8.000000e+00
  %507 = fcmp fast ogt float %502, %505
  br i1 %507, label %508, label %590

; <label>:508                                     ; preds = %472
  %509 = add i32 %473, 201
  %510 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %509)  ; CBufferLoadLegacy(handle,regIndex)
  %511 = extractvalue %dx.types.CBufRet.f32 %510, 0
  %512 = extractvalue %dx.types.CBufRet.f32 %510, 1
  %513 = extractvalue %dx.types.CBufRet.f32 %510, 2
  %514 = extractvalue %dx.types.CBufRet.f32 %510, 3
  %515 = fmul fast float %514, %286
  %516 = fmul fast float %514, %290
  %517 = fmul fast float %514, %294
  %518 = fadd fast float %515, %511
  %519 = fadd fast float %516, %512
  %520 = fadd fast float %517, %513
  %521 = call float @dx.op.unary.f32(i32 22, float %518)  ; Frc(value)
  %522 = call float @dx.op.unary.f32(i32 22, float %519)  ; Frc(value)
  %523 = call float @dx.op.unary.f32(i32 22, float %520)  ; Frc(value)
  %524 = call float @dx.op.unary.f32(i32 22, float %521)  ; Frc(value)
  %525 = call float @dx.op.unary.f32(i32 22, float %522)  ; Frc(value)
  %526 = call float @dx.op.unary.f32(i32 22, float %523)  ; Frc(value)
  %527 = call float @dx.op.unary.f32(i32 7, float %524)  ; Saturate(value)
  %528 = call float @dx.op.unary.f32(i32 7, float %525)  ; Saturate(value)
  %529 = call float @dx.op.unary.f32(i32 7, float %526)  ; Saturate(value)
  %530 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %531 = extractvalue %dx.types.CBufRet.i32 %530, 2
  %532 = sitofp i32 %531 to float
  %533 = fmul fast float %532, %527
  %534 = fmul fast float %532, %528
  %535 = fmul fast float %532, %529
  %536 = mul i32 %531, %473
  %537 = sitofp i32 %536 to float
  %538 = fadd fast float %537, %535
  %539 = fptosi float %533 to i32
  %540 = fptosi float %534 to i32
  %541 = fptosi float %538 to i32
  %542 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %8)  ; CreateHandleForLib(Resource)
  %543 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %542, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %544 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %543, i32 0, i32 %539, i32 %540, i32 %541, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %545 = extractvalue %dx.types.ResRet.i32 %544, 0
  %546 = icmp eq i32 %545, -1
  br i1 %546, label %590, label %547

; <label>:547                                     ; preds = %508
  %548 = fmul fast float %532, %524
  %549 = fmul fast float %532, %525
  %550 = fmul fast float %532, %526
  %551 = call float @dx.op.unary.f32(i32 22, float %548)  ; Frc(value)
  %552 = call float @dx.op.unary.f32(i32 22, float %549)  ; Frc(value)
  %553 = call float @dx.op.unary.f32(i32 22, float %550)  ; Frc(value)
  %554 = shl i32 %545, 3
  %555 = and i32 %554, 1016
  %556 = lshr i32 %545, 4
  %557 = and i32 %556, 1016
  %558 = lshr i32 %545, 11
  %559 = and i32 %558, 8184
  %560 = uitofp i32 %555 to float
  %561 = uitofp i32 %557 to float
  %562 = uitofp i32 %559 to float
  %563 = fmul fast float %551, 7.000000e+00
  %564 = fmul fast float %552, 7.000000e+00
  %565 = fmul fast float %553, 7.000000e+00
  %566 = fadd fast float %560, 5.000000e-01
  %567 = fadd fast float %566, %563
  %568 = fadd fast float %561, 5.000000e-01
  %569 = fadd fast float %568, %564
  %570 = fadd fast float %562, 5.000000e-01
  %571 = fadd fast float %570, %565
  %572 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %573 = extractvalue %dx.types.CBufRet.f32 %572, 0
  %574 = extractvalue %dx.types.CBufRet.f32 %572, 1
  %575 = extractvalue %dx.types.CBufRet.f32 %572, 2
  %576 = fmul fast float %573, %567
  %577 = fmul fast float %569, %574
  %578 = fmul fast float %571, %575
  %579 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %9)  ; CreateHandleForLib(Resource)
  %580 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %579, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %581 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %2)  ; CreateHandleForLib(Resource)
  %582 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %581, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %583 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %580, %dx.types.Handle %582, float %576, float %577, float %578, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %584 = extractvalue %dx.types.ResRet.f32 %583, 0
  %585 = fcmp fast olt float %584, 1.000000e+00
  br i1 %585, label %586, label %590

; <label>:586                                     ; preds = %547
  %587 = fmul fast float %584, 2.000000e+00
  %588 = fadd fast float %587, -1.000000e+00
  %589 = fmul fast float %588, %506
  br label %596

; <label>:590                                     ; preds = %547, %508, %472
  %591 = add i32 %473, 1
  %592 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %593 = extractvalue %dx.types.CBufRet.i32 %592, 2
  %594 = icmp ult i32 %591, %593
  br i1 %594, label %472, label %595

; <label>:595                                     ; preds = %590
  br label %596

; <label>:596                                     ; preds = %595, %586, %437
  %597 = phi float [ %589, %586 ], [ 0.000000e+00, %437 ], [ %506, %595 ]
  %598 = extractvalue %dx.types.CBufRet.f32 %461, 3
  %599 = fmul fast float %598, %597
  %600 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %601 = extractvalue %dx.types.CBufRet.f32 %600, 0
  %602 = fsub fast float %599, %601
  %603 = extractvalue %dx.types.CBufRet.f32 %600, 3
  %604 = fmul fast float %602, %603
  %605 = fsub fast float 1.000000e+00, %604
  %606 = call float @dx.op.unary.f32(i32 7, float %605)  ; Saturate(value)
  %607 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %608 = extractvalue %dx.types.CBufRet.i32 %607, 2
  %609 = icmp eq i32 %608, 0
  br i1 %609, label %914, label %610

; <label>:610                                     ; preds = %596
  br label %611

; <label>:611                                     ; preds = %908, %610
  %612 = phi i32 [ %909, %908 ], [ 0, %610 ]
  %613 = add i32 %612, 195
  %614 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %613)  ; CBufferLoadLegacy(handle,regIndex)
  %615 = extractvalue %dx.types.CBufRet.f32 %614, 3
  %616 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %617 = extractvalue %dx.types.CBufRet.f32 %616, 0
  %618 = fmul fast float %617, %615
  %619 = extractvalue %dx.types.CBufRet.f32 %614, 0
  %620 = extractvalue %dx.types.CBufRet.f32 %614, 1
  %621 = extractvalue %dx.types.CBufRet.f32 %614, 2
  %622 = fadd fast float %615, %286
  %623 = fsub fast float %622, %619
  %624 = fadd fast float %615, %290
  %625 = fsub fast float %624, %620
  %626 = fadd fast float %615, %294
  %627 = fsub fast float %626, %621
  %628 = call float @dx.op.binary.f32(i32 35, float %623, float 0.000000e+00)  ; FMax(a,b)
  %629 = call float @dx.op.binary.f32(i32 35, float %625, float 0.000000e+00)  ; FMax(a,b)
  %630 = call float @dx.op.binary.f32(i32 35, float %627, float 0.000000e+00)  ; FMax(a,b)
  %631 = fsub fast float %615, %286
  %632 = fadd fast float %631, %619
  %633 = fsub fast float %615, %290
  %634 = fadd fast float %633, %620
  %635 = fsub fast float %615, %294
  %636 = fadd fast float %635, %621
  %637 = call float @dx.op.binary.f32(i32 35, float %632, float 0.000000e+00)  ; FMax(a,b)
  %638 = call float @dx.op.binary.f32(i32 35, float %634, float 0.000000e+00)  ; FMax(a,b)
  %639 = call float @dx.op.binary.f32(i32 35, float %636, float 0.000000e+00)  ; FMax(a,b)
  %640 = call float @dx.op.binary.f32(i32 36, float %628, float %637)  ; FMin(a,b)
  %641 = call float @dx.op.binary.f32(i32 36, float %629, float %638)  ; FMin(a,b)
  %642 = call float @dx.op.binary.f32(i32 36, float %630, float %639)  ; FMin(a,b)
  %643 = call float @dx.op.binary.f32(i32 36, float %641, float %642)  ; FMin(a,b)
  %644 = call float @dx.op.binary.f32(i32 36, float %640, float %643)  ; FMin(a,b)
  %645 = fcmp fast ult float %644, %618
  br i1 %645, label %908, label %646

; <label>:646                                     ; preds = %611
  %647 = add i32 %612, 201
  %648 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 %647)  ; CBufferLoadLegacy(handle,regIndex)
  %649 = extractvalue %dx.types.CBufRet.f32 %648, 0
  %650 = extractvalue %dx.types.CBufRet.f32 %648, 1
  %651 = extractvalue %dx.types.CBufRet.f32 %648, 2
  %652 = extractvalue %dx.types.CBufRet.f32 %648, 3
  %653 = fmul fast float %652, %286
  %654 = fmul fast float %652, %290
  %655 = fmul fast float %652, %294
  %656 = fadd fast float %653, %649
  %657 = fadd fast float %654, %650
  %658 = fadd fast float %655, %651
  %659 = call float @dx.op.unary.f32(i32 22, float %656)  ; Frc(value)
  %660 = call float @dx.op.unary.f32(i32 22, float %657)  ; Frc(value)
  %661 = call float @dx.op.unary.f32(i32 22, float %658)  ; Frc(value)
  %662 = call float @dx.op.unary.f32(i32 22, float %659)  ; Frc(value)
  %663 = call float @dx.op.unary.f32(i32 22, float %660)  ; Frc(value)
  %664 = call float @dx.op.unary.f32(i32 22, float %661)  ; Frc(value)
  %665 = call float @dx.op.unary.f32(i32 7, float %662)  ; Saturate(value)
  %666 = call float @dx.op.unary.f32(i32 7, float %663)  ; Saturate(value)
  %667 = call float @dx.op.unary.f32(i32 7, float %664)  ; Saturate(value)
  %668 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 219)  ; CBufferLoadLegacy(handle,regIndex)
  %669 = extractvalue %dx.types.CBufRet.i32 %668, 2
  %670 = sitofp i32 %669 to float
  %671 = fmul fast float %670, %665
  %672 = fmul fast float %670, %666
  %673 = fmul fast float %670, %667
  %674 = mul i32 %669, %612
  %675 = sitofp i32 %674 to float
  %676 = fadd fast float %675, %673
  %677 = fptosi float %671 to i32
  %678 = fptosi float %672 to i32
  %679 = fptosi float %676 to i32
  %680 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %8)  ; CreateHandleForLib(Resource)
  %681 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %680, %dx.types.ResourceProperties { i32 4, i32 261 })  ; AnnotateHandle(res,props)  resource: Texture3D<U32>
  %682 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %681, i32 0, i32 %677, i32 %678, i32 %679, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %683 = extractvalue %dx.types.ResRet.i32 %682, 0
  %684 = icmp eq i32 %683, -1
  br i1 %684, label %908, label %685

; <label>:685                                     ; preds = %646
  %686 = fmul fast float %670, %662
  %687 = fmul fast float %670, %663
  %688 = fmul fast float %670, %664
  %689 = call float @dx.op.unary.f32(i32 22, float %686)  ; Frc(value)
  %690 = call float @dx.op.unary.f32(i32 22, float %687)  ; Frc(value)
  %691 = call float @dx.op.unary.f32(i32 22, float %688)  ; Frc(value)
  %692 = shl i32 %683, 3
  %693 = and i32 %692, 1016
  %694 = lshr i32 %683, 4
  %695 = and i32 %694, 1016
  %696 = lshr i32 %683, 11
  %697 = and i32 %696, 8184
  %698 = uitofp i32 %693 to float
  %699 = uitofp i32 %695 to float
  %700 = uitofp i32 %697 to float
  %701 = fmul fast float %689, 7.000000e+00
  %702 = fmul fast float %690, 7.000000e+00
  %703 = fmul fast float %691, 7.000000e+00
  %704 = fadd fast float %698, 5.000000e-01
  %705 = fadd fast float %704, %701
  %706 = fadd fast float %699, 5.000000e-01
  %707 = fadd fast float %706, %702
  %708 = fadd fast float %700, 5.000000e-01
  %709 = fadd fast float %708, %703
  %710 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 220)  ; CBufferLoadLegacy(handle,regIndex)
  %711 = extractvalue %dx.types.CBufRet.f32 %710, 0
  %712 = extractvalue %dx.types.CBufRet.f32 %710, 1
  %713 = extractvalue %dx.types.CBufRet.f32 %710, 2
  %714 = fmul fast float %711, %705
  %715 = fmul fast float %707, %712
  %716 = fmul fast float %709, %713
  %717 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %9)  ; CreateHandleForLib(Resource)
  %718 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %717, %dx.types.ResourceProperties { i32 4, i32 1033 })  ; AnnotateHandle(res,props)  resource: Texture3D<4xF32>
  %719 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %2)  ; CreateHandleForLib(Resource)
  %720 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %719, %dx.types.ResourceProperties { i32 14, i32 0 })  ; AnnotateHandle(res,props)  resource: SamplerState
  %721 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %718, %dx.types.Handle %720, float %714, float %715, float %716, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %722 = extractvalue %dx.types.ResRet.f32 %721, 0
  %723 = fcmp fast olt float %722, 0x3FECCCCCC0000000
  br i1 %723, label %724, label %908

; <label>:724                                     ; preds = %685
  %725 = fmul fast float %617, 5.000000e-01
  %726 = fadd fast float %725, %662
  %727 = call float @dx.op.unary.f32(i32 22, float %726)  ; Frc(value)
  %728 = call float @dx.op.unary.f32(i32 22, float %663)  ; Frc(value)
  %729 = call float @dx.op.unary.f32(i32 22, float %664)  ; Frc(value)
  %730 = call float @dx.op.unary.f32(i32 7, float %727)  ; Saturate(value)
  %731 = call float @dx.op.unary.f32(i32 7, float %728)  ; Saturate(value)
  %732 = call float @dx.op.unary.f32(i32 7, float %729)  ; Saturate(value)
  %733 = fmul fast float %670, %730
  %734 = fmul fast float %670, %731
  %735 = fmul fast float %670, %732
  %736 = fadd fast float %675, %735
  %737 = fptosi float %733 to i32
  %738 = fptosi float %734 to i32
  %739 = fptosi float %736 to i32
  %740 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %681, i32 0, i32 %737, i32 %738, i32 %739, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %741 = extractvalue %dx.types.ResRet.i32 %740, 0
  %742 = icmp eq i32 %741, -1
  br i1 %742, label %773, label %743

; <label>:743                                     ; preds = %724
  %744 = fmul fast float %670, %727
  %745 = fmul fast float %670, %728
  %746 = fmul fast float %670, %729
  %747 = call float @dx.op.unary.f32(i32 22, float %744)  ; Frc(value)
  %748 = call float @dx.op.unary.f32(i32 22, float %745)  ; Frc(value)
  %749 = call float @dx.op.unary.f32(i32 22, float %746)  ; Frc(value)
  %750 = shl i32 %741, 3
  %751 = and i32 %750, 1016
  %752 = lshr i32 %741, 4
  %753 = and i32 %752, 1016
  %754 = lshr i32 %741, 11
  %755 = and i32 %754, 8184
  %756 = uitofp i32 %751 to float
  %757 = uitofp i32 %753 to float
  %758 = uitofp i32 %755 to float
  %759 = fmul fast float %747, 7.000000e+00
  %760 = fmul fast float %748, 7.000000e+00
  %761 = fmul fast float %749, 7.000000e+00
  %762 = fadd fast float %756, 5.000000e-01
  %763 = fadd fast float %762, %759
  %764 = fadd fast float %757, 5.000000e-01
  %765 = fadd fast float %764, %760
  %766 = fadd fast float %758, 5.000000e-01
  %767 = fadd fast float %766, %761
  %768 = fmul fast float %711, %763
  %769 = fmul fast float %765, %712
  %770 = fmul fast float %767, %713
  %771 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %718, %dx.types.Handle %720, float %768, float %769, float %770, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %772 = extractvalue %dx.types.ResRet.f32 %771, 0
  br label %773

; <label>:773                                     ; preds = %743, %724
  %774 = phi float [ %772, %743 ], [ 1.000000e+00, %724 ]
  %775 = fsub fast float %662, %725
  %776 = call float @dx.op.unary.f32(i32 22, float %775)  ; Frc(value)
  %777 = call float @dx.op.unary.f32(i32 7, float %776)  ; Saturate(value)
  %778 = fmul fast float %670, %777
  %779 = fptosi float %778 to i32
  %780 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %681, i32 0, i32 %779, i32 %738, i32 %739, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %781 = extractvalue %dx.types.ResRet.i32 %780, 0
  %782 = icmp eq i32 %781, -1
  br i1 %782, label %813, label %783

; <label>:783                                     ; preds = %773
  %784 = fmul fast float %670, %776
  %785 = fmul fast float %670, %728
  %786 = fmul fast float %670, %729
  %787 = call float @dx.op.unary.f32(i32 22, float %784)  ; Frc(value)
  %788 = call float @dx.op.unary.f32(i32 22, float %785)  ; Frc(value)
  %789 = call float @dx.op.unary.f32(i32 22, float %786)  ; Frc(value)
  %790 = shl i32 %781, 3
  %791 = and i32 %790, 1016
  %792 = lshr i32 %781, 4
  %793 = and i32 %792, 1016
  %794 = lshr i32 %781, 11
  %795 = and i32 %794, 8184
  %796 = uitofp i32 %791 to float
  %797 = uitofp i32 %793 to float
  %798 = uitofp i32 %795 to float
  %799 = fmul fast float %787, 7.000000e+00
  %800 = fmul fast float %788, 7.000000e+00
  %801 = fmul fast float %789, 7.000000e+00
  %802 = fadd fast float %796, 5.000000e-01
  %803 = fadd fast float %802, %799
  %804 = fadd fast float %797, 5.000000e-01
  %805 = fadd fast float %804, %800
  %806 = fadd fast float %798, 5.000000e-01
  %807 = fadd fast float %806, %801
  %808 = fmul fast float %711, %803
  %809 = fmul fast float %805, %712
  %810 = fmul fast float %807, %713
  %811 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %718, %dx.types.Handle %720, float %808, float %809, float %810, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %812 = extractvalue %dx.types.ResRet.f32 %811, 0
  br label %813

; <label>:813                                     ; preds = %783, %773
  %814 = phi float [ %812, %783 ], [ 1.000000e+00, %773 ]
  %815 = fadd fast float %725, %663
  %816 = call float @dx.op.unary.f32(i32 22, float %662)  ; Frc(value)
  %817 = call float @dx.op.unary.f32(i32 22, float %815)  ; Frc(value)
  %818 = call float @dx.op.unary.f32(i32 7, float %816)  ; Saturate(value)
  %819 = call float @dx.op.unary.f32(i32 7, float %817)  ; Saturate(value)
  %820 = fmul fast float %670, %818
  %821 = fmul fast float %670, %819
  %822 = fptosi float %820 to i32
  %823 = fptosi float %821 to i32
  %824 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %681, i32 0, i32 %822, i32 %823, i32 %739, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %825 = extractvalue %dx.types.ResRet.i32 %824, 0
  %826 = icmp eq i32 %825, -1
  br i1 %826, label %857, label %827

; <label>:827                                     ; preds = %813
  %828 = fmul fast float %670, %816
  %829 = fmul fast float %670, %817
  %830 = fmul fast float %670, %729
  %831 = call float @dx.op.unary.f32(i32 22, float %828)  ; Frc(value)
  %832 = call float @dx.op.unary.f32(i32 22, float %829)  ; Frc(value)
  %833 = call float @dx.op.unary.f32(i32 22, float %830)  ; Frc(value)
  %834 = shl i32 %825, 3
  %835 = and i32 %834, 1016
  %836 = lshr i32 %825, 4
  %837 = and i32 %836, 1016
  %838 = lshr i32 %825, 11
  %839 = and i32 %838, 8184
  %840 = uitofp i32 %835 to float
  %841 = uitofp i32 %837 to float
  %842 = uitofp i32 %839 to float
  %843 = fmul fast float %831, 7.000000e+00
  %844 = fmul fast float %832, 7.000000e+00
  %845 = fmul fast float %833, 7.000000e+00
  %846 = fadd fast float %840, 5.000000e-01
  %847 = fadd fast float %846, %843
  %848 = fadd fast float %841, 5.000000e-01
  %849 = fadd fast float %848, %844
  %850 = fadd fast float %842, 5.000000e-01
  %851 = fadd fast float %850, %845
  %852 = fmul fast float %711, %847
  %853 = fmul fast float %849, %712
  %854 = fmul fast float %851, %713
  %855 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %718, %dx.types.Handle %720, float %852, float %853, float %854, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %856 = extractvalue %dx.types.ResRet.f32 %855, 0
  br label %857

; <label>:857                                     ; preds = %827, %813
  %858 = phi float [ %856, %827 ], [ 1.000000e+00, %813 ]
  %859 = fsub fast float %663, %725
  %860 = call float @dx.op.unary.f32(i32 22, float %859)  ; Frc(value)
  %861 = call float @dx.op.unary.f32(i32 7, float %860)  ; Saturate(value)
  %862 = fmul fast float %670, %861
  %863 = fptosi float %862 to i32
  %864 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %681, i32 0, i32 %822, i32 %863, i32 %739, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %865 = extractvalue %dx.types.ResRet.i32 %864, 0
  %866 = icmp eq i32 %865, -1
  br i1 %866, label %897, label %867

; <label>:867                                     ; preds = %857
  %868 = fmul fast float %670, %816
  %869 = fmul fast float %670, %860
  %870 = fmul fast float %670, %729
  %871 = call float @dx.op.unary.f32(i32 22, float %868)  ; Frc(value)
  %872 = call float @dx.op.unary.f32(i32 22, float %869)  ; Frc(value)
  %873 = call float @dx.op.unary.f32(i32 22, float %870)  ; Frc(value)
  %874 = shl i32 %865, 3
  %875 = and i32 %874, 1016
  %876 = lshr i32 %865, 4
  %877 = and i32 %876, 1016
  %878 = lshr i32 %865, 11
  %879 = and i32 %878, 8184
  %880 = uitofp i32 %875 to float
  %881 = uitofp i32 %877 to float
  %882 = uitofp i32 %879 to float
  %883 = fmul fast float %871, 7.000000e+00
  %884 = fmul fast float %872, 7.000000e+00
  %885 = fmul fast float %873, 7.000000e+00
  %886 = fadd fast float %880, 5.000000e-01
  %887 = fadd fast float %886, %883
  %888 = fadd fast float %881, 5.000000e-01
  %889 = fadd fast float %888, %884
  %890 = fadd fast float %882, 5.000000e-01
  %891 = fadd fast float %890, %885
  %892 = fmul fast float %711, %887
  %893 = fmul fast float %889, %712
  %894 = fmul fast float %891, %713
  %895 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %718, %dx.types.Handle %720, float %892, float %893, float %894, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %896 = extractvalue %dx.types.ResRet.f32 %895, 0
  br label %897

; <label>:897                                     ; preds = %867, %857
  %898 = phi float [ %896, %867 ], [ 1.000000e+00, %857 ]
  %899 = fsub fast float %774, %814
  %900 = fsub fast float %858, %898
  %901 = fmul fast float %618, 1.600000e+01
  %902 = fmul fast float %899, %901
  %903 = fmul fast float %900, %901
  %904 = fmul fast float %615, 1.280000e+02
  %905 = fmul fast float %904, %617
  %906 = fdiv fast float %902, %905
  %907 = fdiv fast float %903, %905
  br label %914

; <label>:908                                     ; preds = %685, %646, %611
  %909 = add i32 %612, 1
  %910 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %19, i32 222)  ; CBufferLoadLegacy(handle,regIndex)
  %911 = extractvalue %dx.types.CBufRet.i32 %910, 2
  %912 = icmp ult i32 %909, %911
  br i1 %912, label %611, label %913

; <label>:913                                     ; preds = %908
  br label %914

; <label>:914                                     ; preds = %913, %897, %596
  %915 = phi float [ %906, %897 ], [ 0.000000e+00, %596 ], [ 0.000000e+00, %913 ]
  %916 = phi float [ %907, %897 ], [ 0.000000e+00, %596 ], [ 0.000000e+00, %913 ]
  %917 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %918 = extractvalue %dx.types.CBufRet.f32 %917, 1
  %919 = fmul fast float %918, %915
  %920 = fmul fast float %918, %916
  %921 = fadd fast float %919, %295
  %922 = fadd fast float %920, %296
  %923 = extractvalue %dx.types.CBufRet.f32 %917, 2
  %924 = fmul fast float %921, %923
  %925 = fmul fast float %922, %923
  %926 = fmul fast float %923, %76
  %927 = fmul fast float %923, %23
  %928 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 139)  ; CBufferLoadLegacy(handle,regIndex)
  %929 = extractvalue %dx.types.CBufRet.f32 %928, 1
  %930 = fsub fast float %453, %929
  %931 = fmul fast float %930, %454
  %932 = fadd fast float %931, %929
  %933 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %934 = extractvalue %dx.types.CBufRet.f32 %933, 0
  %935 = fmul fast float %932, %934
  %936 = fadd fast float %935, 1.000000e+00
  %937 = fmul fast float %924, 0x3EA0000000000000
  %938 = fmul fast float %925, 0x3EA0000000000000
  %939 = fmul fast float %936, 0x3EA0000000000000
  %940 = fadd fast float %939, 5.000000e-01
  %941 = fadd fast float %926, 5.000000e-01
  %942 = fadd fast float %941, %937
  %943 = fadd fast float %927, 5.000000e-01
  %944 = fadd fast float %943, %938
  %945 = call float @dx.op.unary.f32(i32 27, float %942)  ; Round_ni(value)
  %946 = call float @dx.op.unary.f32(i32 27, float %944)  ; Round_ni(value)
  %947 = call float @dx.op.unary.f32(i32 27, float %940)  ; Round_ni(value)
  %948 = fsub fast float %926, %945
  %949 = fsub fast float %927, %946
  %950 = fmul fast float %948, 2.097152e+06
  %951 = fmul fast float %949, 2.097152e+06
  %952 = fmul fast float %947, 2.097152e+06
  %953 = fadd fast float %950, %924
  %954 = fadd fast float %951, %925
  %955 = fsub fast float %936, %952
  br label %956

; <label>:956                                     ; preds = %956, %914
  %957 = phi float [ %953, %914 ], [ %1209, %956 ]
  %958 = phi float [ %954, %914 ], [ %1210, %956 ]
  %959 = phi float [ %955, %914 ], [ %1211, %956 ]
  %960 = phi float [ 0.000000e+00, %914 ], [ %1208, %956 ]
  %961 = phi float [ 1.000000e+00, %914 ], [ %1212, %956 ]
  %962 = phi i32 [ 0, %914 ], [ %1213, %956 ]
  %963 = call float @dx.op.unary.f32(i32 22, float %957)  ; Frc(value)
  %964 = call float @dx.op.unary.f32(i32 22, float %958)  ; Frc(value)
  %965 = call float @dx.op.unary.f32(i32 22, float %959)  ; Frc(value)
  %966 = call float @dx.op.unary.f32(i32 27, float %957)  ; Round_ni(value)
  %967 = call float @dx.op.unary.f32(i32 27, float %958)  ; Round_ni(value)
  %968 = call float @dx.op.unary.f32(i32 27, float %959)  ; Round_ni(value)
  %969 = call float @dx.op.dot3.f32(i32 55, float %966, float %967, float %968, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %970 = fadd fast float %969, 1.900000e+01
  %971 = fadd fast float %969, 4.700000e+01
  %972 = fadd fast float %969, 6.600000e+01
  %973 = fadd fast float %969, 1.010000e+02
  %974 = fadd fast float %969, 1.200000e+02
  %975 = fadd fast float %969, 1.480000e+02
  %976 = fadd fast float %969, 1.670000e+02
  %977 = fptosi float %969 to i32
  %978 = mul i32 %977, 1664525
  %979 = add i32 %978, -781160288
  %980 = mul i32 %979, 1013904223
  %981 = add i32 %980, 1013904223
  %982 = mul i32 %981, %979
  %983 = add i32 %982, 1013904223
  %984 = mul i32 %983, %981
  %985 = add i32 %984, %979
  %986 = lshr i32 %985, 16
  %987 = and i32 %986, 32768
  %988 = and i32 %986, 16384
  %989 = and i32 %986, 8192
  %990 = uitofp i32 %987 to float
  %991 = uitofp i32 %988 to float
  %992 = uitofp i32 %989 to float
  %993 = fmul fast float %990, 0x3F10000000000000
  %994 = fmul fast float %991, 0x3F20000000000000
  %995 = fmul fast float %992, 0x3F30000000000000
  %996 = fadd fast float %993, -1.000000e+00
  %997 = fadd fast float %994, -1.000000e+00
  %998 = fadd fast float %995, -1.000000e+00
  %999 = call float @dx.op.dot3.f32(i32 55, float %996, float %997, float %998, float %963, float %964, float %965)  ; Dot3(ax,ay,az,bx,by,bz)
  %1000 = fadd fast float %963, -1.000000e+00
  %1001 = fptosi float %970 to i32
  %1002 = mul i32 %1001, 1664525
  %1003 = add i32 %1002, -781160288
  %1004 = mul i32 %1003, 1013904223
  %1005 = add i32 %1004, 1013904223
  %1006 = mul i32 %1005, %1003
  %1007 = add i32 %1006, 1013904223
  %1008 = mul i32 %1007, %1005
  %1009 = add i32 %1008, %1003
  %1010 = lshr i32 %1009, 16
  %1011 = and i32 %1010, 32768
  %1012 = and i32 %1010, 16384
  %1013 = and i32 %1010, 8192
  %1014 = uitofp i32 %1011 to float
  %1015 = uitofp i32 %1012 to float
  %1016 = uitofp i32 %1013 to float
  %1017 = fmul fast float %1014, 0x3F10000000000000
  %1018 = fmul fast float %1015, 0x3F20000000000000
  %1019 = fmul fast float %1016, 0x3F30000000000000
  %1020 = fadd fast float %1017, -1.000000e+00
  %1021 = fadd fast float %1018, -1.000000e+00
  %1022 = fadd fast float %1019, -1.000000e+00
  %1023 = call float @dx.op.dot3.f32(i32 55, float %1020, float %1021, float %1022, float %1000, float %964, float %965)  ; Dot3(ax,ay,az,bx,by,bz)
  %1024 = fadd fast float %964, -1.000000e+00
  %1025 = fptosi float %971 to i32
  %1026 = mul i32 %1025, 1664525
  %1027 = add i32 %1026, -781160288
  %1028 = mul i32 %1027, 1013904223
  %1029 = add i32 %1028, 1013904223
  %1030 = mul i32 %1029, %1027
  %1031 = add i32 %1030, 1013904223
  %1032 = mul i32 %1031, %1029
  %1033 = add i32 %1032, %1027
  %1034 = lshr i32 %1033, 16
  %1035 = and i32 %1034, 32768
  %1036 = and i32 %1034, 16384
  %1037 = and i32 %1034, 8192
  %1038 = uitofp i32 %1035 to float
  %1039 = uitofp i32 %1036 to float
  %1040 = uitofp i32 %1037 to float
  %1041 = fmul fast float %1038, 0x3F10000000000000
  %1042 = fmul fast float %1039, 0x3F20000000000000
  %1043 = fmul fast float %1040, 0x3F30000000000000
  %1044 = fadd fast float %1041, -1.000000e+00
  %1045 = fadd fast float %1042, -1.000000e+00
  %1046 = fadd fast float %1043, -1.000000e+00
  %1047 = call float @dx.op.dot3.f32(i32 55, float %1044, float %1045, float %1046, float %963, float %1024, float %965)  ; Dot3(ax,ay,az,bx,by,bz)
  %1048 = fptosi float %972 to i32
  %1049 = mul i32 %1048, 1664525
  %1050 = add i32 %1049, -781160288
  %1051 = mul i32 %1050, 1013904223
  %1052 = add i32 %1051, 1013904223
  %1053 = mul i32 %1052, %1050
  %1054 = add i32 %1053, 1013904223
  %1055 = mul i32 %1054, %1052
  %1056 = add i32 %1055, %1050
  %1057 = lshr i32 %1056, 16
  %1058 = and i32 %1057, 32768
  %1059 = and i32 %1057, 16384
  %1060 = and i32 %1057, 8192
  %1061 = uitofp i32 %1058 to float
  %1062 = uitofp i32 %1059 to float
  %1063 = uitofp i32 %1060 to float
  %1064 = fmul fast float %1061, 0x3F10000000000000
  %1065 = fmul fast float %1062, 0x3F20000000000000
  %1066 = fmul fast float %1063, 0x3F30000000000000
  %1067 = fadd fast float %1064, -1.000000e+00
  %1068 = fadd fast float %1065, -1.000000e+00
  %1069 = fadd fast float %1066, -1.000000e+00
  %1070 = call float @dx.op.dot3.f32(i32 55, float %1067, float %1068, float %1069, float %1000, float %1024, float %965)  ; Dot3(ax,ay,az,bx,by,bz)
  %1071 = fadd fast float %965, -1.000000e+00
  %1072 = fptosi float %973 to i32
  %1073 = mul i32 %1072, 1664525
  %1074 = add i32 %1073, -781160288
  %1075 = mul i32 %1074, 1013904223
  %1076 = add i32 %1075, 1013904223
  %1077 = mul i32 %1076, %1074
  %1078 = add i32 %1077, 1013904223
  %1079 = mul i32 %1078, %1076
  %1080 = add i32 %1079, %1074
  %1081 = lshr i32 %1080, 16
  %1082 = and i32 %1081, 32768
  %1083 = and i32 %1081, 16384
  %1084 = and i32 %1081, 8192
  %1085 = uitofp i32 %1082 to float
  %1086 = uitofp i32 %1083 to float
  %1087 = uitofp i32 %1084 to float
  %1088 = fmul fast float %1085, 0x3F10000000000000
  %1089 = fmul fast float %1086, 0x3F20000000000000
  %1090 = fmul fast float %1087, 0x3F30000000000000
  %1091 = fadd fast float %1088, -1.000000e+00
  %1092 = fadd fast float %1089, -1.000000e+00
  %1093 = fadd fast float %1090, -1.000000e+00
  %1094 = call float @dx.op.dot3.f32(i32 55, float %1091, float %1092, float %1093, float %963, float %964, float %1071)  ; Dot3(ax,ay,az,bx,by,bz)
  %1095 = fptosi float %974 to i32
  %1096 = mul i32 %1095, 1664525
  %1097 = add i32 %1096, -781160288
  %1098 = mul i32 %1097, 1013904223
  %1099 = add i32 %1098, 1013904223
  %1100 = mul i32 %1099, %1097
  %1101 = add i32 %1100, 1013904223
  %1102 = mul i32 %1101, %1099
  %1103 = add i32 %1102, %1097
  %1104 = lshr i32 %1103, 16
  %1105 = and i32 %1104, 32768
  %1106 = and i32 %1104, 16384
  %1107 = and i32 %1104, 8192
  %1108 = uitofp i32 %1105 to float
  %1109 = uitofp i32 %1106 to float
  %1110 = uitofp i32 %1107 to float
  %1111 = fmul fast float %1108, 0x3F10000000000000
  %1112 = fmul fast float %1109, 0x3F20000000000000
  %1113 = fmul fast float %1110, 0x3F30000000000000
  %1114 = fadd fast float %1111, -1.000000e+00
  %1115 = fadd fast float %1112, -1.000000e+00
  %1116 = fadd fast float %1113, -1.000000e+00
  %1117 = call float @dx.op.dot3.f32(i32 55, float %1114, float %1115, float %1116, float %1000, float %964, float %1071)  ; Dot3(ax,ay,az,bx,by,bz)
  %1118 = fptosi float %975 to i32
  %1119 = mul i32 %1118, 1664525
  %1120 = add i32 %1119, -781160288
  %1121 = mul i32 %1120, 1013904223
  %1122 = add i32 %1121, 1013904223
  %1123 = mul i32 %1122, %1120
  %1124 = add i32 %1123, 1013904223
  %1125 = mul i32 %1124, %1122
  %1126 = add i32 %1125, %1120
  %1127 = lshr i32 %1126, 16
  %1128 = and i32 %1127, 32768
  %1129 = and i32 %1127, 16384
  %1130 = and i32 %1127, 8192
  %1131 = uitofp i32 %1128 to float
  %1132 = uitofp i32 %1129 to float
  %1133 = uitofp i32 %1130 to float
  %1134 = fmul fast float %1131, 0x3F10000000000000
  %1135 = fmul fast float %1132, 0x3F20000000000000
  %1136 = fmul fast float %1133, 0x3F30000000000000
  %1137 = fadd fast float %1134, -1.000000e+00
  %1138 = fadd fast float %1135, -1.000000e+00
  %1139 = fadd fast float %1136, -1.000000e+00
  %1140 = call float @dx.op.dot3.f32(i32 55, float %1137, float %1138, float %1139, float %963, float %1024, float %1071)  ; Dot3(ax,ay,az,bx,by,bz)
  %1141 = fptosi float %976 to i32
  %1142 = mul i32 %1141, 1664525
  %1143 = add i32 %1142, -781160288
  %1144 = mul i32 %1143, 1013904223
  %1145 = add i32 %1144, 1013904223
  %1146 = mul i32 %1145, %1143
  %1147 = add i32 %1146, 1013904223
  %1148 = mul i32 %1147, %1145
  %1149 = add i32 %1148, %1143
  %1150 = lshr i32 %1149, 16
  %1151 = and i32 %1150, 32768
  %1152 = and i32 %1150, 16384
  %1153 = and i32 %1150, 8192
  %1154 = uitofp i32 %1151 to float
  %1155 = uitofp i32 %1152 to float
  %1156 = uitofp i32 %1153 to float
  %1157 = fmul fast float %1154, 0x3F10000000000000
  %1158 = fmul fast float %1155, 0x3F20000000000000
  %1159 = fmul fast float %1156, 0x3F30000000000000
  %1160 = fadd fast float %1157, -1.000000e+00
  %1161 = fadd fast float %1158, -1.000000e+00
  %1162 = fadd fast float %1159, -1.000000e+00
  %1163 = call float @dx.op.dot3.f32(i32 55, float %1160, float %1161, float %1162, float %1000, float %1024, float %1071)  ; Dot3(ax,ay,az,bx,by,bz)
  %1164 = fmul fast float %963, %963
  %1165 = fmul fast float %964, %964
  %1166 = fmul fast float %965, %965
  %1167 = fmul fast float %1164, %963
  %1168 = fmul fast float %1165, %964
  %1169 = fmul fast float %1166, %965
  %1170 = fmul fast float %963, 6.000000e+00
  %1171 = fmul fast float %964, 6.000000e+00
  %1172 = fmul fast float %965, 6.000000e+00
  %1173 = fadd fast float %1170, -1.500000e+01
  %1174 = fadd fast float %1171, -1.500000e+01
  %1175 = fadd fast float %1172, -1.500000e+01
  %1176 = fmul fast float %1173, %963
  %1177 = fmul fast float %1174, %964
  %1178 = fmul fast float %1175, %965
  %1179 = fadd fast float %1176, 1.000000e+01
  %1180 = fadd fast float %1177, 1.000000e+01
  %1181 = fadd fast float %1178, 1.000000e+01
  %1182 = fmul fast float %1167, %1179
  %1183 = fmul fast float %1168, %1180
  %1184 = fmul fast float %1169, %1181
  %1185 = fsub fast float %1070, %1047
  %1186 = fmul fast float %1185, %1182
  %1187 = fsub fast float %1023, %999
  %1188 = fmul fast float %1187, %1182
  %1189 = fadd fast float %1188, %999
  %1190 = fsub fast float %1047, %1189
  %1191 = fadd fast float %1190, %1186
  %1192 = fmul fast float %1191, %1183
  %1193 = fadd fast float %1192, %1189
  %1194 = fsub fast float %1163, %1140
  %1195 = fmul fast float %1194, %1182
  %1196 = fsub fast float %1117, %1094
  %1197 = fmul fast float %1196, %1182
  %1198 = fadd fast float %1197, %1094
  %1199 = fsub fast float %1140, %1198
  %1200 = fadd fast float %1199, %1195
  %1201 = fmul fast float %1200, %1183
  %1202 = fsub fast float %1198, %1193
  %1203 = fadd fast float %1202, %1201
  %1204 = fmul fast float %1184, %1203
  %1205 = fadd fast float %1204, %1193
  %1206 = call float @dx.op.unary.f32(i32 6, float %1205)  ; FAbs(value)
  %1207 = fmul fast float %1206, %961
  %1208 = fadd fast float %1207, %960
  %1209 = fmul fast float %957, 2.000000e+00
  %1210 = fmul fast float %958, 2.000000e+00
  %1211 = fmul fast float %959, 2.000000e+00
  %1212 = fmul fast float %961, 5.000000e-01
  %1213 = add nuw nsw i32 %962, 1
  %1214 = icmp eq i32 %1213, 10
  br i1 %1214, label %1215, label %956, !llvm.loop !60

; <label>:1215                                    ; preds = %956
  %1216 = extractvalue %dx.types.CBufRet.f32 %933, 1
  %1217 = fmul fast float %1216, %606
  %1218 = fsub fast float 1.000000e+00, %1208
  %1219 = fadd fast float %1218, %1217
  %1220 = call float @dx.op.unary.f32(i32 7, float %1219)  ; Saturate(value)
  %1221 = fcmp fast ole float %1220, 0.000000e+00
  %1222 = fmul fast float %1220, %1220
  %1223 = select i1 %1221, float 0.000000e+00, float %1222
  %1224 = extractvalue %dx.types.CBufRet.f32 %933, 2
  %1225 = extractvalue %dx.types.CBufRet.f32 %933, 3
  %1226 = fsub fast float %1224, %1225
  %1227 = fmul fast float %1226, %1223
  %1228 = fadd fast float %1227, %1225
  %1229 = call float @dx.op.unary.f32(i32 7, float %1228)  ; Saturate(value)
  %1230 = fmul fast float %1229, %606
  %1231 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1232 = extractvalue %dx.types.CBufRet.f32 %1231, 0
  %1233 = fmul fast float %1232, %295
  %1234 = fmul fast float %1232, %296
  %1235 = fmul fast float %1232, %297
  %1236 = fmul fast float %1232, %76
  %1237 = fmul fast float %1232, %23
  %1238 = fmul fast float %1232, %77
  %1239 = fmul fast float %1233, 0x3EA0000000000000
  %1240 = fmul fast float %1234, 0x3EA0000000000000
  %1241 = fmul fast float %1235, 0x3EA0000000000000
  %1242 = fadd fast float %1236, 5.000000e-01
  %1243 = fadd fast float %1242, %1239
  %1244 = fadd fast float %1237, 5.000000e-01
  %1245 = fadd fast float %1244, %1240
  %1246 = fadd fast float %1238, 5.000000e-01
  %1247 = fadd fast float %1246, %1241
  %1248 = call float @dx.op.unary.f32(i32 27, float %1243)  ; Round_ni(value)
  %1249 = call float @dx.op.unary.f32(i32 27, float %1245)  ; Round_ni(value)
  %1250 = call float @dx.op.unary.f32(i32 27, float %1247)  ; Round_ni(value)
  %1251 = fsub fast float %1236, %1248
  %1252 = fsub fast float %1237, %1249
  %1253 = fsub fast float %1238, %1250
  %1254 = fmul fast float %1251, 2.097152e+06
  %1255 = fmul fast float %1252, 2.097152e+06
  %1256 = fmul fast float %1253, 2.097152e+06
  %1257 = fadd fast float %1254, %1233
  %1258 = fadd fast float %1255, %1234
  %1259 = fadd fast float %1256, %1235
  %1260 = call float @dx.op.unary.f32(i32 22, float %1257)  ; Frc(value)
  %1261 = call float @dx.op.unary.f32(i32 22, float %1258)  ; Frc(value)
  %1262 = call float @dx.op.unary.f32(i32 22, float %1259)  ; Frc(value)
  %1263 = call float @dx.op.unary.f32(i32 27, float %1257)  ; Round_ni(value)
  %1264 = call float @dx.op.unary.f32(i32 27, float %1258)  ; Round_ni(value)
  %1265 = call float @dx.op.unary.f32(i32 27, float %1259)  ; Round_ni(value)
  %1266 = fptosi float %1263 to i32
  %1267 = fptosi float %1264 to i32
  %1268 = fptosi float %1265 to i32
  %1269 = mul i32 %1266, 1664525
  %1270 = mul i32 %1267, 1664525
  %1271 = mul i32 %1268, 1664525
  %1272 = add i32 %1269, 1013904223
  %1273 = add i32 %1270, 1013904223
  %1274 = add i32 %1271, 1013904223
  %1275 = mul i32 %1274, %1273
  %1276 = add i32 %1272, %1275
  %1277 = mul i32 %1276, %1274
  %1278 = add i32 %1277, %1273
  %1279 = mul i32 %1278, %1276
  %1280 = add i32 %1279, %1274
  %1281 = mul i32 %1280, %1278
  %1282 = add i32 %1281, %1276
  %1283 = mul i32 %1282, %1280
  %1284 = add i32 %1283, %1278
  %1285 = mul i32 %1284, %1282
  %1286 = add i32 %1285, %1280
  %1287 = lshr i32 %1282, 16
  %1288 = lshr i32 %1284, 16
  %1289 = lshr i32 %1286, 16
  %1290 = uitofp i32 %1287 to float
  %1291 = uitofp i32 %1288 to float
  %1292 = uitofp i32 %1289 to float
  %1293 = fmul fast float %1290, 0x3EF0001000000000
  %1294 = fmul fast float %1291, 0x3EF0001000000000
  %1295 = fmul fast float %1292, 0x3EF0001000000000
  %1296 = fadd fast float %1293, -5.000000e-01
  %1297 = fadd fast float %1294, -5.000000e-01
  %1298 = fadd fast float %1295, -5.000000e-01
  %1299 = call float @dx.op.dot3.f32(i32 55, float %1296, float %1297, float %1298, float %1296, float %1297, float %1298)  ; Dot3(ax,ay,az,bx,by,bz)
  %1300 = call float @dx.op.unary.f32(i32 25, float %1299)  ; Rsqrt(value)
  %1301 = fmul fast float %1300, 0x3FD0902DE0000000
  %1302 = fmul fast float %1301, %1296
  %1303 = fmul fast float %1301, %1297
  %1304 = fmul fast float %1301, %1298
  %1305 = fsub fast float %1260, %1302
  %1306 = fsub fast float %1261, %1303
  %1307 = fsub fast float %1262, %1304
  %1308 = fadd fast float %1265, 1.000000e+00
  %1309 = fptosi float %1308 to i32
  %1310 = mul i32 %1309, 1664525
  %1311 = add i32 %1310, 1013904223
  %1312 = mul i32 %1311, %1273
  %1313 = add i32 %1272, %1312
  %1314 = mul i32 %1313, %1311
  %1315 = add i32 %1314, %1273
  %1316 = mul i32 %1315, %1313
  %1317 = add i32 %1316, %1311
  %1318 = mul i32 %1317, %1315
  %1319 = add i32 %1318, %1313
  %1320 = mul i32 %1319, %1317
  %1321 = add i32 %1320, %1315
  %1322 = mul i32 %1321, %1319
  %1323 = add i32 %1322, %1317
  %1324 = lshr i32 %1319, 16
  %1325 = lshr i32 %1321, 16
  %1326 = lshr i32 %1323, 16
  %1327 = uitofp i32 %1324 to float
  %1328 = uitofp i32 %1325 to float
  %1329 = uitofp i32 %1326 to float
  %1330 = fmul fast float %1327, 0x3EF0001000000000
  %1331 = fmul fast float %1328, 0x3EF0001000000000
  %1332 = fmul fast float %1329, 0x3EF0001000000000
  %1333 = fadd fast float %1330, -5.000000e-01
  %1334 = fadd fast float %1331, -5.000000e-01
  %1335 = fadd fast float %1332, -5.000000e-01
  %1336 = call float @dx.op.dot3.f32(i32 55, float %1333, float %1334, float %1335, float %1333, float %1334, float %1335)  ; Dot3(ax,ay,az,bx,by,bz)
  %1337 = call float @dx.op.unary.f32(i32 25, float %1336)  ; Rsqrt(value)
  %1338 = fmul fast float %1337, 0x3FD0902DE0000000
  %1339 = fmul fast float %1338, %1333
  %1340 = fmul fast float %1338, %1334
  %1341 = fmul fast float %1338, %1335
  %1342 = fsub fast float %1260, %1339
  %1343 = fsub fast float %1261, %1340
  %1344 = fadd fast float %1262, -1.000000e+00
  %1345 = fsub fast float %1344, %1341
  %1346 = fadd fast float %1264, 1.000000e+00
  %1347 = fptosi float %1346 to i32
  %1348 = mul i32 %1347, 1664525
  %1349 = add i32 %1348, 1013904223
  %1350 = mul i32 %1349, %1274
  %1351 = add i32 %1272, %1350
  %1352 = mul i32 %1351, %1274
  %1353 = add i32 %1352, %1349
  %1354 = mul i32 %1353, %1351
  %1355 = add i32 %1354, %1274
  %1356 = mul i32 %1355, %1353
  %1357 = add i32 %1356, %1351
  %1358 = mul i32 %1357, %1355
  %1359 = add i32 %1358, %1353
  %1360 = mul i32 %1359, %1357
  %1361 = add i32 %1360, %1355
  %1362 = lshr i32 %1357, 16
  %1363 = lshr i32 %1359, 16
  %1364 = lshr i32 %1361, 16
  %1365 = uitofp i32 %1362 to float
  %1366 = uitofp i32 %1363 to float
  %1367 = uitofp i32 %1364 to float
  %1368 = fmul fast float %1365, 0x3EF0001000000000
  %1369 = fmul fast float %1366, 0x3EF0001000000000
  %1370 = fmul fast float %1367, 0x3EF0001000000000
  %1371 = fadd fast float %1368, -5.000000e-01
  %1372 = fadd fast float %1369, -5.000000e-01
  %1373 = fadd fast float %1370, -5.000000e-01
  %1374 = call float @dx.op.dot3.f32(i32 55, float %1371, float %1372, float %1373, float %1371, float %1372, float %1373)  ; Dot3(ax,ay,az,bx,by,bz)
  %1375 = call float @dx.op.unary.f32(i32 25, float %1374)  ; Rsqrt(value)
  %1376 = fmul fast float %1375, 0x3FD0902DE0000000
  %1377 = fmul fast float %1376, %1371
  %1378 = fmul fast float %1376, %1372
  %1379 = fmul fast float %1376, %1373
  %1380 = fsub fast float %1260, %1377
  %1381 = fadd fast float %1261, -1.000000e+00
  %1382 = fsub fast float %1381, %1378
  %1383 = fsub fast float %1262, %1379
  %1384 = mul i32 %1311, %1349
  %1385 = add i32 %1272, %1384
  %1386 = mul i32 %1385, %1311
  %1387 = add i32 %1386, %1349
  %1388 = mul i32 %1387, %1385
  %1389 = add i32 %1388, %1311
  %1390 = mul i32 %1389, %1387
  %1391 = add i32 %1390, %1385
  %1392 = mul i32 %1391, %1389
  %1393 = add i32 %1392, %1387
  %1394 = mul i32 %1393, %1391
  %1395 = add i32 %1394, %1389
  %1396 = lshr i32 %1391, 16
  %1397 = lshr i32 %1393, 16
  %1398 = lshr i32 %1395, 16
  %1399 = uitofp i32 %1396 to float
  %1400 = uitofp i32 %1397 to float
  %1401 = uitofp i32 %1398 to float
  %1402 = fmul fast float %1399, 0x3EF0001000000000
  %1403 = fmul fast float %1400, 0x3EF0001000000000
  %1404 = fmul fast float %1401, 0x3EF0001000000000
  %1405 = fadd fast float %1402, -5.000000e-01
  %1406 = fadd fast float %1403, -5.000000e-01
  %1407 = fadd fast float %1404, -5.000000e-01
  %1408 = call float @dx.op.dot3.f32(i32 55, float %1405, float %1406, float %1407, float %1405, float %1406, float %1407)  ; Dot3(ax,ay,az,bx,by,bz)
  %1409 = call float @dx.op.unary.f32(i32 25, float %1408)  ; Rsqrt(value)
  %1410 = fmul fast float %1409, 0x3FD0902DE0000000
  %1411 = fmul fast float %1410, %1405
  %1412 = fmul fast float %1410, %1406
  %1413 = fmul fast float %1410, %1407
  %1414 = fsub fast float %1260, %1411
  %1415 = fsub fast float %1381, %1412
  %1416 = fsub fast float %1344, %1413
  %1417 = fadd fast float %1263, 1.000000e+00
  %1418 = fptosi float %1417 to i32
  %1419 = mul i32 %1418, 1664525
  %1420 = add i32 %1419, 1013904223
  %1421 = add i32 %1420, %1275
  %1422 = mul i32 %1421, %1274
  %1423 = add i32 %1422, %1273
  %1424 = mul i32 %1423, %1421
  %1425 = add i32 %1424, %1274
  %1426 = mul i32 %1425, %1423
  %1427 = add i32 %1426, %1421
  %1428 = mul i32 %1427, %1425
  %1429 = add i32 %1428, %1423
  %1430 = mul i32 %1429, %1427
  %1431 = add i32 %1430, %1425
  %1432 = lshr i32 %1427, 16
  %1433 = lshr i32 %1429, 16
  %1434 = lshr i32 %1431, 16
  %1435 = uitofp i32 %1432 to float
  %1436 = uitofp i32 %1433 to float
  %1437 = uitofp i32 %1434 to float
  %1438 = fmul fast float %1435, 0x3EF0001000000000
  %1439 = fmul fast float %1436, 0x3EF0001000000000
  %1440 = fmul fast float %1437, 0x3EF0001000000000
  %1441 = fadd fast float %1438, -5.000000e-01
  %1442 = fadd fast float %1439, -5.000000e-01
  %1443 = fadd fast float %1440, -5.000000e-01
  %1444 = call float @dx.op.dot3.f32(i32 55, float %1441, float %1442, float %1443, float %1441, float %1442, float %1443)  ; Dot3(ax,ay,az,bx,by,bz)
  %1445 = call float @dx.op.unary.f32(i32 25, float %1444)  ; Rsqrt(value)
  %1446 = fmul fast float %1445, 0x3FD0902DE0000000
  %1447 = fmul fast float %1446, %1441
  %1448 = fmul fast float %1446, %1442
  %1449 = fmul fast float %1446, %1443
  %1450 = fadd fast float %1260, -1.000000e+00
  %1451 = fsub fast float %1450, %1447
  %1452 = fsub fast float %1261, %1448
  %1453 = fsub fast float %1262, %1449
  %1454 = add i32 %1420, %1312
  %1455 = mul i32 %1454, %1311
  %1456 = add i32 %1455, %1273
  %1457 = mul i32 %1456, %1454
  %1458 = add i32 %1457, %1311
  %1459 = mul i32 %1458, %1456
  %1460 = add i32 %1459, %1454
  %1461 = mul i32 %1460, %1458
  %1462 = add i32 %1461, %1456
  %1463 = mul i32 %1462, %1460
  %1464 = add i32 %1463, %1458
  %1465 = lshr i32 %1460, 16
  %1466 = lshr i32 %1462, 16
  %1467 = lshr i32 %1464, 16
  %1468 = uitofp i32 %1465 to float
  %1469 = uitofp i32 %1466 to float
  %1470 = uitofp i32 %1467 to float
  %1471 = fmul fast float %1468, 0x3EF0001000000000
  %1472 = fmul fast float %1469, 0x3EF0001000000000
  %1473 = fmul fast float %1470, 0x3EF0001000000000
  %1474 = fadd fast float %1471, -5.000000e-01
  %1475 = fadd fast float %1472, -5.000000e-01
  %1476 = fadd fast float %1473, -5.000000e-01
  %1477 = call float @dx.op.dot3.f32(i32 55, float %1474, float %1475, float %1476, float %1474, float %1475, float %1476)  ; Dot3(ax,ay,az,bx,by,bz)
  %1478 = call float @dx.op.unary.f32(i32 25, float %1477)  ; Rsqrt(value)
  %1479 = fmul fast float %1478, 0x3FD0902DE0000000
  %1480 = fmul fast float %1479, %1474
  %1481 = fmul fast float %1479, %1475
  %1482 = fmul fast float %1479, %1476
  %1483 = fsub fast float %1450, %1480
  %1484 = fsub fast float %1261, %1481
  %1485 = fsub fast float %1344, %1482
  %1486 = add i32 %1420, %1350
  %1487 = mul i32 %1486, %1274
  %1488 = add i32 %1487, %1349
  %1489 = mul i32 %1488, %1486
  %1490 = add i32 %1489, %1274
  %1491 = mul i32 %1490, %1488
  %1492 = add i32 %1491, %1486
  %1493 = mul i32 %1492, %1490
  %1494 = add i32 %1493, %1488
  %1495 = mul i32 %1494, %1492
  %1496 = add i32 %1495, %1490
  %1497 = lshr i32 %1492, 16
  %1498 = lshr i32 %1494, 16
  %1499 = lshr i32 %1496, 16
  %1500 = uitofp i32 %1497 to float
  %1501 = uitofp i32 %1498 to float
  %1502 = uitofp i32 %1499 to float
  %1503 = fmul fast float %1500, 0x3EF0001000000000
  %1504 = fmul fast float %1501, 0x3EF0001000000000
  %1505 = fmul fast float %1502, 0x3EF0001000000000
  %1506 = fadd fast float %1503, -5.000000e-01
  %1507 = fadd fast float %1504, -5.000000e-01
  %1508 = fadd fast float %1505, -5.000000e-01
  %1509 = call float @dx.op.dot3.f32(i32 55, float %1506, float %1507, float %1508, float %1506, float %1507, float %1508)  ; Dot3(ax,ay,az,bx,by,bz)
  %1510 = call float @dx.op.unary.f32(i32 25, float %1509)  ; Rsqrt(value)
  %1511 = fmul fast float %1510, 0x3FD0902DE0000000
  %1512 = fmul fast float %1511, %1506
  %1513 = fmul fast float %1511, %1507
  %1514 = fmul fast float %1511, %1508
  %1515 = fsub fast float %1450, %1512
  %1516 = fsub fast float %1381, %1513
  %1517 = fsub fast float %1262, %1514
  %1518 = add i32 %1420, %1384
  %1519 = mul i32 %1518, %1311
  %1520 = add i32 %1519, %1349
  %1521 = mul i32 %1520, %1518
  %1522 = add i32 %1521, %1311
  %1523 = mul i32 %1522, %1520
  %1524 = add i32 %1523, %1518
  %1525 = mul i32 %1524, %1522
  %1526 = add i32 %1525, %1520
  %1527 = mul i32 %1526, %1524
  %1528 = add i32 %1527, %1522
  %1529 = lshr i32 %1524, 16
  %1530 = lshr i32 %1526, 16
  %1531 = lshr i32 %1528, 16
  %1532 = uitofp i32 %1529 to float
  %1533 = uitofp i32 %1530 to float
  %1534 = uitofp i32 %1531 to float
  %1535 = fmul fast float %1532, 0x3EF0001000000000
  %1536 = fmul fast float %1533, 0x3EF0001000000000
  %1537 = fmul fast float %1534, 0x3EF0001000000000
  %1538 = fadd fast float %1535, -5.000000e-01
  %1539 = fadd fast float %1536, -5.000000e-01
  %1540 = fadd fast float %1537, -5.000000e-01
  %1541 = call float @dx.op.dot3.f32(i32 55, float %1538, float %1539, float %1540, float %1538, float %1539, float %1540)  ; Dot3(ax,ay,az,bx,by,bz)
  %1542 = call float @dx.op.unary.f32(i32 25, float %1541)  ; Rsqrt(value)
  %1543 = fmul fast float %1542, 0x3FD0902DE0000000
  %1544 = fmul fast float %1543, %1538
  %1545 = fmul fast float %1543, %1539
  %1546 = fmul fast float %1543, %1540
  %1547 = fsub fast float %1450, %1544
  %1548 = fsub fast float %1381, %1545
  %1549 = fsub fast float %1344, %1546
  %1550 = call float @dx.op.dot3.f32(i32 55, float %1305, float %1306, float %1307, float %1305, float %1306, float %1307)  ; Dot3(ax,ay,az,bx,by,bz)
  %1551 = call float @dx.op.binary.f32(i32 36, float 1.000000e+02, float %1550)  ; FMin(a,b)
  %1552 = call float @dx.op.dot3.f32(i32 55, float %1342, float %1343, float %1345, float %1342, float %1343, float %1345)  ; Dot3(ax,ay,az,bx,by,bz)
  %1553 = call float @dx.op.binary.f32(i32 36, float %1551, float %1552)  ; FMin(a,b)
  %1554 = call float @dx.op.dot3.f32(i32 55, float %1380, float %1382, float %1383, float %1380, float %1382, float %1383)  ; Dot3(ax,ay,az,bx,by,bz)
  %1555 = call float @dx.op.binary.f32(i32 36, float %1553, float %1554)  ; FMin(a,b)
  %1556 = call float @dx.op.dot3.f32(i32 55, float %1414, float %1415, float %1416, float %1414, float %1415, float %1416)  ; Dot3(ax,ay,az,bx,by,bz)
  %1557 = call float @dx.op.binary.f32(i32 36, float %1555, float %1556)  ; FMin(a,b)
  %1558 = call float @dx.op.dot3.f32(i32 55, float %1451, float %1452, float %1453, float %1451, float %1452, float %1453)  ; Dot3(ax,ay,az,bx,by,bz)
  %1559 = call float @dx.op.binary.f32(i32 36, float %1557, float %1558)  ; FMin(a,b)
  %1560 = call float @dx.op.dot3.f32(i32 55, float %1483, float %1484, float %1485, float %1483, float %1484, float %1485)  ; Dot3(ax,ay,az,bx,by,bz)
  %1561 = call float @dx.op.binary.f32(i32 36, float %1559, float %1560)  ; FMin(a,b)
  %1562 = call float @dx.op.dot3.f32(i32 55, float %1515, float %1516, float %1517, float %1515, float %1516, float %1517)  ; Dot3(ax,ay,az,bx,by,bz)
  %1563 = call float @dx.op.binary.f32(i32 36, float %1561, float %1562)  ; FMin(a,b)
  %1564 = call float @dx.op.dot3.f32(i32 55, float %1547, float %1548, float %1549, float %1547, float %1548, float %1549)  ; Dot3(ax,ay,az,bx,by,bz)
  %1565 = call float @dx.op.binary.f32(i32 36, float %1563, float %1564)  ; FMin(a,b)
  %1566 = call float @dx.op.unary.f32(i32 24, float %1565)  ; Sqrt(value)
  %1567 = fmul fast float %1566, 2.000000e+00
  %1568 = fadd fast float %1567, -1.000000e+00
  %1569 = call float @dx.op.unary.f32(i32 6, float %1568)  ; FAbs(value)
  %1570 = fmul fast float %1569, 2.000000e+00
  %1571 = fadd fast float %1570, -1.000000e+00
  %1572 = call float @dx.op.unary.f32(i32 7, float %1571)  ; Saturate(value)
  %1573 = fmul fast float %1233, 0x3FF3333340000000
  %1574 = fmul fast float %1234, 0x3FF3333340000000
  %1575 = fmul fast float %1235, 0x3FF3333340000000
  %1576 = fmul fast float %1236, 0x3FF3333340000000
  %1577 = fmul fast float %1237, 0x3FF3333340000000
  %1578 = fmul fast float %1238, 0x3FF3333340000000
  %1579 = fmul fast float %1233, 0x3EA3333340000000
  %1580 = fmul fast float %1234, 0x3EA3333340000000
  %1581 = fmul fast float %1235, 0x3EA3333340000000
  %1582 = fadd fast float %1579, 5.000000e-01
  %1583 = fadd fast float %1580, 5.000000e-01
  %1584 = fadd fast float %1581, 5.000000e-01
  %1585 = fadd fast float %1582, %1576
  %1586 = fadd fast float %1583, %1577
  %1587 = fadd fast float %1584, %1578
  %1588 = call float @dx.op.unary.f32(i32 27, float %1585)  ; Round_ni(value)
  %1589 = call float @dx.op.unary.f32(i32 27, float %1586)  ; Round_ni(value)
  %1590 = call float @dx.op.unary.f32(i32 27, float %1587)  ; Round_ni(value)
  %1591 = fsub fast float %1576, %1588
  %1592 = fsub fast float %1577, %1589
  %1593 = fsub fast float %1578, %1590
  %1594 = fmul fast float %1591, 2.097152e+06
  %1595 = fmul fast float %1592, 2.097152e+06
  %1596 = fmul fast float %1593, 2.097152e+06
  %1597 = fadd fast float %1594, %1573
  %1598 = fadd fast float %1595, %1574
  %1599 = fadd fast float %1596, %1575
  %1600 = call float @dx.op.unary.f32(i32 22, float %1597)  ; Frc(value)
  %1601 = call float @dx.op.unary.f32(i32 22, float %1598)  ; Frc(value)
  %1602 = call float @dx.op.unary.f32(i32 22, float %1599)  ; Frc(value)
  %1603 = call float @dx.op.unary.f32(i32 27, float %1597)  ; Round_ni(value)
  %1604 = call float @dx.op.unary.f32(i32 27, float %1598)  ; Round_ni(value)
  %1605 = call float @dx.op.unary.f32(i32 27, float %1599)  ; Round_ni(value)
  %1606 = fptosi float %1603 to i32
  %1607 = fptosi float %1604 to i32
  %1608 = fptosi float %1605 to i32
  %1609 = mul i32 %1606, 1664525
  %1610 = mul i32 %1607, 1664525
  %1611 = mul i32 %1608, 1664525
  %1612 = add i32 %1609, 1013904223
  %1613 = add i32 %1610, 1013904223
  %1614 = add i32 %1611, 1013904223
  %1615 = mul i32 %1614, %1613
  %1616 = add i32 %1612, %1615
  %1617 = mul i32 %1616, %1614
  %1618 = add i32 %1617, %1613
  %1619 = mul i32 %1618, %1616
  %1620 = add i32 %1619, %1614
  %1621 = mul i32 %1620, %1618
  %1622 = add i32 %1621, %1616
  %1623 = mul i32 %1622, %1620
  %1624 = add i32 %1623, %1618
  %1625 = mul i32 %1624, %1622
  %1626 = add i32 %1625, %1620
  %1627 = lshr i32 %1622, 16
  %1628 = lshr i32 %1624, 16
  %1629 = lshr i32 %1626, 16
  %1630 = uitofp i32 %1627 to float
  %1631 = uitofp i32 %1628 to float
  %1632 = uitofp i32 %1629 to float
  %1633 = fmul fast float %1630, 0x3EF0001000000000
  %1634 = fmul fast float %1631, 0x3EF0001000000000
  %1635 = fmul fast float %1632, 0x3EF0001000000000
  %1636 = fadd fast float %1633, -5.000000e-01
  %1637 = fadd fast float %1634, -5.000000e-01
  %1638 = fadd fast float %1635, -5.000000e-01
  %1639 = call float @dx.op.dot3.f32(i32 55, float %1636, float %1637, float %1638, float %1636, float %1637, float %1638)  ; Dot3(ax,ay,az,bx,by,bz)
  %1640 = call float @dx.op.unary.f32(i32 25, float %1639)  ; Rsqrt(value)
  %1641 = fmul fast float %1640, 0x3FD0902DE0000000
  %1642 = fmul fast float %1641, %1636
  %1643 = fmul fast float %1641, %1637
  %1644 = fmul fast float %1641, %1638
  %1645 = fsub fast float %1600, %1642
  %1646 = fsub fast float %1601, %1643
  %1647 = fsub fast float %1602, %1644
  %1648 = fadd fast float %1605, 1.000000e+00
  %1649 = fptosi float %1648 to i32
  %1650 = mul i32 %1649, 1664525
  %1651 = add i32 %1650, 1013904223
  %1652 = mul i32 %1651, %1613
  %1653 = add i32 %1612, %1652
  %1654 = mul i32 %1653, %1651
  %1655 = add i32 %1654, %1613
  %1656 = mul i32 %1655, %1653
  %1657 = add i32 %1656, %1651
  %1658 = mul i32 %1657, %1655
  %1659 = add i32 %1658, %1653
  %1660 = mul i32 %1659, %1657
  %1661 = add i32 %1660, %1655
  %1662 = mul i32 %1661, %1659
  %1663 = add i32 %1662, %1657
  %1664 = lshr i32 %1659, 16
  %1665 = lshr i32 %1661, 16
  %1666 = lshr i32 %1663, 16
  %1667 = uitofp i32 %1664 to float
  %1668 = uitofp i32 %1665 to float
  %1669 = uitofp i32 %1666 to float
  %1670 = fmul fast float %1667, 0x3EF0001000000000
  %1671 = fmul fast float %1668, 0x3EF0001000000000
  %1672 = fmul fast float %1669, 0x3EF0001000000000
  %1673 = fadd fast float %1670, -5.000000e-01
  %1674 = fadd fast float %1671, -5.000000e-01
  %1675 = fadd fast float %1672, -5.000000e-01
  %1676 = call float @dx.op.dot3.f32(i32 55, float %1673, float %1674, float %1675, float %1673, float %1674, float %1675)  ; Dot3(ax,ay,az,bx,by,bz)
  %1677 = call float @dx.op.unary.f32(i32 25, float %1676)  ; Rsqrt(value)
  %1678 = fmul fast float %1677, 0x3FD0902DE0000000
  %1679 = fmul fast float %1678, %1673
  %1680 = fmul fast float %1678, %1674
  %1681 = fmul fast float %1678, %1675
  %1682 = fsub fast float %1600, %1679
  %1683 = fsub fast float %1601, %1680
  %1684 = fadd fast float %1602, -1.000000e+00
  %1685 = fsub fast float %1684, %1681
  %1686 = fadd fast float %1604, 1.000000e+00
  %1687 = fptosi float %1686 to i32
  %1688 = mul i32 %1687, 1664525
  %1689 = add i32 %1688, 1013904223
  %1690 = mul i32 %1689, %1614
  %1691 = add i32 %1612, %1690
  %1692 = mul i32 %1691, %1614
  %1693 = add i32 %1692, %1689
  %1694 = mul i32 %1693, %1691
  %1695 = add i32 %1694, %1614
  %1696 = mul i32 %1695, %1693
  %1697 = add i32 %1696, %1691
  %1698 = mul i32 %1697, %1695
  %1699 = add i32 %1698, %1693
  %1700 = mul i32 %1699, %1697
  %1701 = add i32 %1700, %1695
  %1702 = lshr i32 %1697, 16
  %1703 = lshr i32 %1699, 16
  %1704 = lshr i32 %1701, 16
  %1705 = uitofp i32 %1702 to float
  %1706 = uitofp i32 %1703 to float
  %1707 = uitofp i32 %1704 to float
  %1708 = fmul fast float %1705, 0x3EF0001000000000
  %1709 = fmul fast float %1706, 0x3EF0001000000000
  %1710 = fmul fast float %1707, 0x3EF0001000000000
  %1711 = fadd fast float %1708, -5.000000e-01
  %1712 = fadd fast float %1709, -5.000000e-01
  %1713 = fadd fast float %1710, -5.000000e-01
  %1714 = call float @dx.op.dot3.f32(i32 55, float %1711, float %1712, float %1713, float %1711, float %1712, float %1713)  ; Dot3(ax,ay,az,bx,by,bz)
  %1715 = call float @dx.op.unary.f32(i32 25, float %1714)  ; Rsqrt(value)
  %1716 = fmul fast float %1715, 0x3FD0902DE0000000
  %1717 = fmul fast float %1716, %1711
  %1718 = fmul fast float %1716, %1712
  %1719 = fmul fast float %1716, %1713
  %1720 = fsub fast float %1600, %1717
  %1721 = fadd fast float %1601, -1.000000e+00
  %1722 = fsub fast float %1721, %1718
  %1723 = fsub fast float %1602, %1719
  %1724 = mul i32 %1651, %1689
  %1725 = add i32 %1612, %1724
  %1726 = mul i32 %1725, %1651
  %1727 = add i32 %1726, %1689
  %1728 = mul i32 %1727, %1725
  %1729 = add i32 %1728, %1651
  %1730 = mul i32 %1729, %1727
  %1731 = add i32 %1730, %1725
  %1732 = mul i32 %1731, %1729
  %1733 = add i32 %1732, %1727
  %1734 = mul i32 %1733, %1731
  %1735 = add i32 %1734, %1729
  %1736 = lshr i32 %1731, 16
  %1737 = lshr i32 %1733, 16
  %1738 = lshr i32 %1735, 16
  %1739 = uitofp i32 %1736 to float
  %1740 = uitofp i32 %1737 to float
  %1741 = uitofp i32 %1738 to float
  %1742 = fmul fast float %1739, 0x3EF0001000000000
  %1743 = fmul fast float %1740, 0x3EF0001000000000
  %1744 = fmul fast float %1741, 0x3EF0001000000000
  %1745 = fadd fast float %1742, -5.000000e-01
  %1746 = fadd fast float %1743, -5.000000e-01
  %1747 = fadd fast float %1744, -5.000000e-01
  %1748 = call float @dx.op.dot3.f32(i32 55, float %1745, float %1746, float %1747, float %1745, float %1746, float %1747)  ; Dot3(ax,ay,az,bx,by,bz)
  %1749 = call float @dx.op.unary.f32(i32 25, float %1748)  ; Rsqrt(value)
  %1750 = fmul fast float %1749, 0x3FD0902DE0000000
  %1751 = fmul fast float %1750, %1745
  %1752 = fmul fast float %1750, %1746
  %1753 = fmul fast float %1750, %1747
  %1754 = fsub fast float %1600, %1751
  %1755 = fsub fast float %1721, %1752
  %1756 = fsub fast float %1684, %1753
  %1757 = fadd fast float %1603, 1.000000e+00
  %1758 = fptosi float %1757 to i32
  %1759 = mul i32 %1758, 1664525
  %1760 = add i32 %1759, 1013904223
  %1761 = add i32 %1760, %1615
  %1762 = mul i32 %1761, %1614
  %1763 = add i32 %1762, %1613
  %1764 = mul i32 %1763, %1761
  %1765 = add i32 %1764, %1614
  %1766 = mul i32 %1765, %1763
  %1767 = add i32 %1766, %1761
  %1768 = mul i32 %1767, %1765
  %1769 = add i32 %1768, %1763
  %1770 = mul i32 %1769, %1767
  %1771 = add i32 %1770, %1765
  %1772 = lshr i32 %1767, 16
  %1773 = lshr i32 %1769, 16
  %1774 = lshr i32 %1771, 16
  %1775 = uitofp i32 %1772 to float
  %1776 = uitofp i32 %1773 to float
  %1777 = uitofp i32 %1774 to float
  %1778 = fmul fast float %1775, 0x3EF0001000000000
  %1779 = fmul fast float %1776, 0x3EF0001000000000
  %1780 = fmul fast float %1777, 0x3EF0001000000000
  %1781 = fadd fast float %1778, -5.000000e-01
  %1782 = fadd fast float %1779, -5.000000e-01
  %1783 = fadd fast float %1780, -5.000000e-01
  %1784 = call float @dx.op.dot3.f32(i32 55, float %1781, float %1782, float %1783, float %1781, float %1782, float %1783)  ; Dot3(ax,ay,az,bx,by,bz)
  %1785 = call float @dx.op.unary.f32(i32 25, float %1784)  ; Rsqrt(value)
  %1786 = fmul fast float %1785, 0x3FD0902DE0000000
  %1787 = fmul fast float %1786, %1781
  %1788 = fmul fast float %1786, %1782
  %1789 = fmul fast float %1786, %1783
  %1790 = fadd fast float %1600, -1.000000e+00
  %1791 = fsub fast float %1790, %1787
  %1792 = fsub fast float %1601, %1788
  %1793 = fsub fast float %1602, %1789
  %1794 = add i32 %1760, %1652
  %1795 = mul i32 %1794, %1651
  %1796 = add i32 %1795, %1613
  %1797 = mul i32 %1796, %1794
  %1798 = add i32 %1797, %1651
  %1799 = mul i32 %1798, %1796
  %1800 = add i32 %1799, %1794
  %1801 = mul i32 %1800, %1798
  %1802 = add i32 %1801, %1796
  %1803 = mul i32 %1802, %1800
  %1804 = add i32 %1803, %1798
  %1805 = lshr i32 %1800, 16
  %1806 = lshr i32 %1802, 16
  %1807 = lshr i32 %1804, 16
  %1808 = uitofp i32 %1805 to float
  %1809 = uitofp i32 %1806 to float
  %1810 = uitofp i32 %1807 to float
  %1811 = fmul fast float %1808, 0x3EF0001000000000
  %1812 = fmul fast float %1809, 0x3EF0001000000000
  %1813 = fmul fast float %1810, 0x3EF0001000000000
  %1814 = fadd fast float %1811, -5.000000e-01
  %1815 = fadd fast float %1812, -5.000000e-01
  %1816 = fadd fast float %1813, -5.000000e-01
  %1817 = call float @dx.op.dot3.f32(i32 55, float %1814, float %1815, float %1816, float %1814, float %1815, float %1816)  ; Dot3(ax,ay,az,bx,by,bz)
  %1818 = call float @dx.op.unary.f32(i32 25, float %1817)  ; Rsqrt(value)
  %1819 = fmul fast float %1818, 0x3FD0902DE0000000
  %1820 = fmul fast float %1819, %1814
  %1821 = fmul fast float %1819, %1815
  %1822 = fmul fast float %1819, %1816
  %1823 = fsub fast float %1790, %1820
  %1824 = fsub fast float %1601, %1821
  %1825 = fsub fast float %1684, %1822
  %1826 = add i32 %1760, %1690
  %1827 = mul i32 %1826, %1614
  %1828 = add i32 %1827, %1689
  %1829 = mul i32 %1828, %1826
  %1830 = add i32 %1829, %1614
  %1831 = mul i32 %1830, %1828
  %1832 = add i32 %1831, %1826
  %1833 = mul i32 %1832, %1830
  %1834 = add i32 %1833, %1828
  %1835 = mul i32 %1834, %1832
  %1836 = add i32 %1835, %1830
  %1837 = lshr i32 %1832, 16
  %1838 = lshr i32 %1834, 16
  %1839 = lshr i32 %1836, 16
  %1840 = uitofp i32 %1837 to float
  %1841 = uitofp i32 %1838 to float
  %1842 = uitofp i32 %1839 to float
  %1843 = fmul fast float %1840, 0x3EF0001000000000
  %1844 = fmul fast float %1841, 0x3EF0001000000000
  %1845 = fmul fast float %1842, 0x3EF0001000000000
  %1846 = fadd fast float %1843, -5.000000e-01
  %1847 = fadd fast float %1844, -5.000000e-01
  %1848 = fadd fast float %1845, -5.000000e-01
  %1849 = call float @dx.op.dot3.f32(i32 55, float %1846, float %1847, float %1848, float %1846, float %1847, float %1848)  ; Dot3(ax,ay,az,bx,by,bz)
  %1850 = call float @dx.op.unary.f32(i32 25, float %1849)  ; Rsqrt(value)
  %1851 = fmul fast float %1850, 0x3FD0902DE0000000
  %1852 = fmul fast float %1851, %1846
  %1853 = fmul fast float %1851, %1847
  %1854 = fmul fast float %1851, %1848
  %1855 = fsub fast float %1790, %1852
  %1856 = fsub fast float %1721, %1853
  %1857 = fsub fast float %1602, %1854
  %1858 = add i32 %1760, %1724
  %1859 = mul i32 %1858, %1651
  %1860 = add i32 %1859, %1689
  %1861 = mul i32 %1860, %1858
  %1862 = add i32 %1861, %1651
  %1863 = mul i32 %1862, %1860
  %1864 = add i32 %1863, %1858
  %1865 = mul i32 %1864, %1862
  %1866 = add i32 %1865, %1860
  %1867 = mul i32 %1866, %1864
  %1868 = add i32 %1867, %1862
  %1869 = lshr i32 %1864, 16
  %1870 = lshr i32 %1866, 16
  %1871 = lshr i32 %1868, 16
  %1872 = uitofp i32 %1869 to float
  %1873 = uitofp i32 %1870 to float
  %1874 = uitofp i32 %1871 to float
  %1875 = fmul fast float %1872, 0x3EF0001000000000
  %1876 = fmul fast float %1873, 0x3EF0001000000000
  %1877 = fmul fast float %1874, 0x3EF0001000000000
  %1878 = fadd fast float %1875, -5.000000e-01
  %1879 = fadd fast float %1876, -5.000000e-01
  %1880 = fadd fast float %1877, -5.000000e-01
  %1881 = call float @dx.op.dot3.f32(i32 55, float %1878, float %1879, float %1880, float %1878, float %1879, float %1880)  ; Dot3(ax,ay,az,bx,by,bz)
  %1882 = call float @dx.op.unary.f32(i32 25, float %1881)  ; Rsqrt(value)
  %1883 = fmul fast float %1882, 0x3FD0902DE0000000
  %1884 = fmul fast float %1883, %1878
  %1885 = fmul fast float %1883, %1879
  %1886 = fmul fast float %1883, %1880
  %1887 = fsub fast float %1790, %1884
  %1888 = fsub fast float %1721, %1885
  %1889 = fsub fast float %1684, %1886
  %1890 = call float @dx.op.dot3.f32(i32 55, float %1645, float %1646, float %1647, float %1645, float %1646, float %1647)  ; Dot3(ax,ay,az,bx,by,bz)
  %1891 = call float @dx.op.binary.f32(i32 36, float 1.000000e+02, float %1890)  ; FMin(a,b)
  %1892 = call float @dx.op.dot3.f32(i32 55, float %1682, float %1683, float %1685, float %1682, float %1683, float %1685)  ; Dot3(ax,ay,az,bx,by,bz)
  %1893 = call float @dx.op.binary.f32(i32 36, float %1891, float %1892)  ; FMin(a,b)
  %1894 = call float @dx.op.dot3.f32(i32 55, float %1720, float %1722, float %1723, float %1720, float %1722, float %1723)  ; Dot3(ax,ay,az,bx,by,bz)
  %1895 = call float @dx.op.binary.f32(i32 36, float %1893, float %1894)  ; FMin(a,b)
  %1896 = call float @dx.op.dot3.f32(i32 55, float %1754, float %1755, float %1756, float %1754, float %1755, float %1756)  ; Dot3(ax,ay,az,bx,by,bz)
  %1897 = call float @dx.op.binary.f32(i32 36, float %1895, float %1896)  ; FMin(a,b)
  %1898 = call float @dx.op.dot3.f32(i32 55, float %1791, float %1792, float %1793, float %1791, float %1792, float %1793)  ; Dot3(ax,ay,az,bx,by,bz)
  %1899 = call float @dx.op.binary.f32(i32 36, float %1897, float %1898)  ; FMin(a,b)
  %1900 = call float @dx.op.dot3.f32(i32 55, float %1823, float %1824, float %1825, float %1823, float %1824, float %1825)  ; Dot3(ax,ay,az,bx,by,bz)
  %1901 = call float @dx.op.binary.f32(i32 36, float %1899, float %1900)  ; FMin(a,b)
  %1902 = call float @dx.op.dot3.f32(i32 55, float %1855, float %1856, float %1857, float %1855, float %1856, float %1857)  ; Dot3(ax,ay,az,bx,by,bz)
  %1903 = call float @dx.op.binary.f32(i32 36, float %1901, float %1902)  ; FMin(a,b)
  %1904 = call float @dx.op.dot3.f32(i32 55, float %1887, float %1888, float %1889, float %1887, float %1888, float %1889)  ; Dot3(ax,ay,az,bx,by,bz)
  %1905 = call float @dx.op.binary.f32(i32 36, float %1903, float %1904)  ; FMin(a,b)
  %1906 = call float @dx.op.unary.f32(i32 24, float %1905)  ; Sqrt(value)
  %1907 = fmul fast float %1906, 2.000000e+00
  %1908 = fadd fast float %1907, -1.000000e+00
  %1909 = call float @dx.op.unary.f32(i32 6, float %1908)  ; FAbs(value)
  %1910 = fmul fast float %1909, 2.000000e+00
  %1911 = fadd fast float %1910, -1.000000e+00
  %1912 = fsub fast float %1230, %1572
  %1913 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1914 = extractvalue %dx.types.CBufRet.f32 %1913, 1
  %1915 = extractvalue %dx.types.CBufRet.f32 %1913, 2
  %1916 = extractvalue %dx.types.CBufRet.f32 %1913, 3
  %1917 = fcmp fast oge float %1915, -1.000000e+00
  %1918 = select i1 %1917, float %1915, float %1916
  %1919 = fadd fast float %1915, 1.000000e+00
  %1920 = call float @dx.op.unary.f32(i32 6, float %1919)  ; FAbs(value)
  %1921 = fcmp fast ogt float %1920, 0x3EE4F8B580000000
  %1922 = select i1 %1921, float %1918, float %1915
  %1923 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1924 = extractvalue %dx.types.CBufRet.f32 %1923, 0
  %1925 = fcmp fast oge float %1922, 1.000000e+00
  %1926 = fadd fast float %1922, -1.000000e+00
  %1927 = call float @dx.op.unary.f32(i32 6, float %1926)  ; FAbs(value)
  %1928 = fcmp fast ogt float %1927, 0x3EE4F8B580000000
  %1929 = and i1 %1928, %1925
  %1930 = select i1 %1929, float %1924, float %1915
  %1931 = fcmp fast oge float %1930, 0.000000e+00
  %1932 = select i1 %1931, float 1.000000e+00, float -1.000000e+00
  %1933 = call float @dx.op.unary.f32(i32 6, float %1930)  ; FAbs(value)
  %1934 = fcmp fast ogt float %1933, 0x3EE4F8B580000000
  %1935 = select i1 %1934, float %1932, float 1.000000e+00
  %1936 = call float @dx.op.binary.f32(i32 35, float %1935, float -1.000000e+00)  ; FMax(a,b)
  %1937 = call float @dx.op.binary.f32(i32 36, float %1936, float 1.000000e+00)  ; FMin(a,b)
  %1938 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1939 = extractvalue %dx.types.CBufRet.f32 %1938, 1
  %1940 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1941 = extractvalue %dx.types.CBufRet.f32 %1940, 0
  %1942 = extractvalue %dx.types.CBufRet.f32 %1940, 1
  %1943 = fadd fast float %1941, %1937
  %1944 = fadd fast float %1942, %1939
  %1945 = call float @dx.op.binary.f32(i32 35, float %1943, float -1.000000e+00)  ; FMax(a,b)
  %1946 = call float @dx.op.binary.f32(i32 35, float %1944, float -1.000000e+00)  ; FMax(a,b)
  %1947 = call float @dx.op.binary.f32(i32 36, float %1945, float 1.000000e+00)  ; FMin(a,b)
  %1948 = call float @dx.op.binary.f32(i32 36, float %1946, float 1.000000e+00)  ; FMin(a,b)
  %1949 = fmul fast float %1947, %295
  %1950 = fmul fast float %1948, %296
  %1951 = fmul fast float %1947, %76
  %1952 = fadd fast float %1950, %1949
  %1953 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 14)  ; CBufferLoadLegacy(handle,regIndex)
  %1954 = extractvalue %dx.types.CBufRet.f32 %1953, 0
  %1955 = fmul fast float %1952, %1954
  %1956 = extractvalue %dx.types.CBufRet.f32 %1953, 3
  %1957 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 15)  ; CBufferLoadLegacy(handle,regIndex)
  %1958 = extractvalue %dx.types.CBufRet.f32 %1957, 0
  %1959 = fmul fast float %452, %295
  %1960 = fmul fast float %1959, %1956
  %1961 = fmul fast float %1960, %1958
  %1962 = fmul fast float %452, %296
  %1963 = fmul fast float %1962, %1956
  %1964 = fmul fast float %1963, %1958
  %1965 = fmul fast float %1961, 0x3FB99999A0000000
  %1966 = fmul fast float %1964, 0x3FB99999A0000000
  %1967 = fmul fast float %297, 0x3FB99999A0000000
  %1968 = fmul fast float %1967, %452
  %1969 = fmul fast float %1968, %1956
  %1970 = fmul fast float %1969, %1958
  %1971 = fmul fast float %76, 0x3FB99999A0000000
  %1972 = fmul fast float %1971, %452
  %1973 = fmul fast float %1972, %1956
  %1974 = fmul fast float %1973, %1958
  %1975 = fmul fast float %23, 0x3FB99999A0000000
  %1976 = fmul fast float %1975, %452
  %1977 = fmul fast float %1976, %1956
  %1978 = fmul fast float %1977, %1958
  %1979 = fmul fast float %77, 0x3FB99999A0000000
  %1980 = fmul fast float %1979, %452
  %1981 = fmul fast float %1980, %1956
  %1982 = fmul fast float %1981, %1958
  %1983 = extractvalue %dx.types.CBufRet.f32 %1957, 2
  %1984 = fmul fast float %1983, %932
  %1985 = fadd fast float %1970, %1984
  %1986 = fmul fast float %1961, 0x3E699999A0000000
  %1987 = fmul fast float %1964, 0x3E699999A0000000
  %1988 = fmul fast float %1985, 0x3EA0000000000000
  %1989 = fadd fast float %1986, 5.000000e-01
  %1990 = fadd fast float %1987, 5.000000e-01
  %1991 = fadd fast float %1989, %1974
  %1992 = fadd fast float %1990, %1978
  %1993 = fadd fast float %1982, 5.000000e-01
  %1994 = fadd fast float %1993, %1988
  %1995 = call float @dx.op.unary.f32(i32 27, float %1991)  ; Round_ni(value)
  %1996 = call float @dx.op.unary.f32(i32 27, float %1992)  ; Round_ni(value)
  %1997 = call float @dx.op.unary.f32(i32 27, float %1994)  ; Round_ni(value)
  %1998 = fsub fast float %1974, %1995
  %1999 = fsub fast float %1978, %1996
  %2000 = fsub fast float %1982, %1997
  %2001 = fmul fast float %1998, 2.097152e+06
  %2002 = fmul fast float %1999, 2.097152e+06
  %2003 = fmul fast float %2000, 2.097152e+06
  %2004 = fadd fast float %2001, %1965
  %2005 = fadd fast float %2002, %1966
  %2006 = fadd fast float %2003, %1985
  br label %2007

; <label>:2007                                    ; preds = %2007, %1215
  %2008 = phi float [ %2004, %1215 ], [ %2259, %2007 ]
  %2009 = phi float [ %2005, %1215 ], [ %2260, %2007 ]
  %2010 = phi float [ %2006, %1215 ], [ %2261, %2007 ]
  %2011 = phi float [ 0.000000e+00, %1215 ], [ %2258, %2007 ]
  %2012 = phi float [ 1.000000e+00, %1215 ], [ %2262, %2007 ]
  %2013 = phi i32 [ 0, %1215 ], [ %2263, %2007 ]
  %2014 = call float @dx.op.unary.f32(i32 22, float %2008)  ; Frc(value)
  %2015 = call float @dx.op.unary.f32(i32 22, float %2009)  ; Frc(value)
  %2016 = call float @dx.op.unary.f32(i32 22, float %2010)  ; Frc(value)
  %2017 = call float @dx.op.unary.f32(i32 27, float %2008)  ; Round_ni(value)
  %2018 = call float @dx.op.unary.f32(i32 27, float %2009)  ; Round_ni(value)
  %2019 = call float @dx.op.unary.f32(i32 27, float %2010)  ; Round_ni(value)
  %2020 = call float @dx.op.dot3.f32(i32 55, float %2017, float %2018, float %2019, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %2021 = fadd fast float %2020, 1.900000e+01
  %2022 = fadd fast float %2020, 4.700000e+01
  %2023 = fadd fast float %2020, 6.600000e+01
  %2024 = fadd fast float %2020, 1.010000e+02
  %2025 = fadd fast float %2020, 1.200000e+02
  %2026 = fadd fast float %2020, 1.480000e+02
  %2027 = fadd fast float %2020, 1.670000e+02
  %2028 = fptosi float %2020 to i32
  %2029 = mul i32 %2028, 1664525
  %2030 = add i32 %2029, -781160288
  %2031 = mul i32 %2030, 1013904223
  %2032 = add i32 %2031, 1013904223
  %2033 = mul i32 %2032, %2030
  %2034 = add i32 %2033, 1013904223
  %2035 = mul i32 %2034, %2032
  %2036 = add i32 %2035, %2030
  %2037 = lshr i32 %2036, 16
  %2038 = and i32 %2037, 32768
  %2039 = and i32 %2037, 16384
  %2040 = and i32 %2037, 8192
  %2041 = uitofp i32 %2038 to float
  %2042 = uitofp i32 %2039 to float
  %2043 = uitofp i32 %2040 to float
  %2044 = fmul fast float %2041, 0x3F10000000000000
  %2045 = fmul fast float %2042, 0x3F20000000000000
  %2046 = fmul fast float %2043, 0x3F30000000000000
  %2047 = fadd fast float %2044, -1.000000e+00
  %2048 = fadd fast float %2045, -1.000000e+00
  %2049 = fadd fast float %2046, -1.000000e+00
  %2050 = call float @dx.op.dot3.f32(i32 55, float %2047, float %2048, float %2049, float %2014, float %2015, float %2016)  ; Dot3(ax,ay,az,bx,by,bz)
  %2051 = fadd fast float %2014, -1.000000e+00
  %2052 = fptosi float %2021 to i32
  %2053 = mul i32 %2052, 1664525
  %2054 = add i32 %2053, -781160288
  %2055 = mul i32 %2054, 1013904223
  %2056 = add i32 %2055, 1013904223
  %2057 = mul i32 %2056, %2054
  %2058 = add i32 %2057, 1013904223
  %2059 = mul i32 %2058, %2056
  %2060 = add i32 %2059, %2054
  %2061 = lshr i32 %2060, 16
  %2062 = and i32 %2061, 32768
  %2063 = and i32 %2061, 16384
  %2064 = and i32 %2061, 8192
  %2065 = uitofp i32 %2062 to float
  %2066 = uitofp i32 %2063 to float
  %2067 = uitofp i32 %2064 to float
  %2068 = fmul fast float %2065, 0x3F10000000000000
  %2069 = fmul fast float %2066, 0x3F20000000000000
  %2070 = fmul fast float %2067, 0x3F30000000000000
  %2071 = fadd fast float %2068, -1.000000e+00
  %2072 = fadd fast float %2069, -1.000000e+00
  %2073 = fadd fast float %2070, -1.000000e+00
  %2074 = call float @dx.op.dot3.f32(i32 55, float %2071, float %2072, float %2073, float %2051, float %2015, float %2016)  ; Dot3(ax,ay,az,bx,by,bz)
  %2075 = fadd fast float %2015, -1.000000e+00
  %2076 = fptosi float %2022 to i32
  %2077 = mul i32 %2076, 1664525
  %2078 = add i32 %2077, -781160288
  %2079 = mul i32 %2078, 1013904223
  %2080 = add i32 %2079, 1013904223
  %2081 = mul i32 %2080, %2078
  %2082 = add i32 %2081, 1013904223
  %2083 = mul i32 %2082, %2080
  %2084 = add i32 %2083, %2078
  %2085 = lshr i32 %2084, 16
  %2086 = and i32 %2085, 32768
  %2087 = and i32 %2085, 16384
  %2088 = and i32 %2085, 8192
  %2089 = uitofp i32 %2086 to float
  %2090 = uitofp i32 %2087 to float
  %2091 = uitofp i32 %2088 to float
  %2092 = fmul fast float %2089, 0x3F10000000000000
  %2093 = fmul fast float %2090, 0x3F20000000000000
  %2094 = fmul fast float %2091, 0x3F30000000000000
  %2095 = fadd fast float %2092, -1.000000e+00
  %2096 = fadd fast float %2093, -1.000000e+00
  %2097 = fadd fast float %2094, -1.000000e+00
  %2098 = call float @dx.op.dot3.f32(i32 55, float %2095, float %2096, float %2097, float %2014, float %2075, float %2016)  ; Dot3(ax,ay,az,bx,by,bz)
  %2099 = fptosi float %2023 to i32
  %2100 = mul i32 %2099, 1664525
  %2101 = add i32 %2100, -781160288
  %2102 = mul i32 %2101, 1013904223
  %2103 = add i32 %2102, 1013904223
  %2104 = mul i32 %2103, %2101
  %2105 = add i32 %2104, 1013904223
  %2106 = mul i32 %2105, %2103
  %2107 = add i32 %2106, %2101
  %2108 = lshr i32 %2107, 16
  %2109 = and i32 %2108, 32768
  %2110 = and i32 %2108, 16384
  %2111 = and i32 %2108, 8192
  %2112 = uitofp i32 %2109 to float
  %2113 = uitofp i32 %2110 to float
  %2114 = uitofp i32 %2111 to float
  %2115 = fmul fast float %2112, 0x3F10000000000000
  %2116 = fmul fast float %2113, 0x3F20000000000000
  %2117 = fmul fast float %2114, 0x3F30000000000000
  %2118 = fadd fast float %2115, -1.000000e+00
  %2119 = fadd fast float %2116, -1.000000e+00
  %2120 = fadd fast float %2117, -1.000000e+00
  %2121 = call float @dx.op.dot3.f32(i32 55, float %2118, float %2119, float %2120, float %2051, float %2075, float %2016)  ; Dot3(ax,ay,az,bx,by,bz)
  %2122 = fadd fast float %2016, -1.000000e+00
  %2123 = fptosi float %2024 to i32
  %2124 = mul i32 %2123, 1664525
  %2125 = add i32 %2124, -781160288
  %2126 = mul i32 %2125, 1013904223
  %2127 = add i32 %2126, 1013904223
  %2128 = mul i32 %2127, %2125
  %2129 = add i32 %2128, 1013904223
  %2130 = mul i32 %2129, %2127
  %2131 = add i32 %2130, %2125
  %2132 = lshr i32 %2131, 16
  %2133 = and i32 %2132, 32768
  %2134 = and i32 %2132, 16384
  %2135 = and i32 %2132, 8192
  %2136 = uitofp i32 %2133 to float
  %2137 = uitofp i32 %2134 to float
  %2138 = uitofp i32 %2135 to float
  %2139 = fmul fast float %2136, 0x3F10000000000000
  %2140 = fmul fast float %2137, 0x3F20000000000000
  %2141 = fmul fast float %2138, 0x3F30000000000000
  %2142 = fadd fast float %2139, -1.000000e+00
  %2143 = fadd fast float %2140, -1.000000e+00
  %2144 = fadd fast float %2141, -1.000000e+00
  %2145 = call float @dx.op.dot3.f32(i32 55, float %2142, float %2143, float %2144, float %2014, float %2015, float %2122)  ; Dot3(ax,ay,az,bx,by,bz)
  %2146 = fptosi float %2025 to i32
  %2147 = mul i32 %2146, 1664525
  %2148 = add i32 %2147, -781160288
  %2149 = mul i32 %2148, 1013904223
  %2150 = add i32 %2149, 1013904223
  %2151 = mul i32 %2150, %2148
  %2152 = add i32 %2151, 1013904223
  %2153 = mul i32 %2152, %2150
  %2154 = add i32 %2153, %2148
  %2155 = lshr i32 %2154, 16
  %2156 = and i32 %2155, 32768
  %2157 = and i32 %2155, 16384
  %2158 = and i32 %2155, 8192
  %2159 = uitofp i32 %2156 to float
  %2160 = uitofp i32 %2157 to float
  %2161 = uitofp i32 %2158 to float
  %2162 = fmul fast float %2159, 0x3F10000000000000
  %2163 = fmul fast float %2160, 0x3F20000000000000
  %2164 = fmul fast float %2161, 0x3F30000000000000
  %2165 = fadd fast float %2162, -1.000000e+00
  %2166 = fadd fast float %2163, -1.000000e+00
  %2167 = fadd fast float %2164, -1.000000e+00
  %2168 = call float @dx.op.dot3.f32(i32 55, float %2165, float %2166, float %2167, float %2051, float %2015, float %2122)  ; Dot3(ax,ay,az,bx,by,bz)
  %2169 = fptosi float %2026 to i32
  %2170 = mul i32 %2169, 1664525
  %2171 = add i32 %2170, -781160288
  %2172 = mul i32 %2171, 1013904223
  %2173 = add i32 %2172, 1013904223
  %2174 = mul i32 %2173, %2171
  %2175 = add i32 %2174, 1013904223
  %2176 = mul i32 %2175, %2173
  %2177 = add i32 %2176, %2171
  %2178 = lshr i32 %2177, 16
  %2179 = and i32 %2178, 32768
  %2180 = and i32 %2178, 16384
  %2181 = and i32 %2178, 8192
  %2182 = uitofp i32 %2179 to float
  %2183 = uitofp i32 %2180 to float
  %2184 = uitofp i32 %2181 to float
  %2185 = fmul fast float %2182, 0x3F10000000000000
  %2186 = fmul fast float %2183, 0x3F20000000000000
  %2187 = fmul fast float %2184, 0x3F30000000000000
  %2188 = fadd fast float %2185, -1.000000e+00
  %2189 = fadd fast float %2186, -1.000000e+00
  %2190 = fadd fast float %2187, -1.000000e+00
  %2191 = call float @dx.op.dot3.f32(i32 55, float %2188, float %2189, float %2190, float %2014, float %2075, float %2122)  ; Dot3(ax,ay,az,bx,by,bz)
  %2192 = fptosi float %2027 to i32
  %2193 = mul i32 %2192, 1664525
  %2194 = add i32 %2193, -781160288
  %2195 = mul i32 %2194, 1013904223
  %2196 = add i32 %2195, 1013904223
  %2197 = mul i32 %2196, %2194
  %2198 = add i32 %2197, 1013904223
  %2199 = mul i32 %2198, %2196
  %2200 = add i32 %2199, %2194
  %2201 = lshr i32 %2200, 16
  %2202 = and i32 %2201, 32768
  %2203 = and i32 %2201, 16384
  %2204 = and i32 %2201, 8192
  %2205 = uitofp i32 %2202 to float
  %2206 = uitofp i32 %2203 to float
  %2207 = uitofp i32 %2204 to float
  %2208 = fmul fast float %2205, 0x3F10000000000000
  %2209 = fmul fast float %2206, 0x3F20000000000000
  %2210 = fmul fast float %2207, 0x3F30000000000000
  %2211 = fadd fast float %2208, -1.000000e+00
  %2212 = fadd fast float %2209, -1.000000e+00
  %2213 = fadd fast float %2210, -1.000000e+00
  %2214 = call float @dx.op.dot3.f32(i32 55, float %2211, float %2212, float %2213, float %2051, float %2075, float %2122)  ; Dot3(ax,ay,az,bx,by,bz)
  %2215 = fmul fast float %2014, %2014
  %2216 = fmul fast float %2015, %2015
  %2217 = fmul fast float %2016, %2016
  %2218 = fmul fast float %2215, %2014
  %2219 = fmul fast float %2216, %2015
  %2220 = fmul fast float %2217, %2016
  %2221 = fmul fast float %2014, 6.000000e+00
  %2222 = fmul fast float %2015, 6.000000e+00
  %2223 = fmul fast float %2016, 6.000000e+00
  %2224 = fadd fast float %2221, -1.500000e+01
  %2225 = fadd fast float %2222, -1.500000e+01
  %2226 = fadd fast float %2223, -1.500000e+01
  %2227 = fmul fast float %2224, %2014
  %2228 = fmul fast float %2225, %2015
  %2229 = fmul fast float %2226, %2016
  %2230 = fadd fast float %2227, 1.000000e+01
  %2231 = fadd fast float %2228, 1.000000e+01
  %2232 = fadd fast float %2229, 1.000000e+01
  %2233 = fmul fast float %2218, %2230
  %2234 = fmul fast float %2219, %2231
  %2235 = fmul fast float %2220, %2232
  %2236 = fsub fast float %2121, %2098
  %2237 = fmul fast float %2236, %2233
  %2238 = fsub fast float %2074, %2050
  %2239 = fmul fast float %2238, %2233
  %2240 = fadd fast float %2239, %2050
  %2241 = fsub fast float %2098, %2240
  %2242 = fadd fast float %2241, %2237
  %2243 = fmul fast float %2242, %2234
  %2244 = fadd fast float %2243, %2240
  %2245 = fsub fast float %2214, %2191
  %2246 = fmul fast float %2245, %2233
  %2247 = fsub fast float %2168, %2145
  %2248 = fmul fast float %2247, %2233
  %2249 = fadd fast float %2248, %2145
  %2250 = fsub fast float %2191, %2249
  %2251 = fadd fast float %2250, %2246
  %2252 = fmul fast float %2251, %2234
  %2253 = fsub fast float %2249, %2244
  %2254 = fadd fast float %2253, %2252
  %2255 = fmul fast float %2235, %2254
  %2256 = fadd fast float %2255, %2244
  %2257 = fmul fast float %2256, %2012
  %2258 = fadd fast float %2257, %2011
  %2259 = fmul fast float %2008, 2.000000e+00
  %2260 = fmul fast float %2009, 2.000000e+00
  %2261 = fmul fast float %2010, 2.000000e+00
  %2262 = fmul fast float %2012, 5.000000e-01
  %2263 = add nuw nsw i32 %2013, 1
  %2264 = icmp eq i32 %2263, 6
  br i1 %2264, label %2265, label %2007, !llvm.loop !60

; <label>:2265                                    ; preds = %2007
  %2266 = call float @dx.op.unary.f32(i32 7, float %1911)  ; Saturate(value)
  %2267 = fsub fast float %1912, %2266
  %2268 = fmul fast float %1914, %2267
  %2269 = fmul fast float %1948, %23
  %2270 = fadd fast float %2269, %1951
  %2271 = fmul fast float %2270, %1954
  %2272 = extractvalue %dx.types.CBufRet.f32 %1953, 2
  %2273 = fmul fast float %2258, 5.000000e-01
  %2274 = fadd fast float %2273, 5.000000e-01
  %2275 = call float @dx.op.unary.f32(i32 7, float %2274)  ; Saturate(value)
  %2276 = fmul fast float %2275, %2272
  %2277 = fsub fast float %932, %2276
  %2278 = extractvalue %dx.types.CBufRet.f32 %1957, 3
  %2279 = fmul fast float %2278, %2277
  %2280 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 17)  ; CBufferLoadLegacy(handle,regIndex)
  %2281 = extractvalue %dx.types.CBufRet.f32 %2280, 0
  %2282 = fmul fast float %2281, %295
  %2283 = fmul fast float %2281, %296
  %2284 = fmul fast float %2281, %297
  %2285 = fmul fast float %2281, %76
  %2286 = fmul fast float %2281, %23
  %2287 = fmul fast float %2281, %77
  %2288 = extractvalue %dx.types.CBufRet.f32 %2280, 1
  %2289 = fmul fast float %2282, %2288
  %2290 = fmul fast float %2283, %2288
  %2291 = fmul fast float %2284, %2288
  %2292 = fmul fast float %2285, %2288
  %2293 = fmul fast float %2286, %2288
  %2294 = fmul fast float %2287, %2288
  %2295 = fmul fast float %2289, 0x3F1A36E300000000
  %2296 = fmul fast float %2290, 0x3F1A36E300000000
  %2297 = fmul fast float %2291, 0x3F1A36E300000000
  %2298 = fmul fast float %2292, 0x3F1A36E300000000
  %2299 = fmul fast float %2293, 0x3F1A36E300000000
  %2300 = fmul fast float %2294, 0x3F1A36E300000000
  %2301 = extractvalue %dx.types.CBufRet.f32 %2280, 3
  %2302 = fmul fast float %2301, %932
  %2303 = fadd fast float %2302, %2297
  %2304 = fmul fast float %2289, 0x3DCA36E300000000
  %2305 = fmul fast float %2290, 0x3DCA36E300000000
  %2306 = fmul fast float %2303, 0x3EA0000000000000
  %2307 = fadd fast float %2304, 5.000000e-01
  %2308 = fadd fast float %2305, 5.000000e-01
  %2309 = fadd fast float %2307, %2298
  %2310 = fadd fast float %2308, %2299
  %2311 = fadd fast float %2300, 5.000000e-01
  %2312 = fadd fast float %2311, %2306
  %2313 = call float @dx.op.unary.f32(i32 27, float %2309)  ; Round_ni(value)
  %2314 = call float @dx.op.unary.f32(i32 27, float %2310)  ; Round_ni(value)
  %2315 = call float @dx.op.unary.f32(i32 27, float %2312)  ; Round_ni(value)
  %2316 = fsub fast float %2298, %2313
  %2317 = fsub fast float %2299, %2314
  %2318 = fsub fast float %2300, %2315
  %2319 = fmul fast float %2316, 2.097152e+06
  %2320 = fmul fast float %2317, 2.097152e+06
  %2321 = fmul fast float %2318, 2.097152e+06
  %2322 = fadd fast float %2319, %2295
  %2323 = fadd fast float %2320, %2296
  %2324 = fadd fast float %2321, %2303
  br label %2325

; <label>:2325                                    ; preds = %2325, %2265
  %2326 = phi float [ %2322, %2265 ], [ %2578, %2325 ]
  %2327 = phi float [ %2323, %2265 ], [ %2579, %2325 ]
  %2328 = phi float [ %2324, %2265 ], [ %2580, %2325 ]
  %2329 = phi float [ 0.000000e+00, %2265 ], [ %2577, %2325 ]
  %2330 = phi float [ 1.000000e+00, %2265 ], [ %2581, %2325 ]
  %2331 = phi i32 [ 0, %2265 ], [ %2582, %2325 ]
  %2332 = call float @dx.op.unary.f32(i32 22, float %2326)  ; Frc(value)
  %2333 = call float @dx.op.unary.f32(i32 22, float %2327)  ; Frc(value)
  %2334 = call float @dx.op.unary.f32(i32 22, float %2328)  ; Frc(value)
  %2335 = call float @dx.op.unary.f32(i32 27, float %2326)  ; Round_ni(value)
  %2336 = call float @dx.op.unary.f32(i32 27, float %2327)  ; Round_ni(value)
  %2337 = call float @dx.op.unary.f32(i32 27, float %2328)  ; Round_ni(value)
  %2338 = call float @dx.op.dot3.f32(i32 55, float %2335, float %2336, float %2337, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %2339 = fadd fast float %2338, 1.900000e+01
  %2340 = fadd fast float %2338, 4.700000e+01
  %2341 = fadd fast float %2338, 6.600000e+01
  %2342 = fadd fast float %2338, 1.010000e+02
  %2343 = fadd fast float %2338, 1.200000e+02
  %2344 = fadd fast float %2338, 1.480000e+02
  %2345 = fadd fast float %2338, 1.670000e+02
  %2346 = fptosi float %2338 to i32
  %2347 = mul i32 %2346, 1664525
  %2348 = add i32 %2347, -781160288
  %2349 = mul i32 %2348, 1013904223
  %2350 = add i32 %2349, 1013904223
  %2351 = mul i32 %2350, %2348
  %2352 = add i32 %2351, 1013904223
  %2353 = mul i32 %2352, %2350
  %2354 = add i32 %2353, %2348
  %2355 = lshr i32 %2354, 16
  %2356 = and i32 %2355, 32768
  %2357 = and i32 %2355, 16384
  %2358 = and i32 %2355, 8192
  %2359 = uitofp i32 %2356 to float
  %2360 = uitofp i32 %2357 to float
  %2361 = uitofp i32 %2358 to float
  %2362 = fmul fast float %2359, 0x3F10000000000000
  %2363 = fmul fast float %2360, 0x3F20000000000000
  %2364 = fmul fast float %2361, 0x3F30000000000000
  %2365 = fadd fast float %2362, -1.000000e+00
  %2366 = fadd fast float %2363, -1.000000e+00
  %2367 = fadd fast float %2364, -1.000000e+00
  %2368 = call float @dx.op.dot3.f32(i32 55, float %2365, float %2366, float %2367, float %2332, float %2333, float %2334)  ; Dot3(ax,ay,az,bx,by,bz)
  %2369 = fadd fast float %2332, -1.000000e+00
  %2370 = fptosi float %2339 to i32
  %2371 = mul i32 %2370, 1664525
  %2372 = add i32 %2371, -781160288
  %2373 = mul i32 %2372, 1013904223
  %2374 = add i32 %2373, 1013904223
  %2375 = mul i32 %2374, %2372
  %2376 = add i32 %2375, 1013904223
  %2377 = mul i32 %2376, %2374
  %2378 = add i32 %2377, %2372
  %2379 = lshr i32 %2378, 16
  %2380 = and i32 %2379, 32768
  %2381 = and i32 %2379, 16384
  %2382 = and i32 %2379, 8192
  %2383 = uitofp i32 %2380 to float
  %2384 = uitofp i32 %2381 to float
  %2385 = uitofp i32 %2382 to float
  %2386 = fmul fast float %2383, 0x3F10000000000000
  %2387 = fmul fast float %2384, 0x3F20000000000000
  %2388 = fmul fast float %2385, 0x3F30000000000000
  %2389 = fadd fast float %2386, -1.000000e+00
  %2390 = fadd fast float %2387, -1.000000e+00
  %2391 = fadd fast float %2388, -1.000000e+00
  %2392 = call float @dx.op.dot3.f32(i32 55, float %2389, float %2390, float %2391, float %2369, float %2333, float %2334)  ; Dot3(ax,ay,az,bx,by,bz)
  %2393 = fadd fast float %2333, -1.000000e+00
  %2394 = fptosi float %2340 to i32
  %2395 = mul i32 %2394, 1664525
  %2396 = add i32 %2395, -781160288
  %2397 = mul i32 %2396, 1013904223
  %2398 = add i32 %2397, 1013904223
  %2399 = mul i32 %2398, %2396
  %2400 = add i32 %2399, 1013904223
  %2401 = mul i32 %2400, %2398
  %2402 = add i32 %2401, %2396
  %2403 = lshr i32 %2402, 16
  %2404 = and i32 %2403, 32768
  %2405 = and i32 %2403, 16384
  %2406 = and i32 %2403, 8192
  %2407 = uitofp i32 %2404 to float
  %2408 = uitofp i32 %2405 to float
  %2409 = uitofp i32 %2406 to float
  %2410 = fmul fast float %2407, 0x3F10000000000000
  %2411 = fmul fast float %2408, 0x3F20000000000000
  %2412 = fmul fast float %2409, 0x3F30000000000000
  %2413 = fadd fast float %2410, -1.000000e+00
  %2414 = fadd fast float %2411, -1.000000e+00
  %2415 = fadd fast float %2412, -1.000000e+00
  %2416 = call float @dx.op.dot3.f32(i32 55, float %2413, float %2414, float %2415, float %2332, float %2393, float %2334)  ; Dot3(ax,ay,az,bx,by,bz)
  %2417 = fptosi float %2341 to i32
  %2418 = mul i32 %2417, 1664525
  %2419 = add i32 %2418, -781160288
  %2420 = mul i32 %2419, 1013904223
  %2421 = add i32 %2420, 1013904223
  %2422 = mul i32 %2421, %2419
  %2423 = add i32 %2422, 1013904223
  %2424 = mul i32 %2423, %2421
  %2425 = add i32 %2424, %2419
  %2426 = lshr i32 %2425, 16
  %2427 = and i32 %2426, 32768
  %2428 = and i32 %2426, 16384
  %2429 = and i32 %2426, 8192
  %2430 = uitofp i32 %2427 to float
  %2431 = uitofp i32 %2428 to float
  %2432 = uitofp i32 %2429 to float
  %2433 = fmul fast float %2430, 0x3F10000000000000
  %2434 = fmul fast float %2431, 0x3F20000000000000
  %2435 = fmul fast float %2432, 0x3F30000000000000
  %2436 = fadd fast float %2433, -1.000000e+00
  %2437 = fadd fast float %2434, -1.000000e+00
  %2438 = fadd fast float %2435, -1.000000e+00
  %2439 = call float @dx.op.dot3.f32(i32 55, float %2436, float %2437, float %2438, float %2369, float %2393, float %2334)  ; Dot3(ax,ay,az,bx,by,bz)
  %2440 = fadd fast float %2334, -1.000000e+00
  %2441 = fptosi float %2342 to i32
  %2442 = mul i32 %2441, 1664525
  %2443 = add i32 %2442, -781160288
  %2444 = mul i32 %2443, 1013904223
  %2445 = add i32 %2444, 1013904223
  %2446 = mul i32 %2445, %2443
  %2447 = add i32 %2446, 1013904223
  %2448 = mul i32 %2447, %2445
  %2449 = add i32 %2448, %2443
  %2450 = lshr i32 %2449, 16
  %2451 = and i32 %2450, 32768
  %2452 = and i32 %2450, 16384
  %2453 = and i32 %2450, 8192
  %2454 = uitofp i32 %2451 to float
  %2455 = uitofp i32 %2452 to float
  %2456 = uitofp i32 %2453 to float
  %2457 = fmul fast float %2454, 0x3F10000000000000
  %2458 = fmul fast float %2455, 0x3F20000000000000
  %2459 = fmul fast float %2456, 0x3F30000000000000
  %2460 = fadd fast float %2457, -1.000000e+00
  %2461 = fadd fast float %2458, -1.000000e+00
  %2462 = fadd fast float %2459, -1.000000e+00
  %2463 = call float @dx.op.dot3.f32(i32 55, float %2460, float %2461, float %2462, float %2332, float %2333, float %2440)  ; Dot3(ax,ay,az,bx,by,bz)
  %2464 = fptosi float %2343 to i32
  %2465 = mul i32 %2464, 1664525
  %2466 = add i32 %2465, -781160288
  %2467 = mul i32 %2466, 1013904223
  %2468 = add i32 %2467, 1013904223
  %2469 = mul i32 %2468, %2466
  %2470 = add i32 %2469, 1013904223
  %2471 = mul i32 %2470, %2468
  %2472 = add i32 %2471, %2466
  %2473 = lshr i32 %2472, 16
  %2474 = and i32 %2473, 32768
  %2475 = and i32 %2473, 16384
  %2476 = and i32 %2473, 8192
  %2477 = uitofp i32 %2474 to float
  %2478 = uitofp i32 %2475 to float
  %2479 = uitofp i32 %2476 to float
  %2480 = fmul fast float %2477, 0x3F10000000000000
  %2481 = fmul fast float %2478, 0x3F20000000000000
  %2482 = fmul fast float %2479, 0x3F30000000000000
  %2483 = fadd fast float %2480, -1.000000e+00
  %2484 = fadd fast float %2481, -1.000000e+00
  %2485 = fadd fast float %2482, -1.000000e+00
  %2486 = call float @dx.op.dot3.f32(i32 55, float %2483, float %2484, float %2485, float %2369, float %2333, float %2440)  ; Dot3(ax,ay,az,bx,by,bz)
  %2487 = fptosi float %2344 to i32
  %2488 = mul i32 %2487, 1664525
  %2489 = add i32 %2488, -781160288
  %2490 = mul i32 %2489, 1013904223
  %2491 = add i32 %2490, 1013904223
  %2492 = mul i32 %2491, %2489
  %2493 = add i32 %2492, 1013904223
  %2494 = mul i32 %2493, %2491
  %2495 = add i32 %2494, %2489
  %2496 = lshr i32 %2495, 16
  %2497 = and i32 %2496, 32768
  %2498 = and i32 %2496, 16384
  %2499 = and i32 %2496, 8192
  %2500 = uitofp i32 %2497 to float
  %2501 = uitofp i32 %2498 to float
  %2502 = uitofp i32 %2499 to float
  %2503 = fmul fast float %2500, 0x3F10000000000000
  %2504 = fmul fast float %2501, 0x3F20000000000000
  %2505 = fmul fast float %2502, 0x3F30000000000000
  %2506 = fadd fast float %2503, -1.000000e+00
  %2507 = fadd fast float %2504, -1.000000e+00
  %2508 = fadd fast float %2505, -1.000000e+00
  %2509 = call float @dx.op.dot3.f32(i32 55, float %2506, float %2507, float %2508, float %2332, float %2393, float %2440)  ; Dot3(ax,ay,az,bx,by,bz)
  %2510 = fptosi float %2345 to i32
  %2511 = mul i32 %2510, 1664525
  %2512 = add i32 %2511, -781160288
  %2513 = mul i32 %2512, 1013904223
  %2514 = add i32 %2513, 1013904223
  %2515 = mul i32 %2514, %2512
  %2516 = add i32 %2515, 1013904223
  %2517 = mul i32 %2516, %2514
  %2518 = add i32 %2517, %2512
  %2519 = lshr i32 %2518, 16
  %2520 = and i32 %2519, 32768
  %2521 = and i32 %2519, 16384
  %2522 = and i32 %2519, 8192
  %2523 = uitofp i32 %2520 to float
  %2524 = uitofp i32 %2521 to float
  %2525 = uitofp i32 %2522 to float
  %2526 = fmul fast float %2523, 0x3F10000000000000
  %2527 = fmul fast float %2524, 0x3F20000000000000
  %2528 = fmul fast float %2525, 0x3F30000000000000
  %2529 = fadd fast float %2526, -1.000000e+00
  %2530 = fadd fast float %2527, -1.000000e+00
  %2531 = fadd fast float %2528, -1.000000e+00
  %2532 = call float @dx.op.dot3.f32(i32 55, float %2529, float %2530, float %2531, float %2369, float %2393, float %2440)  ; Dot3(ax,ay,az,bx,by,bz)
  %2533 = fmul fast float %2332, %2332
  %2534 = fmul fast float %2333, %2333
  %2535 = fmul fast float %2334, %2334
  %2536 = fmul fast float %2533, %2332
  %2537 = fmul fast float %2534, %2333
  %2538 = fmul fast float %2535, %2334
  %2539 = fmul fast float %2332, 6.000000e+00
  %2540 = fmul fast float %2333, 6.000000e+00
  %2541 = fmul fast float %2334, 6.000000e+00
  %2542 = fadd fast float %2539, -1.500000e+01
  %2543 = fadd fast float %2540, -1.500000e+01
  %2544 = fadd fast float %2541, -1.500000e+01
  %2545 = fmul fast float %2542, %2332
  %2546 = fmul fast float %2543, %2333
  %2547 = fmul fast float %2544, %2334
  %2548 = fadd fast float %2545, 1.000000e+01
  %2549 = fadd fast float %2546, 1.000000e+01
  %2550 = fadd fast float %2547, 1.000000e+01
  %2551 = fmul fast float %2536, %2548
  %2552 = fmul fast float %2537, %2549
  %2553 = fmul fast float %2538, %2550
  %2554 = fsub fast float %2439, %2416
  %2555 = fmul fast float %2554, %2551
  %2556 = fsub fast float %2392, %2368
  %2557 = fmul fast float %2556, %2551
  %2558 = fadd fast float %2557, %2368
  %2559 = fsub fast float %2416, %2558
  %2560 = fadd fast float %2559, %2555
  %2561 = fmul fast float %2560, %2552
  %2562 = fadd fast float %2561, %2558
  %2563 = fsub fast float %2532, %2509
  %2564 = fmul fast float %2563, %2551
  %2565 = fsub fast float %2486, %2463
  %2566 = fmul fast float %2565, %2551
  %2567 = fadd fast float %2566, %2463
  %2568 = fsub fast float %2509, %2567
  %2569 = fadd fast float %2568, %2564
  %2570 = fmul fast float %2569, %2552
  %2571 = fsub fast float %2567, %2562
  %2572 = fadd fast float %2571, %2570
  %2573 = fmul fast float %2553, %2572
  %2574 = fadd fast float %2573, %2562
  %2575 = call float @dx.op.unary.f32(i32 6, float %2574)  ; FAbs(value)
  %2576 = fmul fast float %2575, %2330
  %2577 = fadd fast float %2576, %2329
  %2578 = fmul fast float %2326, 2.000000e+00
  %2579 = fmul fast float %2327, 2.000000e+00
  %2580 = fmul fast float %2328, 2.000000e+00
  %2581 = fmul fast float %2330, 5.000000e-01
  %2582 = add nuw nsw i32 %2331, 1
  %2583 = icmp eq i32 %2582, 10
  br i1 %2583, label %2584, label %2325, !llvm.loop !60

; <label>:2584                                    ; preds = %2325
  %2585 = fadd fast float %2279, %1955
  %2586 = fmul fast float %2289, 0x3F2A36E300000000
  %2587 = fmul fast float %2290, 0x3F2A36E300000000
  %2588 = fmul fast float %2291, 0x3F2A36E300000000
  %2589 = fmul fast float %2292, 0x3F2A36E300000000
  %2590 = fmul fast float %2293, 0x3F2A36E300000000
  %2591 = fmul fast float %2294, 0x3F2A36E300000000
  %2592 = fadd fast float %2302, %2588
  %2593 = fmul fast float %2289, 0x3DDA36E300000000
  %2594 = fmul fast float %2290, 0x3DDA36E300000000
  %2595 = fmul fast float %2592, 0x3EA0000000000000
  %2596 = fadd fast float %2593, 5.000000e-01
  %2597 = fadd fast float %2594, 5.000000e-01
  %2598 = fadd fast float %2596, %2589
  %2599 = fadd fast float %2597, %2590
  %2600 = fadd fast float %2591, 5.000000e-01
  %2601 = fadd fast float %2600, %2595
  %2602 = call float @dx.op.unary.f32(i32 27, float %2598)  ; Round_ni(value)
  %2603 = call float @dx.op.unary.f32(i32 27, float %2599)  ; Round_ni(value)
  %2604 = call float @dx.op.unary.f32(i32 27, float %2601)  ; Round_ni(value)
  %2605 = fsub fast float %2589, %2602
  %2606 = fsub fast float %2590, %2603
  %2607 = fsub fast float %2591, %2604
  %2608 = fmul fast float %2605, 2.097152e+06
  %2609 = fmul fast float %2606, 2.097152e+06
  %2610 = fmul fast float %2607, 2.097152e+06
  %2611 = fadd fast float %2608, %2586
  %2612 = fadd fast float %2609, %2587
  %2613 = fadd fast float %2610, %2592
  br label %2614

; <label>:2614                                    ; preds = %2614, %2584
  %2615 = phi float [ %2611, %2584 ], [ %2867, %2614 ]
  %2616 = phi float [ %2612, %2584 ], [ %2868, %2614 ]
  %2617 = phi float [ %2613, %2584 ], [ %2869, %2614 ]
  %2618 = phi float [ 0.000000e+00, %2584 ], [ %2866, %2614 ]
  %2619 = phi float [ 1.000000e+00, %2584 ], [ %2870, %2614 ]
  %2620 = phi i32 [ 0, %2584 ], [ %2871, %2614 ]
  %2621 = call float @dx.op.unary.f32(i32 22, float %2615)  ; Frc(value)
  %2622 = call float @dx.op.unary.f32(i32 22, float %2616)  ; Frc(value)
  %2623 = call float @dx.op.unary.f32(i32 22, float %2617)  ; Frc(value)
  %2624 = call float @dx.op.unary.f32(i32 27, float %2615)  ; Round_ni(value)
  %2625 = call float @dx.op.unary.f32(i32 27, float %2616)  ; Round_ni(value)
  %2626 = call float @dx.op.unary.f32(i32 27, float %2617)  ; Round_ni(value)
  %2627 = call float @dx.op.dot3.f32(i32 55, float %2624, float %2625, float %2626, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %2628 = fadd fast float %2627, 1.900000e+01
  %2629 = fadd fast float %2627, 4.700000e+01
  %2630 = fadd fast float %2627, 6.600000e+01
  %2631 = fadd fast float %2627, 1.010000e+02
  %2632 = fadd fast float %2627, 1.200000e+02
  %2633 = fadd fast float %2627, 1.480000e+02
  %2634 = fadd fast float %2627, 1.670000e+02
  %2635 = fptosi float %2627 to i32
  %2636 = mul i32 %2635, 1664525
  %2637 = add i32 %2636, -781160288
  %2638 = mul i32 %2637, 1013904223
  %2639 = add i32 %2638, 1013904223
  %2640 = mul i32 %2639, %2637
  %2641 = add i32 %2640, 1013904223
  %2642 = mul i32 %2641, %2639
  %2643 = add i32 %2642, %2637
  %2644 = lshr i32 %2643, 16
  %2645 = and i32 %2644, 32768
  %2646 = and i32 %2644, 16384
  %2647 = and i32 %2644, 8192
  %2648 = uitofp i32 %2645 to float
  %2649 = uitofp i32 %2646 to float
  %2650 = uitofp i32 %2647 to float
  %2651 = fmul fast float %2648, 0x3F10000000000000
  %2652 = fmul fast float %2649, 0x3F20000000000000
  %2653 = fmul fast float %2650, 0x3F30000000000000
  %2654 = fadd fast float %2651, -1.000000e+00
  %2655 = fadd fast float %2652, -1.000000e+00
  %2656 = fadd fast float %2653, -1.000000e+00
  %2657 = call float @dx.op.dot3.f32(i32 55, float %2654, float %2655, float %2656, float %2621, float %2622, float %2623)  ; Dot3(ax,ay,az,bx,by,bz)
  %2658 = fadd fast float %2621, -1.000000e+00
  %2659 = fptosi float %2628 to i32
  %2660 = mul i32 %2659, 1664525
  %2661 = add i32 %2660, -781160288
  %2662 = mul i32 %2661, 1013904223
  %2663 = add i32 %2662, 1013904223
  %2664 = mul i32 %2663, %2661
  %2665 = add i32 %2664, 1013904223
  %2666 = mul i32 %2665, %2663
  %2667 = add i32 %2666, %2661
  %2668 = lshr i32 %2667, 16
  %2669 = and i32 %2668, 32768
  %2670 = and i32 %2668, 16384
  %2671 = and i32 %2668, 8192
  %2672 = uitofp i32 %2669 to float
  %2673 = uitofp i32 %2670 to float
  %2674 = uitofp i32 %2671 to float
  %2675 = fmul fast float %2672, 0x3F10000000000000
  %2676 = fmul fast float %2673, 0x3F20000000000000
  %2677 = fmul fast float %2674, 0x3F30000000000000
  %2678 = fadd fast float %2675, -1.000000e+00
  %2679 = fadd fast float %2676, -1.000000e+00
  %2680 = fadd fast float %2677, -1.000000e+00
  %2681 = call float @dx.op.dot3.f32(i32 55, float %2678, float %2679, float %2680, float %2658, float %2622, float %2623)  ; Dot3(ax,ay,az,bx,by,bz)
  %2682 = fadd fast float %2622, -1.000000e+00
  %2683 = fptosi float %2629 to i32
  %2684 = mul i32 %2683, 1664525
  %2685 = add i32 %2684, -781160288
  %2686 = mul i32 %2685, 1013904223
  %2687 = add i32 %2686, 1013904223
  %2688 = mul i32 %2687, %2685
  %2689 = add i32 %2688, 1013904223
  %2690 = mul i32 %2689, %2687
  %2691 = add i32 %2690, %2685
  %2692 = lshr i32 %2691, 16
  %2693 = and i32 %2692, 32768
  %2694 = and i32 %2692, 16384
  %2695 = and i32 %2692, 8192
  %2696 = uitofp i32 %2693 to float
  %2697 = uitofp i32 %2694 to float
  %2698 = uitofp i32 %2695 to float
  %2699 = fmul fast float %2696, 0x3F10000000000000
  %2700 = fmul fast float %2697, 0x3F20000000000000
  %2701 = fmul fast float %2698, 0x3F30000000000000
  %2702 = fadd fast float %2699, -1.000000e+00
  %2703 = fadd fast float %2700, -1.000000e+00
  %2704 = fadd fast float %2701, -1.000000e+00
  %2705 = call float @dx.op.dot3.f32(i32 55, float %2702, float %2703, float %2704, float %2621, float %2682, float %2623)  ; Dot3(ax,ay,az,bx,by,bz)
  %2706 = fptosi float %2630 to i32
  %2707 = mul i32 %2706, 1664525
  %2708 = add i32 %2707, -781160288
  %2709 = mul i32 %2708, 1013904223
  %2710 = add i32 %2709, 1013904223
  %2711 = mul i32 %2710, %2708
  %2712 = add i32 %2711, 1013904223
  %2713 = mul i32 %2712, %2710
  %2714 = add i32 %2713, %2708
  %2715 = lshr i32 %2714, 16
  %2716 = and i32 %2715, 32768
  %2717 = and i32 %2715, 16384
  %2718 = and i32 %2715, 8192
  %2719 = uitofp i32 %2716 to float
  %2720 = uitofp i32 %2717 to float
  %2721 = uitofp i32 %2718 to float
  %2722 = fmul fast float %2719, 0x3F10000000000000
  %2723 = fmul fast float %2720, 0x3F20000000000000
  %2724 = fmul fast float %2721, 0x3F30000000000000
  %2725 = fadd fast float %2722, -1.000000e+00
  %2726 = fadd fast float %2723, -1.000000e+00
  %2727 = fadd fast float %2724, -1.000000e+00
  %2728 = call float @dx.op.dot3.f32(i32 55, float %2725, float %2726, float %2727, float %2658, float %2682, float %2623)  ; Dot3(ax,ay,az,bx,by,bz)
  %2729 = fadd fast float %2623, -1.000000e+00
  %2730 = fptosi float %2631 to i32
  %2731 = mul i32 %2730, 1664525
  %2732 = add i32 %2731, -781160288
  %2733 = mul i32 %2732, 1013904223
  %2734 = add i32 %2733, 1013904223
  %2735 = mul i32 %2734, %2732
  %2736 = add i32 %2735, 1013904223
  %2737 = mul i32 %2736, %2734
  %2738 = add i32 %2737, %2732
  %2739 = lshr i32 %2738, 16
  %2740 = and i32 %2739, 32768
  %2741 = and i32 %2739, 16384
  %2742 = and i32 %2739, 8192
  %2743 = uitofp i32 %2740 to float
  %2744 = uitofp i32 %2741 to float
  %2745 = uitofp i32 %2742 to float
  %2746 = fmul fast float %2743, 0x3F10000000000000
  %2747 = fmul fast float %2744, 0x3F20000000000000
  %2748 = fmul fast float %2745, 0x3F30000000000000
  %2749 = fadd fast float %2746, -1.000000e+00
  %2750 = fadd fast float %2747, -1.000000e+00
  %2751 = fadd fast float %2748, -1.000000e+00
  %2752 = call float @dx.op.dot3.f32(i32 55, float %2749, float %2750, float %2751, float %2621, float %2622, float %2729)  ; Dot3(ax,ay,az,bx,by,bz)
  %2753 = fptosi float %2632 to i32
  %2754 = mul i32 %2753, 1664525
  %2755 = add i32 %2754, -781160288
  %2756 = mul i32 %2755, 1013904223
  %2757 = add i32 %2756, 1013904223
  %2758 = mul i32 %2757, %2755
  %2759 = add i32 %2758, 1013904223
  %2760 = mul i32 %2759, %2757
  %2761 = add i32 %2760, %2755
  %2762 = lshr i32 %2761, 16
  %2763 = and i32 %2762, 32768
  %2764 = and i32 %2762, 16384
  %2765 = and i32 %2762, 8192
  %2766 = uitofp i32 %2763 to float
  %2767 = uitofp i32 %2764 to float
  %2768 = uitofp i32 %2765 to float
  %2769 = fmul fast float %2766, 0x3F10000000000000
  %2770 = fmul fast float %2767, 0x3F20000000000000
  %2771 = fmul fast float %2768, 0x3F30000000000000
  %2772 = fadd fast float %2769, -1.000000e+00
  %2773 = fadd fast float %2770, -1.000000e+00
  %2774 = fadd fast float %2771, -1.000000e+00
  %2775 = call float @dx.op.dot3.f32(i32 55, float %2772, float %2773, float %2774, float %2658, float %2622, float %2729)  ; Dot3(ax,ay,az,bx,by,bz)
  %2776 = fptosi float %2633 to i32
  %2777 = mul i32 %2776, 1664525
  %2778 = add i32 %2777, -781160288
  %2779 = mul i32 %2778, 1013904223
  %2780 = add i32 %2779, 1013904223
  %2781 = mul i32 %2780, %2778
  %2782 = add i32 %2781, 1013904223
  %2783 = mul i32 %2782, %2780
  %2784 = add i32 %2783, %2778
  %2785 = lshr i32 %2784, 16
  %2786 = and i32 %2785, 32768
  %2787 = and i32 %2785, 16384
  %2788 = and i32 %2785, 8192
  %2789 = uitofp i32 %2786 to float
  %2790 = uitofp i32 %2787 to float
  %2791 = uitofp i32 %2788 to float
  %2792 = fmul fast float %2789, 0x3F10000000000000
  %2793 = fmul fast float %2790, 0x3F20000000000000
  %2794 = fmul fast float %2791, 0x3F30000000000000
  %2795 = fadd fast float %2792, -1.000000e+00
  %2796 = fadd fast float %2793, -1.000000e+00
  %2797 = fadd fast float %2794, -1.000000e+00
  %2798 = call float @dx.op.dot3.f32(i32 55, float %2795, float %2796, float %2797, float %2621, float %2682, float %2729)  ; Dot3(ax,ay,az,bx,by,bz)
  %2799 = fptosi float %2634 to i32
  %2800 = mul i32 %2799, 1664525
  %2801 = add i32 %2800, -781160288
  %2802 = mul i32 %2801, 1013904223
  %2803 = add i32 %2802, 1013904223
  %2804 = mul i32 %2803, %2801
  %2805 = add i32 %2804, 1013904223
  %2806 = mul i32 %2805, %2803
  %2807 = add i32 %2806, %2801
  %2808 = lshr i32 %2807, 16
  %2809 = and i32 %2808, 32768
  %2810 = and i32 %2808, 16384
  %2811 = and i32 %2808, 8192
  %2812 = uitofp i32 %2809 to float
  %2813 = uitofp i32 %2810 to float
  %2814 = uitofp i32 %2811 to float
  %2815 = fmul fast float %2812, 0x3F10000000000000
  %2816 = fmul fast float %2813, 0x3F20000000000000
  %2817 = fmul fast float %2814, 0x3F30000000000000
  %2818 = fadd fast float %2815, -1.000000e+00
  %2819 = fadd fast float %2816, -1.000000e+00
  %2820 = fadd fast float %2817, -1.000000e+00
  %2821 = call float @dx.op.dot3.f32(i32 55, float %2818, float %2819, float %2820, float %2658, float %2682, float %2729)  ; Dot3(ax,ay,az,bx,by,bz)
  %2822 = fmul fast float %2621, %2621
  %2823 = fmul fast float %2622, %2622
  %2824 = fmul fast float %2623, %2623
  %2825 = fmul fast float %2822, %2621
  %2826 = fmul fast float %2823, %2622
  %2827 = fmul fast float %2824, %2623
  %2828 = fmul fast float %2621, 6.000000e+00
  %2829 = fmul fast float %2622, 6.000000e+00
  %2830 = fmul fast float %2623, 6.000000e+00
  %2831 = fadd fast float %2828, -1.500000e+01
  %2832 = fadd fast float %2829, -1.500000e+01
  %2833 = fadd fast float %2830, -1.500000e+01
  %2834 = fmul fast float %2831, %2621
  %2835 = fmul fast float %2832, %2622
  %2836 = fmul fast float %2833, %2623
  %2837 = fadd fast float %2834, 1.000000e+01
  %2838 = fadd fast float %2835, 1.000000e+01
  %2839 = fadd fast float %2836, 1.000000e+01
  %2840 = fmul fast float %2825, %2837
  %2841 = fmul fast float %2826, %2838
  %2842 = fmul fast float %2827, %2839
  %2843 = fsub fast float %2728, %2705
  %2844 = fmul fast float %2843, %2840
  %2845 = fsub fast float %2681, %2657
  %2846 = fmul fast float %2845, %2840
  %2847 = fadd fast float %2846, %2657
  %2848 = fsub fast float %2705, %2847
  %2849 = fadd fast float %2848, %2844
  %2850 = fmul fast float %2849, %2841
  %2851 = fadd fast float %2850, %2847
  %2852 = fsub fast float %2821, %2798
  %2853 = fmul fast float %2852, %2840
  %2854 = fsub fast float %2775, %2752
  %2855 = fmul fast float %2854, %2840
  %2856 = fadd fast float %2855, %2752
  %2857 = fsub fast float %2798, %2856
  %2858 = fadd fast float %2857, %2853
  %2859 = fmul fast float %2858, %2841
  %2860 = fsub fast float %2856, %2851
  %2861 = fadd fast float %2860, %2859
  %2862 = fmul fast float %2842, %2861
  %2863 = fadd fast float %2862, %2851
  %2864 = call float @dx.op.unary.f32(i32 6, float %2863)  ; FAbs(value)
  %2865 = fmul fast float %2864, %2619
  %2866 = fadd fast float %2865, %2618
  %2867 = fmul fast float %2615, 2.000000e+00
  %2868 = fmul fast float %2616, 2.000000e+00
  %2869 = fmul fast float %2617, 2.000000e+00
  %2870 = fmul fast float %2619, 5.000000e-01
  %2871 = add nuw nsw i32 %2620, 1
  %2872 = icmp eq i32 %2871, 10
  br i1 %2872, label %2873, label %2614, !llvm.loop !60

; <label>:2873                                    ; preds = %2614
  %2874 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 18)  ; CBufferLoadLegacy(handle,regIndex)
  %2875 = extractvalue %dx.types.CBufRet.f32 %2874, 1
  %2876 = fmul fast float %2875, %2866
  %2877 = extractvalue %dx.types.CBufRet.f32 %2874, 0
  %2878 = fadd fast float %2876, %2877
  %2879 = fmul fast float %2878, %2577
  %2880 = extractvalue %dx.types.CBufRet.f32 %2874, 2
  %2881 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 16)  ; CBufferLoadLegacy(handle,regIndex)
  %2882 = extractvalue %dx.types.CBufRet.f32 %2881, 3
  %2883 = fsub fast float %2880, %2882
  %2884 = fmul fast float %2879, %2883
  %2885 = fadd fast float %2884, %2882
  %2886 = call float @dx.op.unary.f32(i32 27, float %2271)  ; Round_ni(value)
  %2887 = fsub fast float %2271, %2886
  %2888 = fmul fast float %2887, 2.097152e+06
  %2889 = fadd fast float %2888, %2585
  %2890 = call float @dx.op.unary.f32(i32 27, float %2889)  ; Round_ni(value)
  %2891 = fsub fast float %2585, %2890
  %2892 = fmul fast float %2891, 0x401921FB60000000
  %2893 = fmul fast float %2887, 0x416921FB60000000
  %2894 = fadd fast float %2892, %2893
  %2895 = call float @dx.op.unary.f32(i32 13, float %2894)  ; Sin(value)
  %2896 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %2897 = extractvalue %dx.types.CBufRet.f32 %2896, 0
  %2898 = extractvalue %dx.types.CBufRet.f32 %2896, 1
  %2899 = fadd fast float %2897, %1937
  %2900 = fadd fast float %2898, %1939
  %2901 = call float @dx.op.binary.f32(i32 35, float %2899, float -1.000000e+00)  ; FMax(a,b)
  %2902 = call float @dx.op.binary.f32(i32 35, float %2900, float -1.000000e+00)  ; FMax(a,b)
  %2903 = call float @dx.op.binary.f32(i32 36, float %2901, float 1.000000e+00)  ; FMin(a,b)
  %2904 = call float @dx.op.binary.f32(i32 36, float %2902, float 1.000000e+00)  ; FMin(a,b)
  %2905 = fmul fast float %2903, %295
  %2906 = fmul fast float %2904, %296
  %2907 = fmul fast float %2903, %76
  %2908 = fmul fast float %2904, %23
  %2909 = fadd fast float %2906, %2905
  %2910 = fadd fast float %2908, %2907
  %2911 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 21)  ; CBufferLoadLegacy(handle,regIndex)
  %2912 = extractvalue %dx.types.CBufRet.f32 %2911, 1
  %2913 = fmul fast float %2909, %2912
  %2914 = fmul fast float %2910, %2912
  %2915 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %2916 = extractvalue %dx.types.CBufRet.f32 %2915, 0
  %2917 = fmul fast float %2916, %2277
  %2918 = fadd fast float %2917, %2913
  %2919 = extractvalue %dx.types.CBufRet.f32 %2915, 2
  %2920 = fmul fast float %2919, %2885
  %2921 = call float @dx.op.unary.f32(i32 27, float %2914)  ; Round_ni(value)
  %2922 = fsub fast float %2914, %2921
  %2923 = fmul fast float %2922, 2.097152e+06
  %2924 = fadd fast float %2923, %2918
  %2925 = call float @dx.op.unary.f32(i32 27, float %2924)  ; Round_ni(value)
  %2926 = fsub fast float %2918, %2925
  %2927 = fmul fast float %2926, 0x401921FB60000000
  %2928 = fmul fast float %2922, 0x416921FB60000000
  %2929 = fadd fast float %2927, %2928
  %2930 = call float @dx.op.unary.f32(i32 13, float %2929)  ; Sin(value)
  %2931 = fsub fast float %1937, %1941
  %2932 = fsub fast float %1939, %1942
  %2933 = call float @dx.op.binary.f32(i32 35, float %2931, float -1.000000e+00)  ; FMax(a,b)
  %2934 = call float @dx.op.binary.f32(i32 35, float %2932, float -1.000000e+00)  ; FMax(a,b)
  %2935 = call float @dx.op.binary.f32(i32 36, float %2933, float 1.000000e+00)  ; FMin(a,b)
  %2936 = call float @dx.op.binary.f32(i32 36, float %2934, float 1.000000e+00)  ; FMin(a,b)
  %2937 = fmul fast float %2935, %295
  %2938 = fmul fast float %2936, %296
  %2939 = fmul fast float %2935, %76
  %2940 = fmul fast float %2936, %23
  %2941 = fadd fast float %2938, %2937
  %2942 = fadd fast float %2940, %2939
  %2943 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 23)  ; CBufferLoadLegacy(handle,regIndex)
  %2944 = extractvalue %dx.types.CBufRet.f32 %2943, 1
  %2945 = fmul fast float %2941, %2944
  %2946 = fmul fast float %2942, %2944
  %2947 = extractvalue %dx.types.CBufRet.f32 %2943, 3
  %2948 = fmul fast float %2947, %2277
  %2949 = fadd fast float %2948, %2945
  %2950 = fmul fast float %2919, %2920
  %2951 = call float @dx.op.unary.f32(i32 27, float %2946)  ; Round_ni(value)
  %2952 = fsub fast float %2946, %2951
  %2953 = fmul fast float %2952, 2.097152e+06
  %2954 = fadd fast float %2953, %2949
  %2955 = call float @dx.op.unary.f32(i32 27, float %2954)  ; Round_ni(value)
  %2956 = fsub fast float %2949, %2955
  %2957 = fmul fast float %2956, 0x401921FB60000000
  %2958 = fmul fast float %2952, 0x416921FB60000000
  %2959 = fadd fast float %2957, %2958
  %2960 = call float @dx.op.unary.f32(i32 13, float %2959)  ; Sin(value)
  %2961 = fsub fast float %1937, %2897
  %2962 = fsub fast float %1939, %2898
  %2963 = call float @dx.op.binary.f32(i32 35, float %2961, float -1.000000e+00)  ; FMax(a,b)
  %2964 = call float @dx.op.binary.f32(i32 35, float %2962, float -1.000000e+00)  ; FMax(a,b)
  %2965 = call float @dx.op.binary.f32(i32 36, float %2963, float 1.000000e+00)  ; FMin(a,b)
  %2966 = call float @dx.op.binary.f32(i32 36, float %2964, float 1.000000e+00)  ; FMin(a,b)
  %2967 = fmul fast float %2965, %295
  %2968 = fmul fast float %2966, %296
  %2969 = fmul fast float %2965, %76
  %2970 = fmul fast float %2966, %23
  %2971 = fadd fast float %2968, %2967
  %2972 = fadd fast float %2970, %2969
  %2973 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 24)  ; CBufferLoadLegacy(handle,regIndex)
  %2974 = extractvalue %dx.types.CBufRet.f32 %2973, 2
  %2975 = fmul fast float %2971, %2974
  %2976 = fmul fast float %2972, %2974
  %2977 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 25)  ; CBufferLoadLegacy(handle,regIndex)
  %2978 = extractvalue %dx.types.CBufRet.f32 %2977, 0
  %2979 = fmul fast float %2978, %2277
  %2980 = fadd fast float %2979, %2975
  %2981 = fmul fast float %2919, %2950
  %2982 = call float @dx.op.unary.f32(i32 27, float %2976)  ; Round_ni(value)
  %2983 = fsub fast float %2976, %2982
  %2984 = fmul fast float %2983, 2.097152e+06
  %2985 = fadd fast float %2984, %2980
  %2986 = call float @dx.op.unary.f32(i32 27, float %2985)  ; Round_ni(value)
  %2987 = fsub fast float %2980, %2986
  %2988 = fmul fast float %2987, 0x401921FB60000000
  %2989 = fmul fast float %2983, 0x416921FB60000000
  %2990 = fadd fast float %2988, %2989
  %2991 = call float @dx.op.unary.f32(i32 13, float %2990)  ; Sin(value)
  %2992 = extractvalue %dx.types.CBufRet.f32 %2977, 3
  %2993 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 26)  ; CBufferLoadLegacy(handle,regIndex)
  %2994 = extractvalue %dx.types.CBufRet.f32 %2993, 0
  %2995 = fcmp fast oge float %2992, -1.000000e+00
  %2996 = select i1 %2995, float %2992, float %2994
  %2997 = fadd fast float %2992, 1.000000e+00
  %2998 = call float @dx.op.unary.f32(i32 6, float %2997)  ; FAbs(value)
  %2999 = fcmp fast ogt float %2998, 0x3EE4F8B580000000
  %3000 = select i1 %2999, float %2996, float %2992
  %3001 = extractvalue %dx.types.CBufRet.f32 %2993, 1
  %3002 = fcmp fast oge float %3000, 1.000000e+00
  %3003 = fadd fast float %3000, -1.000000e+00
  %3004 = call float @dx.op.unary.f32(i32 6, float %3003)  ; FAbs(value)
  %3005 = fcmp fast ogt float %3004, 0x3EE4F8B580000000
  %3006 = and i1 %3005, %3002
  %3007 = select i1 %3006, float %3001, float %2992
  %3008 = fcmp fast oge float %3007, 0.000000e+00
  %3009 = select i1 %3008, float 1.000000e+00, float -1.000000e+00
  %3010 = call float @dx.op.unary.f32(i32 6, float %3007)  ; FAbs(value)
  %3011 = fcmp fast ogt float %3010, 0x3EE4F8B580000000
  %3012 = select i1 %3011, float %3009, float 1.000000e+00
  %3013 = call float @dx.op.binary.f32(i32 35, float %3012, float -1.000000e+00)  ; FMax(a,b)
  %3014 = call float @dx.op.binary.f32(i32 36, float %3013, float 1.000000e+00)  ; FMin(a,b)
  %3015 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 27)  ; CBufferLoadLegacy(handle,regIndex)
  %3016 = extractvalue %dx.types.CBufRet.f32 %3015, 2
  %3017 = fadd fast float %1941, %3014
  %3018 = fadd fast float %1942, %3016
  %3019 = call float @dx.op.binary.f32(i32 35, float %3017, float -1.000000e+00)  ; FMax(a,b)
  %3020 = call float @dx.op.binary.f32(i32 35, float %3018, float -1.000000e+00)  ; FMax(a,b)
  %3021 = call float @dx.op.binary.f32(i32 36, float %3019, float 1.000000e+00)  ; FMin(a,b)
  %3022 = call float @dx.op.binary.f32(i32 36, float %3020, float 1.000000e+00)  ; FMin(a,b)
  %3023 = fmul fast float %3021, %295
  %3024 = fmul fast float %3022, %296
  %3025 = fmul fast float %3021, %76
  %3026 = fmul fast float %3022, %23
  %3027 = fadd fast float %3024, %3023
  %3028 = fadd fast float %3026, %3025
  %3029 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 29)  ; CBufferLoadLegacy(handle,regIndex)
  %3030 = extractvalue %dx.types.CBufRet.f32 %3029, 3
  %3031 = fmul fast float %3027, %3030
  %3032 = fmul fast float %3028, %3030
  %3033 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %3034 = extractvalue %dx.types.CBufRet.f32 %3033, 2
  %3035 = fmul fast float %3034, %2277
  %3036 = fadd fast float %3035, %3031
  %3037 = extractvalue %dx.types.CBufRet.f32 %3033, 3
  %3038 = fmul fast float %3037, %2885
  %3039 = call float @dx.op.unary.f32(i32 27, float %3032)  ; Round_ni(value)
  %3040 = fsub fast float %3032, %3039
  %3041 = fmul fast float %3040, 2.097152e+06
  %3042 = fadd fast float %3041, %3036
  %3043 = call float @dx.op.unary.f32(i32 27, float %3042)  ; Round_ni(value)
  %3044 = fsub fast float %3036, %3043
  %3045 = fmul fast float %3044, 0x401921FB60000000
  %3046 = fmul fast float %3040, 0x416921FB60000000
  %3047 = fadd fast float %3045, %3046
  %3048 = call float @dx.op.unary.f32(i32 13, float %3047)  ; Sin(value)
  %3049 = fadd fast float %2897, %3014
  %3050 = fadd fast float %2898, %3016
  %3051 = call float @dx.op.binary.f32(i32 35, float %3049, float -1.000000e+00)  ; FMax(a,b)
  %3052 = call float @dx.op.binary.f32(i32 35, float %3050, float -1.000000e+00)  ; FMax(a,b)
  %3053 = call float @dx.op.binary.f32(i32 36, float %3051, float 1.000000e+00)  ; FMin(a,b)
  %3054 = call float @dx.op.binary.f32(i32 36, float %3052, float 1.000000e+00)  ; FMin(a,b)
  %3055 = fmul fast float %3053, %295
  %3056 = fmul fast float %3054, %296
  %3057 = fmul fast float %3053, %76
  %3058 = fmul fast float %3054, %23
  %3059 = fadd fast float %3056, %3055
  %3060 = fadd fast float %3058, %3057
  %3061 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 31)  ; CBufferLoadLegacy(handle,regIndex)
  %3062 = extractvalue %dx.types.CBufRet.f32 %3061, 1
  %3063 = fmul fast float %3059, %3062
  %3064 = fmul fast float %3060, %3062
  %3065 = extractvalue %dx.types.CBufRet.f32 %3061, 3
  %3066 = fmul fast float %3065, %2277
  %3067 = fadd fast float %3066, %3063
  %3068 = fmul fast float %2919, %3038
  %3069 = call float @dx.op.unary.f32(i32 27, float %3064)  ; Round_ni(value)
  %3070 = fsub fast float %3064, %3069
  %3071 = fmul fast float %3070, 2.097152e+06
  %3072 = fadd fast float %3071, %3067
  %3073 = call float @dx.op.unary.f32(i32 27, float %3072)  ; Round_ni(value)
  %3074 = fsub fast float %3067, %3073
  %3075 = fmul fast float %3074, 0x401921FB60000000
  %3076 = fmul fast float %3070, 0x416921FB60000000
  %3077 = fadd fast float %3075, %3076
  %3078 = call float @dx.op.unary.f32(i32 13, float %3077)  ; Sin(value)
  %3079 = fsub fast float %3014, %1941
  %3080 = fsub fast float %3016, %1942
  %3081 = call float @dx.op.binary.f32(i32 35, float %3079, float -1.000000e+00)  ; FMax(a,b)
  %3082 = call float @dx.op.binary.f32(i32 35, float %3080, float -1.000000e+00)  ; FMax(a,b)
  %3083 = call float @dx.op.binary.f32(i32 36, float %3081, float 1.000000e+00)  ; FMin(a,b)
  %3084 = call float @dx.op.binary.f32(i32 36, float %3082, float 1.000000e+00)  ; FMin(a,b)
  %3085 = fmul fast float %3083, %295
  %3086 = fmul fast float %3084, %296
  %3087 = fmul fast float %3083, %76
  %3088 = fmul fast float %3084, %23
  %3089 = fadd fast float %3086, %3085
  %3090 = fadd fast float %3088, %3087
  %3091 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 32)  ; CBufferLoadLegacy(handle,regIndex)
  %3092 = extractvalue %dx.types.CBufRet.f32 %3091, 1
  %3093 = fmul fast float %3089, %3092
  %3094 = fmul fast float %3090, %3092
  %3095 = extractvalue %dx.types.CBufRet.f32 %3091, 3
  %3096 = fmul fast float %3095, %2277
  %3097 = fadd fast float %3096, %3093
  %3098 = fmul fast float %2919, %3068
  %3099 = call float @dx.op.unary.f32(i32 27, float %3094)  ; Round_ni(value)
  %3100 = fsub fast float %3094, %3099
  %3101 = fmul fast float %3100, 2.097152e+06
  %3102 = fadd fast float %3101, %3097
  %3103 = call float @dx.op.unary.f32(i32 27, float %3102)  ; Round_ni(value)
  %3104 = fsub fast float %3097, %3103
  %3105 = fmul fast float %3104, 0x401921FB60000000
  %3106 = fmul fast float %3100, 0x416921FB60000000
  %3107 = fadd fast float %3105, %3106
  %3108 = call float @dx.op.unary.f32(i32 13, float %3107)  ; Sin(value)
  %3109 = fsub fast float %3014, %2897
  %3110 = fsub fast float %3016, %2898
  %3111 = call float @dx.op.binary.f32(i32 35, float %3109, float -1.000000e+00)  ; FMax(a,b)
  %3112 = call float @dx.op.binary.f32(i32 35, float %3110, float -1.000000e+00)  ; FMax(a,b)
  %3113 = call float @dx.op.binary.f32(i32 36, float %3111, float 1.000000e+00)  ; FMin(a,b)
  %3114 = call float @dx.op.binary.f32(i32 36, float %3112, float 1.000000e+00)  ; FMin(a,b)
  %3115 = fmul fast float %3113, %295
  %3116 = fmul fast float %3114, %296
  %3117 = fmul fast float %3113, %76
  %3118 = fmul fast float %3114, %23
  %3119 = fadd fast float %3116, %3115
  %3120 = fadd fast float %3118, %3117
  %3121 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 33)  ; CBufferLoadLegacy(handle,regIndex)
  %3122 = extractvalue %dx.types.CBufRet.f32 %3121, 1
  %3123 = fmul fast float %3119, %3122
  %3124 = fmul fast float %3120, %3122
  %3125 = extractvalue %dx.types.CBufRet.f32 %3121, 3
  %3126 = fmul fast float %3125, %2277
  %3127 = fadd fast float %3126, %3123
  %3128 = fmul fast float %2919, %3098
  %3129 = call float @dx.op.unary.f32(i32 27, float %3124)  ; Round_ni(value)
  %3130 = fsub fast float %3124, %3129
  %3131 = fmul fast float %3130, 2.097152e+06
  %3132 = fadd fast float %3131, %3127
  %3133 = call float @dx.op.unary.f32(i32 27, float %3132)  ; Round_ni(value)
  %3134 = fsub fast float %3127, %3133
  %3135 = fmul fast float %3134, 0x401921FB60000000
  %3136 = fmul fast float %3130, 0x416921FB60000000
  %3137 = fadd fast float %3135, %3136
  %3138 = call float @dx.op.unary.f32(i32 13, float %3137)  ; Sin(value)
  %3139 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 34)  ; CBufferLoadLegacy(handle,regIndex)
  %3140 = extractvalue %dx.types.CBufRet.f32 %3139, 0
  %3141 = extractvalue %dx.types.CBufRet.f32 %3139, 1
  %3142 = fcmp fast oge float %3140, -1.000000e+00
  %3143 = select i1 %3142, float %3140, float %3141
  %3144 = fadd fast float %3140, 1.000000e+00
  %3145 = call float @dx.op.unary.f32(i32 6, float %3144)  ; FAbs(value)
  %3146 = fcmp fast ogt float %3145, 0x3EE4F8B580000000
  %3147 = select i1 %3146, float %3143, float %3140
  %3148 = extractvalue %dx.types.CBufRet.f32 %3139, 2
  %3149 = fcmp fast oge float %3147, 1.000000e+00
  %3150 = fadd fast float %3147, -1.000000e+00
  %3151 = call float @dx.op.unary.f32(i32 6, float %3150)  ; FAbs(value)
  %3152 = fcmp fast ogt float %3151, 0x3EE4F8B580000000
  %3153 = and i1 %3152, %3149
  %3154 = select i1 %3153, float %3148, float %3140
  %3155 = fcmp fast oge float %3154, 0.000000e+00
  %3156 = select i1 %3155, float 1.000000e+00, float -1.000000e+00
  %3157 = call float @dx.op.unary.f32(i32 6, float %3154)  ; FAbs(value)
  %3158 = fcmp fast ogt float %3157, 0x3EE4F8B580000000
  %3159 = select i1 %3158, float %3156, float 1.000000e+00
  %3160 = call float @dx.op.binary.f32(i32 35, float %3159, float -1.000000e+00)  ; FMax(a,b)
  %3161 = call float @dx.op.binary.f32(i32 36, float %3160, float 1.000000e+00)  ; FMin(a,b)
  %3162 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 35)  ; CBufferLoadLegacy(handle,regIndex)
  %3163 = extractvalue %dx.types.CBufRet.f32 %3162, 3
  %3164 = fadd fast float %1941, %3161
  %3165 = fadd fast float %1942, %3163
  %3166 = call float @dx.op.binary.f32(i32 35, float %3164, float -1.000000e+00)  ; FMax(a,b)
  %3167 = call float @dx.op.binary.f32(i32 35, float %3165, float -1.000000e+00)  ; FMax(a,b)
  %3168 = call float @dx.op.binary.f32(i32 36, float %3166, float 1.000000e+00)  ; FMin(a,b)
  %3169 = call float @dx.op.binary.f32(i32 36, float %3167, float 1.000000e+00)  ; FMin(a,b)
  %3170 = fmul fast float %3168, %295
  %3171 = fmul fast float %3169, %296
  %3172 = fmul fast float %3168, %76
  %3173 = fmul fast float %3169, %23
  %3174 = fadd fast float %3171, %3170
  %3175 = fadd fast float %3173, %3172
  %3176 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 37)  ; CBufferLoadLegacy(handle,regIndex)
  %3177 = extractvalue %dx.types.CBufRet.f32 %3176, 2
  %3178 = fmul fast float %3174, %3177
  %3179 = fmul fast float %3175, %3177
  %3180 = extractvalue %dx.types.CBufRet.f32 %3176, 3
  %3181 = fmul fast float %3180, %2277
  %3182 = fadd fast float %3181, %3178
  %3183 = call float @dx.op.unary.f32(i32 27, float %3179)  ; Round_ni(value)
  %3184 = fsub fast float %3179, %3183
  %3185 = fmul fast float %3184, 2.097152e+06
  %3186 = fadd fast float %3185, %3182
  %3187 = call float @dx.op.unary.f32(i32 27, float %3186)  ; Round_ni(value)
  %3188 = fsub fast float %3182, %3187
  %3189 = fmul fast float %3188, 0x401921FB60000000
  %3190 = fmul fast float %3184, 0x416921FB60000000
  %3191 = fadd fast float %3189, %3190
  %3192 = call float @dx.op.unary.f32(i32 13, float %3191)  ; Sin(value)
  %3193 = fadd fast float %2897, %3161
  %3194 = fadd fast float %2898, %3163
  %3195 = call float @dx.op.binary.f32(i32 35, float %3193, float -1.000000e+00)  ; FMax(a,b)
  %3196 = call float @dx.op.binary.f32(i32 35, float %3194, float -1.000000e+00)  ; FMax(a,b)
  %3197 = call float @dx.op.binary.f32(i32 36, float %3195, float 1.000000e+00)  ; FMin(a,b)
  %3198 = call float @dx.op.binary.f32(i32 36, float %3196, float 1.000000e+00)  ; FMin(a,b)
  %3199 = fmul fast float %3197, %295
  %3200 = fmul fast float %3198, %296
  %3201 = fmul fast float %3197, %76
  %3202 = fmul fast float %3198, %23
  %3203 = fadd fast float %3200, %3199
  %3204 = fadd fast float %3202, %3201
  %3205 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 38)  ; CBufferLoadLegacy(handle,regIndex)
  %3206 = extractvalue %dx.types.CBufRet.f32 %3205, 1
  %3207 = fmul fast float %3203, %3206
  %3208 = fmul fast float %3204, %3206
  %3209 = extractvalue %dx.types.CBufRet.f32 %3205, 2
  %3210 = fmul fast float %3209, %2277
  %3211 = fadd fast float %3210, %3207
  %3212 = call float @dx.op.unary.f32(i32 27, float %3208)  ; Round_ni(value)
  %3213 = fsub fast float %3208, %3212
  %3214 = fmul fast float %3213, 2.097152e+06
  %3215 = fadd fast float %3214, %3211
  %3216 = call float @dx.op.unary.f32(i32 27, float %3215)  ; Round_ni(value)
  %3217 = fsub fast float %3211, %3216
  %3218 = fmul fast float %3217, 0x401921FB60000000
  %3219 = fmul fast float %3213, 0x416921FB60000000
  %3220 = fadd fast float %3218, %3219
  %3221 = call float @dx.op.unary.f32(i32 13, float %3220)  ; Sin(value)
  %3222 = fsub fast float %3161, %1941
  %3223 = fsub fast float %3163, %1942
  %3224 = call float @dx.op.binary.f32(i32 35, float %3222, float -1.000000e+00)  ; FMax(a,b)
  %3225 = call float @dx.op.binary.f32(i32 35, float %3223, float -1.000000e+00)  ; FMax(a,b)
  %3226 = call float @dx.op.binary.f32(i32 36, float %3224, float 1.000000e+00)  ; FMin(a,b)
  %3227 = call float @dx.op.binary.f32(i32 36, float %3225, float 1.000000e+00)  ; FMin(a,b)
  %3228 = fmul fast float %3226, %295
  %3229 = fmul fast float %3227, %296
  %3230 = fmul fast float %3226, %76
  %3231 = fmul fast float %3227, %23
  %3232 = fadd fast float %3229, %3228
  %3233 = fadd fast float %3231, %3230
  %3234 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 39)  ; CBufferLoadLegacy(handle,regIndex)
  %3235 = extractvalue %dx.types.CBufRet.f32 %3234, 0
  %3236 = fmul fast float %3232, %3235
  %3237 = fmul fast float %3233, %3235
  %3238 = extractvalue %dx.types.CBufRet.f32 %3234, 1
  %3239 = fmul fast float %3238, %2277
  %3240 = fadd fast float %3239, %3236
  %3241 = call float @dx.op.unary.f32(i32 27, float %3237)  ; Round_ni(value)
  %3242 = fsub fast float %3237, %3241
  %3243 = fmul fast float %3242, 2.097152e+06
  %3244 = fadd fast float %3243, %3240
  %3245 = call float @dx.op.unary.f32(i32 27, float %3244)  ; Round_ni(value)
  %3246 = fsub fast float %3240, %3245
  %3247 = fmul fast float %3246, 0x401921FB60000000
  %3248 = fmul fast float %3242, 0x416921FB60000000
  %3249 = fadd fast float %3247, %3248
  %3250 = call float @dx.op.unary.f32(i32 13, float %3249)  ; Sin(value)
  %3251 = fsub fast float %3161, %2897
  %3252 = fsub fast float %3163, %2898
  %3253 = call float @dx.op.binary.f32(i32 35, float %3251, float -1.000000e+00)  ; FMax(a,b)
  %3254 = call float @dx.op.binary.f32(i32 35, float %3252, float -1.000000e+00)  ; FMax(a,b)
  %3255 = call float @dx.op.binary.f32(i32 36, float %3253, float 1.000000e+00)  ; FMin(a,b)
  %3256 = call float @dx.op.binary.f32(i32 36, float %3254, float 1.000000e+00)  ; FMin(a,b)
  %3257 = fmul fast float %3255, %295
  %3258 = fmul fast float %3256, %296
  %3259 = fmul fast float %3255, %76
  %3260 = fmul fast float %3256, %23
  %3261 = fadd fast float %3258, %3257
  %3262 = fadd fast float %3260, %3259
  %3263 = extractvalue %dx.types.CBufRet.f32 %3234, 3
  %3264 = fmul fast float %3261, %3263
  %3265 = fmul fast float %3262, %3263
  %3266 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 40)  ; CBufferLoadLegacy(handle,regIndex)
  %3267 = extractvalue %dx.types.CBufRet.f32 %3266, 0
  %3268 = fmul fast float %3267, %2277
  %3269 = fadd fast float %3268, %3264
  %3270 = call float @dx.op.unary.f32(i32 27, float %3265)  ; Round_ni(value)
  %3271 = fsub fast float %3265, %3270
  %3272 = fmul fast float %3271, 2.097152e+06
  %3273 = fadd fast float %3272, %3269
  %3274 = call float @dx.op.unary.f32(i32 27, float %3273)  ; Round_ni(value)
  %3275 = fsub fast float %3269, %3274
  %3276 = fmul fast float %3275, 0x401921FB60000000
  %3277 = fmul fast float %3271, 0x416921FB60000000
  %3278 = fadd fast float %3276, %3277
  %3279 = call float @dx.op.unary.f32(i32 13, float %3278)  ; Sin(value)
  %3280 = extractvalue %dx.types.CBufRet.f32 %3266, 1
  %3281 = extractvalue %dx.types.CBufRet.f32 %3266, 2
  %3282 = fcmp fast oge float %3280, -1.000000e+00
  %3283 = select i1 %3282, float %3280, float %3281
  %3284 = fadd fast float %3280, 1.000000e+00
  %3285 = call float @dx.op.unary.f32(i32 6, float %3284)  ; FAbs(value)
  %3286 = fcmp fast ogt float %3285, 0x3EE4F8B580000000
  %3287 = select i1 %3286, float %3283, float %3280
  %3288 = extractvalue %dx.types.CBufRet.f32 %3266, 3
  %3289 = fcmp fast oge float %3287, 1.000000e+00
  %3290 = fadd fast float %3287, -1.000000e+00
  %3291 = call float @dx.op.unary.f32(i32 6, float %3290)  ; FAbs(value)
  %3292 = fcmp fast ogt float %3291, 0x3EE4F8B580000000
  %3293 = and i1 %3292, %3289
  %3294 = select i1 %3293, float %3288, float %3280
  %3295 = fcmp fast oge float %3294, 0.000000e+00
  %3296 = select i1 %3295, float 1.000000e+00, float -1.000000e+00
  %3297 = call float @dx.op.unary.f32(i32 6, float %3294)  ; FAbs(value)
  %3298 = fcmp fast ogt float %3297, 0x3EE4F8B580000000
  %3299 = select i1 %3298, float %3296, float 1.000000e+00
  %3300 = call float @dx.op.binary.f32(i32 35, float %3299, float -1.000000e+00)  ; FMax(a,b)
  %3301 = call float @dx.op.binary.f32(i32 36, float %3300, float 1.000000e+00)  ; FMin(a,b)
  %3302 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 42)  ; CBufferLoadLegacy(handle,regIndex)
  %3303 = extractvalue %dx.types.CBufRet.f32 %3302, 0
  %3304 = fadd fast float %1941, %3301
  %3305 = fadd fast float %1942, %3303
  %3306 = call float @dx.op.binary.f32(i32 35, float %3304, float -1.000000e+00)  ; FMax(a,b)
  %3307 = call float @dx.op.binary.f32(i32 35, float %3305, float -1.000000e+00)  ; FMax(a,b)
  %3308 = call float @dx.op.binary.f32(i32 36, float %3306, float 1.000000e+00)  ; FMin(a,b)
  %3309 = call float @dx.op.binary.f32(i32 36, float %3307, float 1.000000e+00)  ; FMin(a,b)
  %3310 = fmul fast float %3308, %295
  %3311 = fmul fast float %3309, %296
  %3312 = fmul fast float %3308, %76
  %3313 = fmul fast float %3309, %23
  %3314 = fadd fast float %3311, %3310
  %3315 = fadd fast float %3313, %3312
  %3316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 43)  ; CBufferLoadLegacy(handle,regIndex)
  %3317 = extractvalue %dx.types.CBufRet.f32 %3316, 3
  %3318 = fmul fast float %3314, %3317
  %3319 = fmul fast float %3315, %3317
  %3320 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 44)  ; CBufferLoadLegacy(handle,regIndex)
  %3321 = extractvalue %dx.types.CBufRet.f32 %3320, 0
  %3322 = fmul fast float %3321, %2277
  %3323 = fadd fast float %3322, %3318
  %3324 = call float @dx.op.unary.f32(i32 27, float %3319)  ; Round_ni(value)
  %3325 = fsub fast float %3319, %3324
  %3326 = fmul fast float %3325, 2.097152e+06
  %3327 = fadd fast float %3326, %3323
  %3328 = call float @dx.op.unary.f32(i32 27, float %3327)  ; Round_ni(value)
  %3329 = fsub fast float %3323, %3328
  %3330 = fmul fast float %3329, 0x401921FB60000000
  %3331 = fmul fast float %3325, 0x416921FB60000000
  %3332 = fadd fast float %3330, %3331
  %3333 = call float @dx.op.unary.f32(i32 13, float %3332)  ; Sin(value)
  %3334 = fadd fast float %2897, %3301
  %3335 = fadd fast float %2898, %3303
  %3336 = call float @dx.op.binary.f32(i32 35, float %3334, float -1.000000e+00)  ; FMax(a,b)
  %3337 = call float @dx.op.binary.f32(i32 35, float %3335, float -1.000000e+00)  ; FMax(a,b)
  %3338 = call float @dx.op.binary.f32(i32 36, float %3336, float 1.000000e+00)  ; FMin(a,b)
  %3339 = call float @dx.op.binary.f32(i32 36, float %3337, float 1.000000e+00)  ; FMin(a,b)
  %3340 = fmul fast float %3338, %295
  %3341 = fmul fast float %3339, %296
  %3342 = fmul fast float %3338, %76
  %3343 = fmul fast float %3339, %23
  %3344 = fadd fast float %3341, %3340
  %3345 = fadd fast float %3343, %3342
  %3346 = extractvalue %dx.types.CBufRet.f32 %3320, 2
  %3347 = fmul fast float %3344, %3346
  %3348 = fmul fast float %3345, %3346
  %3349 = extractvalue %dx.types.CBufRet.f32 %3320, 3
  %3350 = fmul fast float %3349, %2277
  %3351 = fadd fast float %3350, %3347
  %3352 = call float @dx.op.unary.f32(i32 27, float %3348)  ; Round_ni(value)
  %3353 = fsub fast float %3348, %3352
  %3354 = fmul fast float %3353, 2.097152e+06
  %3355 = fadd fast float %3354, %3351
  %3356 = call float @dx.op.unary.f32(i32 27, float %3355)  ; Round_ni(value)
  %3357 = fsub fast float %3351, %3356
  %3358 = fmul fast float %3357, 0x401921FB60000000
  %3359 = fmul fast float %3353, 0x416921FB60000000
  %3360 = fadd fast float %3358, %3359
  %3361 = call float @dx.op.unary.f32(i32 13, float %3360)  ; Sin(value)
  %3362 = fsub fast float %3301, %1941
  %3363 = fsub fast float %3303, %1942
  %3364 = call float @dx.op.binary.f32(i32 35, float %3362, float -1.000000e+00)  ; FMax(a,b)
  %3365 = call float @dx.op.binary.f32(i32 35, float %3363, float -1.000000e+00)  ; FMax(a,b)
  %3366 = call float @dx.op.binary.f32(i32 36, float %3364, float 1.000000e+00)  ; FMin(a,b)
  %3367 = call float @dx.op.binary.f32(i32 36, float %3365, float 1.000000e+00)  ; FMin(a,b)
  %3368 = fmul fast float %3366, %295
  %3369 = fmul fast float %3367, %296
  %3370 = fmul fast float %3366, %76
  %3371 = fmul fast float %3367, %23
  %3372 = fadd fast float %3369, %3368
  %3373 = fadd fast float %3371, %3370
  %3374 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 45)  ; CBufferLoadLegacy(handle,regIndex)
  %3375 = extractvalue %dx.types.CBufRet.f32 %3374, 1
  %3376 = fmul fast float %3372, %3375
  %3377 = fmul fast float %3373, %3375
  %3378 = extractvalue %dx.types.CBufRet.f32 %3374, 2
  %3379 = fmul fast float %3378, %2277
  %3380 = fadd fast float %3379, %3376
  %3381 = call float @dx.op.unary.f32(i32 27, float %3377)  ; Round_ni(value)
  %3382 = fsub fast float %3377, %3381
  %3383 = fmul fast float %3382, 2.097152e+06
  %3384 = fadd fast float %3383, %3380
  %3385 = call float @dx.op.unary.f32(i32 27, float %3384)  ; Round_ni(value)
  %3386 = fsub fast float %3380, %3385
  %3387 = fmul fast float %3386, 0x401921FB60000000
  %3388 = fmul fast float %3382, 0x416921FB60000000
  %3389 = fadd fast float %3387, %3388
  %3390 = call float @dx.op.unary.f32(i32 13, float %3389)  ; Sin(value)
  %3391 = fsub fast float %3301, %2897
  %3392 = fsub fast float %3303, %2898
  %3393 = call float @dx.op.binary.f32(i32 35, float %3391, float -1.000000e+00)  ; FMax(a,b)
  %3394 = call float @dx.op.binary.f32(i32 35, float %3392, float -1.000000e+00)  ; FMax(a,b)
  %3395 = call float @dx.op.binary.f32(i32 36, float %3393, float 1.000000e+00)  ; FMin(a,b)
  %3396 = call float @dx.op.binary.f32(i32 36, float %3394, float 1.000000e+00)  ; FMin(a,b)
  %3397 = fmul fast float %3395, %295
  %3398 = fmul fast float %3396, %296
  %3399 = fmul fast float %3395, %76
  %3400 = fmul fast float %3396, %23
  %3401 = fadd fast float %3398, %3397
  %3402 = fadd fast float %3400, %3399
  %3403 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 46)  ; CBufferLoadLegacy(handle,regIndex)
  %3404 = extractvalue %dx.types.CBufRet.f32 %3403, 0
  %3405 = fmul fast float %3401, %3404
  %3406 = fmul fast float %3402, %3404
  %3407 = extractvalue %dx.types.CBufRet.f32 %3403, 1
  %3408 = fmul fast float %3407, %2277
  %3409 = fadd fast float %3408, %3405
  %3410 = call float @dx.op.unary.f32(i32 27, float %3406)  ; Round_ni(value)
  %3411 = fsub fast float %3406, %3410
  %3412 = fmul fast float %3411, 2.097152e+06
  %3413 = fadd fast float %3412, %3409
  %3414 = call float @dx.op.unary.f32(i32 27, float %3413)  ; Round_ni(value)
  %3415 = fsub fast float %3409, %3414
  %3416 = fmul fast float %3415, 0x401921FB60000000
  %3417 = fmul fast float %3411, 0x416921FB60000000
  %3418 = fadd fast float %3416, %3417
  %3419 = call float @dx.op.unary.f32(i32 13, float %3418)  ; Sin(value)
  %3420 = extractvalue %dx.types.CBufRet.f32 %3403, 2
  %3421 = extractvalue %dx.types.CBufRet.f32 %3403, 3
  %3422 = fcmp fast oge float %3420, -1.000000e+00
  %3423 = select i1 %3422, float %3420, float %3421
  %3424 = fadd fast float %3420, 1.000000e+00
  %3425 = call float @dx.op.unary.f32(i32 6, float %3424)  ; FAbs(value)
  %3426 = fcmp fast ogt float %3425, 0x3EE4F8B580000000
  %3427 = select i1 %3426, float %3423, float %3420
  %3428 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 47)  ; CBufferLoadLegacy(handle,regIndex)
  %3429 = extractvalue %dx.types.CBufRet.f32 %3428, 0
  %3430 = fcmp fast oge float %3427, 1.000000e+00
  %3431 = fadd fast float %3427, -1.000000e+00
  %3432 = call float @dx.op.unary.f32(i32 6, float %3431)  ; FAbs(value)
  %3433 = fcmp fast ogt float %3432, 0x3EE4F8B580000000
  %3434 = and i1 %3433, %3430
  %3435 = select i1 %3434, float %3429, float %3420
  %3436 = fcmp fast oge float %3435, 0.000000e+00
  %3437 = select i1 %3436, float 1.000000e+00, float -1.000000e+00
  %3438 = call float @dx.op.unary.f32(i32 6, float %3435)  ; FAbs(value)
  %3439 = fcmp fast ogt float %3438, 0x3EE4F8B580000000
  %3440 = select i1 %3439, float %3437, float 1.000000e+00
  %3441 = call float @dx.op.binary.f32(i32 35, float %3440, float -1.000000e+00)  ; FMax(a,b)
  %3442 = call float @dx.op.binary.f32(i32 36, float %3441, float 1.000000e+00)  ; FMin(a,b)
  %3443 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 48)  ; CBufferLoadLegacy(handle,regIndex)
  %3444 = extractvalue %dx.types.CBufRet.f32 %3443, 1
  %3445 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %3446 = extractvalue %dx.types.CBufRet.f32 %3445, 0
  %3447 = extractvalue %dx.types.CBufRet.f32 %3445, 1
  %3448 = fadd fast float %3446, %3442
  %3449 = fadd fast float %3447, %3444
  %3450 = call float @dx.op.binary.f32(i32 35, float %3448, float -1.000000e+00)  ; FMax(a,b)
  %3451 = call float @dx.op.binary.f32(i32 35, float %3449, float -1.000000e+00)  ; FMax(a,b)
  %3452 = call float @dx.op.binary.f32(i32 36, float %3450, float 1.000000e+00)  ; FMin(a,b)
  %3453 = call float @dx.op.binary.f32(i32 36, float %3451, float 1.000000e+00)  ; FMin(a,b)
  %3454 = fmul fast float %3452, %295
  %3455 = fmul fast float %3453, %296
  %3456 = fmul fast float %3452, %76
  %3457 = fmul fast float %3453, %23
  %3458 = fadd fast float %3455, %3454
  %3459 = fadd fast float %3457, %3456
  %3460 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 50)  ; CBufferLoadLegacy(handle,regIndex)
  %3461 = extractvalue %dx.types.CBufRet.f32 %3460, 0
  %3462 = fmul fast float %3458, %3461
  %3463 = fmul fast float %3459, %3461
  %3464 = extractvalue %dx.types.CBufRet.f32 %3460, 1
  %3465 = fmul fast float %3464, %2277
  %3466 = fadd fast float %3465, %3462
  %3467 = call float @dx.op.unary.f32(i32 27, float %3463)  ; Round_ni(value)
  %3468 = fsub fast float %3463, %3467
  %3469 = fmul fast float %3468, 2.097152e+06
  %3470 = fadd fast float %3469, %3466
  %3471 = call float @dx.op.unary.f32(i32 27, float %3470)  ; Round_ni(value)
  %3472 = fsub fast float %3466, %3471
  %3473 = fmul fast float %3472, 0x401921FB60000000
  %3474 = fmul fast float %3468, 0x416921FB60000000
  %3475 = fadd fast float %3473, %3474
  %3476 = call float @dx.op.unary.f32(i32 13, float %3475)  ; Sin(value)
  %3477 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %3478 = extractvalue %dx.types.CBufRet.f32 %3477, 0
  %3479 = extractvalue %dx.types.CBufRet.f32 %3477, 1
  %3480 = fadd fast float %3478, %3442
  %3481 = fadd fast float %3479, %3444
  %3482 = call float @dx.op.binary.f32(i32 35, float %3480, float -1.000000e+00)  ; FMax(a,b)
  %3483 = call float @dx.op.binary.f32(i32 35, float %3481, float -1.000000e+00)  ; FMax(a,b)
  %3484 = call float @dx.op.binary.f32(i32 36, float %3482, float 1.000000e+00)  ; FMin(a,b)
  %3485 = call float @dx.op.binary.f32(i32 36, float %3483, float 1.000000e+00)  ; FMin(a,b)
  %3486 = fmul fast float %3484, %295
  %3487 = fmul fast float %3485, %296
  %3488 = fmul fast float %3484, %76
  %3489 = fmul fast float %3485, %23
  %3490 = fadd fast float %3487, %3486
  %3491 = fadd fast float %3489, %3488
  %3492 = extractvalue %dx.types.CBufRet.f32 %3460, 3
  %3493 = fmul fast float %3490, %3492
  %3494 = fmul fast float %3491, %3492
  %3495 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 51)  ; CBufferLoadLegacy(handle,regIndex)
  %3496 = extractvalue %dx.types.CBufRet.f32 %3495, 0
  %3497 = fmul fast float %3496, %2277
  %3498 = fadd fast float %3497, %3493
  %3499 = call float @dx.op.unary.f32(i32 27, float %3494)  ; Round_ni(value)
  %3500 = fsub fast float %3494, %3499
  %3501 = fmul fast float %3500, 2.097152e+06
  %3502 = fadd fast float %3501, %3498
  %3503 = call float @dx.op.unary.f32(i32 27, float %3502)  ; Round_ni(value)
  %3504 = fsub fast float %3498, %3503
  %3505 = fmul fast float %3504, 0x401921FB60000000
  %3506 = fmul fast float %3500, 0x416921FB60000000
  %3507 = fadd fast float %3505, %3506
  %3508 = call float @dx.op.unary.f32(i32 13, float %3507)  ; Sin(value)
  %3509 = fsub fast float %3442, %3446
  %3510 = fsub fast float %3444, %3447
  %3511 = call float @dx.op.binary.f32(i32 35, float %3509, float -1.000000e+00)  ; FMax(a,b)
  %3512 = call float @dx.op.binary.f32(i32 35, float %3510, float -1.000000e+00)  ; FMax(a,b)
  %3513 = call float @dx.op.binary.f32(i32 36, float %3511, float 1.000000e+00)  ; FMin(a,b)
  %3514 = call float @dx.op.binary.f32(i32 36, float %3512, float 1.000000e+00)  ; FMin(a,b)
  %3515 = fmul fast float %3513, %295
  %3516 = fmul fast float %3514, %296
  %3517 = fmul fast float %3513, %76
  %3518 = fmul fast float %3514, %23
  %3519 = fadd fast float %3516, %3515
  %3520 = fadd fast float %3518, %3517
  %3521 = extractvalue %dx.types.CBufRet.f32 %3495, 2
  %3522 = fmul fast float %3519, %3521
  %3523 = fmul fast float %3520, %3521
  %3524 = extractvalue %dx.types.CBufRet.f32 %3495, 3
  %3525 = fmul fast float %3524, %2277
  %3526 = fadd fast float %3525, %3522
  %3527 = call float @dx.op.unary.f32(i32 27, float %3523)  ; Round_ni(value)
  %3528 = fsub fast float %3523, %3527
  %3529 = fmul fast float %3528, 2.097152e+06
  %3530 = fadd fast float %3529, %3526
  %3531 = call float @dx.op.unary.f32(i32 27, float %3530)  ; Round_ni(value)
  %3532 = fsub fast float %3526, %3531
  %3533 = fmul fast float %3532, 0x401921FB60000000
  %3534 = fmul fast float %3528, 0x416921FB60000000
  %3535 = fadd fast float %3533, %3534
  %3536 = call float @dx.op.unary.f32(i32 13, float %3535)  ; Sin(value)
  %3537 = fsub fast float %3442, %3478
  %3538 = fsub fast float %3444, %3479
  %3539 = call float @dx.op.binary.f32(i32 35, float %3537, float -1.000000e+00)  ; FMax(a,b)
  %3540 = call float @dx.op.binary.f32(i32 35, float %3538, float -1.000000e+00)  ; FMax(a,b)
  %3541 = call float @dx.op.binary.f32(i32 36, float %3539, float 1.000000e+00)  ; FMin(a,b)
  %3542 = call float @dx.op.binary.f32(i32 36, float %3540, float 1.000000e+00)  ; FMin(a,b)
  %3543 = fmul fast float %3541, %295
  %3544 = fmul fast float %3542, %296
  %3545 = fmul fast float %3541, %76
  %3546 = fmul fast float %3542, %23
  %3547 = fadd fast float %3544, %3543
  %3548 = fadd fast float %3546, %3545
  %3549 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 52)  ; CBufferLoadLegacy(handle,regIndex)
  %3550 = extractvalue %dx.types.CBufRet.f32 %3549, 1
  %3551 = fmul fast float %3547, %3550
  %3552 = fmul fast float %3548, %3550
  %3553 = extractvalue %dx.types.CBufRet.f32 %3549, 2
  %3554 = fmul fast float %3553, %2277
  %3555 = fadd fast float %3554, %3551
  %3556 = call float @dx.op.unary.f32(i32 27, float %3552)  ; Round_ni(value)
  %3557 = fsub fast float %3552, %3556
  %3558 = fmul fast float %3557, 2.097152e+06
  %3559 = fadd fast float %3558, %3555
  %3560 = call float @dx.op.unary.f32(i32 27, float %3559)  ; Round_ni(value)
  %3561 = fsub fast float %3555, %3560
  %3562 = fmul fast float %3561, 0x401921FB60000000
  %3563 = fmul fast float %3557, 0x416921FB60000000
  %3564 = fadd fast float %3562, %3563
  %3565 = call float @dx.op.unary.f32(i32 13, float %3564)  ; Sin(value)
  %3566 = extractvalue %dx.types.CBufRet.f32 %3549, 3
  %3567 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 53)  ; CBufferLoadLegacy(handle,regIndex)
  %3568 = extractvalue %dx.types.CBufRet.f32 %3567, 0
  %3569 = fcmp fast oge float %3566, -1.000000e+00
  %3570 = select i1 %3569, float %3566, float %3568
  %3571 = fadd fast float %3566, 1.000000e+00
  %3572 = call float @dx.op.unary.f32(i32 6, float %3571)  ; FAbs(value)
  %3573 = fcmp fast ogt float %3572, 0x3EE4F8B580000000
  %3574 = select i1 %3573, float %3570, float %3566
  %3575 = extractvalue %dx.types.CBufRet.f32 %3567, 1
  %3576 = fcmp fast oge float %3574, 1.000000e+00
  %3577 = fadd fast float %3574, -1.000000e+00
  %3578 = call float @dx.op.unary.f32(i32 6, float %3577)  ; FAbs(value)
  %3579 = fcmp fast ogt float %3578, 0x3EE4F8B580000000
  %3580 = and i1 %3579, %3576
  %3581 = select i1 %3580, float %3575, float %3566
  %3582 = fcmp fast oge float %3581, 0.000000e+00
  %3583 = select i1 %3582, float 1.000000e+00, float -1.000000e+00
  %3584 = call float @dx.op.unary.f32(i32 6, float %3581)  ; FAbs(value)
  %3585 = fcmp fast ogt float %3584, 0x3EE4F8B580000000
  %3586 = select i1 %3585, float %3583, float 1.000000e+00
  %3587 = call float @dx.op.binary.f32(i32 35, float %3586, float -1.000000e+00)  ; FMax(a,b)
  %3588 = call float @dx.op.binary.f32(i32 36, float %3587, float 1.000000e+00)  ; FMin(a,b)
  %3589 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 54)  ; CBufferLoadLegacy(handle,regIndex)
  %3590 = extractvalue %dx.types.CBufRet.f32 %3589, 2
  %3591 = fadd fast float %3446, %3588
  %3592 = fadd fast float %3447, %3590
  %3593 = call float @dx.op.binary.f32(i32 35, float %3591, float -1.000000e+00)  ; FMax(a,b)
  %3594 = call float @dx.op.binary.f32(i32 35, float %3592, float -1.000000e+00)  ; FMax(a,b)
  %3595 = call float @dx.op.binary.f32(i32 36, float %3593, float 1.000000e+00)  ; FMin(a,b)
  %3596 = call float @dx.op.binary.f32(i32 36, float %3594, float 1.000000e+00)  ; FMin(a,b)
  %3597 = fmul fast float %3595, %295
  %3598 = fmul fast float %3596, %296
  %3599 = fmul fast float %3595, %76
  %3600 = fmul fast float %3596, %23
  %3601 = fadd fast float %3598, %3597
  %3602 = fadd fast float %3600, %3599
  %3603 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 56)  ; CBufferLoadLegacy(handle,regIndex)
  %3604 = extractvalue %dx.types.CBufRet.f32 %3603, 1
  %3605 = fmul fast float %3601, %3604
  %3606 = fmul fast float %3602, %3604
  %3607 = extractvalue %dx.types.CBufRet.f32 %3603, 2
  %3608 = fmul fast float %3607, %2277
  %3609 = fadd fast float %3608, %3605
  %3610 = call float @dx.op.unary.f32(i32 27, float %3606)  ; Round_ni(value)
  %3611 = fsub fast float %3606, %3610
  %3612 = fmul fast float %3611, 2.097152e+06
  %3613 = fadd fast float %3612, %3609
  %3614 = call float @dx.op.unary.f32(i32 27, float %3613)  ; Round_ni(value)
  %3615 = fsub fast float %3609, %3614
  %3616 = fmul fast float %3615, 0x401921FB60000000
  %3617 = fmul fast float %3611, 0x416921FB60000000
  %3618 = fadd fast float %3616, %3617
  %3619 = call float @dx.op.unary.f32(i32 13, float %3618)  ; Sin(value)
  %3620 = fadd fast float %3478, %3588
  %3621 = fadd fast float %3479, %3590
  %3622 = call float @dx.op.binary.f32(i32 35, float %3620, float -1.000000e+00)  ; FMax(a,b)
  %3623 = call float @dx.op.binary.f32(i32 35, float %3621, float -1.000000e+00)  ; FMax(a,b)
  %3624 = call float @dx.op.binary.f32(i32 36, float %3622, float 1.000000e+00)  ; FMin(a,b)
  %3625 = call float @dx.op.binary.f32(i32 36, float %3623, float 1.000000e+00)  ; FMin(a,b)
  %3626 = fmul fast float %3624, %295
  %3627 = fmul fast float %3625, %296
  %3628 = fmul fast float %3624, %76
  %3629 = fmul fast float %3625, %23
  %3630 = fadd fast float %3627, %3626
  %3631 = fadd fast float %3629, %3628
  %3632 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 57)  ; CBufferLoadLegacy(handle,regIndex)
  %3633 = extractvalue %dx.types.CBufRet.f32 %3632, 0
  %3634 = fmul fast float %3630, %3633
  %3635 = fmul fast float %3631, %3633
  %3636 = extractvalue %dx.types.CBufRet.f32 %3632, 1
  %3637 = fmul fast float %3636, %2277
  %3638 = fadd fast float %3637, %3634
  %3639 = call float @dx.op.unary.f32(i32 27, float %3635)  ; Round_ni(value)
  %3640 = fsub fast float %3635, %3639
  %3641 = fmul fast float %3640, 2.097152e+06
  %3642 = fadd fast float %3641, %3638
  %3643 = call float @dx.op.unary.f32(i32 27, float %3642)  ; Round_ni(value)
  %3644 = fsub fast float %3638, %3643
  %3645 = fmul fast float %3644, 0x401921FB60000000
  %3646 = fmul fast float %3640, 0x416921FB60000000
  %3647 = fadd fast float %3645, %3646
  %3648 = call float @dx.op.unary.f32(i32 13, float %3647)  ; Sin(value)
  %3649 = fsub fast float %3588, %3446
  %3650 = fsub fast float %3590, %3447
  %3651 = call float @dx.op.binary.f32(i32 35, float %3649, float -1.000000e+00)  ; FMax(a,b)
  %3652 = call float @dx.op.binary.f32(i32 35, float %3650, float -1.000000e+00)  ; FMax(a,b)
  %3653 = call float @dx.op.binary.f32(i32 36, float %3651, float 1.000000e+00)  ; FMin(a,b)
  %3654 = call float @dx.op.binary.f32(i32 36, float %3652, float 1.000000e+00)  ; FMin(a,b)
  %3655 = fmul fast float %3653, %295
  %3656 = fmul fast float %3654, %296
  %3657 = fmul fast float %3653, %76
  %3658 = fmul fast float %3654, %23
  %3659 = fadd fast float %3656, %3655
  %3660 = fadd fast float %3658, %3657
  %3661 = extractvalue %dx.types.CBufRet.f32 %3632, 3
  %3662 = fmul fast float %3659, %3661
  %3663 = fmul fast float %3660, %3661
  %3664 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 58)  ; CBufferLoadLegacy(handle,regIndex)
  %3665 = extractvalue %dx.types.CBufRet.f32 %3664, 0
  %3666 = fmul fast float %3665, %2277
  %3667 = fadd fast float %3666, %3662
  %3668 = call float @dx.op.unary.f32(i32 27, float %3663)  ; Round_ni(value)
  %3669 = fsub fast float %3663, %3668
  %3670 = fmul fast float %3669, 2.097152e+06
  %3671 = fadd fast float %3670, %3667
  %3672 = call float @dx.op.unary.f32(i32 27, float %3671)  ; Round_ni(value)
  %3673 = fsub fast float %3667, %3672
  %3674 = fmul fast float %3673, 0x401921FB60000000
  %3675 = fmul fast float %3669, 0x416921FB60000000
  %3676 = fadd fast float %3674, %3675
  %3677 = call float @dx.op.unary.f32(i32 13, float %3676)  ; Sin(value)
  %3678 = fsub fast float %3588, %3478
  %3679 = fsub fast float %3590, %3479
  %3680 = call float @dx.op.binary.f32(i32 35, float %3678, float -1.000000e+00)  ; FMax(a,b)
  %3681 = call float @dx.op.binary.f32(i32 35, float %3679, float -1.000000e+00)  ; FMax(a,b)
  %3682 = call float @dx.op.binary.f32(i32 36, float %3680, float 1.000000e+00)  ; FMin(a,b)
  %3683 = call float @dx.op.binary.f32(i32 36, float %3681, float 1.000000e+00)  ; FMin(a,b)
  %3684 = fmul fast float %3682, %295
  %3685 = fmul fast float %3683, %296
  %3686 = fmul fast float %3682, %76
  %3687 = fmul fast float %3683, %23
  %3688 = fadd fast float %3685, %3684
  %3689 = fadd fast float %3687, %3686
  %3690 = extractvalue %dx.types.CBufRet.f32 %3664, 2
  %3691 = fmul fast float %3688, %3690
  %3692 = fmul fast float %3689, %3690
  %3693 = extractvalue %dx.types.CBufRet.f32 %3664, 3
  %3694 = fmul fast float %3693, %2277
  %3695 = fadd fast float %3694, %3691
  %3696 = call float @dx.op.unary.f32(i32 27, float %3692)  ; Round_ni(value)
  %3697 = fsub fast float %3692, %3696
  %3698 = fmul fast float %3697, 2.097152e+06
  %3699 = fadd fast float %3698, %3695
  %3700 = call float @dx.op.unary.f32(i32 27, float %3699)  ; Round_ni(value)
  %3701 = fsub fast float %3695, %3700
  %3702 = fmul fast float %3701, 0x401921FB60000000
  %3703 = fmul fast float %3697, 0x416921FB60000000
  %3704 = fadd fast float %3702, %3703
  %3705 = call float @dx.op.unary.f32(i32 13, float %3704)  ; Sin(value)
  %3706 = fadd fast float %3279, %3138
  %3707 = fadd fast float %3706, %3565
  %3708 = fadd fast float %3707, %3705
  %3709 = fmul fast float %3128, %3708
  %3710 = fadd fast float %3250, %3108
  %3711 = fadd fast float %3710, %3536
  %3712 = fadd fast float %3711, %3677
  %3713 = fmul fast float %3712, %3098
  %3714 = fadd fast float %3221, %3078
  %3715 = fadd fast float %3714, %3508
  %3716 = fadd fast float %3715, %3648
  %3717 = fmul fast float %3716, %3068
  %3718 = fadd fast float %3192, %3048
  %3719 = fadd fast float %3718, %3476
  %3720 = fadd fast float %3719, %3619
  %3721 = fmul fast float %3720, %3038
  %3722 = fadd fast float %3419, %2991
  %3723 = fmul fast float %2981, %3722
  %3724 = fadd fast float %3390, %2960
  %3725 = fmul fast float %3724, %2950
  %3726 = fadd fast float %3361, %2930
  %3727 = fmul fast float %3726, %2920
  %3728 = fadd fast float %3333, %2895
  %3729 = fadd fast float %3713, %3709
  %3730 = fadd fast float %3729, %3717
  %3731 = fadd fast float %3730, %3721
  %3732 = fadd fast float %3731, %3723
  %3733 = fadd fast float %3732, %3725
  %3734 = fadd fast float %3733, %3727
  %3735 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 59)  ; CBufferLoadLegacy(handle,regIndex)
  %3736 = extractvalue %dx.types.CBufRet.f32 %3735, 0
  %3737 = extractvalue %dx.types.CBufRet.f32 %3735, 1
  %3738 = extractvalue %dx.types.CBufRet.f32 %3735, 2
  %3739 = fcmp fast oge float %3737, -1.000000e+00
  %3740 = select i1 %3739, float %3737, float %3738
  %3741 = fadd fast float %3737, 1.000000e+00
  %3742 = call float @dx.op.unary.f32(i32 6, float %3741)  ; FAbs(value)
  %3743 = fcmp fast ogt float %3742, 0x3EE4F8B580000000
  %3744 = select i1 %3743, float %3740, float %3737
  %3745 = extractvalue %dx.types.CBufRet.f32 %3735, 3
  %3746 = fcmp fast oge float %3744, 1.000000e+00
  %3747 = fadd fast float %3744, -1.000000e+00
  %3748 = call float @dx.op.unary.f32(i32 6, float %3747)  ; FAbs(value)
  %3749 = fcmp fast ogt float %3748, 0x3EE4F8B580000000
  %3750 = and i1 %3749, %3746
  %3751 = select i1 %3750, float %3745, float %3737
  %3752 = fcmp fast oge float %3751, 0.000000e+00
  %3753 = select i1 %3752, float 1.000000e+00, float -1.000000e+00
  %3754 = call float @dx.op.unary.f32(i32 6, float %3751)  ; FAbs(value)
  %3755 = fcmp fast ogt float %3754, 0x3EE4F8B580000000
  %3756 = select i1 %3755, float %3753, float 1.000000e+00
  %3757 = call float @dx.op.binary.f32(i32 35, float %3756, float -1.000000e+00)  ; FMax(a,b)
  %3758 = call float @dx.op.binary.f32(i32 36, float %3757, float 1.000000e+00)  ; FMin(a,b)
  %3759 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 61)  ; CBufferLoadLegacy(handle,regIndex)
  %3760 = extractvalue %dx.types.CBufRet.f32 %3759, 0
  %3761 = fadd fast float %3446, %3758
  %3762 = fadd fast float %3447, %3760
  %3763 = call float @dx.op.binary.f32(i32 35, float %3761, float -1.000000e+00)  ; FMax(a,b)
  %3764 = call float @dx.op.binary.f32(i32 35, float %3762, float -1.000000e+00)  ; FMax(a,b)
  %3765 = call float @dx.op.binary.f32(i32 36, float %3763, float 1.000000e+00)  ; FMin(a,b)
  %3766 = call float @dx.op.binary.f32(i32 36, float %3764, float 1.000000e+00)  ; FMin(a,b)
  %3767 = fmul fast float %3765, %295
  %3768 = fmul fast float %3766, %296
  %3769 = fmul fast float %3765, %76
  %3770 = fadd fast float %3768, %3767
  %3771 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 62)  ; CBufferLoadLegacy(handle,regIndex)
  %3772 = extractvalue %dx.types.CBufRet.f32 %3771, 1
  %3773 = fmul fast float %3772, %452
  %3774 = extractvalue %dx.types.CBufRet.f32 %3771, 2
  %3775 = fmul fast float %3774, %3773
  %3776 = fdiv fast float 2.000000e+00, %3775
  %3777 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 63)  ; CBufferLoadLegacy(handle,regIndex)
  %3778 = extractvalue %dx.types.CBufRet.f32 %3777, 0
  %3779 = fmul fast float %3778, %295
  %3780 = fmul fast float %3778, %296
  %3781 = fmul fast float %3778, %297
  %3782 = fmul fast float %3778, %76
  %3783 = fmul fast float %3778, %23
  %3784 = fmul fast float %3778, %77
  %3785 = extractvalue %dx.types.CBufRet.f32 %3777, 1
  %3786 = fmul fast float %3779, %3785
  %3787 = fmul fast float %3780, %3785
  %3788 = fmul fast float %3781, %3785
  %3789 = fmul fast float %3782, %3785
  %3790 = fmul fast float %3783, %3785
  %3791 = fmul fast float %3784, %3785
  %3792 = fdiv fast float 1.000000e+00, %452
  %3793 = fmul fast float %3786, %3792
  %3794 = fmul fast float %3787, %3792
  %3795 = fmul fast float %3788, %3792
  %3796 = fmul fast float %3789, %3792
  %3797 = fmul fast float %3790, %3792
  %3798 = fmul fast float %3791, %3792
  %3799 = extractvalue %dx.types.CBufRet.f32 %3777, 3
  %3800 = fmul fast float %3799, %932
  %3801 = fadd fast float %3800, %3795
  %3802 = fmul fast float %3793, 0x3EA0000000000000
  %3803 = fmul fast float %3794, 0x3EA0000000000000
  %3804 = fmul fast float %3801, 0x3EA0000000000000
  %3805 = fadd fast float %3796, 5.000000e-01
  %3806 = fadd fast float %3805, %3802
  %3807 = fadd fast float %3797, 5.000000e-01
  %3808 = fadd fast float %3807, %3803
  %3809 = fadd fast float %3798, 5.000000e-01
  %3810 = fadd fast float %3809, %3804
  %3811 = call float @dx.op.unary.f32(i32 27, float %3806)  ; Round_ni(value)
  %3812 = call float @dx.op.unary.f32(i32 27, float %3808)  ; Round_ni(value)
  %3813 = call float @dx.op.unary.f32(i32 27, float %3810)  ; Round_ni(value)
  %3814 = fsub fast float %3796, %3811
  %3815 = fsub fast float %3797, %3812
  %3816 = fsub fast float %3798, %3813
  %3817 = fmul fast float %3814, 2.097152e+06
  %3818 = fmul fast float %3815, 2.097152e+06
  %3819 = fmul fast float %3816, 2.097152e+06
  %3820 = fadd fast float %3817, %3793
  %3821 = fadd fast float %3818, %3794
  %3822 = fadd fast float %3819, %3801
  br label %3823

; <label>:3823                                    ; preds = %3823, %2873
  %3824 = phi float [ %3820, %2873 ], [ %4075, %3823 ]
  %3825 = phi float [ %3821, %2873 ], [ %4076, %3823 ]
  %3826 = phi float [ %3822, %2873 ], [ %4077, %3823 ]
  %3827 = phi float [ 0.000000e+00, %2873 ], [ %4074, %3823 ]
  %3828 = phi float [ 1.000000e+00, %2873 ], [ %4078, %3823 ]
  %3829 = phi i32 [ 0, %2873 ], [ %4079, %3823 ]
  %3830 = call float @dx.op.unary.f32(i32 22, float %3824)  ; Frc(value)
  %3831 = call float @dx.op.unary.f32(i32 22, float %3825)  ; Frc(value)
  %3832 = call float @dx.op.unary.f32(i32 22, float %3826)  ; Frc(value)
  %3833 = call float @dx.op.unary.f32(i32 27, float %3824)  ; Round_ni(value)
  %3834 = call float @dx.op.unary.f32(i32 27, float %3825)  ; Round_ni(value)
  %3835 = call float @dx.op.unary.f32(i32 27, float %3826)  ; Round_ni(value)
  %3836 = call float @dx.op.dot3.f32(i32 55, float %3833, float %3834, float %3835, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %3837 = fadd fast float %3836, 1.900000e+01
  %3838 = fadd fast float %3836, 4.700000e+01
  %3839 = fadd fast float %3836, 6.600000e+01
  %3840 = fadd fast float %3836, 1.010000e+02
  %3841 = fadd fast float %3836, 1.200000e+02
  %3842 = fadd fast float %3836, 1.480000e+02
  %3843 = fadd fast float %3836, 1.670000e+02
  %3844 = fptosi float %3836 to i32
  %3845 = mul i32 %3844, 1664525
  %3846 = add i32 %3845, -781160288
  %3847 = mul i32 %3846, 1013904223
  %3848 = add i32 %3847, 1013904223
  %3849 = mul i32 %3848, %3846
  %3850 = add i32 %3849, 1013904223
  %3851 = mul i32 %3850, %3848
  %3852 = add i32 %3851, %3846
  %3853 = lshr i32 %3852, 16
  %3854 = and i32 %3853, 32768
  %3855 = and i32 %3853, 16384
  %3856 = and i32 %3853, 8192
  %3857 = uitofp i32 %3854 to float
  %3858 = uitofp i32 %3855 to float
  %3859 = uitofp i32 %3856 to float
  %3860 = fmul fast float %3857, 0x3F10000000000000
  %3861 = fmul fast float %3858, 0x3F20000000000000
  %3862 = fmul fast float %3859, 0x3F30000000000000
  %3863 = fadd fast float %3860, -1.000000e+00
  %3864 = fadd fast float %3861, -1.000000e+00
  %3865 = fadd fast float %3862, -1.000000e+00
  %3866 = call float @dx.op.dot3.f32(i32 55, float %3863, float %3864, float %3865, float %3830, float %3831, float %3832)  ; Dot3(ax,ay,az,bx,by,bz)
  %3867 = fadd fast float %3830, -1.000000e+00
  %3868 = fptosi float %3837 to i32
  %3869 = mul i32 %3868, 1664525
  %3870 = add i32 %3869, -781160288
  %3871 = mul i32 %3870, 1013904223
  %3872 = add i32 %3871, 1013904223
  %3873 = mul i32 %3872, %3870
  %3874 = add i32 %3873, 1013904223
  %3875 = mul i32 %3874, %3872
  %3876 = add i32 %3875, %3870
  %3877 = lshr i32 %3876, 16
  %3878 = and i32 %3877, 32768
  %3879 = and i32 %3877, 16384
  %3880 = and i32 %3877, 8192
  %3881 = uitofp i32 %3878 to float
  %3882 = uitofp i32 %3879 to float
  %3883 = uitofp i32 %3880 to float
  %3884 = fmul fast float %3881, 0x3F10000000000000
  %3885 = fmul fast float %3882, 0x3F20000000000000
  %3886 = fmul fast float %3883, 0x3F30000000000000
  %3887 = fadd fast float %3884, -1.000000e+00
  %3888 = fadd fast float %3885, -1.000000e+00
  %3889 = fadd fast float %3886, -1.000000e+00
  %3890 = call float @dx.op.dot3.f32(i32 55, float %3887, float %3888, float %3889, float %3867, float %3831, float %3832)  ; Dot3(ax,ay,az,bx,by,bz)
  %3891 = fadd fast float %3831, -1.000000e+00
  %3892 = fptosi float %3838 to i32
  %3893 = mul i32 %3892, 1664525
  %3894 = add i32 %3893, -781160288
  %3895 = mul i32 %3894, 1013904223
  %3896 = add i32 %3895, 1013904223
  %3897 = mul i32 %3896, %3894
  %3898 = add i32 %3897, 1013904223
  %3899 = mul i32 %3898, %3896
  %3900 = add i32 %3899, %3894
  %3901 = lshr i32 %3900, 16
  %3902 = and i32 %3901, 32768
  %3903 = and i32 %3901, 16384
  %3904 = and i32 %3901, 8192
  %3905 = uitofp i32 %3902 to float
  %3906 = uitofp i32 %3903 to float
  %3907 = uitofp i32 %3904 to float
  %3908 = fmul fast float %3905, 0x3F10000000000000
  %3909 = fmul fast float %3906, 0x3F20000000000000
  %3910 = fmul fast float %3907, 0x3F30000000000000
  %3911 = fadd fast float %3908, -1.000000e+00
  %3912 = fadd fast float %3909, -1.000000e+00
  %3913 = fadd fast float %3910, -1.000000e+00
  %3914 = call float @dx.op.dot3.f32(i32 55, float %3911, float %3912, float %3913, float %3830, float %3891, float %3832)  ; Dot3(ax,ay,az,bx,by,bz)
  %3915 = fptosi float %3839 to i32
  %3916 = mul i32 %3915, 1664525
  %3917 = add i32 %3916, -781160288
  %3918 = mul i32 %3917, 1013904223
  %3919 = add i32 %3918, 1013904223
  %3920 = mul i32 %3919, %3917
  %3921 = add i32 %3920, 1013904223
  %3922 = mul i32 %3921, %3919
  %3923 = add i32 %3922, %3917
  %3924 = lshr i32 %3923, 16
  %3925 = and i32 %3924, 32768
  %3926 = and i32 %3924, 16384
  %3927 = and i32 %3924, 8192
  %3928 = uitofp i32 %3925 to float
  %3929 = uitofp i32 %3926 to float
  %3930 = uitofp i32 %3927 to float
  %3931 = fmul fast float %3928, 0x3F10000000000000
  %3932 = fmul fast float %3929, 0x3F20000000000000
  %3933 = fmul fast float %3930, 0x3F30000000000000
  %3934 = fadd fast float %3931, -1.000000e+00
  %3935 = fadd fast float %3932, -1.000000e+00
  %3936 = fadd fast float %3933, -1.000000e+00
  %3937 = call float @dx.op.dot3.f32(i32 55, float %3934, float %3935, float %3936, float %3867, float %3891, float %3832)  ; Dot3(ax,ay,az,bx,by,bz)
  %3938 = fadd fast float %3832, -1.000000e+00
  %3939 = fptosi float %3840 to i32
  %3940 = mul i32 %3939, 1664525
  %3941 = add i32 %3940, -781160288
  %3942 = mul i32 %3941, 1013904223
  %3943 = add i32 %3942, 1013904223
  %3944 = mul i32 %3943, %3941
  %3945 = add i32 %3944, 1013904223
  %3946 = mul i32 %3945, %3943
  %3947 = add i32 %3946, %3941
  %3948 = lshr i32 %3947, 16
  %3949 = and i32 %3948, 32768
  %3950 = and i32 %3948, 16384
  %3951 = and i32 %3948, 8192
  %3952 = uitofp i32 %3949 to float
  %3953 = uitofp i32 %3950 to float
  %3954 = uitofp i32 %3951 to float
  %3955 = fmul fast float %3952, 0x3F10000000000000
  %3956 = fmul fast float %3953, 0x3F20000000000000
  %3957 = fmul fast float %3954, 0x3F30000000000000
  %3958 = fadd fast float %3955, -1.000000e+00
  %3959 = fadd fast float %3956, -1.000000e+00
  %3960 = fadd fast float %3957, -1.000000e+00
  %3961 = call float @dx.op.dot3.f32(i32 55, float %3958, float %3959, float %3960, float %3830, float %3831, float %3938)  ; Dot3(ax,ay,az,bx,by,bz)
  %3962 = fptosi float %3841 to i32
  %3963 = mul i32 %3962, 1664525
  %3964 = add i32 %3963, -781160288
  %3965 = mul i32 %3964, 1013904223
  %3966 = add i32 %3965, 1013904223
  %3967 = mul i32 %3966, %3964
  %3968 = add i32 %3967, 1013904223
  %3969 = mul i32 %3968, %3966
  %3970 = add i32 %3969, %3964
  %3971 = lshr i32 %3970, 16
  %3972 = and i32 %3971, 32768
  %3973 = and i32 %3971, 16384
  %3974 = and i32 %3971, 8192
  %3975 = uitofp i32 %3972 to float
  %3976 = uitofp i32 %3973 to float
  %3977 = uitofp i32 %3974 to float
  %3978 = fmul fast float %3975, 0x3F10000000000000
  %3979 = fmul fast float %3976, 0x3F20000000000000
  %3980 = fmul fast float %3977, 0x3F30000000000000
  %3981 = fadd fast float %3978, -1.000000e+00
  %3982 = fadd fast float %3979, -1.000000e+00
  %3983 = fadd fast float %3980, -1.000000e+00
  %3984 = call float @dx.op.dot3.f32(i32 55, float %3981, float %3982, float %3983, float %3867, float %3831, float %3938)  ; Dot3(ax,ay,az,bx,by,bz)
  %3985 = fptosi float %3842 to i32
  %3986 = mul i32 %3985, 1664525
  %3987 = add i32 %3986, -781160288
  %3988 = mul i32 %3987, 1013904223
  %3989 = add i32 %3988, 1013904223
  %3990 = mul i32 %3989, %3987
  %3991 = add i32 %3990, 1013904223
  %3992 = mul i32 %3991, %3989
  %3993 = add i32 %3992, %3987
  %3994 = lshr i32 %3993, 16
  %3995 = and i32 %3994, 32768
  %3996 = and i32 %3994, 16384
  %3997 = and i32 %3994, 8192
  %3998 = uitofp i32 %3995 to float
  %3999 = uitofp i32 %3996 to float
  %4000 = uitofp i32 %3997 to float
  %4001 = fmul fast float %3998, 0x3F10000000000000
  %4002 = fmul fast float %3999, 0x3F20000000000000
  %4003 = fmul fast float %4000, 0x3F30000000000000
  %4004 = fadd fast float %4001, -1.000000e+00
  %4005 = fadd fast float %4002, -1.000000e+00
  %4006 = fadd fast float %4003, -1.000000e+00
  %4007 = call float @dx.op.dot3.f32(i32 55, float %4004, float %4005, float %4006, float %3830, float %3891, float %3938)  ; Dot3(ax,ay,az,bx,by,bz)
  %4008 = fptosi float %3843 to i32
  %4009 = mul i32 %4008, 1664525
  %4010 = add i32 %4009, -781160288
  %4011 = mul i32 %4010, 1013904223
  %4012 = add i32 %4011, 1013904223
  %4013 = mul i32 %4012, %4010
  %4014 = add i32 %4013, 1013904223
  %4015 = mul i32 %4014, %4012
  %4016 = add i32 %4015, %4010
  %4017 = lshr i32 %4016, 16
  %4018 = and i32 %4017, 32768
  %4019 = and i32 %4017, 16384
  %4020 = and i32 %4017, 8192
  %4021 = uitofp i32 %4018 to float
  %4022 = uitofp i32 %4019 to float
  %4023 = uitofp i32 %4020 to float
  %4024 = fmul fast float %4021, 0x3F10000000000000
  %4025 = fmul fast float %4022, 0x3F20000000000000
  %4026 = fmul fast float %4023, 0x3F30000000000000
  %4027 = fadd fast float %4024, -1.000000e+00
  %4028 = fadd fast float %4025, -1.000000e+00
  %4029 = fadd fast float %4026, -1.000000e+00
  %4030 = call float @dx.op.dot3.f32(i32 55, float %4027, float %4028, float %4029, float %3867, float %3891, float %3938)  ; Dot3(ax,ay,az,bx,by,bz)
  %4031 = fmul fast float %3830, %3830
  %4032 = fmul fast float %3831, %3831
  %4033 = fmul fast float %3832, %3832
  %4034 = fmul fast float %4031, %3830
  %4035 = fmul fast float %4032, %3831
  %4036 = fmul fast float %4033, %3832
  %4037 = fmul fast float %3830, 6.000000e+00
  %4038 = fmul fast float %3831, 6.000000e+00
  %4039 = fmul fast float %3832, 6.000000e+00
  %4040 = fadd fast float %4037, -1.500000e+01
  %4041 = fadd fast float %4038, -1.500000e+01
  %4042 = fadd fast float %4039, -1.500000e+01
  %4043 = fmul fast float %4040, %3830
  %4044 = fmul fast float %4041, %3831
  %4045 = fmul fast float %4042, %3832
  %4046 = fadd fast float %4043, 1.000000e+01
  %4047 = fadd fast float %4044, 1.000000e+01
  %4048 = fadd fast float %4045, 1.000000e+01
  %4049 = fmul fast float %4034, %4046
  %4050 = fmul fast float %4035, %4047
  %4051 = fmul fast float %4036, %4048
  %4052 = fsub fast float %3937, %3914
  %4053 = fmul fast float %4052, %4049
  %4054 = fsub fast float %3890, %3866
  %4055 = fmul fast float %4054, %4049
  %4056 = fadd fast float %4055, %3866
  %4057 = fsub fast float %3914, %4056
  %4058 = fadd fast float %4057, %4053
  %4059 = fmul fast float %4058, %4050
  %4060 = fadd fast float %4059, %4056
  %4061 = fsub fast float %4030, %4007
  %4062 = fmul fast float %4061, %4049
  %4063 = fsub fast float %3984, %3961
  %4064 = fmul fast float %4063, %4049
  %4065 = fadd fast float %4064, %3961
  %4066 = fsub fast float %4007, %4065
  %4067 = fadd fast float %4066, %4062
  %4068 = fmul fast float %4067, %4050
  %4069 = fsub fast float %4065, %4060
  %4070 = fadd fast float %4069, %4068
  %4071 = fmul fast float %4051, %4070
  %4072 = fadd fast float %4071, %4060
  %4073 = fmul fast float %4072, %3828
  %4074 = fadd fast float %4073, %3827
  %4075 = fmul fast float %3824, 2.000000e+00
  %4076 = fmul fast float %3825, 2.000000e+00
  %4077 = fmul fast float %3826, 2.000000e+00
  %4078 = fmul fast float %3828, 5.000000e-01
  %4079 = add nuw nsw i32 %3829, 1
  %4080 = icmp eq i32 %4079, 6
  br i1 %4080, label %4081, label %3823, !llvm.loop !60

; <label>:4081                                    ; preds = %3823
  %4082 = fmul fast float %3728, %2885
  %4083 = fadd fast float %3734, %4082
  %4084 = fmul fast float %3736, %4083
  %4085 = fmul fast float %3766, %23
  %4086 = fadd fast float %4085, %3769
  %4087 = fmul fast float %3776, %4086
  %4088 = extractvalue %dx.types.CBufRet.f32 %3771, 3
  %4089 = fmul fast float %4074, 5.000000e-01
  %4090 = fadd fast float %4089, 5.000000e-01
  %4091 = call float @dx.op.unary.f32(i32 7, float %4090)  ; Saturate(value)
  %4092 = fmul fast float %4091, %2272
  %4093 = fsub fast float %932, %4092
  %4094 = fmul fast float %4093, %4088
  %4095 = fadd fast float %4094, %3770
  %4096 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %4097 = extractvalue %dx.types.CBufRet.f32 %4096, 0
  %4098 = extractvalue %dx.types.CBufRet.f32 %4096, 2
  %4099 = extractvalue %dx.types.CBufRet.f32 %4096, 3
  %4100 = fmul fast float %3792, %295
  %4101 = fmul fast float %4100, %4098
  %4102 = fmul fast float %4101, %4099
  %4103 = fmul fast float %3792, %296
  %4104 = fmul fast float %4103, %4098
  %4105 = fmul fast float %4104, %4099
  %4106 = fmul fast float %3792, %297
  %4107 = fmul fast float %4106, %4098
  %4108 = fmul fast float %4107, %4099
  %4109 = fmul fast float %3792, %76
  %4110 = fmul fast float %4109, %4098
  %4111 = fmul fast float %4110, %4099
  %4112 = fmul fast float %3792, %23
  %4113 = fmul fast float %4112, %4098
  %4114 = fmul fast float %4113, %4099
  %4115 = fmul fast float %3792, %77
  %4116 = fmul fast float %4115, %4098
  %4117 = fmul fast float %4116, %4099
  %4118 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %4119 = extractvalue %dx.types.CBufRet.f32 %4118, 1
  %4120 = fmul fast float %4119, %932
  %4121 = fadd fast float %4120, %4108
  %4122 = fmul fast float %4102, 0x3EA0000000000000
  %4123 = fmul fast float %4105, 0x3EA0000000000000
  %4124 = fmul fast float %4121, 0x3EA0000000000000
  %4125 = fadd fast float %4111, 5.000000e-01
  %4126 = fadd fast float %4125, %4122
  %4127 = fadd fast float %4114, 5.000000e-01
  %4128 = fadd fast float %4127, %4123
  %4129 = fadd fast float %4117, 5.000000e-01
  %4130 = fadd fast float %4129, %4124
  %4131 = call float @dx.op.unary.f32(i32 27, float %4126)  ; Round_ni(value)
  %4132 = call float @dx.op.unary.f32(i32 27, float %4128)  ; Round_ni(value)
  %4133 = call float @dx.op.unary.f32(i32 27, float %4130)  ; Round_ni(value)
  %4134 = fsub fast float %4111, %4131
  %4135 = fsub fast float %4114, %4132
  %4136 = fsub fast float %4117, %4133
  %4137 = fmul fast float %4134, 2.097152e+06
  %4138 = fmul fast float %4135, 2.097152e+06
  %4139 = fmul fast float %4136, 2.097152e+06
  %4140 = fadd fast float %4137, %4102
  %4141 = fadd fast float %4138, %4105
  %4142 = fadd fast float %4139, %4121
  br label %4143

; <label>:4143                                    ; preds = %4143, %4081
  %4144 = phi float [ %4140, %4081 ], [ %4396, %4143 ]
  %4145 = phi float [ %4141, %4081 ], [ %4397, %4143 ]
  %4146 = phi float [ %4142, %4081 ], [ %4398, %4143 ]
  %4147 = phi float [ 0.000000e+00, %4081 ], [ %4395, %4143 ]
  %4148 = phi float [ 1.000000e+00, %4081 ], [ %4399, %4143 ]
  %4149 = phi i32 [ 0, %4081 ], [ %4400, %4143 ]
  %4150 = call float @dx.op.unary.f32(i32 22, float %4144)  ; Frc(value)
  %4151 = call float @dx.op.unary.f32(i32 22, float %4145)  ; Frc(value)
  %4152 = call float @dx.op.unary.f32(i32 22, float %4146)  ; Frc(value)
  %4153 = call float @dx.op.unary.f32(i32 27, float %4144)  ; Round_ni(value)
  %4154 = call float @dx.op.unary.f32(i32 27, float %4145)  ; Round_ni(value)
  %4155 = call float @dx.op.unary.f32(i32 27, float %4146)  ; Round_ni(value)
  %4156 = call float @dx.op.dot3.f32(i32 55, float %4153, float %4154, float %4155, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %4157 = fadd fast float %4156, 1.900000e+01
  %4158 = fadd fast float %4156, 4.700000e+01
  %4159 = fadd fast float %4156, 6.600000e+01
  %4160 = fadd fast float %4156, 1.010000e+02
  %4161 = fadd fast float %4156, 1.200000e+02
  %4162 = fadd fast float %4156, 1.480000e+02
  %4163 = fadd fast float %4156, 1.670000e+02
  %4164 = fptosi float %4156 to i32
  %4165 = mul i32 %4164, 1664525
  %4166 = add i32 %4165, -781160288
  %4167 = mul i32 %4166, 1013904223
  %4168 = add i32 %4167, 1013904223
  %4169 = mul i32 %4168, %4166
  %4170 = add i32 %4169, 1013904223
  %4171 = mul i32 %4170, %4168
  %4172 = add i32 %4171, %4166
  %4173 = lshr i32 %4172, 16
  %4174 = and i32 %4173, 32768
  %4175 = and i32 %4173, 16384
  %4176 = and i32 %4173, 8192
  %4177 = uitofp i32 %4174 to float
  %4178 = uitofp i32 %4175 to float
  %4179 = uitofp i32 %4176 to float
  %4180 = fmul fast float %4177, 0x3F10000000000000
  %4181 = fmul fast float %4178, 0x3F20000000000000
  %4182 = fmul fast float %4179, 0x3F30000000000000
  %4183 = fadd fast float %4180, -1.000000e+00
  %4184 = fadd fast float %4181, -1.000000e+00
  %4185 = fadd fast float %4182, -1.000000e+00
  %4186 = call float @dx.op.dot3.f32(i32 55, float %4183, float %4184, float %4185, float %4150, float %4151, float %4152)  ; Dot3(ax,ay,az,bx,by,bz)
  %4187 = fadd fast float %4150, -1.000000e+00
  %4188 = fptosi float %4157 to i32
  %4189 = mul i32 %4188, 1664525
  %4190 = add i32 %4189, -781160288
  %4191 = mul i32 %4190, 1013904223
  %4192 = add i32 %4191, 1013904223
  %4193 = mul i32 %4192, %4190
  %4194 = add i32 %4193, 1013904223
  %4195 = mul i32 %4194, %4192
  %4196 = add i32 %4195, %4190
  %4197 = lshr i32 %4196, 16
  %4198 = and i32 %4197, 32768
  %4199 = and i32 %4197, 16384
  %4200 = and i32 %4197, 8192
  %4201 = uitofp i32 %4198 to float
  %4202 = uitofp i32 %4199 to float
  %4203 = uitofp i32 %4200 to float
  %4204 = fmul fast float %4201, 0x3F10000000000000
  %4205 = fmul fast float %4202, 0x3F20000000000000
  %4206 = fmul fast float %4203, 0x3F30000000000000
  %4207 = fadd fast float %4204, -1.000000e+00
  %4208 = fadd fast float %4205, -1.000000e+00
  %4209 = fadd fast float %4206, -1.000000e+00
  %4210 = call float @dx.op.dot3.f32(i32 55, float %4207, float %4208, float %4209, float %4187, float %4151, float %4152)  ; Dot3(ax,ay,az,bx,by,bz)
  %4211 = fadd fast float %4151, -1.000000e+00
  %4212 = fptosi float %4158 to i32
  %4213 = mul i32 %4212, 1664525
  %4214 = add i32 %4213, -781160288
  %4215 = mul i32 %4214, 1013904223
  %4216 = add i32 %4215, 1013904223
  %4217 = mul i32 %4216, %4214
  %4218 = add i32 %4217, 1013904223
  %4219 = mul i32 %4218, %4216
  %4220 = add i32 %4219, %4214
  %4221 = lshr i32 %4220, 16
  %4222 = and i32 %4221, 32768
  %4223 = and i32 %4221, 16384
  %4224 = and i32 %4221, 8192
  %4225 = uitofp i32 %4222 to float
  %4226 = uitofp i32 %4223 to float
  %4227 = uitofp i32 %4224 to float
  %4228 = fmul fast float %4225, 0x3F10000000000000
  %4229 = fmul fast float %4226, 0x3F20000000000000
  %4230 = fmul fast float %4227, 0x3F30000000000000
  %4231 = fadd fast float %4228, -1.000000e+00
  %4232 = fadd fast float %4229, -1.000000e+00
  %4233 = fadd fast float %4230, -1.000000e+00
  %4234 = call float @dx.op.dot3.f32(i32 55, float %4231, float %4232, float %4233, float %4150, float %4211, float %4152)  ; Dot3(ax,ay,az,bx,by,bz)
  %4235 = fptosi float %4159 to i32
  %4236 = mul i32 %4235, 1664525
  %4237 = add i32 %4236, -781160288
  %4238 = mul i32 %4237, 1013904223
  %4239 = add i32 %4238, 1013904223
  %4240 = mul i32 %4239, %4237
  %4241 = add i32 %4240, 1013904223
  %4242 = mul i32 %4241, %4239
  %4243 = add i32 %4242, %4237
  %4244 = lshr i32 %4243, 16
  %4245 = and i32 %4244, 32768
  %4246 = and i32 %4244, 16384
  %4247 = and i32 %4244, 8192
  %4248 = uitofp i32 %4245 to float
  %4249 = uitofp i32 %4246 to float
  %4250 = uitofp i32 %4247 to float
  %4251 = fmul fast float %4248, 0x3F10000000000000
  %4252 = fmul fast float %4249, 0x3F20000000000000
  %4253 = fmul fast float %4250, 0x3F30000000000000
  %4254 = fadd fast float %4251, -1.000000e+00
  %4255 = fadd fast float %4252, -1.000000e+00
  %4256 = fadd fast float %4253, -1.000000e+00
  %4257 = call float @dx.op.dot3.f32(i32 55, float %4254, float %4255, float %4256, float %4187, float %4211, float %4152)  ; Dot3(ax,ay,az,bx,by,bz)
  %4258 = fadd fast float %4152, -1.000000e+00
  %4259 = fptosi float %4160 to i32
  %4260 = mul i32 %4259, 1664525
  %4261 = add i32 %4260, -781160288
  %4262 = mul i32 %4261, 1013904223
  %4263 = add i32 %4262, 1013904223
  %4264 = mul i32 %4263, %4261
  %4265 = add i32 %4264, 1013904223
  %4266 = mul i32 %4265, %4263
  %4267 = add i32 %4266, %4261
  %4268 = lshr i32 %4267, 16
  %4269 = and i32 %4268, 32768
  %4270 = and i32 %4268, 16384
  %4271 = and i32 %4268, 8192
  %4272 = uitofp i32 %4269 to float
  %4273 = uitofp i32 %4270 to float
  %4274 = uitofp i32 %4271 to float
  %4275 = fmul fast float %4272, 0x3F10000000000000
  %4276 = fmul fast float %4273, 0x3F20000000000000
  %4277 = fmul fast float %4274, 0x3F30000000000000
  %4278 = fadd fast float %4275, -1.000000e+00
  %4279 = fadd fast float %4276, -1.000000e+00
  %4280 = fadd fast float %4277, -1.000000e+00
  %4281 = call float @dx.op.dot3.f32(i32 55, float %4278, float %4279, float %4280, float %4150, float %4151, float %4258)  ; Dot3(ax,ay,az,bx,by,bz)
  %4282 = fptosi float %4161 to i32
  %4283 = mul i32 %4282, 1664525
  %4284 = add i32 %4283, -781160288
  %4285 = mul i32 %4284, 1013904223
  %4286 = add i32 %4285, 1013904223
  %4287 = mul i32 %4286, %4284
  %4288 = add i32 %4287, 1013904223
  %4289 = mul i32 %4288, %4286
  %4290 = add i32 %4289, %4284
  %4291 = lshr i32 %4290, 16
  %4292 = and i32 %4291, 32768
  %4293 = and i32 %4291, 16384
  %4294 = and i32 %4291, 8192
  %4295 = uitofp i32 %4292 to float
  %4296 = uitofp i32 %4293 to float
  %4297 = uitofp i32 %4294 to float
  %4298 = fmul fast float %4295, 0x3F10000000000000
  %4299 = fmul fast float %4296, 0x3F20000000000000
  %4300 = fmul fast float %4297, 0x3F30000000000000
  %4301 = fadd fast float %4298, -1.000000e+00
  %4302 = fadd fast float %4299, -1.000000e+00
  %4303 = fadd fast float %4300, -1.000000e+00
  %4304 = call float @dx.op.dot3.f32(i32 55, float %4301, float %4302, float %4303, float %4187, float %4151, float %4258)  ; Dot3(ax,ay,az,bx,by,bz)
  %4305 = fptosi float %4162 to i32
  %4306 = mul i32 %4305, 1664525
  %4307 = add i32 %4306, -781160288
  %4308 = mul i32 %4307, 1013904223
  %4309 = add i32 %4308, 1013904223
  %4310 = mul i32 %4309, %4307
  %4311 = add i32 %4310, 1013904223
  %4312 = mul i32 %4311, %4309
  %4313 = add i32 %4312, %4307
  %4314 = lshr i32 %4313, 16
  %4315 = and i32 %4314, 32768
  %4316 = and i32 %4314, 16384
  %4317 = and i32 %4314, 8192
  %4318 = uitofp i32 %4315 to float
  %4319 = uitofp i32 %4316 to float
  %4320 = uitofp i32 %4317 to float
  %4321 = fmul fast float %4318, 0x3F10000000000000
  %4322 = fmul fast float %4319, 0x3F20000000000000
  %4323 = fmul fast float %4320, 0x3F30000000000000
  %4324 = fadd fast float %4321, -1.000000e+00
  %4325 = fadd fast float %4322, -1.000000e+00
  %4326 = fadd fast float %4323, -1.000000e+00
  %4327 = call float @dx.op.dot3.f32(i32 55, float %4324, float %4325, float %4326, float %4150, float %4211, float %4258)  ; Dot3(ax,ay,az,bx,by,bz)
  %4328 = fptosi float %4163 to i32
  %4329 = mul i32 %4328, 1664525
  %4330 = add i32 %4329, -781160288
  %4331 = mul i32 %4330, 1013904223
  %4332 = add i32 %4331, 1013904223
  %4333 = mul i32 %4332, %4330
  %4334 = add i32 %4333, 1013904223
  %4335 = mul i32 %4334, %4332
  %4336 = add i32 %4335, %4330
  %4337 = lshr i32 %4336, 16
  %4338 = and i32 %4337, 32768
  %4339 = and i32 %4337, 16384
  %4340 = and i32 %4337, 8192
  %4341 = uitofp i32 %4338 to float
  %4342 = uitofp i32 %4339 to float
  %4343 = uitofp i32 %4340 to float
  %4344 = fmul fast float %4341, 0x3F10000000000000
  %4345 = fmul fast float %4342, 0x3F20000000000000
  %4346 = fmul fast float %4343, 0x3F30000000000000
  %4347 = fadd fast float %4344, -1.000000e+00
  %4348 = fadd fast float %4345, -1.000000e+00
  %4349 = fadd fast float %4346, -1.000000e+00
  %4350 = call float @dx.op.dot3.f32(i32 55, float %4347, float %4348, float %4349, float %4187, float %4211, float %4258)  ; Dot3(ax,ay,az,bx,by,bz)
  %4351 = fmul fast float %4150, %4150
  %4352 = fmul fast float %4151, %4151
  %4353 = fmul fast float %4152, %4152
  %4354 = fmul fast float %4351, %4150
  %4355 = fmul fast float %4352, %4151
  %4356 = fmul fast float %4353, %4152
  %4357 = fmul fast float %4150, 6.000000e+00
  %4358 = fmul fast float %4151, 6.000000e+00
  %4359 = fmul fast float %4152, 6.000000e+00
  %4360 = fadd fast float %4357, -1.500000e+01
  %4361 = fadd fast float %4358, -1.500000e+01
  %4362 = fadd fast float %4359, -1.500000e+01
  %4363 = fmul fast float %4360, %4150
  %4364 = fmul fast float %4361, %4151
  %4365 = fmul fast float %4362, %4152
  %4366 = fadd fast float %4363, 1.000000e+01
  %4367 = fadd fast float %4364, 1.000000e+01
  %4368 = fadd fast float %4365, 1.000000e+01
  %4369 = fmul fast float %4354, %4366
  %4370 = fmul fast float %4355, %4367
  %4371 = fmul fast float %4356, %4368
  %4372 = fsub fast float %4257, %4234
  %4373 = fmul fast float %4372, %4369
  %4374 = fsub fast float %4210, %4186
  %4375 = fmul fast float %4374, %4369
  %4376 = fadd fast float %4375, %4186
  %4377 = fsub fast float %4234, %4376
  %4378 = fadd fast float %4377, %4373
  %4379 = fmul fast float %4378, %4370
  %4380 = fadd fast float %4379, %4376
  %4381 = fsub fast float %4350, %4327
  %4382 = fmul fast float %4381, %4369
  %4383 = fsub fast float %4304, %4281
  %4384 = fmul fast float %4383, %4369
  %4385 = fadd fast float %4384, %4281
  %4386 = fsub fast float %4327, %4385
  %4387 = fadd fast float %4386, %4382
  %4388 = fmul fast float %4387, %4370
  %4389 = fsub fast float %4385, %4380
  %4390 = fadd fast float %4389, %4388
  %4391 = fmul fast float %4371, %4390
  %4392 = fadd fast float %4391, %4380
  %4393 = call float @dx.op.unary.f32(i32 6, float %4392)  ; FAbs(value)
  %4394 = fmul fast float %4393, %4148
  %4395 = fadd fast float %4394, %4147
  %4396 = fmul fast float %4144, 2.000000e+00
  %4397 = fmul fast float %4145, 2.000000e+00
  %4398 = fmul fast float %4146, 2.000000e+00
  %4399 = fmul fast float %4148, 5.000000e-01
  %4400 = add nuw nsw i32 %4149, 1
  %4401 = icmp eq i32 %4400, 10
  br i1 %4401, label %4402, label %4143, !llvm.loop !60

; <label>:4402                                    ; preds = %4143
  %4403 = fmul fast float %4095, %3776
  %4404 = fmul fast float %4097, %452
  %4405 = extractvalue %dx.types.CBufRet.f32 %4096, 1
  %4406 = extractvalue %dx.types.CBufRet.f32 %4118, 2
  %4407 = extractvalue %dx.types.CBufRet.f32 %4118, 3
  %4408 = fmul fast float %4100, %4406
  %4409 = fmul fast float %4408, %4407
  %4410 = fmul fast float %4103, %4406
  %4411 = fmul fast float %4410, %4407
  %4412 = fmul fast float %4106, %4406
  %4413 = fmul fast float %4412, %4407
  %4414 = fmul fast float %4109, %4406
  %4415 = fmul fast float %4414, %4407
  %4416 = fmul fast float %4112, %4406
  %4417 = fmul fast float %4416, %4407
  %4418 = fmul fast float %4115, %4406
  %4419 = fmul fast float %4418, %4407
  %4420 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %4421 = extractvalue %dx.types.CBufRet.f32 %4420, 1
  %4422 = fmul fast float %4421, %932
  %4423 = fadd fast float %4422, %4413
  %4424 = fmul fast float %4409, 0x3EA0000000000000
  %4425 = fmul fast float %4411, 0x3EA0000000000000
  %4426 = fmul fast float %4423, 0x3EA0000000000000
  %4427 = fadd fast float %4415, 5.000000e-01
  %4428 = fadd fast float %4427, %4424
  %4429 = fadd fast float %4417, 5.000000e-01
  %4430 = fadd fast float %4429, %4425
  %4431 = fadd fast float %4419, 5.000000e-01
  %4432 = fadd fast float %4431, %4426
  %4433 = call float @dx.op.unary.f32(i32 27, float %4428)  ; Round_ni(value)
  %4434 = call float @dx.op.unary.f32(i32 27, float %4430)  ; Round_ni(value)
  %4435 = call float @dx.op.unary.f32(i32 27, float %4432)  ; Round_ni(value)
  %4436 = fsub fast float %4415, %4433
  %4437 = fsub fast float %4417, %4434
  %4438 = fsub fast float %4419, %4435
  %4439 = fmul fast float %4436, 2.097152e+06
  %4440 = fmul fast float %4437, 2.097152e+06
  %4441 = fmul fast float %4438, 2.097152e+06
  %4442 = fadd fast float %4439, %4409
  %4443 = fadd fast float %4440, %4411
  %4444 = fadd fast float %4441, %4423
  br label %4445

; <label>:4445                                    ; preds = %4445, %4402
  %4446 = phi float [ %4442, %4402 ], [ %4698, %4445 ]
  %4447 = phi float [ %4443, %4402 ], [ %4699, %4445 ]
  %4448 = phi float [ %4444, %4402 ], [ %4700, %4445 ]
  %4449 = phi float [ 0.000000e+00, %4402 ], [ %4697, %4445 ]
  %4450 = phi float [ 1.000000e+00, %4402 ], [ %4701, %4445 ]
  %4451 = phi i32 [ 0, %4402 ], [ %4702, %4445 ]
  %4452 = call float @dx.op.unary.f32(i32 22, float %4446)  ; Frc(value)
  %4453 = call float @dx.op.unary.f32(i32 22, float %4447)  ; Frc(value)
  %4454 = call float @dx.op.unary.f32(i32 22, float %4448)  ; Frc(value)
  %4455 = call float @dx.op.unary.f32(i32 27, float %4446)  ; Round_ni(value)
  %4456 = call float @dx.op.unary.f32(i32 27, float %4447)  ; Round_ni(value)
  %4457 = call float @dx.op.unary.f32(i32 27, float %4448)  ; Round_ni(value)
  %4458 = call float @dx.op.dot3.f32(i32 55, float %4455, float %4456, float %4457, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %4459 = fadd fast float %4458, 1.900000e+01
  %4460 = fadd fast float %4458, 4.700000e+01
  %4461 = fadd fast float %4458, 6.600000e+01
  %4462 = fadd fast float %4458, 1.010000e+02
  %4463 = fadd fast float %4458, 1.200000e+02
  %4464 = fadd fast float %4458, 1.480000e+02
  %4465 = fadd fast float %4458, 1.670000e+02
  %4466 = fptosi float %4458 to i32
  %4467 = mul i32 %4466, 1664525
  %4468 = add i32 %4467, -781160288
  %4469 = mul i32 %4468, 1013904223
  %4470 = add i32 %4469, 1013904223
  %4471 = mul i32 %4470, %4468
  %4472 = add i32 %4471, 1013904223
  %4473 = mul i32 %4472, %4470
  %4474 = add i32 %4473, %4468
  %4475 = lshr i32 %4474, 16
  %4476 = and i32 %4475, 32768
  %4477 = and i32 %4475, 16384
  %4478 = and i32 %4475, 8192
  %4479 = uitofp i32 %4476 to float
  %4480 = uitofp i32 %4477 to float
  %4481 = uitofp i32 %4478 to float
  %4482 = fmul fast float %4479, 0x3F10000000000000
  %4483 = fmul fast float %4480, 0x3F20000000000000
  %4484 = fmul fast float %4481, 0x3F30000000000000
  %4485 = fadd fast float %4482, -1.000000e+00
  %4486 = fadd fast float %4483, -1.000000e+00
  %4487 = fadd fast float %4484, -1.000000e+00
  %4488 = call float @dx.op.dot3.f32(i32 55, float %4485, float %4486, float %4487, float %4452, float %4453, float %4454)  ; Dot3(ax,ay,az,bx,by,bz)
  %4489 = fadd fast float %4452, -1.000000e+00
  %4490 = fptosi float %4459 to i32
  %4491 = mul i32 %4490, 1664525
  %4492 = add i32 %4491, -781160288
  %4493 = mul i32 %4492, 1013904223
  %4494 = add i32 %4493, 1013904223
  %4495 = mul i32 %4494, %4492
  %4496 = add i32 %4495, 1013904223
  %4497 = mul i32 %4496, %4494
  %4498 = add i32 %4497, %4492
  %4499 = lshr i32 %4498, 16
  %4500 = and i32 %4499, 32768
  %4501 = and i32 %4499, 16384
  %4502 = and i32 %4499, 8192
  %4503 = uitofp i32 %4500 to float
  %4504 = uitofp i32 %4501 to float
  %4505 = uitofp i32 %4502 to float
  %4506 = fmul fast float %4503, 0x3F10000000000000
  %4507 = fmul fast float %4504, 0x3F20000000000000
  %4508 = fmul fast float %4505, 0x3F30000000000000
  %4509 = fadd fast float %4506, -1.000000e+00
  %4510 = fadd fast float %4507, -1.000000e+00
  %4511 = fadd fast float %4508, -1.000000e+00
  %4512 = call float @dx.op.dot3.f32(i32 55, float %4509, float %4510, float %4511, float %4489, float %4453, float %4454)  ; Dot3(ax,ay,az,bx,by,bz)
  %4513 = fadd fast float %4453, -1.000000e+00
  %4514 = fptosi float %4460 to i32
  %4515 = mul i32 %4514, 1664525
  %4516 = add i32 %4515, -781160288
  %4517 = mul i32 %4516, 1013904223
  %4518 = add i32 %4517, 1013904223
  %4519 = mul i32 %4518, %4516
  %4520 = add i32 %4519, 1013904223
  %4521 = mul i32 %4520, %4518
  %4522 = add i32 %4521, %4516
  %4523 = lshr i32 %4522, 16
  %4524 = and i32 %4523, 32768
  %4525 = and i32 %4523, 16384
  %4526 = and i32 %4523, 8192
  %4527 = uitofp i32 %4524 to float
  %4528 = uitofp i32 %4525 to float
  %4529 = uitofp i32 %4526 to float
  %4530 = fmul fast float %4527, 0x3F10000000000000
  %4531 = fmul fast float %4528, 0x3F20000000000000
  %4532 = fmul fast float %4529, 0x3F30000000000000
  %4533 = fadd fast float %4530, -1.000000e+00
  %4534 = fadd fast float %4531, -1.000000e+00
  %4535 = fadd fast float %4532, -1.000000e+00
  %4536 = call float @dx.op.dot3.f32(i32 55, float %4533, float %4534, float %4535, float %4452, float %4513, float %4454)  ; Dot3(ax,ay,az,bx,by,bz)
  %4537 = fptosi float %4461 to i32
  %4538 = mul i32 %4537, 1664525
  %4539 = add i32 %4538, -781160288
  %4540 = mul i32 %4539, 1013904223
  %4541 = add i32 %4540, 1013904223
  %4542 = mul i32 %4541, %4539
  %4543 = add i32 %4542, 1013904223
  %4544 = mul i32 %4543, %4541
  %4545 = add i32 %4544, %4539
  %4546 = lshr i32 %4545, 16
  %4547 = and i32 %4546, 32768
  %4548 = and i32 %4546, 16384
  %4549 = and i32 %4546, 8192
  %4550 = uitofp i32 %4547 to float
  %4551 = uitofp i32 %4548 to float
  %4552 = uitofp i32 %4549 to float
  %4553 = fmul fast float %4550, 0x3F10000000000000
  %4554 = fmul fast float %4551, 0x3F20000000000000
  %4555 = fmul fast float %4552, 0x3F30000000000000
  %4556 = fadd fast float %4553, -1.000000e+00
  %4557 = fadd fast float %4554, -1.000000e+00
  %4558 = fadd fast float %4555, -1.000000e+00
  %4559 = call float @dx.op.dot3.f32(i32 55, float %4556, float %4557, float %4558, float %4489, float %4513, float %4454)  ; Dot3(ax,ay,az,bx,by,bz)
  %4560 = fadd fast float %4454, -1.000000e+00
  %4561 = fptosi float %4462 to i32
  %4562 = mul i32 %4561, 1664525
  %4563 = add i32 %4562, -781160288
  %4564 = mul i32 %4563, 1013904223
  %4565 = add i32 %4564, 1013904223
  %4566 = mul i32 %4565, %4563
  %4567 = add i32 %4566, 1013904223
  %4568 = mul i32 %4567, %4565
  %4569 = add i32 %4568, %4563
  %4570 = lshr i32 %4569, 16
  %4571 = and i32 %4570, 32768
  %4572 = and i32 %4570, 16384
  %4573 = and i32 %4570, 8192
  %4574 = uitofp i32 %4571 to float
  %4575 = uitofp i32 %4572 to float
  %4576 = uitofp i32 %4573 to float
  %4577 = fmul fast float %4574, 0x3F10000000000000
  %4578 = fmul fast float %4575, 0x3F20000000000000
  %4579 = fmul fast float %4576, 0x3F30000000000000
  %4580 = fadd fast float %4577, -1.000000e+00
  %4581 = fadd fast float %4578, -1.000000e+00
  %4582 = fadd fast float %4579, -1.000000e+00
  %4583 = call float @dx.op.dot3.f32(i32 55, float %4580, float %4581, float %4582, float %4452, float %4453, float %4560)  ; Dot3(ax,ay,az,bx,by,bz)
  %4584 = fptosi float %4463 to i32
  %4585 = mul i32 %4584, 1664525
  %4586 = add i32 %4585, -781160288
  %4587 = mul i32 %4586, 1013904223
  %4588 = add i32 %4587, 1013904223
  %4589 = mul i32 %4588, %4586
  %4590 = add i32 %4589, 1013904223
  %4591 = mul i32 %4590, %4588
  %4592 = add i32 %4591, %4586
  %4593 = lshr i32 %4592, 16
  %4594 = and i32 %4593, 32768
  %4595 = and i32 %4593, 16384
  %4596 = and i32 %4593, 8192
  %4597 = uitofp i32 %4594 to float
  %4598 = uitofp i32 %4595 to float
  %4599 = uitofp i32 %4596 to float
  %4600 = fmul fast float %4597, 0x3F10000000000000
  %4601 = fmul fast float %4598, 0x3F20000000000000
  %4602 = fmul fast float %4599, 0x3F30000000000000
  %4603 = fadd fast float %4600, -1.000000e+00
  %4604 = fadd fast float %4601, -1.000000e+00
  %4605 = fadd fast float %4602, -1.000000e+00
  %4606 = call float @dx.op.dot3.f32(i32 55, float %4603, float %4604, float %4605, float %4489, float %4453, float %4560)  ; Dot3(ax,ay,az,bx,by,bz)
  %4607 = fptosi float %4464 to i32
  %4608 = mul i32 %4607, 1664525
  %4609 = add i32 %4608, -781160288
  %4610 = mul i32 %4609, 1013904223
  %4611 = add i32 %4610, 1013904223
  %4612 = mul i32 %4611, %4609
  %4613 = add i32 %4612, 1013904223
  %4614 = mul i32 %4613, %4611
  %4615 = add i32 %4614, %4609
  %4616 = lshr i32 %4615, 16
  %4617 = and i32 %4616, 32768
  %4618 = and i32 %4616, 16384
  %4619 = and i32 %4616, 8192
  %4620 = uitofp i32 %4617 to float
  %4621 = uitofp i32 %4618 to float
  %4622 = uitofp i32 %4619 to float
  %4623 = fmul fast float %4620, 0x3F10000000000000
  %4624 = fmul fast float %4621, 0x3F20000000000000
  %4625 = fmul fast float %4622, 0x3F30000000000000
  %4626 = fadd fast float %4623, -1.000000e+00
  %4627 = fadd fast float %4624, -1.000000e+00
  %4628 = fadd fast float %4625, -1.000000e+00
  %4629 = call float @dx.op.dot3.f32(i32 55, float %4626, float %4627, float %4628, float %4452, float %4513, float %4560)  ; Dot3(ax,ay,az,bx,by,bz)
  %4630 = fptosi float %4465 to i32
  %4631 = mul i32 %4630, 1664525
  %4632 = add i32 %4631, -781160288
  %4633 = mul i32 %4632, 1013904223
  %4634 = add i32 %4633, 1013904223
  %4635 = mul i32 %4634, %4632
  %4636 = add i32 %4635, 1013904223
  %4637 = mul i32 %4636, %4634
  %4638 = add i32 %4637, %4632
  %4639 = lshr i32 %4638, 16
  %4640 = and i32 %4639, 32768
  %4641 = and i32 %4639, 16384
  %4642 = and i32 %4639, 8192
  %4643 = uitofp i32 %4640 to float
  %4644 = uitofp i32 %4641 to float
  %4645 = uitofp i32 %4642 to float
  %4646 = fmul fast float %4643, 0x3F10000000000000
  %4647 = fmul fast float %4644, 0x3F20000000000000
  %4648 = fmul fast float %4645, 0x3F30000000000000
  %4649 = fadd fast float %4646, -1.000000e+00
  %4650 = fadd fast float %4647, -1.000000e+00
  %4651 = fadd fast float %4648, -1.000000e+00
  %4652 = call float @dx.op.dot3.f32(i32 55, float %4649, float %4650, float %4651, float %4489, float %4513, float %4560)  ; Dot3(ax,ay,az,bx,by,bz)
  %4653 = fmul fast float %4452, %4452
  %4654 = fmul fast float %4453, %4453
  %4655 = fmul fast float %4454, %4454
  %4656 = fmul fast float %4653, %4452
  %4657 = fmul fast float %4654, %4453
  %4658 = fmul fast float %4655, %4454
  %4659 = fmul fast float %4452, 6.000000e+00
  %4660 = fmul fast float %4453, 6.000000e+00
  %4661 = fmul fast float %4454, 6.000000e+00
  %4662 = fadd fast float %4659, -1.500000e+01
  %4663 = fadd fast float %4660, -1.500000e+01
  %4664 = fadd fast float %4661, -1.500000e+01
  %4665 = fmul fast float %4662, %4452
  %4666 = fmul fast float %4663, %4453
  %4667 = fmul fast float %4664, %4454
  %4668 = fadd fast float %4665, 1.000000e+01
  %4669 = fadd fast float %4666, 1.000000e+01
  %4670 = fadd fast float %4667, 1.000000e+01
  %4671 = fmul fast float %4656, %4668
  %4672 = fmul fast float %4657, %4669
  %4673 = fmul fast float %4658, %4670
  %4674 = fsub fast float %4559, %4536
  %4675 = fmul fast float %4674, %4671
  %4676 = fsub fast float %4512, %4488
  %4677 = fmul fast float %4676, %4671
  %4678 = fadd fast float %4677, %4488
  %4679 = fsub fast float %4536, %4678
  %4680 = fadd fast float %4679, %4675
  %4681 = fmul fast float %4680, %4672
  %4682 = fadd fast float %4681, %4678
  %4683 = fsub fast float %4652, %4629
  %4684 = fmul fast float %4683, %4671
  %4685 = fsub fast float %4606, %4583
  %4686 = fmul fast float %4685, %4671
  %4687 = fadd fast float %4686, %4583
  %4688 = fsub fast float %4629, %4687
  %4689 = fadd fast float %4688, %4684
  %4690 = fmul fast float %4689, %4672
  %4691 = fsub fast float %4687, %4682
  %4692 = fadd fast float %4691, %4690
  %4693 = fmul fast float %4673, %4692
  %4694 = fadd fast float %4693, %4682
  %4695 = call float @dx.op.unary.f32(i32 6, float %4694)  ; FAbs(value)
  %4696 = fmul fast float %4695, %4450
  %4697 = fadd fast float %4696, %4449
  %4698 = fmul fast float %4446, 2.000000e+00
  %4699 = fmul fast float %4447, 2.000000e+00
  %4700 = fmul fast float %4448, 2.000000e+00
  %4701 = fmul fast float %4450, 5.000000e-01
  %4702 = add nuw nsw i32 %4451, 1
  %4703 = icmp eq i32 %4702, 10
  br i1 %4703, label %4704, label %4445, !llvm.loop !60

; <label>:4704                                    ; preds = %4445
  %4705 = extractvalue %dx.types.CBufRet.f32 %4420, 3
  %4706 = fmul fast float %4705, %4697
  %4707 = extractvalue %dx.types.CBufRet.f32 %4420, 2
  %4708 = fadd fast float %4706, %4707
  %4709 = fmul fast float %4405, %452
  %4710 = fmul fast float %4709, %4395
  %4711 = fmul fast float %4710, %4708
  %4712 = call float @dx.op.unary.f32(i32 27, float %4087)  ; Round_ni(value)
  %4713 = fsub fast float %4087, %4712
  %4714 = fmul fast float %4713, 2.097152e+06
  %4715 = fadd fast float %4714, %4403
  %4716 = call float @dx.op.unary.f32(i32 27, float %4715)  ; Round_ni(value)
  %4717 = fsub fast float %4403, %4716
  %4718 = fmul fast float %4717, 0x401921FB60000000
  %4719 = fmul fast float %4713, 0x416921FB60000000
  %4720 = fadd fast float %4718, %4719
  %4721 = call float @dx.op.unary.f32(i32 13, float %4720)  ; Sin(value)
  %4722 = fadd fast float %3478, %3758
  %4723 = fadd fast float %3479, %3760
  %4724 = call float @dx.op.binary.f32(i32 35, float %4722, float -1.000000e+00)  ; FMax(a,b)
  %4725 = call float @dx.op.binary.f32(i32 35, float %4723, float -1.000000e+00)  ; FMax(a,b)
  %4726 = call float @dx.op.binary.f32(i32 36, float %4724, float 1.000000e+00)  ; FMin(a,b)
  %4727 = call float @dx.op.binary.f32(i32 36, float %4725, float 1.000000e+00)  ; FMin(a,b)
  %4728 = fmul fast float %4726, %295
  %4729 = fmul fast float %4727, %296
  %4730 = fmul fast float %4726, %76
  %4731 = fmul fast float %4727, %23
  %4732 = fadd fast float %4729, %4728
  %4733 = fadd fast float %4731, %4730
  %4734 = extractvalue %dx.types.CBufRet.f32 %3477, 3
  %4735 = fmul fast float %4734, %3775
  %4736 = fdiv fast float 2.000000e+00, %4735
  %4737 = fmul fast float %4733, %4736
  %4738 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %4739 = extractvalue %dx.types.CBufRet.f32 %4738, 1
  %4740 = fmul fast float %4739, %4093
  %4741 = fadd fast float %4740, %4732
  %4742 = fmul fast float %4741, %4736
  %4743 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %4744 = extractvalue %dx.types.CBufRet.f32 %4743, 2
  %4745 = call float @dx.op.unary.f32(i32 27, float %4737)  ; Round_ni(value)
  %4746 = fsub fast float %4737, %4745
  %4747 = fmul fast float %4746, 2.097152e+06
  %4748 = fadd fast float %4742, %4747
  %4749 = call float @dx.op.unary.f32(i32 27, float %4748)  ; Round_ni(value)
  %4750 = fsub fast float %4742, %4749
  %4751 = fmul fast float %4750, 0x401921FB60000000
  %4752 = fmul fast float %4746, 0x416921FB60000000
  %4753 = fadd fast float %4751, %4752
  %4754 = call float @dx.op.unary.f32(i32 13, float %4753)  ; Sin(value)
  %4755 = fsub fast float %3758, %3446
  %4756 = fsub fast float %3760, %3447
  %4757 = call float @dx.op.binary.f32(i32 35, float %4755, float -1.000000e+00)  ; FMax(a,b)
  %4758 = call float @dx.op.binary.f32(i32 35, float %4756, float -1.000000e+00)  ; FMax(a,b)
  %4759 = call float @dx.op.binary.f32(i32 36, float %4757, float 1.000000e+00)  ; FMin(a,b)
  %4760 = call float @dx.op.binary.f32(i32 36, float %4758, float 1.000000e+00)  ; FMin(a,b)
  %4761 = fmul fast float %4759, %295
  %4762 = fmul fast float %4760, %296
  %4763 = fmul fast float %4759, %76
  %4764 = fmul fast float %4760, %23
  %4765 = fadd fast float %4762, %4761
  %4766 = fadd fast float %4764, %4763
  %4767 = fmul fast float %4734, %4735
  %4768 = fdiv fast float 2.000000e+00, %4767
  %4769 = fmul fast float %4766, %4768
  %4770 = extractvalue %dx.types.CBufRet.f32 %4738, 3
  %4771 = fmul fast float %4770, %4093
  %4772 = fadd fast float %4771, %4765
  %4773 = fmul fast float %4772, %4768
  %4774 = call float @dx.op.unary.f32(i32 27, float %4769)  ; Round_ni(value)
  %4775 = fsub fast float %4769, %4774
  %4776 = fmul fast float %4775, 2.097152e+06
  %4777 = fadd fast float %4773, %4776
  %4778 = call float @dx.op.unary.f32(i32 27, float %4777)  ; Round_ni(value)
  %4779 = fsub fast float %4773, %4778
  %4780 = fmul fast float %4779, 0x401921FB60000000
  %4781 = fmul fast float %4775, 0x416921FB60000000
  %4782 = fadd fast float %4780, %4781
  %4783 = fsub fast float %3758, %3478
  %4784 = fsub fast float %3760, %3479
  %4785 = call float @dx.op.binary.f32(i32 35, float %4783, float -1.000000e+00)  ; FMax(a,b)
  %4786 = call float @dx.op.binary.f32(i32 35, float %4784, float -1.000000e+00)  ; FMax(a,b)
  %4787 = call float @dx.op.binary.f32(i32 36, float %4785, float 1.000000e+00)  ; FMin(a,b)
  %4788 = call float @dx.op.binary.f32(i32 36, float %4786, float 1.000000e+00)  ; FMin(a,b)
  %4789 = fmul fast float %4787, %295
  %4790 = fmul fast float %4788, %296
  %4791 = fmul fast float %4787, %76
  %4792 = fmul fast float %4788, %23
  %4793 = fadd fast float %4790, %4789
  %4794 = fadd fast float %4792, %4791
  %4795 = fmul fast float %4734, %4767
  %4796 = fdiv fast float 2.000000e+00, %4795
  %4797 = fmul fast float %4794, %4796
  %4798 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %4799 = extractvalue %dx.types.CBufRet.f32 %4798, 1
  %4800 = fmul fast float %4799, %4093
  %4801 = fadd fast float %4800, %4793
  %4802 = fmul fast float %4801, %4796
  %4803 = call float @dx.op.unary.f32(i32 27, float %4797)  ; Round_ni(value)
  %4804 = fsub fast float %4797, %4803
  %4805 = fmul fast float %4804, 2.097152e+06
  %4806 = fadd fast float %4802, %4805
  %4807 = call float @dx.op.unary.f32(i32 27, float %4806)  ; Round_ni(value)
  %4808 = fsub fast float %4802, %4807
  %4809 = fmul fast float %4808, 0x401921FB60000000
  %4810 = fmul fast float %4804, 0x416921FB60000000
  %4811 = fadd fast float %4809, %4810
  %4812 = call float @dx.op.unary.f32(i32 13, float %4811)  ; Sin(value)
  %4813 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 69)  ; CBufferLoadLegacy(handle,regIndex)
  %4814 = extractvalue %dx.types.CBufRet.f32 %4813, 0
  %4815 = extractvalue %dx.types.CBufRet.f32 %4813, 1
  %4816 = fcmp fast oge float %4814, -1.000000e+00
  %4817 = select i1 %4816, float %4814, float %4815
  %4818 = fadd fast float %4814, 1.000000e+00
  %4819 = call float @dx.op.unary.f32(i32 6, float %4818)  ; FAbs(value)
  %4820 = fcmp fast ogt float %4819, 0x3EE4F8B580000000
  %4821 = select i1 %4820, float %4817, float %4814
  %4822 = extractvalue %dx.types.CBufRet.f32 %4813, 2
  %4823 = fcmp fast oge float %4821, 1.000000e+00
  %4824 = fadd fast float %4821, -1.000000e+00
  %4825 = call float @dx.op.unary.f32(i32 6, float %4824)  ; FAbs(value)
  %4826 = fcmp fast ogt float %4825, 0x3EE4F8B580000000
  %4827 = and i1 %4826, %4823
  %4828 = select i1 %4827, float %4822, float %4814
  %4829 = fcmp fast oge float %4828, 0.000000e+00
  %4830 = select i1 %4829, float 1.000000e+00, float -1.000000e+00
  %4831 = call float @dx.op.unary.f32(i32 6, float %4828)  ; FAbs(value)
  %4832 = fcmp fast ogt float %4831, 0x3EE4F8B580000000
  %4833 = select i1 %4832, float %4830, float 1.000000e+00
  %4834 = call float @dx.op.binary.f32(i32 35, float %4833, float -1.000000e+00)  ; FMax(a,b)
  %4835 = call float @dx.op.binary.f32(i32 36, float %4834, float 1.000000e+00)  ; FMin(a,b)
  %4836 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 70)  ; CBufferLoadLegacy(handle,regIndex)
  %4837 = extractvalue %dx.types.CBufRet.f32 %4836, 3
  %4838 = fadd fast float %3446, %4835
  %4839 = fadd fast float %3447, %4837
  %4840 = call float @dx.op.binary.f32(i32 35, float %4838, float -1.000000e+00)  ; FMax(a,b)
  %4841 = call float @dx.op.binary.f32(i32 35, float %4839, float -1.000000e+00)  ; FMax(a,b)
  %4842 = call float @dx.op.binary.f32(i32 36, float %4840, float 1.000000e+00)  ; FMin(a,b)
  %4843 = call float @dx.op.binary.f32(i32 36, float %4841, float 1.000000e+00)  ; FMin(a,b)
  %4844 = fmul fast float %4842, %295
  %4845 = fmul fast float %4843, %296
  %4846 = fmul fast float %4842, %76
  %4847 = fmul fast float %4843, %23
  %4848 = fadd fast float %4845, %4844
  %4849 = fadd fast float %4847, %4846
  %4850 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %4851 = extractvalue %dx.types.CBufRet.f32 %4850, 3
  %4852 = fmul fast float %4851, %3773
  %4853 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %4854 = extractvalue %dx.types.CBufRet.f32 %4853, 0
  %4855 = fmul fast float %4854, %4852
  %4856 = fdiv fast float 2.000000e+00, %4855
  %4857 = fmul fast float %4856, %4849
  %4858 = extractvalue %dx.types.CBufRet.f32 %4853, 1
  %4859 = fmul fast float %4858, %4093
  %4860 = fadd fast float %4859, %4848
  %4861 = fmul fast float %4860, %4856
  %4862 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %4863 = extractvalue %dx.types.CBufRet.f32 %4862, 3
  %4864 = call float @dx.op.unary.f32(i32 27, float %4857)  ; Round_ni(value)
  %4865 = fsub fast float %4857, %4864
  %4866 = fmul fast float %4865, 2.097152e+06
  %4867 = fadd fast float %4861, %4866
  %4868 = call float @dx.op.unary.f32(i32 27, float %4867)  ; Round_ni(value)
  %4869 = fsub fast float %4861, %4868
  %4870 = fmul fast float %4869, 0x401921FB60000000
  %4871 = fmul fast float %4865, 0x416921FB60000000
  %4872 = fadd fast float %4870, %4871
  %4873 = fadd fast float %3478, %4835
  %4874 = fadd fast float %3479, %4837
  %4875 = call float @dx.op.binary.f32(i32 35, float %4873, float -1.000000e+00)  ; FMax(a,b)
  %4876 = call float @dx.op.binary.f32(i32 35, float %4874, float -1.000000e+00)  ; FMax(a,b)
  %4877 = call float @dx.op.binary.f32(i32 36, float %4875, float 1.000000e+00)  ; FMin(a,b)
  %4878 = call float @dx.op.binary.f32(i32 36, float %4876, float 1.000000e+00)  ; FMin(a,b)
  %4879 = fmul fast float %4877, %295
  %4880 = fmul fast float %4878, %296
  %4881 = fmul fast float %4877, %76
  %4882 = fmul fast float %4878, %23
  %4883 = fadd fast float %4880, %4879
  %4884 = fadd fast float %4882, %4881
  %4885 = fmul fast float %4734, %4855
  %4886 = fdiv fast float 2.000000e+00, %4885
  %4887 = fmul fast float %4884, %4886
  %4888 = extractvalue %dx.types.CBufRet.f32 %4853, 2
  %4889 = fmul fast float %4888, %4093
  %4890 = fadd fast float %4889, %4883
  %4891 = fmul fast float %4890, %4886
  %4892 = call float @dx.op.unary.f32(i32 27, float %4887)  ; Round_ni(value)
  %4893 = fsub fast float %4887, %4892
  %4894 = fmul fast float %4893, 2.097152e+06
  %4895 = fadd fast float %4891, %4894
  %4896 = call float @dx.op.unary.f32(i32 27, float %4895)  ; Round_ni(value)
  %4897 = fsub fast float %4891, %4896
  %4898 = fmul fast float %4897, 0x401921FB60000000
  %4899 = fmul fast float %4893, 0x416921FB60000000
  %4900 = fadd fast float %4898, %4899
  %4901 = fsub fast float %4835, %3446
  %4902 = fsub fast float %4837, %3447
  %4903 = call float @dx.op.binary.f32(i32 35, float %4901, float -1.000000e+00)  ; FMax(a,b)
  %4904 = call float @dx.op.binary.f32(i32 35, float %4902, float -1.000000e+00)  ; FMax(a,b)
  %4905 = call float @dx.op.binary.f32(i32 36, float %4903, float 1.000000e+00)  ; FMin(a,b)
  %4906 = call float @dx.op.binary.f32(i32 36, float %4904, float 1.000000e+00)  ; FMin(a,b)
  %4907 = fmul fast float %4905, %295
  %4908 = fmul fast float %4906, %296
  %4909 = fmul fast float %4905, %76
  %4910 = fmul fast float %4906, %23
  %4911 = fadd fast float %4908, %4907
  %4912 = fadd fast float %4910, %4909
  %4913 = fmul fast float %4734, %4885
  %4914 = fdiv fast float 2.000000e+00, %4913
  %4915 = fmul fast float %4912, %4914
  %4916 = extractvalue %dx.types.CBufRet.f32 %4853, 3
  %4917 = fmul fast float %4916, %4093
  %4918 = fadd fast float %4917, %4911
  %4919 = fmul fast float %4918, %4914
  %4920 = call float @dx.op.unary.f32(i32 27, float %4915)  ; Round_ni(value)
  %4921 = fsub fast float %4915, %4920
  %4922 = fmul fast float %4921, 2.097152e+06
  %4923 = fadd fast float %4919, %4922
  %4924 = call float @dx.op.unary.f32(i32 27, float %4923)  ; Round_ni(value)
  %4925 = fsub fast float %4919, %4924
  %4926 = fmul fast float %4925, 0x401921FB60000000
  %4927 = fmul fast float %4921, 0x416921FB60000000
  %4928 = fadd fast float %4926, %4927
  %4929 = fsub fast float %4835, %3478
  %4930 = fsub fast float %4837, %3479
  %4931 = call float @dx.op.binary.f32(i32 35, float %4929, float -1.000000e+00)  ; FMax(a,b)
  %4932 = call float @dx.op.binary.f32(i32 35, float %4930, float -1.000000e+00)  ; FMax(a,b)
  %4933 = call float @dx.op.binary.f32(i32 36, float %4931, float 1.000000e+00)  ; FMin(a,b)
  %4934 = call float @dx.op.binary.f32(i32 36, float %4932, float 1.000000e+00)  ; FMin(a,b)
  %4935 = fmul fast float %4933, %295
  %4936 = fmul fast float %4934, %296
  %4937 = fmul fast float %4933, %76
  %4938 = fmul fast float %4934, %23
  %4939 = fadd fast float %4936, %4935
  %4940 = fadd fast float %4938, %4937
  %4941 = fmul fast float %4734, %4913
  %4942 = fdiv fast float 2.000000e+00, %4941
  %4943 = fmul fast float %4940, %4942
  %4944 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %4945 = extractvalue %dx.types.CBufRet.f32 %4944, 0
  %4946 = fmul fast float %4945, %4093
  %4947 = fadd fast float %4946, %4939
  %4948 = fmul fast float %4947, %4942
  %4949 = call float @dx.op.unary.f32(i32 27, float %4943)  ; Round_ni(value)
  %4950 = fsub fast float %4943, %4949
  %4951 = fmul fast float %4950, 2.097152e+06
  %4952 = fadd fast float %4948, %4951
  %4953 = call float @dx.op.unary.f32(i32 27, float %4952)  ; Round_ni(value)
  %4954 = fsub fast float %4948, %4953
  %4955 = fmul fast float %4954, 0x401921FB60000000
  %4956 = fmul fast float %4950, 0x416921FB60000000
  %4957 = fadd fast float %4955, %4956
  %4958 = extractvalue %dx.types.CBufRet.f32 %4944, 1
  %4959 = extractvalue %dx.types.CBufRet.f32 %4944, 2
  %4960 = fcmp fast oge float %4958, -1.000000e+00
  %4961 = select i1 %4960, float %4958, float %4959
  %4962 = fadd fast float %4958, 1.000000e+00
  %4963 = call float @dx.op.unary.f32(i32 6, float %4962)  ; FAbs(value)
  %4964 = fcmp fast ogt float %4963, 0x3EE4F8B580000000
  %4965 = select i1 %4964, float %4961, float %4958
  %4966 = extractvalue %dx.types.CBufRet.f32 %4944, 3
  %4967 = fcmp fast oge float %4965, 1.000000e+00
  %4968 = fadd fast float %4965, -1.000000e+00
  %4969 = call float @dx.op.unary.f32(i32 6, float %4968)  ; FAbs(value)
  %4970 = fcmp fast ogt float %4969, 0x3EE4F8B580000000
  %4971 = and i1 %4970, %4967
  %4972 = select i1 %4971, float %4966, float %4958
  %4973 = fcmp fast oge float %4972, 0.000000e+00
  %4974 = select i1 %4973, float 1.000000e+00, float -1.000000e+00
  %4975 = call float @dx.op.unary.f32(i32 6, float %4972)  ; FAbs(value)
  %4976 = fcmp fast ogt float %4975, 0x3EE4F8B580000000
  %4977 = select i1 %4976, float %4974, float 1.000000e+00
  %4978 = call float @dx.op.binary.f32(i32 35, float %4977, float -1.000000e+00)  ; FMax(a,b)
  %4979 = call float @dx.op.binary.f32(i32 36, float %4978, float 1.000000e+00)  ; FMin(a,b)
  %4980 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 75)  ; CBufferLoadLegacy(handle,regIndex)
  %4981 = extractvalue %dx.types.CBufRet.f32 %4980, 0
  %4982 = fadd fast float %3446, %4979
  %4983 = fadd fast float %3447, %4981
  %4984 = call float @dx.op.binary.f32(i32 35, float %4982, float -1.000000e+00)  ; FMax(a,b)
  %4985 = call float @dx.op.binary.f32(i32 35, float %4983, float -1.000000e+00)  ; FMax(a,b)
  %4986 = call float @dx.op.binary.f32(i32 36, float %4984, float 1.000000e+00)  ; FMin(a,b)
  %4987 = call float @dx.op.binary.f32(i32 36, float %4985, float 1.000000e+00)  ; FMin(a,b)
  %4988 = fmul fast float %4986, %295
  %4989 = fmul fast float %4987, %296
  %4990 = fmul fast float %4986, %76
  %4991 = fmul fast float %4987, %23
  %4992 = fadd fast float %4989, %4988
  %4993 = fadd fast float %4991, %4990
  %4994 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %4995 = extractvalue %dx.types.CBufRet.f32 %4994, 1
  %4996 = fmul fast float %4995, %4852
  %4997 = fdiv fast float 2.000000e+00, %4996
  %4998 = fmul fast float %4993, %4997
  %4999 = fadd fast float %4859, %4992
  %5000 = fmul fast float %4999, %4997
  %5001 = call float @dx.op.unary.f32(i32 27, float %4998)  ; Round_ni(value)
  %5002 = fsub fast float %4998, %5001
  %5003 = fmul fast float %5002, 2.097152e+06
  %5004 = fadd fast float %5000, %5003
  %5005 = call float @dx.op.unary.f32(i32 27, float %5004)  ; Round_ni(value)
  %5006 = fsub fast float %5000, %5005
  %5007 = fmul fast float %5006, 0x401921FB60000000
  %5008 = fmul fast float %5002, 0x416921FB60000000
  %5009 = fadd fast float %5007, %5008
  %5010 = fadd fast float %3478, %4979
  %5011 = fadd fast float %3479, %4981
  %5012 = call float @dx.op.binary.f32(i32 35, float %5010, float -1.000000e+00)  ; FMax(a,b)
  %5013 = call float @dx.op.binary.f32(i32 35, float %5011, float -1.000000e+00)  ; FMax(a,b)
  %5014 = call float @dx.op.binary.f32(i32 36, float %5012, float 1.000000e+00)  ; FMin(a,b)
  %5015 = call float @dx.op.binary.f32(i32 36, float %5013, float 1.000000e+00)  ; FMin(a,b)
  %5016 = fmul fast float %5014, %295
  %5017 = fmul fast float %5015, %296
  %5018 = fmul fast float %5014, %76
  %5019 = fmul fast float %5015, %23
  %5020 = fadd fast float %5017, %5016
  %5021 = fadd fast float %5019, %5018
  %5022 = fmul fast float %4734, %4996
  %5023 = fdiv fast float 2.000000e+00, %5022
  %5024 = fmul fast float %5021, %5023
  %5025 = fadd fast float %4889, %5020
  %5026 = fmul fast float %5025, %5023
  %5027 = call float @dx.op.unary.f32(i32 27, float %5024)  ; Round_ni(value)
  %5028 = fsub fast float %5024, %5027
  %5029 = fmul fast float %5028, 2.097152e+06
  %5030 = fadd fast float %5026, %5029
  %5031 = call float @dx.op.unary.f32(i32 27, float %5030)  ; Round_ni(value)
  %5032 = fsub fast float %5026, %5031
  %5033 = fmul fast float %5032, 0x401921FB60000000
  %5034 = fmul fast float %5028, 0x416921FB60000000
  %5035 = fadd fast float %5033, %5034
  %5036 = fsub fast float %4979, %3446
  %5037 = fsub fast float %4981, %3447
  %5038 = call float @dx.op.binary.f32(i32 35, float %5036, float -1.000000e+00)  ; FMax(a,b)
  %5039 = call float @dx.op.binary.f32(i32 35, float %5037, float -1.000000e+00)  ; FMax(a,b)
  %5040 = call float @dx.op.binary.f32(i32 36, float %5038, float 1.000000e+00)  ; FMin(a,b)
  %5041 = call float @dx.op.binary.f32(i32 36, float %5039, float 1.000000e+00)  ; FMin(a,b)
  %5042 = fmul fast float %5040, %295
  %5043 = fmul fast float %5041, %296
  %5044 = fmul fast float %5040, %76
  %5045 = fmul fast float %5041, %23
  %5046 = fadd fast float %5043, %5042
  %5047 = fadd fast float %5045, %5044
  %5048 = fmul fast float %4734, %5022
  %5049 = fdiv fast float 2.000000e+00, %5048
  %5050 = fmul fast float %5047, %5049
  %5051 = fadd fast float %4917, %5046
  %5052 = fmul fast float %5051, %5049
  %5053 = call float @dx.op.unary.f32(i32 27, float %5050)  ; Round_ni(value)
  %5054 = fsub fast float %5050, %5053
  %5055 = fmul fast float %5054, 2.097152e+06
  %5056 = fadd fast float %5052, %5055
  %5057 = call float @dx.op.unary.f32(i32 27, float %5056)  ; Round_ni(value)
  %5058 = fsub fast float %5052, %5057
  %5059 = fmul fast float %5058, 0x401921FB60000000
  %5060 = fmul fast float %5054, 0x416921FB60000000
  %5061 = fadd fast float %5059, %5060
  %5062 = fsub fast float %4979, %3478
  %5063 = fsub fast float %4981, %3479
  %5064 = call float @dx.op.binary.f32(i32 35, float %5062, float -1.000000e+00)  ; FMax(a,b)
  %5065 = call float @dx.op.binary.f32(i32 35, float %5063, float -1.000000e+00)  ; FMax(a,b)
  %5066 = call float @dx.op.binary.f32(i32 36, float %5064, float 1.000000e+00)  ; FMin(a,b)
  %5067 = call float @dx.op.binary.f32(i32 36, float %5065, float 1.000000e+00)  ; FMin(a,b)
  %5068 = fmul fast float %5066, %295
  %5069 = fmul fast float %5067, %296
  %5070 = fmul fast float %5066, %76
  %5071 = fmul fast float %5067, %23
  %5072 = fadd fast float %5069, %5068
  %5073 = fadd fast float %5071, %5070
  %5074 = fmul fast float %4734, %5048
  %5075 = fdiv fast float 2.000000e+00, %5074
  %5076 = fmul fast float %5073, %5075
  %5077 = fadd fast float %4946, %5072
  %5078 = fmul fast float %5077, %5075
  %5079 = call float @dx.op.unary.f32(i32 27, float %5076)  ; Round_ni(value)
  %5080 = fsub fast float %5076, %5079
  %5081 = fmul fast float %5080, 2.097152e+06
  %5082 = fadd fast float %5078, %5081
  %5083 = call float @dx.op.unary.f32(i32 27, float %5082)  ; Round_ni(value)
  %5084 = fsub fast float %5078, %5083
  %5085 = fmul fast float %5084, 0x401921FB60000000
  %5086 = fmul fast float %5080, 0x416921FB60000000
  %5087 = fadd fast float %5085, %5086
  %5088 = fmul fast float %3773, 0x3FE99999A0000000
  %5089 = fmul fast float %3774, %5088
  %5090 = fdiv fast float 2.000000e+00, %5089
  %5091 = fmul fast float %5090, %4086
  %5092 = extractvalue %dx.types.CBufRet.f32 %4994, 2
  %5093 = fmul fast float %5092, %4093
  %5094 = fadd fast float %5093, %3770
  %5095 = fmul fast float %5094, %5090
  %5096 = call float @dx.op.unary.f32(i32 27, float %5091)  ; Round_ni(value)
  %5097 = fsub fast float %5091, %5096
  %5098 = fmul fast float %5097, 2.097152e+06
  %5099 = fadd fast float %5095, %5098
  %5100 = call float @dx.op.unary.f32(i32 27, float %5099)  ; Round_ni(value)
  %5101 = fsub fast float %5095, %5100
  %5102 = fmul fast float %5101, 0x401921FB60000000
  %5103 = fmul fast float %5097, 0x416921FB60000000
  %5104 = fadd fast float %5102, %5103
  %5105 = fmul fast float %4734, %5089
  %5106 = fdiv fast float 2.000000e+00, %5105
  %5107 = fmul fast float %5106, %4733
  %5108 = extractvalue %dx.types.CBufRet.f32 %4994, 3
  %5109 = fmul fast float %5108, %4093
  %5110 = fadd fast float %5109, %4732
  %5111 = fmul fast float %5110, %5106
  %5112 = call float @dx.op.unary.f32(i32 27, float %5107)  ; Round_ni(value)
  %5113 = fsub fast float %5107, %5112
  %5114 = fmul fast float %5113, 2.097152e+06
  %5115 = fadd fast float %5111, %5114
  %5116 = call float @dx.op.unary.f32(i32 27, float %5115)  ; Round_ni(value)
  %5117 = fsub fast float %5111, %5116
  %5118 = fmul fast float %5117, 0x401921FB60000000
  %5119 = fmul fast float %5113, 0x416921FB60000000
  %5120 = fadd fast float %5118, %5119
  %5121 = fmul fast float %4734, %5105
  %5122 = fdiv fast float 2.000000e+00, %5121
  %5123 = fmul fast float %5122, %4766
  %5124 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %5125 = extractvalue %dx.types.CBufRet.f32 %5124, 0
  %5126 = fmul fast float %5125, %4093
  %5127 = fadd fast float %5126, %4765
  %5128 = fmul fast float %5127, %5122
  %5129 = call float @dx.op.unary.f32(i32 27, float %5123)  ; Round_ni(value)
  %5130 = fsub fast float %5123, %5129
  %5131 = fmul fast float %5130, 2.097152e+06
  %5132 = fadd fast float %5128, %5131
  %5133 = call float @dx.op.unary.f32(i32 27, float %5132)  ; Round_ni(value)
  %5134 = fsub fast float %5128, %5133
  %5135 = fmul fast float %5134, 0x401921FB60000000
  %5136 = fmul fast float %5130, 0x416921FB60000000
  %5137 = fadd fast float %5135, %5136
  %5138 = fmul fast float %4734, %5121
  %5139 = fdiv fast float 2.000000e+00, %5138
  %5140 = fmul fast float %5139, %4794
  %5141 = extractvalue %dx.types.CBufRet.f32 %5124, 1
  %5142 = fmul fast float %5141, %4093
  %5143 = fadd fast float %5142, %4793
  %5144 = fmul fast float %5143, %5139
  %5145 = call float @dx.op.unary.f32(i32 27, float %5140)  ; Round_ni(value)
  %5146 = fsub fast float %5140, %5145
  %5147 = fmul fast float %5146, 2.097152e+06
  %5148 = fadd fast float %5144, %5147
  %5149 = call float @dx.op.unary.f32(i32 27, float %5148)  ; Round_ni(value)
  %5150 = fsub fast float %5144, %5149
  %5151 = fmul fast float %5150, 0x401921FB60000000
  %5152 = fmul fast float %5146, 0x416921FB60000000
  %5153 = fadd fast float %5151, %5152
  %5154 = fmul fast float %4851, %5088
  %5155 = fmul fast float %4854, %5154
  %5156 = fdiv fast float 2.000000e+00, %5155
  %5157 = fmul fast float %5156, %4849
  %5158 = extractvalue %dx.types.CBufRet.f32 %5124, 2
  %5159 = fmul fast float %5158, %4093
  %5160 = fadd fast float %5159, %4848
  %5161 = fmul fast float %5160, %5156
  %5162 = call float @dx.op.unary.f32(i32 27, float %5157)  ; Round_ni(value)
  %5163 = fsub fast float %5157, %5162
  %5164 = fmul fast float %5163, 2.097152e+06
  %5165 = fadd fast float %5161, %5164
  %5166 = call float @dx.op.unary.f32(i32 27, float %5165)  ; Round_ni(value)
  %5167 = fsub fast float %5161, %5166
  %5168 = fmul fast float %5167, 0x401921FB60000000
  %5169 = fmul fast float %5163, 0x416921FB60000000
  %5170 = fadd fast float %5168, %5169
  %5171 = fmul fast float %4734, %5155
  %5172 = fdiv fast float 2.000000e+00, %5171
  %5173 = fmul fast float %5172, %4884
  %5174 = extractvalue %dx.types.CBufRet.f32 %5124, 3
  %5175 = fmul fast float %5174, %4093
  %5176 = fadd fast float %5175, %4883
  %5177 = fmul fast float %5176, %5172
  %5178 = call float @dx.op.unary.f32(i32 27, float %5173)  ; Round_ni(value)
  %5179 = fsub fast float %5173, %5178
  %5180 = fmul fast float %5179, 2.097152e+06
  %5181 = fadd fast float %5177, %5180
  %5182 = call float @dx.op.unary.f32(i32 27, float %5181)  ; Round_ni(value)
  %5183 = fsub fast float %5177, %5182
  %5184 = fmul fast float %5183, 0x401921FB60000000
  %5185 = fmul fast float %5179, 0x416921FB60000000
  %5186 = fadd fast float %5184, %5185
  %5187 = fmul fast float %4734, %5171
  %5188 = fdiv fast float 2.000000e+00, %5187
  %5189 = fmul fast float %5188, %4912
  %5190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 78)  ; CBufferLoadLegacy(handle,regIndex)
  %5191 = extractvalue %dx.types.CBufRet.f32 %5190, 0
  %5192 = fmul fast float %5191, %4093
  %5193 = fadd fast float %5192, %4911
  %5194 = fmul fast float %5193, %5188
  %5195 = call float @dx.op.unary.f32(i32 27, float %5189)  ; Round_ni(value)
  %5196 = fsub fast float %5189, %5195
  %5197 = fmul fast float %5196, 2.097152e+06
  %5198 = fadd fast float %5194, %5197
  %5199 = call float @dx.op.unary.f32(i32 27, float %5198)  ; Round_ni(value)
  %5200 = fsub fast float %5194, %5199
  %5201 = fmul fast float %5200, 0x401921FB60000000
  %5202 = fmul fast float %5196, 0x416921FB60000000
  %5203 = fadd fast float %5201, %5202
  %5204 = fmul fast float %4734, %5187
  %5205 = fdiv fast float 2.000000e+00, %5204
  %5206 = fmul fast float %5205, %4940
  %5207 = extractvalue %dx.types.CBufRet.f32 %5190, 1
  %5208 = fmul fast float %5207, %4093
  %5209 = fadd fast float %5208, %4939
  %5210 = fmul fast float %5209, %5205
  %5211 = call float @dx.op.unary.f32(i32 27, float %5206)  ; Round_ni(value)
  %5212 = fsub fast float %5206, %5211
  %5213 = fmul fast float %5212, 2.097152e+06
  %5214 = fadd fast float %5210, %5213
  %5215 = call float @dx.op.unary.f32(i32 27, float %5214)  ; Round_ni(value)
  %5216 = fsub fast float %5210, %5215
  %5217 = fmul fast float %5216, 0x401921FB60000000
  %5218 = fmul fast float %5212, 0x416921FB60000000
  %5219 = fadd fast float %5217, %5218
  %5220 = fmul fast float %4995, %5154
  %5221 = fdiv fast float 2.000000e+00, %5220
  %5222 = fmul fast float %5221, %4993
  %5223 = fadd fast float %5159, %4992
  %5224 = fmul fast float %5223, %5221
  %5225 = call float @dx.op.unary.f32(i32 27, float %5222)  ; Round_ni(value)
  %5226 = fsub fast float %5222, %5225
  %5227 = fmul fast float %5226, 2.097152e+06
  %5228 = fadd fast float %5224, %5227
  %5229 = call float @dx.op.unary.f32(i32 27, float %5228)  ; Round_ni(value)
  %5230 = fsub fast float %5224, %5229
  %5231 = fmul fast float %5230, 0x401921FB60000000
  %5232 = fmul fast float %5226, 0x416921FB60000000
  %5233 = fadd fast float %5231, %5232
  %5234 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %5235 = extractvalue %dx.types.CBufRet.f32 %5234, 3
  %5236 = fmul fast float %5235, %5220
  %5237 = fdiv fast float 2.000000e+00, %5236
  %5238 = fmul fast float %5237, %5021
  %5239 = fadd fast float %5175, %5020
  %5240 = fmul fast float %5239, %5237
  %5241 = call float @dx.op.unary.f32(i32 27, float %5238)  ; Round_ni(value)
  %5242 = fsub fast float %5238, %5241
  %5243 = fmul fast float %5242, 2.097152e+06
  %5244 = fadd fast float %5240, %5243
  %5245 = call float @dx.op.unary.f32(i32 27, float %5244)  ; Round_ni(value)
  %5246 = fsub fast float %5240, %5245
  %5247 = fmul fast float %5246, 0x401921FB60000000
  %5248 = fmul fast float %5242, 0x416921FB60000000
  %5249 = fadd fast float %5247, %5248
  %5250 = fmul fast float %5235, %5236
  %5251 = fdiv fast float 2.000000e+00, %5250
  %5252 = fmul fast float %5251, %5047
  %5253 = fadd fast float %5192, %5046
  %5254 = fmul fast float %5253, %5251
  %5255 = call float @dx.op.unary.f32(i32 27, float %5252)  ; Round_ni(value)
  %5256 = fsub fast float %5252, %5255
  %5257 = fmul fast float %5256, 2.097152e+06
  %5258 = fadd fast float %5254, %5257
  %5259 = call float @dx.op.unary.f32(i32 27, float %5258)  ; Round_ni(value)
  %5260 = fsub fast float %5254, %5259
  %5261 = fmul fast float %5260, 0x401921FB60000000
  %5262 = fmul fast float %5256, 0x416921FB60000000
  %5263 = fadd fast float %5261, %5262
  %5264 = fmul fast float %5235, %5250
  %5265 = fdiv fast float 2.000000e+00, %5264
  %5266 = fmul fast float %5265, %5073
  %5267 = fadd fast float %5208, %5072
  %5268 = fmul fast float %5267, %5265
  %5269 = call float @dx.op.unary.f32(i32 27, float %5266)  ; Round_ni(value)
  %5270 = fsub fast float %5266, %5269
  %5271 = fmul fast float %5270, 2.097152e+06
  %5272 = fadd fast float %5268, %5271
  %5273 = call float @dx.op.unary.f32(i32 27, float %5272)  ; Round_ni(value)
  %5274 = fsub fast float %5268, %5273
  %5275 = fmul fast float %5274, 0x401921FB60000000
  %5276 = fmul fast float %5270, 0x416921FB60000000
  %5277 = fadd fast float %5275, %5276
  %5278 = fmul fast float %3773, 4.000000e+00
  %5279 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 62)  ; CBufferLoadLegacy(handle,regIndex)
  %5280 = extractvalue %dx.types.CBufRet.f32 %5279, 2
  %5281 = fmul fast float %5280, %5278
  %5282 = fdiv fast float 2.000000e+00, %5281
  %5283 = fmul fast float %5282, %4086
  %5284 = extractvalue %dx.types.CBufRet.f32 %5190, 2
  %5285 = fmul fast float %5284, %4093
  %5286 = fadd fast float %5285, %3770
  %5287 = fmul fast float %5286, %5282
  %5288 = call float @dx.op.unary.f32(i32 27, float %5283)  ; Round_ni(value)
  %5289 = fsub fast float %5283, %5288
  %5290 = fmul fast float %5289, 2.097152e+06
  %5291 = fadd fast float %5287, %5290
  %5292 = call float @dx.op.unary.f32(i32 27, float %5291)  ; Round_ni(value)
  %5293 = fsub fast float %5287, %5292
  %5294 = fmul fast float %5293, 0x401921FB60000000
  %5295 = fmul fast float %5289, 0x416921FB60000000
  %5296 = fadd fast float %5294, %5295
  %5297 = fmul fast float %5235, %5281
  %5298 = fdiv fast float 2.000000e+00, %5297
  %5299 = fmul fast float %5298, %4733
  %5300 = extractvalue %dx.types.CBufRet.f32 %5190, 3
  %5301 = fmul fast float %5300, %4093
  %5302 = fadd fast float %5301, %4732
  %5303 = fmul fast float %5302, %5298
  %5304 = call float @dx.op.unary.f32(i32 27, float %5299)  ; Round_ni(value)
  %5305 = fsub fast float %5299, %5304
  %5306 = fmul fast float %5305, 2.097152e+06
  %5307 = fadd fast float %5303, %5306
  %5308 = call float @dx.op.unary.f32(i32 27, float %5307)  ; Round_ni(value)
  %5309 = fsub fast float %5303, %5308
  %5310 = fmul fast float %5309, 0x401921FB60000000
  %5311 = fmul fast float %5305, 0x416921FB60000000
  %5312 = fadd fast float %5310, %5311
  %5313 = fmul fast float %5235, %5297
  %5314 = fdiv fast float 2.000000e+00, %5313
  %5315 = fmul fast float %5314, %4766
  %5316 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 79)  ; CBufferLoadLegacy(handle,regIndex)
  %5317 = extractvalue %dx.types.CBufRet.f32 %5316, 0
  %5318 = fmul fast float %5317, %4093
  %5319 = fadd fast float %5318, %4765
  %5320 = fmul fast float %5319, %5314
  %5321 = call float @dx.op.unary.f32(i32 27, float %5315)  ; Round_ni(value)
  %5322 = fsub fast float %5315, %5321
  %5323 = fmul fast float %5322, 2.097152e+06
  %5324 = fadd fast float %5320, %5323
  %5325 = call float @dx.op.unary.f32(i32 27, float %5324)  ; Round_ni(value)
  %5326 = fsub fast float %5320, %5325
  %5327 = fmul fast float %5326, 0x401921FB60000000
  %5328 = fmul fast float %5322, 0x416921FB60000000
  %5329 = fadd fast float %5327, %5328
  %5330 = fmul fast float %5235, %5313
  %5331 = fdiv fast float 2.000000e+00, %5330
  %5332 = fmul fast float %5331, %4794
  %5333 = extractvalue %dx.types.CBufRet.f32 %5316, 1
  %5334 = fmul fast float %5333, %4093
  %5335 = fadd fast float %5334, %4793
  %5336 = fmul fast float %5335, %5331
  %5337 = call float @dx.op.unary.f32(i32 27, float %5332)  ; Round_ni(value)
  %5338 = fsub fast float %5332, %5337
  %5339 = fmul fast float %5338, 2.097152e+06
  %5340 = fadd fast float %5336, %5339
  %5341 = call float @dx.op.unary.f32(i32 27, float %5340)  ; Round_ni(value)
  %5342 = fsub fast float %5336, %5341
  %5343 = fmul fast float %5342, 0x401921FB60000000
  %5344 = fmul fast float %5338, 0x416921FB60000000
  %5345 = fadd fast float %5343, %5344
  %5346 = fmul fast float %4851, %5278
  %5347 = fmul fast float %4854, %5346
  %5348 = fdiv fast float 2.000000e+00, %5347
  %5349 = fmul fast float %5348, %4849
  %5350 = extractvalue %dx.types.CBufRet.f32 %5316, 2
  %5351 = fmul fast float %5350, %4093
  %5352 = fadd fast float %5351, %4848
  %5353 = fmul fast float %5352, %5348
  %5354 = call float @dx.op.unary.f32(i32 27, float %5349)  ; Round_ni(value)
  %5355 = fsub fast float %5349, %5354
  %5356 = fmul fast float %5355, 2.097152e+06
  %5357 = fadd fast float %5353, %5356
  %5358 = call float @dx.op.unary.f32(i32 27, float %5357)  ; Round_ni(value)
  %5359 = fsub fast float %5353, %5358
  %5360 = fmul fast float %5359, 0x401921FB60000000
  %5361 = fmul fast float %5355, 0x416921FB60000000
  %5362 = fadd fast float %5360, %5361
  %5363 = fmul fast float %5235, %5347
  %5364 = fdiv fast float 2.000000e+00, %5363
  %5365 = fmul fast float %5364, %4884
  %5366 = extractvalue %dx.types.CBufRet.f32 %5316, 3
  %5367 = fmul fast float %5366, %4093
  %5368 = fadd fast float %5367, %4883
  %5369 = fmul fast float %5368, %5364
  %5370 = call float @dx.op.unary.f32(i32 27, float %5365)  ; Round_ni(value)
  %5371 = fsub fast float %5365, %5370
  %5372 = fmul fast float %5371, 2.097152e+06
  %5373 = fadd fast float %5369, %5372
  %5374 = call float @dx.op.unary.f32(i32 27, float %5373)  ; Round_ni(value)
  %5375 = fsub fast float %5369, %5374
  %5376 = fmul fast float %5375, 0x401921FB60000000
  %5377 = fmul fast float %5371, 0x416921FB60000000
  %5378 = fadd fast float %5376, %5377
  %5379 = fmul fast float %5235, %5363
  %5380 = fdiv fast float 2.000000e+00, %5379
  %5381 = fmul fast float %5380, %4912
  %5382 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 80)  ; CBufferLoadLegacy(handle,regIndex)
  %5383 = extractvalue %dx.types.CBufRet.f32 %5382, 0
  %5384 = fmul fast float %5383, %4093
  %5385 = fadd fast float %5384, %4911
  %5386 = fmul fast float %5385, %5380
  %5387 = call float @dx.op.unary.f32(i32 27, float %5381)  ; Round_ni(value)
  %5388 = fsub fast float %5381, %5387
  %5389 = fmul fast float %5388, 2.097152e+06
  %5390 = fadd fast float %5386, %5389
  %5391 = call float @dx.op.unary.f32(i32 27, float %5390)  ; Round_ni(value)
  %5392 = fsub fast float %5386, %5391
  %5393 = fmul fast float %5392, 0x401921FB60000000
  %5394 = fmul fast float %5388, 0x416921FB60000000
  %5395 = fadd fast float %5393, %5394
  %5396 = fmul fast float %5235, %5379
  %5397 = fdiv fast float 2.000000e+00, %5396
  %5398 = fmul fast float %5397, %4940
  %5399 = extractvalue %dx.types.CBufRet.f32 %5382, 1
  %5400 = fmul fast float %5399, %4093
  %5401 = fadd fast float %5400, %4939
  %5402 = fmul fast float %5401, %5397
  %5403 = call float @dx.op.unary.f32(i32 27, float %5398)  ; Round_ni(value)
  %5404 = fsub fast float %5398, %5403
  %5405 = fmul fast float %5404, 2.097152e+06
  %5406 = fadd fast float %5402, %5405
  %5407 = call float @dx.op.unary.f32(i32 27, float %5406)  ; Round_ni(value)
  %5408 = fsub fast float %5402, %5407
  %5409 = fmul fast float %5408, 0x401921FB60000000
  %5410 = fmul fast float %5404, 0x416921FB60000000
  %5411 = fadd fast float %5409, %5410
  %5412 = fmul fast float %4995, %5346
  %5413 = fdiv fast float 2.000000e+00, %5412
  %5414 = fmul fast float %5413, %4993
  %5415 = fadd fast float %5351, %4992
  %5416 = fmul fast float %5415, %5413
  %5417 = call float @dx.op.unary.f32(i32 27, float %5414)  ; Round_ni(value)
  %5418 = fsub fast float %5414, %5417
  %5419 = fmul fast float %5418, 2.097152e+06
  %5420 = fadd fast float %5416, %5419
  %5421 = call float @dx.op.unary.f32(i32 27, float %5420)  ; Round_ni(value)
  %5422 = fsub fast float %5416, %5421
  %5423 = fmul fast float %5422, 0x401921FB60000000
  %5424 = fmul fast float %5418, 0x416921FB60000000
  %5425 = fadd fast float %5423, %5424
  %5426 = fmul fast float %5235, %5412
  %5427 = fdiv fast float 2.000000e+00, %5426
  %5428 = fmul fast float %5427, %5021
  %5429 = fadd fast float %5367, %5020
  %5430 = fmul fast float %5429, %5427
  %5431 = call float @dx.op.unary.f32(i32 27, float %5428)  ; Round_ni(value)
  %5432 = fsub fast float %5428, %5431
  %5433 = fmul fast float %5432, 2.097152e+06
  %5434 = fadd fast float %5430, %5433
  %5435 = call float @dx.op.unary.f32(i32 27, float %5434)  ; Round_ni(value)
  %5436 = fsub fast float %5430, %5435
  %5437 = fmul fast float %5436, 0x401921FB60000000
  %5438 = fmul fast float %5432, 0x416921FB60000000
  %5439 = fadd fast float %5437, %5438
  %5440 = fmul fast float %5235, %5426
  %5441 = fdiv fast float 2.000000e+00, %5440
  %5442 = fmul fast float %5441, %5047
  %5443 = fadd fast float %5384, %5046
  %5444 = fmul fast float %5443, %5441
  %5445 = call float @dx.op.unary.f32(i32 27, float %5442)  ; Round_ni(value)
  %5446 = fsub fast float %5442, %5445
  %5447 = fmul fast float %5446, 2.097152e+06
  %5448 = fadd fast float %5444, %5447
  %5449 = call float @dx.op.unary.f32(i32 27, float %5448)  ; Round_ni(value)
  %5450 = fsub fast float %5444, %5449
  %5451 = fmul fast float %5450, 0x401921FB60000000
  %5452 = fmul fast float %5446, 0x416921FB60000000
  %5453 = fadd fast float %5451, %5452
  %5454 = fmul fast float %5235, %5440
  %5455 = fdiv fast float 2.000000e+00, %5454
  %5456 = fmul fast float %5455, %5073
  %5457 = fadd fast float %5400, %5072
  %5458 = fmul fast float %5457, %5455
  %5459 = call float @dx.op.unary.f32(i32 27, float %5456)  ; Round_ni(value)
  %5460 = fsub fast float %5456, %5459
  %5461 = fmul fast float %5460, 2.097152e+06
  %5462 = fadd fast float %5458, %5461
  %5463 = call float @dx.op.unary.f32(i32 27, float %5462)  ; Round_ni(value)
  %5464 = fsub fast float %5458, %5463
  %5465 = fmul fast float %5464, 0x401921FB60000000
  %5466 = fmul fast float %5460, 0x416921FB60000000
  %5467 = fadd fast float %5465, %5466
  %5468 = fmul fast float %3773, 7.500000e-01
  %5469 = fmul fast float %5280, %5468
  %5470 = fdiv fast float 2.000000e+00, %5469
  %5471 = fmul fast float %5470, %4086
  %5472 = fmul fast float %5094, %5470
  %5473 = call float @dx.op.unary.f32(i32 27, float %5471)  ; Round_ni(value)
  %5474 = fsub fast float %5471, %5473
  %5475 = fmul fast float %5474, 2.097152e+06
  %5476 = fadd fast float %5472, %5475
  %5477 = call float @dx.op.unary.f32(i32 27, float %5476)  ; Round_ni(value)
  %5478 = fsub fast float %5472, %5477
  %5479 = fmul fast float %5478, 0x401921FB60000000
  %5480 = fmul fast float %5474, 0x416921FB60000000
  %5481 = fadd fast float %5479, %5480
  %5482 = call float @dx.op.unary.f32(i32 13, float %5481)  ; Sin(value)
  %5483 = fmul fast float %5235, %5469
  %5484 = fdiv fast float 2.000000e+00, %5483
  %5485 = fmul fast float %5484, %4733
  %5486 = fmul fast float %5110, %5484
  %5487 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %5488 = extractvalue %dx.types.CBufRet.f32 %5487, 2
  %5489 = call float @dx.op.unary.f32(i32 27, float %5485)  ; Round_ni(value)
  %5490 = fsub fast float %5485, %5489
  %5491 = fmul fast float %5490, 2.097152e+06
  %5492 = fadd fast float %5486, %5491
  %5493 = call float @dx.op.unary.f32(i32 27, float %5492)  ; Round_ni(value)
  %5494 = fsub fast float %5486, %5493
  %5495 = fmul fast float %5494, 0x401921FB60000000
  %5496 = fmul fast float %5490, 0x416921FB60000000
  %5497 = fadd fast float %5495, %5496
  %5498 = call float @dx.op.unary.f32(i32 13, float %5497)  ; Sin(value)
  %5499 = fmul fast float %5235, %5483
  %5500 = fdiv fast float 2.000000e+00, %5499
  %5501 = fmul fast float %5500, %4766
  %5502 = fmul fast float %5127, %5500
  %5503 = call float @dx.op.unary.f32(i32 27, float %5501)  ; Round_ni(value)
  %5504 = fsub fast float %5501, %5503
  %5505 = fmul fast float %5504, 2.097152e+06
  %5506 = fadd fast float %5502, %5505
  %5507 = call float @dx.op.unary.f32(i32 27, float %5506)  ; Round_ni(value)
  %5508 = fsub fast float %5502, %5507
  %5509 = fmul fast float %5508, 0x401921FB60000000
  %5510 = fmul fast float %5504, 0x416921FB60000000
  %5511 = fadd fast float %5509, %5510
  %5512 = fmul fast float %5235, %5499
  %5513 = fdiv fast float 2.000000e+00, %5512
  %5514 = fmul fast float %5513, %4794
  %5515 = fmul fast float %5143, %5513
  %5516 = call float @dx.op.unary.f32(i32 27, float %5514)  ; Round_ni(value)
  %5517 = fsub fast float %5514, %5516
  %5518 = fmul fast float %5517, 2.097152e+06
  %5519 = fadd fast float %5515, %5518
  %5520 = call float @dx.op.unary.f32(i32 27, float %5519)  ; Round_ni(value)
  %5521 = fsub fast float %5515, %5520
  %5522 = fmul fast float %5521, 0x401921FB60000000
  %5523 = fmul fast float %5517, 0x416921FB60000000
  %5524 = fadd fast float %5522, %5523
  %5525 = call float @dx.op.unary.f32(i32 13, float %5524)  ; Sin(value)
  %5526 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 28)  ; CBufferLoadLegacy(handle,regIndex)
  %5527 = extractvalue %dx.types.CBufRet.f32 %5526, 3
  %5528 = fmul fast float %5527, %5468
  %5529 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %5530 = extractvalue %dx.types.CBufRet.f32 %5529, 0
  %5531 = fmul fast float %5530, %5528
  %5532 = fdiv fast float 2.000000e+00, %5531
  %5533 = fmul fast float %5532, %4849
  %5534 = fmul fast float %5160, %5532
  %5535 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %5536 = extractvalue %dx.types.CBufRet.f32 %5535, 3
  %5537 = call float @dx.op.unary.f32(i32 27, float %5533)  ; Round_ni(value)
  %5538 = fsub fast float %5533, %5537
  %5539 = fmul fast float %5538, 2.097152e+06
  %5540 = fadd fast float %5534, %5539
  %5541 = call float @dx.op.unary.f32(i32 27, float %5540)  ; Round_ni(value)
  %5542 = fsub fast float %5534, %5541
  %5543 = fmul fast float %5542, 0x401921FB60000000
  %5544 = fmul fast float %5538, 0x416921FB60000000
  %5545 = fadd fast float %5543, %5544
  %5546 = fmul fast float %5235, %5531
  %5547 = fdiv fast float 2.000000e+00, %5546
  %5548 = fmul fast float %5547, %4884
  %5549 = fmul fast float %5176, %5547
  %5550 = call float @dx.op.unary.f32(i32 27, float %5548)  ; Round_ni(value)
  %5551 = fsub fast float %5548, %5550
  %5552 = fmul fast float %5551, 2.097152e+06
  %5553 = fadd fast float %5549, %5552
  %5554 = call float @dx.op.unary.f32(i32 27, float %5553)  ; Round_ni(value)
  %5555 = fsub fast float %5549, %5554
  %5556 = fmul fast float %5555, 0x401921FB60000000
  %5557 = fmul fast float %5551, 0x416921FB60000000
  %5558 = fadd fast float %5556, %5557
  %5559 = fmul fast float %5235, %5546
  %5560 = fdiv fast float 2.000000e+00, %5559
  %5561 = fmul fast float %5560, %4912
  %5562 = fmul fast float %5193, %5560
  %5563 = call float @dx.op.unary.f32(i32 27, float %5561)  ; Round_ni(value)
  %5564 = fsub fast float %5561, %5563
  %5565 = fmul fast float %5564, 2.097152e+06
  %5566 = fadd fast float %5562, %5565
  %5567 = call float @dx.op.unary.f32(i32 27, float %5566)  ; Round_ni(value)
  %5568 = fsub fast float %5562, %5567
  %5569 = fmul fast float %5568, 0x401921FB60000000
  %5570 = fmul fast float %5564, 0x416921FB60000000
  %5571 = fadd fast float %5569, %5570
  %5572 = fmul fast float %5235, %5559
  %5573 = fdiv fast float 2.000000e+00, %5572
  %5574 = fmul fast float %5573, %4940
  %5575 = fmul fast float %5209, %5573
  %5576 = call float @dx.op.unary.f32(i32 27, float %5574)  ; Round_ni(value)
  %5577 = fsub fast float %5574, %5576
  %5578 = fmul fast float %5577, 2.097152e+06
  %5579 = fadd fast float %5575, %5578
  %5580 = call float @dx.op.unary.f32(i32 27, float %5579)  ; Round_ni(value)
  %5581 = fsub fast float %5575, %5580
  %5582 = fmul fast float %5581, 0x401921FB60000000
  %5583 = fmul fast float %5577, 0x416921FB60000000
  %5584 = fadd fast float %5582, %5583
  %5585 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %5586 = extractvalue %dx.types.CBufRet.f32 %5585, 1
  %5587 = fmul fast float %5586, %5528
  %5588 = fdiv fast float 2.000000e+00, %5587
  %5589 = fmul fast float %5588, %4993
  %5590 = fmul fast float %5223, %5588
  %5591 = call float @dx.op.unary.f32(i32 27, float %5589)  ; Round_ni(value)
  %5592 = fsub fast float %5589, %5591
  %5593 = fmul fast float %5592, 2.097152e+06
  %5594 = fadd fast float %5590, %5593
  %5595 = call float @dx.op.unary.f32(i32 27, float %5594)  ; Round_ni(value)
  %5596 = fsub fast float %5590, %5595
  %5597 = fmul fast float %5596, 0x401921FB60000000
  %5598 = fmul fast float %5592, 0x416921FB60000000
  %5599 = fadd fast float %5597, %5598
  %5600 = fmul fast float %5235, %5587
  %5601 = fdiv fast float 2.000000e+00, %5600
  %5602 = fmul fast float %5601, %5021
  %5603 = fmul fast float %5239, %5601
  %5604 = call float @dx.op.unary.f32(i32 27, float %5602)  ; Round_ni(value)
  %5605 = fsub fast float %5602, %5604
  %5606 = fmul fast float %5605, 2.097152e+06
  %5607 = fadd fast float %5603, %5606
  %5608 = call float @dx.op.unary.f32(i32 27, float %5607)  ; Round_ni(value)
  %5609 = fsub fast float %5603, %5608
  %5610 = fmul fast float %5609, 0x401921FB60000000
  %5611 = fmul fast float %5605, 0x416921FB60000000
  %5612 = fadd fast float %5610, %5611
  %5613 = fmul fast float %5235, %5600
  %5614 = fdiv fast float 2.000000e+00, %5613
  %5615 = fmul fast float %5614, %5047
  %5616 = fmul fast float %5253, %5614
  %5617 = call float @dx.op.unary.f32(i32 27, float %5615)  ; Round_ni(value)
  %5618 = fsub fast float %5615, %5617
  %5619 = fmul fast float %5618, 2.097152e+06
  %5620 = fadd fast float %5616, %5619
  %5621 = call float @dx.op.unary.f32(i32 27, float %5620)  ; Round_ni(value)
  %5622 = fsub fast float %5616, %5621
  %5623 = fmul fast float %5622, 0x401921FB60000000
  %5624 = fmul fast float %5618, 0x416921FB60000000
  %5625 = fadd fast float %5623, %5624
  %5626 = fmul fast float %5235, %5613
  %5627 = fdiv fast float 2.000000e+00, %5626
  %5628 = fmul fast float %5627, %5073
  %5629 = fmul fast float %5267, %5627
  %5630 = call float @dx.op.unary.f32(i32 27, float %5628)  ; Round_ni(value)
  %5631 = fsub fast float %5628, %5630
  %5632 = fmul fast float %5631, 2.097152e+06
  %5633 = fadd fast float %5629, %5632
  %5634 = call float @dx.op.unary.f32(i32 27, float %5633)  ; Round_ni(value)
  %5635 = fsub fast float %5629, %5634
  %5636 = fmul fast float %5635, 0x401921FB60000000
  %5637 = fmul fast float %5631, 0x416921FB60000000
  %5638 = fadd fast float %5636, %5637
  %5639 = extractvalue %dx.types.CBufRet.f32 %5382, 2
  %5640 = extractvalue %dx.types.CBufRet.f32 %5382, 3
  %5641 = fcmp fast oge float %5639, -1.000000e+00
  %5642 = select i1 %5641, float %5639, float %5640
  %5643 = fadd fast float %5639, 1.000000e+00
  %5644 = call float @dx.op.unary.f32(i32 6, float %5643)  ; FAbs(value)
  %5645 = fcmp fast ogt float %5644, 0x3EE4F8B580000000
  %5646 = select i1 %5645, float %5642, float %5639
  %5647 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 81)  ; CBufferLoadLegacy(handle,regIndex)
  %5648 = extractvalue %dx.types.CBufRet.f32 %5647, 0
  %5649 = fcmp fast oge float %5646, 1.000000e+00
  %5650 = fadd fast float %5646, -1.000000e+00
  %5651 = call float @dx.op.unary.f32(i32 6, float %5650)  ; FAbs(value)
  %5652 = fcmp fast ogt float %5651, 0x3EE4F8B580000000
  %5653 = and i1 %5652, %5649
  %5654 = select i1 %5653, float %5648, float %5639
  %5655 = fcmp fast oge float %5654, 0.000000e+00
  %5656 = select i1 %5655, float 1.000000e+00, float -1.000000e+00
  %5657 = call float @dx.op.unary.f32(i32 6, float %5654)  ; FAbs(value)
  %5658 = fcmp fast ogt float %5657, 0x3EE4F8B580000000
  %5659 = select i1 %5658, float %5656, float 1.000000e+00
  %5660 = call float @dx.op.binary.f32(i32 35, float %5659, float -1.000000e+00)  ; FMax(a,b)
  %5661 = call float @dx.op.binary.f32(i32 36, float %5660, float 1.000000e+00)  ; FMin(a,b)
  %5662 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 82)  ; CBufferLoadLegacy(handle,regIndex)
  %5663 = extractvalue %dx.types.CBufRet.f32 %5662, 1
  %5664 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %5665 = extractvalue %dx.types.CBufRet.f32 %5664, 0
  %5666 = extractvalue %dx.types.CBufRet.f32 %5664, 1
  %5667 = fadd fast float %5665, %5661
  %5668 = fadd fast float %5666, %5663
  %5669 = call float @dx.op.binary.f32(i32 35, float %5667, float -1.000000e+00)  ; FMax(a,b)
  %5670 = call float @dx.op.binary.f32(i32 35, float %5668, float -1.000000e+00)  ; FMax(a,b)
  %5671 = call float @dx.op.binary.f32(i32 36, float %5669, float 1.000000e+00)  ; FMin(a,b)
  %5672 = call float @dx.op.binary.f32(i32 36, float %5670, float 1.000000e+00)  ; FMin(a,b)
  %5673 = fmul fast float %5671, %295
  %5674 = fmul fast float %5672, %296
  %5675 = fmul fast float %5671, %76
  %5676 = fadd fast float %5674, %5673
  %5677 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %5678 = extractvalue %dx.types.CBufRet.f32 %5677, 2
  %5679 = fmul fast float %5678, %3773
  %5680 = fdiv fast float 2.000000e+00, %5679
  %5681 = fadd fast float %295, 1.000000e+04
  %5682 = fadd fast float %296, 1.000000e+04
  %5683 = fadd fast float %297, 1.000000e+04
  %5684 = fmul fast float %3792, %5681
  %5685 = fmul fast float %3792, %5682
  %5686 = fmul fast float %3792, %5683
  %5687 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 63)  ; CBufferLoadLegacy(handle,regIndex)
  %5688 = extractvalue %dx.types.CBufRet.f32 %5687, 0
  %5689 = fmul fast float %5688, %5684
  %5690 = fmul fast float %5688, %5685
  %5691 = fmul fast float %5688, %5686
  %5692 = fmul fast float %5688, %4109
  %5693 = fmul fast float %5688, %4112
  %5694 = fmul fast float %5688, %4115
  %5695 = extractvalue %dx.types.CBufRet.f32 %5687, 1
  %5696 = fmul fast float %5689, %5695
  %5697 = fmul fast float %5690, %5695
  %5698 = fmul fast float %5691, %5695
  %5699 = fmul fast float %5692, %5695
  %5700 = fmul fast float %5693, %5695
  %5701 = fmul fast float %5694, %5695
  %5702 = fadd fast float %5698, %3800
  %5703 = fmul fast float %5696, 0x3EA0000000000000
  %5704 = fmul fast float %5697, 0x3EA0000000000000
  %5705 = fmul fast float %5702, 0x3EA0000000000000
  %5706 = fadd fast float %5699, 5.000000e-01
  %5707 = fadd fast float %5706, %5703
  %5708 = fadd fast float %5700, 5.000000e-01
  %5709 = fadd fast float %5708, %5704
  %5710 = fadd fast float %5701, 5.000000e-01
  %5711 = fadd fast float %5710, %5705
  %5712 = call float @dx.op.unary.f32(i32 27, float %5707)  ; Round_ni(value)
  %5713 = call float @dx.op.unary.f32(i32 27, float %5709)  ; Round_ni(value)
  %5714 = call float @dx.op.unary.f32(i32 27, float %5711)  ; Round_ni(value)
  %5715 = fsub fast float %5699, %5712
  %5716 = fsub fast float %5700, %5713
  %5717 = fsub fast float %5701, %5714
  %5718 = fmul fast float %5715, 2.097152e+06
  %5719 = fmul fast float %5716, 2.097152e+06
  %5720 = fmul fast float %5717, 2.097152e+06
  %5721 = fadd fast float %5718, %5696
  %5722 = fadd fast float %5719, %5697
  %5723 = fadd fast float %5720, %5702
  br label %5724

; <label>:5724                                    ; preds = %5724, %4704
  %5725 = phi float [ %5721, %4704 ], [ %5976, %5724 ]
  %5726 = phi float [ %5722, %4704 ], [ %5977, %5724 ]
  %5727 = phi float [ %5723, %4704 ], [ %5978, %5724 ]
  %5728 = phi float [ 0.000000e+00, %4704 ], [ %5975, %5724 ]
  %5729 = phi float [ 1.000000e+00, %4704 ], [ %5979, %5724 ]
  %5730 = phi i32 [ 0, %4704 ], [ %5980, %5724 ]
  %5731 = call float @dx.op.unary.f32(i32 22, float %5725)  ; Frc(value)
  %5732 = call float @dx.op.unary.f32(i32 22, float %5726)  ; Frc(value)
  %5733 = call float @dx.op.unary.f32(i32 22, float %5727)  ; Frc(value)
  %5734 = call float @dx.op.unary.f32(i32 27, float %5725)  ; Round_ni(value)
  %5735 = call float @dx.op.unary.f32(i32 27, float %5726)  ; Round_ni(value)
  %5736 = call float @dx.op.unary.f32(i32 27, float %5727)  ; Round_ni(value)
  %5737 = call float @dx.op.dot3.f32(i32 55, float %5734, float %5735, float %5736, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %5738 = fadd fast float %5737, 1.900000e+01
  %5739 = fadd fast float %5737, 4.700000e+01
  %5740 = fadd fast float %5737, 6.600000e+01
  %5741 = fadd fast float %5737, 1.010000e+02
  %5742 = fadd fast float %5737, 1.200000e+02
  %5743 = fadd fast float %5737, 1.480000e+02
  %5744 = fadd fast float %5737, 1.670000e+02
  %5745 = fptosi float %5737 to i32
  %5746 = mul i32 %5745, 1664525
  %5747 = add i32 %5746, -781160288
  %5748 = mul i32 %5747, 1013904223
  %5749 = add i32 %5748, 1013904223
  %5750 = mul i32 %5749, %5747
  %5751 = add i32 %5750, 1013904223
  %5752 = mul i32 %5751, %5749
  %5753 = add i32 %5752, %5747
  %5754 = lshr i32 %5753, 16
  %5755 = and i32 %5754, 32768
  %5756 = and i32 %5754, 16384
  %5757 = and i32 %5754, 8192
  %5758 = uitofp i32 %5755 to float
  %5759 = uitofp i32 %5756 to float
  %5760 = uitofp i32 %5757 to float
  %5761 = fmul fast float %5758, 0x3F10000000000000
  %5762 = fmul fast float %5759, 0x3F20000000000000
  %5763 = fmul fast float %5760, 0x3F30000000000000
  %5764 = fadd fast float %5761, -1.000000e+00
  %5765 = fadd fast float %5762, -1.000000e+00
  %5766 = fadd fast float %5763, -1.000000e+00
  %5767 = call float @dx.op.dot3.f32(i32 55, float %5764, float %5765, float %5766, float %5731, float %5732, float %5733)  ; Dot3(ax,ay,az,bx,by,bz)
  %5768 = fadd fast float %5731, -1.000000e+00
  %5769 = fptosi float %5738 to i32
  %5770 = mul i32 %5769, 1664525
  %5771 = add i32 %5770, -781160288
  %5772 = mul i32 %5771, 1013904223
  %5773 = add i32 %5772, 1013904223
  %5774 = mul i32 %5773, %5771
  %5775 = add i32 %5774, 1013904223
  %5776 = mul i32 %5775, %5773
  %5777 = add i32 %5776, %5771
  %5778 = lshr i32 %5777, 16
  %5779 = and i32 %5778, 32768
  %5780 = and i32 %5778, 16384
  %5781 = and i32 %5778, 8192
  %5782 = uitofp i32 %5779 to float
  %5783 = uitofp i32 %5780 to float
  %5784 = uitofp i32 %5781 to float
  %5785 = fmul fast float %5782, 0x3F10000000000000
  %5786 = fmul fast float %5783, 0x3F20000000000000
  %5787 = fmul fast float %5784, 0x3F30000000000000
  %5788 = fadd fast float %5785, -1.000000e+00
  %5789 = fadd fast float %5786, -1.000000e+00
  %5790 = fadd fast float %5787, -1.000000e+00
  %5791 = call float @dx.op.dot3.f32(i32 55, float %5788, float %5789, float %5790, float %5768, float %5732, float %5733)  ; Dot3(ax,ay,az,bx,by,bz)
  %5792 = fadd fast float %5732, -1.000000e+00
  %5793 = fptosi float %5739 to i32
  %5794 = mul i32 %5793, 1664525
  %5795 = add i32 %5794, -781160288
  %5796 = mul i32 %5795, 1013904223
  %5797 = add i32 %5796, 1013904223
  %5798 = mul i32 %5797, %5795
  %5799 = add i32 %5798, 1013904223
  %5800 = mul i32 %5799, %5797
  %5801 = add i32 %5800, %5795
  %5802 = lshr i32 %5801, 16
  %5803 = and i32 %5802, 32768
  %5804 = and i32 %5802, 16384
  %5805 = and i32 %5802, 8192
  %5806 = uitofp i32 %5803 to float
  %5807 = uitofp i32 %5804 to float
  %5808 = uitofp i32 %5805 to float
  %5809 = fmul fast float %5806, 0x3F10000000000000
  %5810 = fmul fast float %5807, 0x3F20000000000000
  %5811 = fmul fast float %5808, 0x3F30000000000000
  %5812 = fadd fast float %5809, -1.000000e+00
  %5813 = fadd fast float %5810, -1.000000e+00
  %5814 = fadd fast float %5811, -1.000000e+00
  %5815 = call float @dx.op.dot3.f32(i32 55, float %5812, float %5813, float %5814, float %5731, float %5792, float %5733)  ; Dot3(ax,ay,az,bx,by,bz)
  %5816 = fptosi float %5740 to i32
  %5817 = mul i32 %5816, 1664525
  %5818 = add i32 %5817, -781160288
  %5819 = mul i32 %5818, 1013904223
  %5820 = add i32 %5819, 1013904223
  %5821 = mul i32 %5820, %5818
  %5822 = add i32 %5821, 1013904223
  %5823 = mul i32 %5822, %5820
  %5824 = add i32 %5823, %5818
  %5825 = lshr i32 %5824, 16
  %5826 = and i32 %5825, 32768
  %5827 = and i32 %5825, 16384
  %5828 = and i32 %5825, 8192
  %5829 = uitofp i32 %5826 to float
  %5830 = uitofp i32 %5827 to float
  %5831 = uitofp i32 %5828 to float
  %5832 = fmul fast float %5829, 0x3F10000000000000
  %5833 = fmul fast float %5830, 0x3F20000000000000
  %5834 = fmul fast float %5831, 0x3F30000000000000
  %5835 = fadd fast float %5832, -1.000000e+00
  %5836 = fadd fast float %5833, -1.000000e+00
  %5837 = fadd fast float %5834, -1.000000e+00
  %5838 = call float @dx.op.dot3.f32(i32 55, float %5835, float %5836, float %5837, float %5768, float %5792, float %5733)  ; Dot3(ax,ay,az,bx,by,bz)
  %5839 = fadd fast float %5733, -1.000000e+00
  %5840 = fptosi float %5741 to i32
  %5841 = mul i32 %5840, 1664525
  %5842 = add i32 %5841, -781160288
  %5843 = mul i32 %5842, 1013904223
  %5844 = add i32 %5843, 1013904223
  %5845 = mul i32 %5844, %5842
  %5846 = add i32 %5845, 1013904223
  %5847 = mul i32 %5846, %5844
  %5848 = add i32 %5847, %5842
  %5849 = lshr i32 %5848, 16
  %5850 = and i32 %5849, 32768
  %5851 = and i32 %5849, 16384
  %5852 = and i32 %5849, 8192
  %5853 = uitofp i32 %5850 to float
  %5854 = uitofp i32 %5851 to float
  %5855 = uitofp i32 %5852 to float
  %5856 = fmul fast float %5853, 0x3F10000000000000
  %5857 = fmul fast float %5854, 0x3F20000000000000
  %5858 = fmul fast float %5855, 0x3F30000000000000
  %5859 = fadd fast float %5856, -1.000000e+00
  %5860 = fadd fast float %5857, -1.000000e+00
  %5861 = fadd fast float %5858, -1.000000e+00
  %5862 = call float @dx.op.dot3.f32(i32 55, float %5859, float %5860, float %5861, float %5731, float %5732, float %5839)  ; Dot3(ax,ay,az,bx,by,bz)
  %5863 = fptosi float %5742 to i32
  %5864 = mul i32 %5863, 1664525
  %5865 = add i32 %5864, -781160288
  %5866 = mul i32 %5865, 1013904223
  %5867 = add i32 %5866, 1013904223
  %5868 = mul i32 %5867, %5865
  %5869 = add i32 %5868, 1013904223
  %5870 = mul i32 %5869, %5867
  %5871 = add i32 %5870, %5865
  %5872 = lshr i32 %5871, 16
  %5873 = and i32 %5872, 32768
  %5874 = and i32 %5872, 16384
  %5875 = and i32 %5872, 8192
  %5876 = uitofp i32 %5873 to float
  %5877 = uitofp i32 %5874 to float
  %5878 = uitofp i32 %5875 to float
  %5879 = fmul fast float %5876, 0x3F10000000000000
  %5880 = fmul fast float %5877, 0x3F20000000000000
  %5881 = fmul fast float %5878, 0x3F30000000000000
  %5882 = fadd fast float %5879, -1.000000e+00
  %5883 = fadd fast float %5880, -1.000000e+00
  %5884 = fadd fast float %5881, -1.000000e+00
  %5885 = call float @dx.op.dot3.f32(i32 55, float %5882, float %5883, float %5884, float %5768, float %5732, float %5839)  ; Dot3(ax,ay,az,bx,by,bz)
  %5886 = fptosi float %5743 to i32
  %5887 = mul i32 %5886, 1664525
  %5888 = add i32 %5887, -781160288
  %5889 = mul i32 %5888, 1013904223
  %5890 = add i32 %5889, 1013904223
  %5891 = mul i32 %5890, %5888
  %5892 = add i32 %5891, 1013904223
  %5893 = mul i32 %5892, %5890
  %5894 = add i32 %5893, %5888
  %5895 = lshr i32 %5894, 16
  %5896 = and i32 %5895, 32768
  %5897 = and i32 %5895, 16384
  %5898 = and i32 %5895, 8192
  %5899 = uitofp i32 %5896 to float
  %5900 = uitofp i32 %5897 to float
  %5901 = uitofp i32 %5898 to float
  %5902 = fmul fast float %5899, 0x3F10000000000000
  %5903 = fmul fast float %5900, 0x3F20000000000000
  %5904 = fmul fast float %5901, 0x3F30000000000000
  %5905 = fadd fast float %5902, -1.000000e+00
  %5906 = fadd fast float %5903, -1.000000e+00
  %5907 = fadd fast float %5904, -1.000000e+00
  %5908 = call float @dx.op.dot3.f32(i32 55, float %5905, float %5906, float %5907, float %5731, float %5792, float %5839)  ; Dot3(ax,ay,az,bx,by,bz)
  %5909 = fptosi float %5744 to i32
  %5910 = mul i32 %5909, 1664525
  %5911 = add i32 %5910, -781160288
  %5912 = mul i32 %5911, 1013904223
  %5913 = add i32 %5912, 1013904223
  %5914 = mul i32 %5913, %5911
  %5915 = add i32 %5914, 1013904223
  %5916 = mul i32 %5915, %5913
  %5917 = add i32 %5916, %5911
  %5918 = lshr i32 %5917, 16
  %5919 = and i32 %5918, 32768
  %5920 = and i32 %5918, 16384
  %5921 = and i32 %5918, 8192
  %5922 = uitofp i32 %5919 to float
  %5923 = uitofp i32 %5920 to float
  %5924 = uitofp i32 %5921 to float
  %5925 = fmul fast float %5922, 0x3F10000000000000
  %5926 = fmul fast float %5923, 0x3F20000000000000
  %5927 = fmul fast float %5924, 0x3F30000000000000
  %5928 = fadd fast float %5925, -1.000000e+00
  %5929 = fadd fast float %5926, -1.000000e+00
  %5930 = fadd fast float %5927, -1.000000e+00
  %5931 = call float @dx.op.dot3.f32(i32 55, float %5928, float %5929, float %5930, float %5768, float %5792, float %5839)  ; Dot3(ax,ay,az,bx,by,bz)
  %5932 = fmul fast float %5731, %5731
  %5933 = fmul fast float %5732, %5732
  %5934 = fmul fast float %5733, %5733
  %5935 = fmul fast float %5932, %5731
  %5936 = fmul fast float %5933, %5732
  %5937 = fmul fast float %5934, %5733
  %5938 = fmul fast float %5731, 6.000000e+00
  %5939 = fmul fast float %5732, 6.000000e+00
  %5940 = fmul fast float %5733, 6.000000e+00
  %5941 = fadd fast float %5938, -1.500000e+01
  %5942 = fadd fast float %5939, -1.500000e+01
  %5943 = fadd fast float %5940, -1.500000e+01
  %5944 = fmul fast float %5941, %5731
  %5945 = fmul fast float %5942, %5732
  %5946 = fmul fast float %5943, %5733
  %5947 = fadd fast float %5944, 1.000000e+01
  %5948 = fadd fast float %5945, 1.000000e+01
  %5949 = fadd fast float %5946, 1.000000e+01
  %5950 = fmul fast float %5935, %5947
  %5951 = fmul fast float %5936, %5948
  %5952 = fmul fast float %5937, %5949
  %5953 = fsub fast float %5838, %5815
  %5954 = fmul fast float %5953, %5950
  %5955 = fsub fast float %5791, %5767
  %5956 = fmul fast float %5955, %5950
  %5957 = fadd fast float %5956, %5767
  %5958 = fsub fast float %5815, %5957
  %5959 = fadd fast float %5958, %5954
  %5960 = fmul fast float %5959, %5951
  %5961 = fadd fast float %5960, %5957
  %5962 = fsub fast float %5931, %5908
  %5963 = fmul fast float %5962, %5950
  %5964 = fsub fast float %5885, %5862
  %5965 = fmul fast float %5964, %5950
  %5966 = fadd fast float %5965, %5862
  %5967 = fsub fast float %5908, %5966
  %5968 = fadd fast float %5967, %5963
  %5969 = fmul fast float %5968, %5951
  %5970 = fsub fast float %5966, %5961
  %5971 = fadd fast float %5970, %5969
  %5972 = fmul fast float %5952, %5971
  %5973 = fadd fast float %5972, %5961
  %5974 = fmul fast float %5973, %5729
  %5975 = fadd fast float %5974, %5728
  %5976 = fmul fast float %5725, 2.000000e+00
  %5977 = fmul fast float %5726, 2.000000e+00
  %5978 = fmul fast float %5727, 2.000000e+00
  %5979 = fmul fast float %5729, 5.000000e-01
  %5980 = add nuw nsw i32 %5730, 1
  %5981 = icmp eq i32 %5980, 6
  br i1 %5981, label %5982, label %5724, !llvm.loop !60

; <label>:5982                                    ; preds = %5724
  %5983 = fsub fast float %4404, %4711
  %5984 = fmul fast float %5983, %4721
  %5985 = fmul fast float %4744, %5983
  %5986 = fmul fast float %4754, %5985
  %5987 = fmul fast float %4744, %5985
  %5988 = call float @dx.op.unary.f32(i32 13, float %4782)  ; Sin(value)
  %5989 = fmul fast float %4812, %4744
  %5990 = fmul fast float %4863, %5983
  %5991 = call float @dx.op.unary.f32(i32 13, float %4872)  ; Sin(value)
  %5992 = fmul fast float %4744, %5990
  %5993 = call float @dx.op.unary.f32(i32 13, float %4900)  ; Sin(value)
  %5994 = fmul fast float %4744, %5992
  %5995 = call float @dx.op.unary.f32(i32 13, float %4928)  ; Sin(value)
  %5996 = fmul fast float %4744, %5994
  %5997 = call float @dx.op.unary.f32(i32 13, float %4957)  ; Sin(value)
  %5998 = call float @dx.op.unary.f32(i32 13, float %5009)  ; Sin(value)
  %5999 = call float @dx.op.unary.f32(i32 13, float %5035)  ; Sin(value)
  %6000 = call float @dx.op.unary.f32(i32 13, float %5061)  ; Sin(value)
  %6001 = call float @dx.op.unary.f32(i32 13, float %5087)  ; Sin(value)
  %6002 = fmul fast float %5983, 0x3FE99999A0000000
  %6003 = call float @dx.op.unary.f32(i32 13, float %5104)  ; Sin(value)
  %6004 = fmul fast float %4744, %6002
  %6005 = call float @dx.op.unary.f32(i32 13, float %5120)  ; Sin(value)
  %6006 = fmul fast float %4744, %6004
  %6007 = call float @dx.op.unary.f32(i32 13, float %5137)  ; Sin(value)
  %6008 = fmul fast float %4744, %6006
  %6009 = call float @dx.op.unary.f32(i32 13, float %5153)  ; Sin(value)
  %6010 = fmul fast float %4863, %6002
  %6011 = call float @dx.op.unary.f32(i32 13, float %5170)  ; Sin(value)
  %6012 = fmul fast float %4744, %6010
  %6013 = call float @dx.op.unary.f32(i32 13, float %5186)  ; Sin(value)
  %6014 = fmul fast float %4744, %6012
  %6015 = call float @dx.op.unary.f32(i32 13, float %5203)  ; Sin(value)
  %6016 = fmul fast float %4744, %6014
  %6017 = call float @dx.op.unary.f32(i32 13, float %5219)  ; Sin(value)
  %6018 = call float @dx.op.unary.f32(i32 13, float %5233)  ; Sin(value)
  %6019 = call float @dx.op.unary.f32(i32 13, float %5249)  ; Sin(value)
  %6020 = call float @dx.op.unary.f32(i32 13, float %5263)  ; Sin(value)
  %6021 = call float @dx.op.unary.f32(i32 13, float %5277)  ; Sin(value)
  %6022 = call float @dx.op.unary.f32(i32 13, float %5296)  ; Sin(value)
  %6023 = call float @dx.op.unary.f32(i32 13, float %5312)  ; Sin(value)
  %6024 = call float @dx.op.unary.f32(i32 13, float %5329)  ; Sin(value)
  %6025 = call float @dx.op.unary.f32(i32 13, float %5345)  ; Sin(value)
  %6026 = call float @dx.op.unary.f32(i32 13, float %5362)  ; Sin(value)
  %6027 = call float @dx.op.unary.f32(i32 13, float %5378)  ; Sin(value)
  %6028 = call float @dx.op.unary.f32(i32 13, float %5395)  ; Sin(value)
  %6029 = call float @dx.op.unary.f32(i32 13, float %5411)  ; Sin(value)
  %6030 = call float @dx.op.unary.f32(i32 13, float %5425)  ; Sin(value)
  %6031 = call float @dx.op.unary.f32(i32 13, float %5439)  ; Sin(value)
  %6032 = call float @dx.op.unary.f32(i32 13, float %5453)  ; Sin(value)
  %6033 = call float @dx.op.unary.f32(i32 13, float %5467)  ; Sin(value)
  %6034 = fmul fast float %5983, 5.000000e-01
  %6035 = fmul fast float %5482, %6034
  %6036 = fmul fast float %5488, %6034
  %6037 = fmul fast float %5498, %6036
  %6038 = fmul fast float %5488, %6036
  %6039 = call float @dx.op.unary.f32(i32 13, float %5511)  ; Sin(value)
  %6040 = fmul fast float %5525, %5488
  %6041 = fmul fast float %5536, %6034
  %6042 = call float @dx.op.unary.f32(i32 13, float %5545)  ; Sin(value)
  %6043 = fmul fast float %5488, %6041
  %6044 = call float @dx.op.unary.f32(i32 13, float %5558)  ; Sin(value)
  %6045 = fmul fast float %5488, %6043
  %6046 = call float @dx.op.unary.f32(i32 13, float %5571)  ; Sin(value)
  %6047 = fmul fast float %5488, %6045
  %6048 = call float @dx.op.unary.f32(i32 13, float %5584)  ; Sin(value)
  %6049 = call float @dx.op.unary.f32(i32 13, float %5599)  ; Sin(value)
  %6050 = call float @dx.op.unary.f32(i32 13, float %5612)  ; Sin(value)
  %6051 = call float @dx.op.unary.f32(i32 13, float %5625)  ; Sin(value)
  %6052 = call float @dx.op.unary.f32(i32 13, float %5638)  ; Sin(value)
  %6053 = fmul fast float %5672, %23
  %6054 = fadd fast float %6053, %5675
  %6055 = fmul fast float %6054, %5680
  %6056 = extractvalue %dx.types.CBufRet.f32 %5279, 3
  %6057 = fmul fast float %5975, 5.000000e-01
  %6058 = fadd fast float %6057, 5.000000e-01
  %6059 = call float @dx.op.unary.f32(i32 7, float %6058)  ; Saturate(value)
  %6060 = fmul fast float %6059, %2272
  %6061 = fsub fast float %932, %6060
  %6062 = fmul fast float %6061, %6056
  %6063 = fadd fast float %6062, %5676
  %6064 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 64)  ; CBufferLoadLegacy(handle,regIndex)
  %6065 = extractvalue %dx.types.CBufRet.f32 %6064, 2
  %6066 = fmul fast float %6065, %5684
  %6067 = fmul fast float %6065, %5685
  %6068 = fmul fast float %6065, %5686
  %6069 = fmul fast float %6065, %4109
  %6070 = fmul fast float %6065, %4112
  %6071 = fmul fast float %6065, %4115
  %6072 = extractvalue %dx.types.CBufRet.f32 %6064, 3
  %6073 = fmul fast float %6066, %6072
  %6074 = fmul fast float %6067, %6072
  %6075 = fmul fast float %6068, %6072
  %6076 = fmul fast float %6069, %6072
  %6077 = fmul fast float %6070, %6072
  %6078 = fmul fast float %6071, %6072
  %6079 = fadd fast float %6075, %4120
  %6080 = fmul fast float %6073, 0x3EA0000000000000
  %6081 = fmul fast float %6074, 0x3EA0000000000000
  %6082 = fmul fast float %6079, 0x3EA0000000000000
  %6083 = fadd fast float %6076, 5.000000e-01
  %6084 = fadd fast float %6083, %6080
  %6085 = fadd fast float %6077, 5.000000e-01
  %6086 = fadd fast float %6085, %6081
  %6087 = fadd fast float %6078, 5.000000e-01
  %6088 = fadd fast float %6087, %6082
  %6089 = call float @dx.op.unary.f32(i32 27, float %6084)  ; Round_ni(value)
  %6090 = call float @dx.op.unary.f32(i32 27, float %6086)  ; Round_ni(value)
  %6091 = call float @dx.op.unary.f32(i32 27, float %6088)  ; Round_ni(value)
  %6092 = fsub fast float %6076, %6089
  %6093 = fsub fast float %6077, %6090
  %6094 = fsub fast float %6078, %6091
  %6095 = fmul fast float %6092, 2.097152e+06
  %6096 = fmul fast float %6093, 2.097152e+06
  %6097 = fmul fast float %6094, 2.097152e+06
  %6098 = fadd fast float %6095, %6073
  %6099 = fadd fast float %6096, %6074
  %6100 = fadd fast float %6097, %6079
  br label %6101

; <label>:6101                                    ; preds = %6101, %5982
  %6102 = phi float [ %6098, %5982 ], [ %6354, %6101 ]
  %6103 = phi float [ %6099, %5982 ], [ %6355, %6101 ]
  %6104 = phi float [ %6100, %5982 ], [ %6356, %6101 ]
  %6105 = phi float [ 0.000000e+00, %5982 ], [ %6353, %6101 ]
  %6106 = phi float [ 1.000000e+00, %5982 ], [ %6357, %6101 ]
  %6107 = phi i32 [ 0, %5982 ], [ %6358, %6101 ]
  %6108 = call float @dx.op.unary.f32(i32 22, float %6102)  ; Frc(value)
  %6109 = call float @dx.op.unary.f32(i32 22, float %6103)  ; Frc(value)
  %6110 = call float @dx.op.unary.f32(i32 22, float %6104)  ; Frc(value)
  %6111 = call float @dx.op.unary.f32(i32 27, float %6102)  ; Round_ni(value)
  %6112 = call float @dx.op.unary.f32(i32 27, float %6103)  ; Round_ni(value)
  %6113 = call float @dx.op.unary.f32(i32 27, float %6104)  ; Round_ni(value)
  %6114 = call float @dx.op.dot3.f32(i32 55, float %6111, float %6112, float %6113, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %6115 = fadd fast float %6114, 1.900000e+01
  %6116 = fadd fast float %6114, 4.700000e+01
  %6117 = fadd fast float %6114, 6.600000e+01
  %6118 = fadd fast float %6114, 1.010000e+02
  %6119 = fadd fast float %6114, 1.200000e+02
  %6120 = fadd fast float %6114, 1.480000e+02
  %6121 = fadd fast float %6114, 1.670000e+02
  %6122 = fptosi float %6114 to i32
  %6123 = mul i32 %6122, 1664525
  %6124 = add i32 %6123, -781160288
  %6125 = mul i32 %6124, 1013904223
  %6126 = add i32 %6125, 1013904223
  %6127 = mul i32 %6126, %6124
  %6128 = add i32 %6127, 1013904223
  %6129 = mul i32 %6128, %6126
  %6130 = add i32 %6129, %6124
  %6131 = lshr i32 %6130, 16
  %6132 = and i32 %6131, 32768
  %6133 = and i32 %6131, 16384
  %6134 = and i32 %6131, 8192
  %6135 = uitofp i32 %6132 to float
  %6136 = uitofp i32 %6133 to float
  %6137 = uitofp i32 %6134 to float
  %6138 = fmul fast float %6135, 0x3F10000000000000
  %6139 = fmul fast float %6136, 0x3F20000000000000
  %6140 = fmul fast float %6137, 0x3F30000000000000
  %6141 = fadd fast float %6138, -1.000000e+00
  %6142 = fadd fast float %6139, -1.000000e+00
  %6143 = fadd fast float %6140, -1.000000e+00
  %6144 = call float @dx.op.dot3.f32(i32 55, float %6141, float %6142, float %6143, float %6108, float %6109, float %6110)  ; Dot3(ax,ay,az,bx,by,bz)
  %6145 = fadd fast float %6108, -1.000000e+00
  %6146 = fptosi float %6115 to i32
  %6147 = mul i32 %6146, 1664525
  %6148 = add i32 %6147, -781160288
  %6149 = mul i32 %6148, 1013904223
  %6150 = add i32 %6149, 1013904223
  %6151 = mul i32 %6150, %6148
  %6152 = add i32 %6151, 1013904223
  %6153 = mul i32 %6152, %6150
  %6154 = add i32 %6153, %6148
  %6155 = lshr i32 %6154, 16
  %6156 = and i32 %6155, 32768
  %6157 = and i32 %6155, 16384
  %6158 = and i32 %6155, 8192
  %6159 = uitofp i32 %6156 to float
  %6160 = uitofp i32 %6157 to float
  %6161 = uitofp i32 %6158 to float
  %6162 = fmul fast float %6159, 0x3F10000000000000
  %6163 = fmul fast float %6160, 0x3F20000000000000
  %6164 = fmul fast float %6161, 0x3F30000000000000
  %6165 = fadd fast float %6162, -1.000000e+00
  %6166 = fadd fast float %6163, -1.000000e+00
  %6167 = fadd fast float %6164, -1.000000e+00
  %6168 = call float @dx.op.dot3.f32(i32 55, float %6165, float %6166, float %6167, float %6145, float %6109, float %6110)  ; Dot3(ax,ay,az,bx,by,bz)
  %6169 = fadd fast float %6109, -1.000000e+00
  %6170 = fptosi float %6116 to i32
  %6171 = mul i32 %6170, 1664525
  %6172 = add i32 %6171, -781160288
  %6173 = mul i32 %6172, 1013904223
  %6174 = add i32 %6173, 1013904223
  %6175 = mul i32 %6174, %6172
  %6176 = add i32 %6175, 1013904223
  %6177 = mul i32 %6176, %6174
  %6178 = add i32 %6177, %6172
  %6179 = lshr i32 %6178, 16
  %6180 = and i32 %6179, 32768
  %6181 = and i32 %6179, 16384
  %6182 = and i32 %6179, 8192
  %6183 = uitofp i32 %6180 to float
  %6184 = uitofp i32 %6181 to float
  %6185 = uitofp i32 %6182 to float
  %6186 = fmul fast float %6183, 0x3F10000000000000
  %6187 = fmul fast float %6184, 0x3F20000000000000
  %6188 = fmul fast float %6185, 0x3F30000000000000
  %6189 = fadd fast float %6186, -1.000000e+00
  %6190 = fadd fast float %6187, -1.000000e+00
  %6191 = fadd fast float %6188, -1.000000e+00
  %6192 = call float @dx.op.dot3.f32(i32 55, float %6189, float %6190, float %6191, float %6108, float %6169, float %6110)  ; Dot3(ax,ay,az,bx,by,bz)
  %6193 = fptosi float %6117 to i32
  %6194 = mul i32 %6193, 1664525
  %6195 = add i32 %6194, -781160288
  %6196 = mul i32 %6195, 1013904223
  %6197 = add i32 %6196, 1013904223
  %6198 = mul i32 %6197, %6195
  %6199 = add i32 %6198, 1013904223
  %6200 = mul i32 %6199, %6197
  %6201 = add i32 %6200, %6195
  %6202 = lshr i32 %6201, 16
  %6203 = and i32 %6202, 32768
  %6204 = and i32 %6202, 16384
  %6205 = and i32 %6202, 8192
  %6206 = uitofp i32 %6203 to float
  %6207 = uitofp i32 %6204 to float
  %6208 = uitofp i32 %6205 to float
  %6209 = fmul fast float %6206, 0x3F10000000000000
  %6210 = fmul fast float %6207, 0x3F20000000000000
  %6211 = fmul fast float %6208, 0x3F30000000000000
  %6212 = fadd fast float %6209, -1.000000e+00
  %6213 = fadd fast float %6210, -1.000000e+00
  %6214 = fadd fast float %6211, -1.000000e+00
  %6215 = call float @dx.op.dot3.f32(i32 55, float %6212, float %6213, float %6214, float %6145, float %6169, float %6110)  ; Dot3(ax,ay,az,bx,by,bz)
  %6216 = fadd fast float %6110, -1.000000e+00
  %6217 = fptosi float %6118 to i32
  %6218 = mul i32 %6217, 1664525
  %6219 = add i32 %6218, -781160288
  %6220 = mul i32 %6219, 1013904223
  %6221 = add i32 %6220, 1013904223
  %6222 = mul i32 %6221, %6219
  %6223 = add i32 %6222, 1013904223
  %6224 = mul i32 %6223, %6221
  %6225 = add i32 %6224, %6219
  %6226 = lshr i32 %6225, 16
  %6227 = and i32 %6226, 32768
  %6228 = and i32 %6226, 16384
  %6229 = and i32 %6226, 8192
  %6230 = uitofp i32 %6227 to float
  %6231 = uitofp i32 %6228 to float
  %6232 = uitofp i32 %6229 to float
  %6233 = fmul fast float %6230, 0x3F10000000000000
  %6234 = fmul fast float %6231, 0x3F20000000000000
  %6235 = fmul fast float %6232, 0x3F30000000000000
  %6236 = fadd fast float %6233, -1.000000e+00
  %6237 = fadd fast float %6234, -1.000000e+00
  %6238 = fadd fast float %6235, -1.000000e+00
  %6239 = call float @dx.op.dot3.f32(i32 55, float %6236, float %6237, float %6238, float %6108, float %6109, float %6216)  ; Dot3(ax,ay,az,bx,by,bz)
  %6240 = fptosi float %6119 to i32
  %6241 = mul i32 %6240, 1664525
  %6242 = add i32 %6241, -781160288
  %6243 = mul i32 %6242, 1013904223
  %6244 = add i32 %6243, 1013904223
  %6245 = mul i32 %6244, %6242
  %6246 = add i32 %6245, 1013904223
  %6247 = mul i32 %6246, %6244
  %6248 = add i32 %6247, %6242
  %6249 = lshr i32 %6248, 16
  %6250 = and i32 %6249, 32768
  %6251 = and i32 %6249, 16384
  %6252 = and i32 %6249, 8192
  %6253 = uitofp i32 %6250 to float
  %6254 = uitofp i32 %6251 to float
  %6255 = uitofp i32 %6252 to float
  %6256 = fmul fast float %6253, 0x3F10000000000000
  %6257 = fmul fast float %6254, 0x3F20000000000000
  %6258 = fmul fast float %6255, 0x3F30000000000000
  %6259 = fadd fast float %6256, -1.000000e+00
  %6260 = fadd fast float %6257, -1.000000e+00
  %6261 = fadd fast float %6258, -1.000000e+00
  %6262 = call float @dx.op.dot3.f32(i32 55, float %6259, float %6260, float %6261, float %6145, float %6109, float %6216)  ; Dot3(ax,ay,az,bx,by,bz)
  %6263 = fptosi float %6120 to i32
  %6264 = mul i32 %6263, 1664525
  %6265 = add i32 %6264, -781160288
  %6266 = mul i32 %6265, 1013904223
  %6267 = add i32 %6266, 1013904223
  %6268 = mul i32 %6267, %6265
  %6269 = add i32 %6268, 1013904223
  %6270 = mul i32 %6269, %6267
  %6271 = add i32 %6270, %6265
  %6272 = lshr i32 %6271, 16
  %6273 = and i32 %6272, 32768
  %6274 = and i32 %6272, 16384
  %6275 = and i32 %6272, 8192
  %6276 = uitofp i32 %6273 to float
  %6277 = uitofp i32 %6274 to float
  %6278 = uitofp i32 %6275 to float
  %6279 = fmul fast float %6276, 0x3F10000000000000
  %6280 = fmul fast float %6277, 0x3F20000000000000
  %6281 = fmul fast float %6278, 0x3F30000000000000
  %6282 = fadd fast float %6279, -1.000000e+00
  %6283 = fadd fast float %6280, -1.000000e+00
  %6284 = fadd fast float %6281, -1.000000e+00
  %6285 = call float @dx.op.dot3.f32(i32 55, float %6282, float %6283, float %6284, float %6108, float %6169, float %6216)  ; Dot3(ax,ay,az,bx,by,bz)
  %6286 = fptosi float %6121 to i32
  %6287 = mul i32 %6286, 1664525
  %6288 = add i32 %6287, -781160288
  %6289 = mul i32 %6288, 1013904223
  %6290 = add i32 %6289, 1013904223
  %6291 = mul i32 %6290, %6288
  %6292 = add i32 %6291, 1013904223
  %6293 = mul i32 %6292, %6290
  %6294 = add i32 %6293, %6288
  %6295 = lshr i32 %6294, 16
  %6296 = and i32 %6295, 32768
  %6297 = and i32 %6295, 16384
  %6298 = and i32 %6295, 8192
  %6299 = uitofp i32 %6296 to float
  %6300 = uitofp i32 %6297 to float
  %6301 = uitofp i32 %6298 to float
  %6302 = fmul fast float %6299, 0x3F10000000000000
  %6303 = fmul fast float %6300, 0x3F20000000000000
  %6304 = fmul fast float %6301, 0x3F30000000000000
  %6305 = fadd fast float %6302, -1.000000e+00
  %6306 = fadd fast float %6303, -1.000000e+00
  %6307 = fadd fast float %6304, -1.000000e+00
  %6308 = call float @dx.op.dot3.f32(i32 55, float %6305, float %6306, float %6307, float %6145, float %6169, float %6216)  ; Dot3(ax,ay,az,bx,by,bz)
  %6309 = fmul fast float %6108, %6108
  %6310 = fmul fast float %6109, %6109
  %6311 = fmul fast float %6110, %6110
  %6312 = fmul fast float %6309, %6108
  %6313 = fmul fast float %6310, %6109
  %6314 = fmul fast float %6311, %6110
  %6315 = fmul fast float %6108, 6.000000e+00
  %6316 = fmul fast float %6109, 6.000000e+00
  %6317 = fmul fast float %6110, 6.000000e+00
  %6318 = fadd fast float %6315, -1.500000e+01
  %6319 = fadd fast float %6316, -1.500000e+01
  %6320 = fadd fast float %6317, -1.500000e+01
  %6321 = fmul fast float %6318, %6108
  %6322 = fmul fast float %6319, %6109
  %6323 = fmul fast float %6320, %6110
  %6324 = fadd fast float %6321, 1.000000e+01
  %6325 = fadd fast float %6322, 1.000000e+01
  %6326 = fadd fast float %6323, 1.000000e+01
  %6327 = fmul fast float %6312, %6324
  %6328 = fmul fast float %6313, %6325
  %6329 = fmul fast float %6314, %6326
  %6330 = fsub fast float %6215, %6192
  %6331 = fmul fast float %6330, %6327
  %6332 = fsub fast float %6168, %6144
  %6333 = fmul fast float %6332, %6327
  %6334 = fadd fast float %6333, %6144
  %6335 = fsub fast float %6192, %6334
  %6336 = fadd fast float %6335, %6331
  %6337 = fmul fast float %6336, %6328
  %6338 = fadd fast float %6337, %6334
  %6339 = fsub fast float %6308, %6285
  %6340 = fmul fast float %6339, %6327
  %6341 = fsub fast float %6262, %6239
  %6342 = fmul fast float %6341, %6327
  %6343 = fadd fast float %6342, %6239
  %6344 = fsub fast float %6285, %6343
  %6345 = fadd fast float %6344, %6340
  %6346 = fmul fast float %6345, %6328
  %6347 = fsub fast float %6343, %6338
  %6348 = fadd fast float %6347, %6346
  %6349 = fmul fast float %6329, %6348
  %6350 = fadd fast float %6349, %6338
  %6351 = call float @dx.op.unary.f32(i32 6, float %6350)  ; FAbs(value)
  %6352 = fmul fast float %6351, %6106
  %6353 = fadd fast float %6352, %6105
  %6354 = fmul fast float %6102, 2.000000e+00
  %6355 = fmul fast float %6103, 2.000000e+00
  %6356 = fmul fast float %6104, 2.000000e+00
  %6357 = fmul fast float %6106, 5.000000e-01
  %6358 = add nuw nsw i32 %6107, 1
  %6359 = icmp eq i32 %6358, 10
  br i1 %6359, label %6360, label %6101, !llvm.loop !60

; <label>:6360                                    ; preds = %6101
  %6361 = fmul fast float %6063, %5680
  %6362 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 65)  ; CBufferLoadLegacy(handle,regIndex)
  %6363 = extractvalue %dx.types.CBufRet.f32 %6362, 2
  %6364 = fmul fast float %6363, %5684
  %6365 = fmul fast float %6363, %5685
  %6366 = fmul fast float %6363, %5686
  %6367 = fmul fast float %6363, %4109
  %6368 = fmul fast float %6363, %4112
  %6369 = fmul fast float %6363, %4115
  %6370 = extractvalue %dx.types.CBufRet.f32 %6362, 3
  %6371 = fmul fast float %6364, %6370
  %6372 = fmul fast float %6365, %6370
  %6373 = fmul fast float %6366, %6370
  %6374 = fmul fast float %6367, %6370
  %6375 = fmul fast float %6368, %6370
  %6376 = fmul fast float %6369, %6370
  %6377 = fadd fast float %6373, %4422
  %6378 = fmul fast float %6371, 0x3EA0000000000000
  %6379 = fmul fast float %6372, 0x3EA0000000000000
  %6380 = fmul fast float %6377, 0x3EA0000000000000
  %6381 = fadd fast float %6374, 5.000000e-01
  %6382 = fadd fast float %6381, %6378
  %6383 = fadd fast float %6375, 5.000000e-01
  %6384 = fadd fast float %6383, %6379
  %6385 = fadd fast float %6376, 5.000000e-01
  %6386 = fadd fast float %6385, %6380
  %6387 = call float @dx.op.unary.f32(i32 27, float %6382)  ; Round_ni(value)
  %6388 = call float @dx.op.unary.f32(i32 27, float %6384)  ; Round_ni(value)
  %6389 = call float @dx.op.unary.f32(i32 27, float %6386)  ; Round_ni(value)
  %6390 = fsub fast float %6374, %6387
  %6391 = fsub fast float %6375, %6388
  %6392 = fsub fast float %6376, %6389
  %6393 = fmul fast float %6390, 2.097152e+06
  %6394 = fmul fast float %6391, 2.097152e+06
  %6395 = fmul fast float %6392, 2.097152e+06
  %6396 = fadd fast float %6393, %6371
  %6397 = fadd fast float %6394, %6372
  %6398 = fadd fast float %6395, %6377
  br label %6399

; <label>:6399                                    ; preds = %6399, %6360
  %6400 = phi float [ %6396, %6360 ], [ %6652, %6399 ]
  %6401 = phi float [ %6397, %6360 ], [ %6653, %6399 ]
  %6402 = phi float [ %6398, %6360 ], [ %6654, %6399 ]
  %6403 = phi float [ 0.000000e+00, %6360 ], [ %6651, %6399 ]
  %6404 = phi float [ 1.000000e+00, %6360 ], [ %6655, %6399 ]
  %6405 = phi i32 [ 0, %6360 ], [ %6656, %6399 ]
  %6406 = call float @dx.op.unary.f32(i32 22, float %6400)  ; Frc(value)
  %6407 = call float @dx.op.unary.f32(i32 22, float %6401)  ; Frc(value)
  %6408 = call float @dx.op.unary.f32(i32 22, float %6402)  ; Frc(value)
  %6409 = call float @dx.op.unary.f32(i32 27, float %6400)  ; Round_ni(value)
  %6410 = call float @dx.op.unary.f32(i32 27, float %6401)  ; Round_ni(value)
  %6411 = call float @dx.op.unary.f32(i32 27, float %6402)  ; Round_ni(value)
  %6412 = call float @dx.op.dot3.f32(i32 55, float %6409, float %6410, float %6411, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %6413 = fadd fast float %6412, 1.900000e+01
  %6414 = fadd fast float %6412, 4.700000e+01
  %6415 = fadd fast float %6412, 6.600000e+01
  %6416 = fadd fast float %6412, 1.010000e+02
  %6417 = fadd fast float %6412, 1.200000e+02
  %6418 = fadd fast float %6412, 1.480000e+02
  %6419 = fadd fast float %6412, 1.670000e+02
  %6420 = fptosi float %6412 to i32
  %6421 = mul i32 %6420, 1664525
  %6422 = add i32 %6421, -781160288
  %6423 = mul i32 %6422, 1013904223
  %6424 = add i32 %6423, 1013904223
  %6425 = mul i32 %6424, %6422
  %6426 = add i32 %6425, 1013904223
  %6427 = mul i32 %6426, %6424
  %6428 = add i32 %6427, %6422
  %6429 = lshr i32 %6428, 16
  %6430 = and i32 %6429, 32768
  %6431 = and i32 %6429, 16384
  %6432 = and i32 %6429, 8192
  %6433 = uitofp i32 %6430 to float
  %6434 = uitofp i32 %6431 to float
  %6435 = uitofp i32 %6432 to float
  %6436 = fmul fast float %6433, 0x3F10000000000000
  %6437 = fmul fast float %6434, 0x3F20000000000000
  %6438 = fmul fast float %6435, 0x3F30000000000000
  %6439 = fadd fast float %6436, -1.000000e+00
  %6440 = fadd fast float %6437, -1.000000e+00
  %6441 = fadd fast float %6438, -1.000000e+00
  %6442 = call float @dx.op.dot3.f32(i32 55, float %6439, float %6440, float %6441, float %6406, float %6407, float %6408)  ; Dot3(ax,ay,az,bx,by,bz)
  %6443 = fadd fast float %6406, -1.000000e+00
  %6444 = fptosi float %6413 to i32
  %6445 = mul i32 %6444, 1664525
  %6446 = add i32 %6445, -781160288
  %6447 = mul i32 %6446, 1013904223
  %6448 = add i32 %6447, 1013904223
  %6449 = mul i32 %6448, %6446
  %6450 = add i32 %6449, 1013904223
  %6451 = mul i32 %6450, %6448
  %6452 = add i32 %6451, %6446
  %6453 = lshr i32 %6452, 16
  %6454 = and i32 %6453, 32768
  %6455 = and i32 %6453, 16384
  %6456 = and i32 %6453, 8192
  %6457 = uitofp i32 %6454 to float
  %6458 = uitofp i32 %6455 to float
  %6459 = uitofp i32 %6456 to float
  %6460 = fmul fast float %6457, 0x3F10000000000000
  %6461 = fmul fast float %6458, 0x3F20000000000000
  %6462 = fmul fast float %6459, 0x3F30000000000000
  %6463 = fadd fast float %6460, -1.000000e+00
  %6464 = fadd fast float %6461, -1.000000e+00
  %6465 = fadd fast float %6462, -1.000000e+00
  %6466 = call float @dx.op.dot3.f32(i32 55, float %6463, float %6464, float %6465, float %6443, float %6407, float %6408)  ; Dot3(ax,ay,az,bx,by,bz)
  %6467 = fadd fast float %6407, -1.000000e+00
  %6468 = fptosi float %6414 to i32
  %6469 = mul i32 %6468, 1664525
  %6470 = add i32 %6469, -781160288
  %6471 = mul i32 %6470, 1013904223
  %6472 = add i32 %6471, 1013904223
  %6473 = mul i32 %6472, %6470
  %6474 = add i32 %6473, 1013904223
  %6475 = mul i32 %6474, %6472
  %6476 = add i32 %6475, %6470
  %6477 = lshr i32 %6476, 16
  %6478 = and i32 %6477, 32768
  %6479 = and i32 %6477, 16384
  %6480 = and i32 %6477, 8192
  %6481 = uitofp i32 %6478 to float
  %6482 = uitofp i32 %6479 to float
  %6483 = uitofp i32 %6480 to float
  %6484 = fmul fast float %6481, 0x3F10000000000000
  %6485 = fmul fast float %6482, 0x3F20000000000000
  %6486 = fmul fast float %6483, 0x3F30000000000000
  %6487 = fadd fast float %6484, -1.000000e+00
  %6488 = fadd fast float %6485, -1.000000e+00
  %6489 = fadd fast float %6486, -1.000000e+00
  %6490 = call float @dx.op.dot3.f32(i32 55, float %6487, float %6488, float %6489, float %6406, float %6467, float %6408)  ; Dot3(ax,ay,az,bx,by,bz)
  %6491 = fptosi float %6415 to i32
  %6492 = mul i32 %6491, 1664525
  %6493 = add i32 %6492, -781160288
  %6494 = mul i32 %6493, 1013904223
  %6495 = add i32 %6494, 1013904223
  %6496 = mul i32 %6495, %6493
  %6497 = add i32 %6496, 1013904223
  %6498 = mul i32 %6497, %6495
  %6499 = add i32 %6498, %6493
  %6500 = lshr i32 %6499, 16
  %6501 = and i32 %6500, 32768
  %6502 = and i32 %6500, 16384
  %6503 = and i32 %6500, 8192
  %6504 = uitofp i32 %6501 to float
  %6505 = uitofp i32 %6502 to float
  %6506 = uitofp i32 %6503 to float
  %6507 = fmul fast float %6504, 0x3F10000000000000
  %6508 = fmul fast float %6505, 0x3F20000000000000
  %6509 = fmul fast float %6506, 0x3F30000000000000
  %6510 = fadd fast float %6507, -1.000000e+00
  %6511 = fadd fast float %6508, -1.000000e+00
  %6512 = fadd fast float %6509, -1.000000e+00
  %6513 = call float @dx.op.dot3.f32(i32 55, float %6510, float %6511, float %6512, float %6443, float %6467, float %6408)  ; Dot3(ax,ay,az,bx,by,bz)
  %6514 = fadd fast float %6408, -1.000000e+00
  %6515 = fptosi float %6416 to i32
  %6516 = mul i32 %6515, 1664525
  %6517 = add i32 %6516, -781160288
  %6518 = mul i32 %6517, 1013904223
  %6519 = add i32 %6518, 1013904223
  %6520 = mul i32 %6519, %6517
  %6521 = add i32 %6520, 1013904223
  %6522 = mul i32 %6521, %6519
  %6523 = add i32 %6522, %6517
  %6524 = lshr i32 %6523, 16
  %6525 = and i32 %6524, 32768
  %6526 = and i32 %6524, 16384
  %6527 = and i32 %6524, 8192
  %6528 = uitofp i32 %6525 to float
  %6529 = uitofp i32 %6526 to float
  %6530 = uitofp i32 %6527 to float
  %6531 = fmul fast float %6528, 0x3F10000000000000
  %6532 = fmul fast float %6529, 0x3F20000000000000
  %6533 = fmul fast float %6530, 0x3F30000000000000
  %6534 = fadd fast float %6531, -1.000000e+00
  %6535 = fadd fast float %6532, -1.000000e+00
  %6536 = fadd fast float %6533, -1.000000e+00
  %6537 = call float @dx.op.dot3.f32(i32 55, float %6534, float %6535, float %6536, float %6406, float %6407, float %6514)  ; Dot3(ax,ay,az,bx,by,bz)
  %6538 = fptosi float %6417 to i32
  %6539 = mul i32 %6538, 1664525
  %6540 = add i32 %6539, -781160288
  %6541 = mul i32 %6540, 1013904223
  %6542 = add i32 %6541, 1013904223
  %6543 = mul i32 %6542, %6540
  %6544 = add i32 %6543, 1013904223
  %6545 = mul i32 %6544, %6542
  %6546 = add i32 %6545, %6540
  %6547 = lshr i32 %6546, 16
  %6548 = and i32 %6547, 32768
  %6549 = and i32 %6547, 16384
  %6550 = and i32 %6547, 8192
  %6551 = uitofp i32 %6548 to float
  %6552 = uitofp i32 %6549 to float
  %6553 = uitofp i32 %6550 to float
  %6554 = fmul fast float %6551, 0x3F10000000000000
  %6555 = fmul fast float %6552, 0x3F20000000000000
  %6556 = fmul fast float %6553, 0x3F30000000000000
  %6557 = fadd fast float %6554, -1.000000e+00
  %6558 = fadd fast float %6555, -1.000000e+00
  %6559 = fadd fast float %6556, -1.000000e+00
  %6560 = call float @dx.op.dot3.f32(i32 55, float %6557, float %6558, float %6559, float %6443, float %6407, float %6514)  ; Dot3(ax,ay,az,bx,by,bz)
  %6561 = fptosi float %6418 to i32
  %6562 = mul i32 %6561, 1664525
  %6563 = add i32 %6562, -781160288
  %6564 = mul i32 %6563, 1013904223
  %6565 = add i32 %6564, 1013904223
  %6566 = mul i32 %6565, %6563
  %6567 = add i32 %6566, 1013904223
  %6568 = mul i32 %6567, %6565
  %6569 = add i32 %6568, %6563
  %6570 = lshr i32 %6569, 16
  %6571 = and i32 %6570, 32768
  %6572 = and i32 %6570, 16384
  %6573 = and i32 %6570, 8192
  %6574 = uitofp i32 %6571 to float
  %6575 = uitofp i32 %6572 to float
  %6576 = uitofp i32 %6573 to float
  %6577 = fmul fast float %6574, 0x3F10000000000000
  %6578 = fmul fast float %6575, 0x3F20000000000000
  %6579 = fmul fast float %6576, 0x3F30000000000000
  %6580 = fadd fast float %6577, -1.000000e+00
  %6581 = fadd fast float %6578, -1.000000e+00
  %6582 = fadd fast float %6579, -1.000000e+00
  %6583 = call float @dx.op.dot3.f32(i32 55, float %6580, float %6581, float %6582, float %6406, float %6467, float %6514)  ; Dot3(ax,ay,az,bx,by,bz)
  %6584 = fptosi float %6419 to i32
  %6585 = mul i32 %6584, 1664525
  %6586 = add i32 %6585, -781160288
  %6587 = mul i32 %6586, 1013904223
  %6588 = add i32 %6587, 1013904223
  %6589 = mul i32 %6588, %6586
  %6590 = add i32 %6589, 1013904223
  %6591 = mul i32 %6590, %6588
  %6592 = add i32 %6591, %6586
  %6593 = lshr i32 %6592, 16
  %6594 = and i32 %6593, 32768
  %6595 = and i32 %6593, 16384
  %6596 = and i32 %6593, 8192
  %6597 = uitofp i32 %6594 to float
  %6598 = uitofp i32 %6595 to float
  %6599 = uitofp i32 %6596 to float
  %6600 = fmul fast float %6597, 0x3F10000000000000
  %6601 = fmul fast float %6598, 0x3F20000000000000
  %6602 = fmul fast float %6599, 0x3F30000000000000
  %6603 = fadd fast float %6600, -1.000000e+00
  %6604 = fadd fast float %6601, -1.000000e+00
  %6605 = fadd fast float %6602, -1.000000e+00
  %6606 = call float @dx.op.dot3.f32(i32 55, float %6603, float %6604, float %6605, float %6443, float %6467, float %6514)  ; Dot3(ax,ay,az,bx,by,bz)
  %6607 = fmul fast float %6406, %6406
  %6608 = fmul fast float %6407, %6407
  %6609 = fmul fast float %6408, %6408
  %6610 = fmul fast float %6607, %6406
  %6611 = fmul fast float %6608, %6407
  %6612 = fmul fast float %6609, %6408
  %6613 = fmul fast float %6406, 6.000000e+00
  %6614 = fmul fast float %6407, 6.000000e+00
  %6615 = fmul fast float %6408, 6.000000e+00
  %6616 = fadd fast float %6613, -1.500000e+01
  %6617 = fadd fast float %6614, -1.500000e+01
  %6618 = fadd fast float %6615, -1.500000e+01
  %6619 = fmul fast float %6616, %6406
  %6620 = fmul fast float %6617, %6407
  %6621 = fmul fast float %6618, %6408
  %6622 = fadd fast float %6619, 1.000000e+01
  %6623 = fadd fast float %6620, 1.000000e+01
  %6624 = fadd fast float %6621, 1.000000e+01
  %6625 = fmul fast float %6610, %6622
  %6626 = fmul fast float %6611, %6623
  %6627 = fmul fast float %6612, %6624
  %6628 = fsub fast float %6513, %6490
  %6629 = fmul fast float %6628, %6625
  %6630 = fsub fast float %6466, %6442
  %6631 = fmul fast float %6630, %6625
  %6632 = fadd fast float %6631, %6442
  %6633 = fsub fast float %6490, %6632
  %6634 = fadd fast float %6633, %6629
  %6635 = fmul fast float %6634, %6626
  %6636 = fadd fast float %6635, %6632
  %6637 = fsub fast float %6606, %6583
  %6638 = fmul fast float %6637, %6625
  %6639 = fsub fast float %6560, %6537
  %6640 = fmul fast float %6639, %6625
  %6641 = fadd fast float %6640, %6537
  %6642 = fsub fast float %6583, %6641
  %6643 = fadd fast float %6642, %6638
  %6644 = fmul fast float %6643, %6626
  %6645 = fsub fast float %6641, %6636
  %6646 = fadd fast float %6645, %6644
  %6647 = fmul fast float %6627, %6646
  %6648 = fadd fast float %6647, %6636
  %6649 = call float @dx.op.unary.f32(i32 6, float %6648)  ; FAbs(value)
  %6650 = fmul fast float %6649, %6404
  %6651 = fadd fast float %6650, %6403
  %6652 = fmul fast float %6400, 2.000000e+00
  %6653 = fmul fast float %6401, 2.000000e+00
  %6654 = fmul fast float %6402, 2.000000e+00
  %6655 = fmul fast float %6404, 5.000000e-01
  %6656 = add nuw nsw i32 %6405, 1
  %6657 = icmp eq i32 %6656, 10
  br i1 %6657, label %6658, label %6399, !llvm.loop !60

; <label>:6658                                    ; preds = %6399
  %6659 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 66)  ; CBufferLoadLegacy(handle,regIndex)
  %6660 = extractvalue %dx.types.CBufRet.f32 %6659, 3
  %6661 = fmul fast float %6660, %6651
  %6662 = extractvalue %dx.types.CBufRet.f32 %6659, 2
  %6663 = fadd fast float %6661, %6662
  %6664 = fmul fast float %4709, %6353
  %6665 = fmul fast float %6664, %6663
  %6666 = fsub fast float %4404, %6665
  %6667 = call float @dx.op.unary.f32(i32 27, float %6055)  ; Round_ni(value)
  %6668 = fsub fast float %6055, %6667
  %6669 = fmul fast float %6668, 2.097152e+06
  %6670 = fadd fast float %6669, %6361
  %6671 = call float @dx.op.unary.f32(i32 27, float %6670)  ; Round_ni(value)
  %6672 = fsub fast float %6361, %6671
  %6673 = fmul fast float %6672, 0x401921FB60000000
  %6674 = fmul fast float %6668, 0x416921FB60000000
  %6675 = fadd fast float %6673, %6674
  %6676 = call float @dx.op.unary.f32(i32 13, float %6675)  ; Sin(value)
  %6677 = fmul fast float %6666, %6676
  %6678 = extractvalue %dx.types.CBufRet.f32 %5234, 0
  %6679 = extractvalue %dx.types.CBufRet.f32 %5234, 1
  %6680 = fadd fast float %6678, %5661
  %6681 = fadd fast float %6679, %5663
  %6682 = call float @dx.op.binary.f32(i32 35, float %6680, float -1.000000e+00)  ; FMax(a,b)
  %6683 = call float @dx.op.binary.f32(i32 35, float %6681, float -1.000000e+00)  ; FMax(a,b)
  %6684 = call float @dx.op.binary.f32(i32 36, float %6682, float 1.000000e+00)  ; FMin(a,b)
  %6685 = call float @dx.op.binary.f32(i32 36, float %6683, float 1.000000e+00)  ; FMin(a,b)
  %6686 = fmul fast float %6684, %295
  %6687 = fmul fast float %6685, %296
  %6688 = fmul fast float %6684, %76
  %6689 = fmul fast float %6685, %23
  %6690 = fadd fast float %6687, %6686
  %6691 = fadd fast float %6689, %6688
  %6692 = fmul fast float %5235, %5679
  %6693 = fdiv fast float 2.000000e+00, %6692
  %6694 = fmul fast float %6691, %6693
  %6695 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 67)  ; CBufferLoadLegacy(handle,regIndex)
  %6696 = extractvalue %dx.types.CBufRet.f32 %6695, 1
  %6697 = fmul fast float %6696, %6061
  %6698 = fadd fast float %6697, %6690
  %6699 = fmul fast float %6698, %6693
  %6700 = fmul fast float %5488, %6666
  %6701 = call float @dx.op.unary.f32(i32 27, float %6694)  ; Round_ni(value)
  %6702 = fsub fast float %6694, %6701
  %6703 = fmul fast float %6702, 2.097152e+06
  %6704 = fadd fast float %6699, %6703
  %6705 = call float @dx.op.unary.f32(i32 27, float %6704)  ; Round_ni(value)
  %6706 = fsub fast float %6699, %6705
  %6707 = fmul fast float %6706, 0x401921FB60000000
  %6708 = fmul fast float %6702, 0x416921FB60000000
  %6709 = fadd fast float %6707, %6708
  %6710 = call float @dx.op.unary.f32(i32 13, float %6709)  ; Sin(value)
  %6711 = fmul fast float %6710, %6700
  %6712 = fsub fast float %5661, %5665
  %6713 = fsub fast float %5663, %5666
  %6714 = call float @dx.op.binary.f32(i32 35, float %6712, float -1.000000e+00)  ; FMax(a,b)
  %6715 = call float @dx.op.binary.f32(i32 35, float %6713, float -1.000000e+00)  ; FMax(a,b)
  %6716 = call float @dx.op.binary.f32(i32 36, float %6714, float 1.000000e+00)  ; FMin(a,b)
  %6717 = call float @dx.op.binary.f32(i32 36, float %6715, float 1.000000e+00)  ; FMin(a,b)
  %6718 = fmul fast float %6716, %295
  %6719 = fmul fast float %6717, %296
  %6720 = fmul fast float %6716, %76
  %6721 = fmul fast float %6717, %23
  %6722 = fadd fast float %6719, %6718
  %6723 = fadd fast float %6721, %6720
  %6724 = fmul fast float %5235, %6692
  %6725 = fdiv fast float 2.000000e+00, %6724
  %6726 = fmul fast float %6723, %6725
  %6727 = extractvalue %dx.types.CBufRet.f32 %6695, 3
  %6728 = fmul fast float %6727, %6061
  %6729 = fadd fast float %6728, %6722
  %6730 = fmul fast float %6729, %6725
  %6731 = fmul fast float %5488, %6700
  %6732 = call float @dx.op.unary.f32(i32 27, float %6726)  ; Round_ni(value)
  %6733 = fsub fast float %6726, %6732
  %6734 = fmul fast float %6733, 2.097152e+06
  %6735 = fadd fast float %6730, %6734
  %6736 = call float @dx.op.unary.f32(i32 27, float %6735)  ; Round_ni(value)
  %6737 = fsub fast float %6730, %6736
  %6738 = fmul fast float %6737, 0x401921FB60000000
  %6739 = fmul fast float %6733, 0x416921FB60000000
  %6740 = fadd fast float %6738, %6739
  %6741 = call float @dx.op.unary.f32(i32 13, float %6740)  ; Sin(value)
  %6742 = fsub fast float %5661, %6678
  %6743 = fsub fast float %5663, %6679
  %6744 = call float @dx.op.binary.f32(i32 35, float %6742, float -1.000000e+00)  ; FMax(a,b)
  %6745 = call float @dx.op.binary.f32(i32 35, float %6743, float -1.000000e+00)  ; FMax(a,b)
  %6746 = call float @dx.op.binary.f32(i32 36, float %6744, float 1.000000e+00)  ; FMin(a,b)
  %6747 = call float @dx.op.binary.f32(i32 36, float %6745, float 1.000000e+00)  ; FMin(a,b)
  %6748 = fmul fast float %6746, %295
  %6749 = fmul fast float %6747, %296
  %6750 = fmul fast float %6746, %76
  %6751 = fmul fast float %6747, %23
  %6752 = fadd fast float %6749, %6748
  %6753 = fadd fast float %6751, %6750
  %6754 = fmul fast float %5235, %6724
  %6755 = fdiv fast float 2.000000e+00, %6754
  %6756 = fmul fast float %6753, %6755
  %6757 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 68)  ; CBufferLoadLegacy(handle,regIndex)
  %6758 = extractvalue %dx.types.CBufRet.f32 %6757, 1
  %6759 = fmul fast float %6758, %6061
  %6760 = fadd fast float %6759, %6752
  %6761 = fmul fast float %6760, %6755
  %6762 = call float @dx.op.unary.f32(i32 27, float %6756)  ; Round_ni(value)
  %6763 = fsub fast float %6756, %6762
  %6764 = fmul fast float %6763, 2.097152e+06
  %6765 = fadd fast float %6761, %6764
  %6766 = call float @dx.op.unary.f32(i32 27, float %6765)  ; Round_ni(value)
  %6767 = fsub fast float %6761, %6766
  %6768 = fmul fast float %6767, 0x401921FB60000000
  %6769 = fmul fast float %6763, 0x416921FB60000000
  %6770 = fadd fast float %6768, %6769
  %6771 = call float @dx.op.unary.f32(i32 13, float %6770)  ; Sin(value)
  %6772 = fmul fast float %6771, %5488
  %6773 = extractvalue %dx.types.CBufRet.f32 %5677, 3
  %6774 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 84)  ; CBufferLoadLegacy(handle,regIndex)
  %6775 = extractvalue %dx.types.CBufRet.f32 %6774, 0
  %6776 = fcmp fast oge float %6773, -1.000000e+00
  %6777 = select i1 %6776, float %6773, float %6775
  %6778 = fadd fast float %6773, 1.000000e+00
  %6779 = call float @dx.op.unary.f32(i32 6, float %6778)  ; FAbs(value)
  %6780 = fcmp fast ogt float %6779, 0x3EE4F8B580000000
  %6781 = select i1 %6780, float %6777, float %6773
  %6782 = extractvalue %dx.types.CBufRet.f32 %6774, 1
  %6783 = fcmp fast oge float %6781, 1.000000e+00
  %6784 = fadd fast float %6781, -1.000000e+00
  %6785 = call float @dx.op.unary.f32(i32 6, float %6784)  ; FAbs(value)
  %6786 = fcmp fast ogt float %6785, 0x3EE4F8B580000000
  %6787 = and i1 %6786, %6783
  %6788 = select i1 %6787, float %6782, float %6773
  %6789 = fcmp fast oge float %6788, 0.000000e+00
  %6790 = select i1 %6789, float 1.000000e+00, float -1.000000e+00
  %6791 = call float @dx.op.unary.f32(i32 6, float %6788)  ; FAbs(value)
  %6792 = fcmp fast ogt float %6791, 0x3EE4F8B580000000
  %6793 = select i1 %6792, float %6790, float 1.000000e+00
  %6794 = call float @dx.op.binary.f32(i32 35, float %6793, float -1.000000e+00)  ; FMax(a,b)
  %6795 = call float @dx.op.binary.f32(i32 36, float %6794, float 1.000000e+00)  ; FMin(a,b)
  %6796 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 85)  ; CBufferLoadLegacy(handle,regIndex)
  %6797 = extractvalue %dx.types.CBufRet.f32 %6796, 2
  %6798 = fadd fast float %5665, %6795
  %6799 = fadd fast float %5666, %6797
  %6800 = call float @dx.op.binary.f32(i32 35, float %6798, float -1.000000e+00)  ; FMax(a,b)
  %6801 = call float @dx.op.binary.f32(i32 35, float %6799, float -1.000000e+00)  ; FMax(a,b)
  %6802 = call float @dx.op.binary.f32(i32 36, float %6800, float 1.000000e+00)  ; FMin(a,b)
  %6803 = call float @dx.op.binary.f32(i32 36, float %6801, float 1.000000e+00)  ; FMin(a,b)
  %6804 = fmul fast float %6802, %295
  %6805 = fmul fast float %6803, %296
  %6806 = fmul fast float %6802, %76
  %6807 = fmul fast float %6803, %23
  %6808 = fadd fast float %6805, %6804
  %6809 = fadd fast float %6807, %6806
  %6810 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %6811 = extractvalue %dx.types.CBufRet.f32 %6810, 3
  %6812 = fmul fast float %6811, %4852
  %6813 = fdiv fast float 2.000000e+00, %6812
  %6814 = fmul fast float %6809, %6813
  %6815 = extractvalue %dx.types.CBufRet.f32 %5529, 1
  %6816 = fmul fast float %6815, %6061
  %6817 = fadd fast float %6816, %6808
  %6818 = fmul fast float %6817, %6813
  %6819 = fmul fast float %5536, %6666
  %6820 = call float @dx.op.unary.f32(i32 27, float %6814)  ; Round_ni(value)
  %6821 = fsub fast float %6814, %6820
  %6822 = fmul fast float %6821, 2.097152e+06
  %6823 = fadd fast float %6818, %6822
  %6824 = call float @dx.op.unary.f32(i32 27, float %6823)  ; Round_ni(value)
  %6825 = fsub fast float %6818, %6824
  %6826 = fmul fast float %6825, 0x401921FB60000000
  %6827 = fmul fast float %6821, 0x416921FB60000000
  %6828 = fadd fast float %6826, %6827
  %6829 = call float @dx.op.unary.f32(i32 13, float %6828)  ; Sin(value)
  %6830 = fadd fast float %6678, %6795
  %6831 = fadd fast float %6679, %6797
  %6832 = call float @dx.op.binary.f32(i32 35, float %6830, float -1.000000e+00)  ; FMax(a,b)
  %6833 = call float @dx.op.binary.f32(i32 35, float %6831, float -1.000000e+00)  ; FMax(a,b)
  %6834 = call float @dx.op.binary.f32(i32 36, float %6832, float 1.000000e+00)  ; FMin(a,b)
  %6835 = call float @dx.op.binary.f32(i32 36, float %6833, float 1.000000e+00)  ; FMin(a,b)
  %6836 = fmul fast float %6834, %295
  %6837 = fmul fast float %6835, %296
  %6838 = fmul fast float %6834, %76
  %6839 = fmul fast float %6835, %23
  %6840 = fadd fast float %6837, %6836
  %6841 = fadd fast float %6839, %6838
  %6842 = fmul fast float %5235, %6812
  %6843 = fdiv fast float 2.000000e+00, %6842
  %6844 = fmul fast float %6841, %6843
  %6845 = extractvalue %dx.types.CBufRet.f32 %5529, 2
  %6846 = fmul fast float %6845, %6061
  %6847 = fadd fast float %6846, %6840
  %6848 = fmul fast float %6847, %6843
  %6849 = fmul fast float %5488, %6819
  %6850 = call float @dx.op.unary.f32(i32 27, float %6844)  ; Round_ni(value)
  %6851 = fsub fast float %6844, %6850
  %6852 = fmul fast float %6851, 2.097152e+06
  %6853 = fadd fast float %6848, %6852
  %6854 = call float @dx.op.unary.f32(i32 27, float %6853)  ; Round_ni(value)
  %6855 = fsub fast float %6848, %6854
  %6856 = fmul fast float %6855, 0x401921FB60000000
  %6857 = fmul fast float %6851, 0x416921FB60000000
  %6858 = fadd fast float %6856, %6857
  %6859 = call float @dx.op.unary.f32(i32 13, float %6858)  ; Sin(value)
  %6860 = fsub fast float %6795, %5665
  %6861 = fsub fast float %6797, %5666
  %6862 = call float @dx.op.binary.f32(i32 35, float %6860, float -1.000000e+00)  ; FMax(a,b)
  %6863 = call float @dx.op.binary.f32(i32 35, float %6861, float -1.000000e+00)  ; FMax(a,b)
  %6864 = call float @dx.op.binary.f32(i32 36, float %6862, float 1.000000e+00)  ; FMin(a,b)
  %6865 = call float @dx.op.binary.f32(i32 36, float %6863, float 1.000000e+00)  ; FMin(a,b)
  %6866 = fmul fast float %6864, %295
  %6867 = fmul fast float %6865, %296
  %6868 = fmul fast float %6864, %76
  %6869 = fmul fast float %6865, %23
  %6870 = fadd fast float %6867, %6866
  %6871 = fadd fast float %6869, %6868
  %6872 = fmul fast float %5235, %6842
  %6873 = fdiv fast float 2.000000e+00, %6872
  %6874 = fmul fast float %6871, %6873
  %6875 = extractvalue %dx.types.CBufRet.f32 %5529, 3
  %6876 = fmul fast float %6875, %6061
  %6877 = fadd fast float %6876, %6870
  %6878 = fmul fast float %6877, %6873
  %6879 = fmul fast float %5488, %6849
  %6880 = call float @dx.op.unary.f32(i32 27, float %6874)  ; Round_ni(value)
  %6881 = fsub fast float %6874, %6880
  %6882 = fmul fast float %6881, 2.097152e+06
  %6883 = fadd fast float %6878, %6882
  %6884 = call float @dx.op.unary.f32(i32 27, float %6883)  ; Round_ni(value)
  %6885 = fsub fast float %6878, %6884
  %6886 = fmul fast float %6885, 0x401921FB60000000
  %6887 = fmul fast float %6881, 0x416921FB60000000
  %6888 = fadd fast float %6886, %6887
  %6889 = call float @dx.op.unary.f32(i32 13, float %6888)  ; Sin(value)
  %6890 = fsub fast float %6795, %6678
  %6891 = fsub fast float %6797, %6679
  %6892 = call float @dx.op.binary.f32(i32 35, float %6890, float -1.000000e+00)  ; FMax(a,b)
  %6893 = call float @dx.op.binary.f32(i32 35, float %6891, float -1.000000e+00)  ; FMax(a,b)
  %6894 = call float @dx.op.binary.f32(i32 36, float %6892, float 1.000000e+00)  ; FMin(a,b)
  %6895 = call float @dx.op.binary.f32(i32 36, float %6893, float 1.000000e+00)  ; FMin(a,b)
  %6896 = fmul fast float %6894, %295
  %6897 = fmul fast float %6895, %296
  %6898 = fmul fast float %6894, %76
  %6899 = fmul fast float %6895, %23
  %6900 = fadd fast float %6897, %6896
  %6901 = fadd fast float %6899, %6898
  %6902 = fmul fast float %5235, %6872
  %6903 = fdiv fast float 2.000000e+00, %6902
  %6904 = fmul fast float %6901, %6903
  %6905 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 73)  ; CBufferLoadLegacy(handle,regIndex)
  %6906 = extractvalue %dx.types.CBufRet.f32 %6905, 0
  %6907 = fmul fast float %6906, %6061
  %6908 = fadd fast float %6907, %6900
  %6909 = fmul fast float %6908, %6903
  %6910 = fmul fast float %5488, %6879
  %6911 = call float @dx.op.unary.f32(i32 27, float %6904)  ; Round_ni(value)
  %6912 = fsub fast float %6904, %6911
  %6913 = fmul fast float %6912, 2.097152e+06
  %6914 = fadd fast float %6909, %6913
  %6915 = call float @dx.op.unary.f32(i32 27, float %6914)  ; Round_ni(value)
  %6916 = fsub fast float %6909, %6915
  %6917 = fmul fast float %6916, 0x401921FB60000000
  %6918 = fmul fast float %6912, 0x416921FB60000000
  %6919 = fadd fast float %6917, %6918
  %6920 = call float @dx.op.unary.f32(i32 13, float %6919)  ; Sin(value)
  %6921 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 87)  ; CBufferLoadLegacy(handle,regIndex)
  %6922 = extractvalue %dx.types.CBufRet.f32 %6921, 0
  %6923 = extractvalue %dx.types.CBufRet.f32 %6921, 1
  %6924 = fcmp fast oge float %6922, -1.000000e+00
  %6925 = select i1 %6924, float %6922, float %6923
  %6926 = fadd fast float %6922, 1.000000e+00
  %6927 = call float @dx.op.unary.f32(i32 6, float %6926)  ; FAbs(value)
  %6928 = fcmp fast ogt float %6927, 0x3EE4F8B580000000
  %6929 = select i1 %6928, float %6925, float %6922
  %6930 = extractvalue %dx.types.CBufRet.f32 %6921, 2
  %6931 = fcmp fast oge float %6929, 1.000000e+00
  %6932 = fadd fast float %6929, -1.000000e+00
  %6933 = call float @dx.op.unary.f32(i32 6, float %6932)  ; FAbs(value)
  %6934 = fcmp fast ogt float %6933, 0x3EE4F8B580000000
  %6935 = and i1 %6934, %6931
  %6936 = select i1 %6935, float %6930, float %6922
  %6937 = fcmp fast oge float %6936, 0.000000e+00
  %6938 = select i1 %6937, float 1.000000e+00, float -1.000000e+00
  %6939 = call float @dx.op.unary.f32(i32 6, float %6936)  ; FAbs(value)
  %6940 = fcmp fast ogt float %6939, 0x3EE4F8B580000000
  %6941 = select i1 %6940, float %6938, float 1.000000e+00
  %6942 = call float @dx.op.binary.f32(i32 35, float %6941, float -1.000000e+00)  ; FMax(a,b)
  %6943 = call float @dx.op.binary.f32(i32 36, float %6942, float 1.000000e+00)  ; FMin(a,b)
  %6944 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 88)  ; CBufferLoadLegacy(handle,regIndex)
  %6945 = extractvalue %dx.types.CBufRet.f32 %6944, 3
  %6946 = fadd fast float %5665, %6943
  %6947 = fadd fast float %5666, %6945
  %6948 = call float @dx.op.binary.f32(i32 35, float %6946, float -1.000000e+00)  ; FMax(a,b)
  %6949 = call float @dx.op.binary.f32(i32 35, float %6947, float -1.000000e+00)  ; FMax(a,b)
  %6950 = call float @dx.op.binary.f32(i32 36, float %6948, float 1.000000e+00)  ; FMin(a,b)
  %6951 = call float @dx.op.binary.f32(i32 36, float %6949, float 1.000000e+00)  ; FMin(a,b)
  %6952 = fmul fast float %6950, %295
  %6953 = fmul fast float %6951, %296
  %6954 = fmul fast float %6950, %76
  %6955 = fmul fast float %6951, %23
  %6956 = fadd fast float %6953, %6952
  %6957 = fadd fast float %6955, %6954
  %6958 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 90)  ; CBufferLoadLegacy(handle,regIndex)
  %6959 = extractvalue %dx.types.CBufRet.f32 %6958, 0
  %6960 = fmul fast float %6959, %4852
  %6961 = fdiv fast float 2.000000e+00, %6960
  %6962 = fmul fast float %6957, %6961
  %6963 = fadd fast float %6816, %6956
  %6964 = fmul fast float %6963, %6961
  %6965 = call float @dx.op.unary.f32(i32 27, float %6962)  ; Round_ni(value)
  %6966 = fsub fast float %6962, %6965
  %6967 = fmul fast float %6966, 2.097152e+06
  %6968 = fadd fast float %6964, %6967
  %6969 = call float @dx.op.unary.f32(i32 27, float %6968)  ; Round_ni(value)
  %6970 = fsub fast float %6964, %6969
  %6971 = fmul fast float %6970, 0x401921FB60000000
  %6972 = fmul fast float %6966, 0x416921FB60000000
  %6973 = fadd fast float %6971, %6972
  %6974 = call float @dx.op.unary.f32(i32 13, float %6973)  ; Sin(value)
  %6975 = fadd fast float %6678, %6943
  %6976 = fadd fast float %6679, %6945
  %6977 = call float @dx.op.binary.f32(i32 35, float %6975, float -1.000000e+00)  ; FMax(a,b)
  %6978 = call float @dx.op.binary.f32(i32 35, float %6976, float -1.000000e+00)  ; FMax(a,b)
  %6979 = call float @dx.op.binary.f32(i32 36, float %6977, float 1.000000e+00)  ; FMin(a,b)
  %6980 = call float @dx.op.binary.f32(i32 36, float %6978, float 1.000000e+00)  ; FMin(a,b)
  %6981 = fmul fast float %6979, %295
  %6982 = fmul fast float %6980, %296
  %6983 = fmul fast float %6979, %76
  %6984 = fmul fast float %6980, %23
  %6985 = fadd fast float %6982, %6981
  %6986 = fadd fast float %6984, %6983
  %6987 = fmul fast float %5235, %6960
  %6988 = fdiv fast float 2.000000e+00, %6987
  %6989 = fmul fast float %6986, %6988
  %6990 = fadd fast float %6846, %6985
  %6991 = fmul fast float %6990, %6988
  %6992 = call float @dx.op.unary.f32(i32 27, float %6989)  ; Round_ni(value)
  %6993 = fsub fast float %6989, %6992
  %6994 = fmul fast float %6993, 2.097152e+06
  %6995 = fadd fast float %6991, %6994
  %6996 = call float @dx.op.unary.f32(i32 27, float %6995)  ; Round_ni(value)
  %6997 = fsub fast float %6991, %6996
  %6998 = fmul fast float %6997, 0x401921FB60000000
  %6999 = fmul fast float %6993, 0x416921FB60000000
  %7000 = fadd fast float %6998, %6999
  %7001 = call float @dx.op.unary.f32(i32 13, float %7000)  ; Sin(value)
  %7002 = fsub fast float %6943, %5665
  %7003 = fsub fast float %6945, %5666
  %7004 = call float @dx.op.binary.f32(i32 35, float %7002, float -1.000000e+00)  ; FMax(a,b)
  %7005 = call float @dx.op.binary.f32(i32 35, float %7003, float -1.000000e+00)  ; FMax(a,b)
  %7006 = call float @dx.op.binary.f32(i32 36, float %7004, float 1.000000e+00)  ; FMin(a,b)
  %7007 = call float @dx.op.binary.f32(i32 36, float %7005, float 1.000000e+00)  ; FMin(a,b)
  %7008 = fmul fast float %7006, %295
  %7009 = fmul fast float %7007, %296
  %7010 = fmul fast float %7006, %76
  %7011 = fmul fast float %7007, %23
  %7012 = fadd fast float %7009, %7008
  %7013 = fadd fast float %7011, %7010
  %7014 = fmul fast float %5235, %6987
  %7015 = fdiv fast float 2.000000e+00, %7014
  %7016 = fmul fast float %7013, %7015
  %7017 = fadd fast float %6876, %7012
  %7018 = fmul fast float %7017, %7015
  %7019 = call float @dx.op.unary.f32(i32 27, float %7016)  ; Round_ni(value)
  %7020 = fsub fast float %7016, %7019
  %7021 = fmul fast float %7020, 2.097152e+06
  %7022 = fadd fast float %7018, %7021
  %7023 = call float @dx.op.unary.f32(i32 27, float %7022)  ; Round_ni(value)
  %7024 = fsub fast float %7018, %7023
  %7025 = fmul fast float %7024, 0x401921FB60000000
  %7026 = fmul fast float %7020, 0x416921FB60000000
  %7027 = fadd fast float %7025, %7026
  %7028 = call float @dx.op.unary.f32(i32 13, float %7027)  ; Sin(value)
  %7029 = fsub fast float %6943, %6678
  %7030 = fsub fast float %6945, %6679
  %7031 = call float @dx.op.binary.f32(i32 35, float %7029, float -1.000000e+00)  ; FMax(a,b)
  %7032 = call float @dx.op.binary.f32(i32 35, float %7030, float -1.000000e+00)  ; FMax(a,b)
  %7033 = call float @dx.op.binary.f32(i32 36, float %7031, float 1.000000e+00)  ; FMin(a,b)
  %7034 = call float @dx.op.binary.f32(i32 36, float %7032, float 1.000000e+00)  ; FMin(a,b)
  %7035 = fmul fast float %7033, %295
  %7036 = fmul fast float %7034, %296
  %7037 = fmul fast float %7033, %76
  %7038 = fmul fast float %7034, %23
  %7039 = fadd fast float %7036, %7035
  %7040 = fadd fast float %7038, %7037
  %7041 = fmul fast float %5235, %7014
  %7042 = fdiv fast float 2.000000e+00, %7041
  %7043 = fmul fast float %7040, %7042
  %7044 = fadd fast float %6907, %7039
  %7045 = fmul fast float %7044, %7042
  %7046 = call float @dx.op.unary.f32(i32 27, float %7043)  ; Round_ni(value)
  %7047 = fsub fast float %7043, %7046
  %7048 = fmul fast float %7047, 2.097152e+06
  %7049 = fadd fast float %7045, %7048
  %7050 = call float @dx.op.unary.f32(i32 27, float %7049)  ; Round_ni(value)
  %7051 = fsub fast float %7045, %7050
  %7052 = fmul fast float %7051, 0x401921FB60000000
  %7053 = fmul fast float %7047, 0x416921FB60000000
  %7054 = fadd fast float %7052, %7053
  %7055 = call float @dx.op.unary.f32(i32 13, float %7054)  ; Sin(value)
  %7056 = fmul fast float %3773, 8.000000e+00
  %7057 = fmul fast float %5678, %7056
  %7058 = fdiv fast float 2.000000e+00, %7057
  %7059 = fmul fast float %7058, %6054
  %7060 = extractvalue %dx.types.CBufRet.f32 %5585, 2
  %7061 = fmul fast float %7060, %6061
  %7062 = fadd fast float %7061, %5676
  %7063 = fmul fast float %7062, %7058
  %7064 = fmul fast float %6666, 8.000000e+00
  %7065 = call float @dx.op.unary.f32(i32 27, float %7059)  ; Round_ni(value)
  %7066 = fsub fast float %7059, %7065
  %7067 = fmul fast float %7066, 2.097152e+06
  %7068 = fadd fast float %7063, %7067
  %7069 = call float @dx.op.unary.f32(i32 27, float %7068)  ; Round_ni(value)
  %7070 = fsub fast float %7063, %7069
  %7071 = fmul fast float %7070, 0x401921FB60000000
  %7072 = fmul fast float %7066, 0x416921FB60000000
  %7073 = fadd fast float %7071, %7072
  %7074 = call float @dx.op.unary.f32(i32 13, float %7073)  ; Sin(value)
  %7075 = fmul fast float %7074, %7064
  %7076 = fmul fast float %5235, %7057
  %7077 = fdiv fast float 2.000000e+00, %7076
  %7078 = fmul fast float %7077, %6691
  %7079 = extractvalue %dx.types.CBufRet.f32 %5585, 3
  %7080 = fmul fast float %7079, %6061
  %7081 = fadd fast float %7080, %6690
  %7082 = fmul fast float %7081, %7077
  %7083 = fmul fast float %5488, %7064
  %7084 = call float @dx.op.unary.f32(i32 27, float %7078)  ; Round_ni(value)
  %7085 = fsub fast float %7078, %7084
  %7086 = fmul fast float %7085, 2.097152e+06
  %7087 = fadd fast float %7082, %7086
  %7088 = call float @dx.op.unary.f32(i32 27, float %7087)  ; Round_ni(value)
  %7089 = fsub fast float %7082, %7088
  %7090 = fmul fast float %7089, 0x401921FB60000000
  %7091 = fmul fast float %7085, 0x416921FB60000000
  %7092 = fadd fast float %7090, %7091
  %7093 = call float @dx.op.unary.f32(i32 13, float %7092)  ; Sin(value)
  %7094 = fmul fast float %7093, %7083
  %7095 = fmul fast float %5235, %7076
  %7096 = fdiv fast float 2.000000e+00, %7095
  %7097 = fmul fast float %7096, %6723
  %7098 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %7099 = extractvalue %dx.types.CBufRet.f32 %7098, 0
  %7100 = fmul fast float %7099, %6061
  %7101 = fadd fast float %7100, %6722
  %7102 = fmul fast float %7101, %7096
  %7103 = fmul fast float %5488, %7083
  %7104 = call float @dx.op.unary.f32(i32 27, float %7097)  ; Round_ni(value)
  %7105 = fsub fast float %7097, %7104
  %7106 = fmul fast float %7105, 2.097152e+06
  %7107 = fadd fast float %7102, %7106
  %7108 = call float @dx.op.unary.f32(i32 27, float %7107)  ; Round_ni(value)
  %7109 = fsub fast float %7102, %7108
  %7110 = fmul fast float %7109, 0x401921FB60000000
  %7111 = fmul fast float %7105, 0x416921FB60000000
  %7112 = fadd fast float %7110, %7111
  %7113 = call float @dx.op.unary.f32(i32 13, float %7112)  ; Sin(value)
  %7114 = fmul fast float %5235, %7095
  %7115 = fdiv fast float 2.000000e+00, %7114
  %7116 = fmul fast float %7115, %6753
  %7117 = extractvalue %dx.types.CBufRet.f32 %7098, 1
  %7118 = fmul fast float %7117, %6061
  %7119 = fadd fast float %7118, %6752
  %7120 = fmul fast float %7119, %7115
  %7121 = call float @dx.op.unary.f32(i32 27, float %7116)  ; Round_ni(value)
  %7122 = fsub fast float %7116, %7121
  %7123 = fmul fast float %7122, 2.097152e+06
  %7124 = fadd fast float %7120, %7123
  %7125 = call float @dx.op.unary.f32(i32 27, float %7124)  ; Round_ni(value)
  %7126 = fsub fast float %7120, %7125
  %7127 = fmul fast float %7126, 0x401921FB60000000
  %7128 = fmul fast float %7122, 0x416921FB60000000
  %7129 = fadd fast float %7127, %7128
  %7130 = call float @dx.op.unary.f32(i32 13, float %7129)  ; Sin(value)
  %7131 = fmul fast float %7130, %5488
  %7132 = fmul fast float %5527, %7056
  %7133 = fmul fast float %6811, %7132
  %7134 = fdiv fast float 2.000000e+00, %7133
  %7135 = fmul fast float %7134, %6809
  %7136 = extractvalue %dx.types.CBufRet.f32 %7098, 2
  %7137 = fmul fast float %7136, %6061
  %7138 = fadd fast float %7137, %6808
  %7139 = fmul fast float %7138, %7134
  %7140 = fmul fast float %5536, %7064
  %7141 = call float @dx.op.unary.f32(i32 27, float %7135)  ; Round_ni(value)
  %7142 = fsub fast float %7135, %7141
  %7143 = fmul fast float %7142, 2.097152e+06
  %7144 = fadd fast float %7139, %7143
  %7145 = call float @dx.op.unary.f32(i32 27, float %7144)  ; Round_ni(value)
  %7146 = fsub fast float %7139, %7145
  %7147 = fmul fast float %7146, 0x401921FB60000000
  %7148 = fmul fast float %7142, 0x416921FB60000000
  %7149 = fadd fast float %7147, %7148
  %7150 = call float @dx.op.unary.f32(i32 13, float %7149)  ; Sin(value)
  %7151 = fmul fast float %5235, %7133
  %7152 = fdiv fast float 2.000000e+00, %7151
  %7153 = fmul fast float %7152, %6841
  %7154 = extractvalue %dx.types.CBufRet.f32 %7098, 3
  %7155 = fmul fast float %7154, %6061
  %7156 = fadd fast float %7155, %6840
  %7157 = fmul fast float %7156, %7152
  %7158 = fmul fast float %5488, %7140
  %7159 = call float @dx.op.unary.f32(i32 27, float %7153)  ; Round_ni(value)
  %7160 = fsub fast float %7153, %7159
  %7161 = fmul fast float %7160, 2.097152e+06
  %7162 = fadd fast float %7157, %7161
  %7163 = call float @dx.op.unary.f32(i32 27, float %7162)  ; Round_ni(value)
  %7164 = fsub fast float %7157, %7163
  %7165 = fmul fast float %7164, 0x401921FB60000000
  %7166 = fmul fast float %7160, 0x416921FB60000000
  %7167 = fadd fast float %7165, %7166
  %7168 = call float @dx.op.unary.f32(i32 13, float %7167)  ; Sin(value)
  %7169 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 20)  ; CBufferLoadLegacy(handle,regIndex)
  %7170 = extractvalue %dx.types.CBufRet.f32 %7169, 3
  %7171 = fmul fast float %7170, %7151
  %7172 = fdiv fast float 2.000000e+00, %7171
  %7173 = fmul fast float %7172, %6871
  %7174 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 78)  ; CBufferLoadLegacy(handle,regIndex)
  %7175 = extractvalue %dx.types.CBufRet.f32 %7174, 0
  %7176 = fmul fast float %7175, %6061
  %7177 = fadd fast float %7176, %6870
  %7178 = fmul fast float %7177, %7172
  %7179 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 22)  ; CBufferLoadLegacy(handle,regIndex)
  %7180 = extractvalue %dx.types.CBufRet.f32 %7179, 2
  %7181 = fmul fast float %7180, %7158
  %7182 = call float @dx.op.unary.f32(i32 27, float %7173)  ; Round_ni(value)
  %7183 = fsub fast float %7173, %7182
  %7184 = fmul fast float %7183, 2.097152e+06
  %7185 = fadd fast float %7178, %7184
  %7186 = call float @dx.op.unary.f32(i32 27, float %7185)  ; Round_ni(value)
  %7187 = fsub fast float %7178, %7186
  %7188 = fmul fast float %7187, 0x401921FB60000000
  %7189 = fmul fast float %7183, 0x416921FB60000000
  %7190 = fadd fast float %7188, %7189
  %7191 = call float @dx.op.unary.f32(i32 13, float %7190)  ; Sin(value)
  %7192 = fmul fast float %7170, %7171
  %7193 = fdiv fast float 2.000000e+00, %7192
  %7194 = fmul fast float %7193, %6901
  %7195 = extractvalue %dx.types.CBufRet.f32 %7174, 1
  %7196 = fmul fast float %7195, %6061
  %7197 = fadd fast float %7196, %6900
  %7198 = fmul fast float %7197, %7193
  %7199 = fmul fast float %7180, %7181
  %7200 = call float @dx.op.unary.f32(i32 27, float %7194)  ; Round_ni(value)
  %7201 = fsub fast float %7194, %7200
  %7202 = fmul fast float %7201, 2.097152e+06
  %7203 = fadd fast float %7198, %7202
  %7204 = call float @dx.op.unary.f32(i32 27, float %7203)  ; Round_ni(value)
  %7205 = fsub fast float %7198, %7204
  %7206 = fmul fast float %7205, 0x401921FB60000000
  %7207 = fmul fast float %7201, 0x416921FB60000000
  %7208 = fadd fast float %7206, %7207
  %7209 = call float @dx.op.unary.f32(i32 13, float %7208)  ; Sin(value)
  %7210 = fmul fast float %6959, %7132
  %7211 = fdiv fast float 2.000000e+00, %7210
  %7212 = fmul fast float %7211, %6957
  %7213 = fadd fast float %7137, %6956
  %7214 = fmul fast float %7213, %7211
  %7215 = call float @dx.op.unary.f32(i32 27, float %7212)  ; Round_ni(value)
  %7216 = fsub fast float %7212, %7215
  %7217 = fmul fast float %7216, 2.097152e+06
  %7218 = fadd fast float %7214, %7217
  %7219 = call float @dx.op.unary.f32(i32 27, float %7218)  ; Round_ni(value)
  %7220 = fsub fast float %7214, %7219
  %7221 = fmul fast float %7220, 0x401921FB60000000
  %7222 = fmul fast float %7216, 0x416921FB60000000
  %7223 = fadd fast float %7221, %7222
  %7224 = call float @dx.op.unary.f32(i32 13, float %7223)  ; Sin(value)
  %7225 = fmul fast float %7170, %7210
  %7226 = fdiv fast float 2.000000e+00, %7225
  %7227 = fmul fast float %7226, %6986
  %7228 = fadd fast float %7155, %6985
  %7229 = fmul fast float %7228, %7226
  %7230 = call float @dx.op.unary.f32(i32 27, float %7227)  ; Round_ni(value)
  %7231 = fsub fast float %7227, %7230
  %7232 = fmul fast float %7231, 2.097152e+06
  %7233 = fadd fast float %7229, %7232
  %7234 = call float @dx.op.unary.f32(i32 27, float %7233)  ; Round_ni(value)
  %7235 = fsub fast float %7229, %7234
  %7236 = fmul fast float %7235, 0x401921FB60000000
  %7237 = fmul fast float %7231, 0x416921FB60000000
  %7238 = fadd fast float %7236, %7237
  %7239 = call float @dx.op.unary.f32(i32 13, float %7238)  ; Sin(value)
  %7240 = fmul fast float %7170, %7225
  %7241 = fdiv fast float 2.000000e+00, %7240
  %7242 = fmul fast float %7241, %7013
  %7243 = fadd fast float %7176, %7012
  %7244 = fmul fast float %7243, %7241
  %7245 = call float @dx.op.unary.f32(i32 27, float %7242)  ; Round_ni(value)
  %7246 = fsub fast float %7242, %7245
  %7247 = fmul fast float %7246, 2.097152e+06
  %7248 = fadd fast float %7244, %7247
  %7249 = call float @dx.op.unary.f32(i32 27, float %7248)  ; Round_ni(value)
  %7250 = fsub fast float %7244, %7249
  %7251 = fmul fast float %7250, 0x401921FB60000000
  %7252 = fmul fast float %7246, 0x416921FB60000000
  %7253 = fadd fast float %7251, %7252
  %7254 = call float @dx.op.unary.f32(i32 13, float %7253)  ; Sin(value)
  %7255 = fmul fast float %7170, %7240
  %7256 = fdiv fast float 2.000000e+00, %7255
  %7257 = fmul fast float %7256, %7040
  %7258 = fadd fast float %7196, %7039
  %7259 = fmul fast float %7258, %7256
  %7260 = call float @dx.op.unary.f32(i32 27, float %7257)  ; Round_ni(value)
  %7261 = fsub fast float %7257, %7260
  %7262 = fmul fast float %7261, 2.097152e+06
  %7263 = fadd fast float %7259, %7262
  %7264 = call float @dx.op.unary.f32(i32 27, float %7263)  ; Round_ni(value)
  %7265 = fsub fast float %7259, %7264
  %7266 = fmul fast float %7265, 0x401921FB60000000
  %7267 = fmul fast float %7261, 0x416921FB60000000
  %7268 = fadd fast float %7266, %7267
  %7269 = call float @dx.op.unary.f32(i32 13, float %7268)  ; Sin(value)
  %7270 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 83)  ; CBufferLoadLegacy(handle,regIndex)
  %7271 = extractvalue %dx.types.CBufRet.f32 %7270, 2
  %7272 = fmul fast float %7271, %5278
  %7273 = fdiv fast float 2.000000e+00, %7272
  %7274 = fmul fast float %7273, %6054
  %7275 = extractvalue %dx.types.CBufRet.f32 %7174, 2
  %7276 = fmul fast float %7275, %6061
  %7277 = fadd fast float %7276, %5676
  %7278 = fmul fast float %7277, %7273
  %7279 = fmul fast float %6666, 4.000000e+00
  %7280 = call float @dx.op.unary.f32(i32 27, float %7274)  ; Round_ni(value)
  %7281 = fsub fast float %7274, %7280
  %7282 = fmul fast float %7281, 2.097152e+06
  %7283 = fadd fast float %7278, %7282
  %7284 = call float @dx.op.unary.f32(i32 27, float %7283)  ; Round_ni(value)
  %7285 = fsub fast float %7278, %7284
  %7286 = fmul fast float %7285, 0x401921FB60000000
  %7287 = fmul fast float %7281, 0x416921FB60000000
  %7288 = fadd fast float %7286, %7287
  %7289 = call float @dx.op.unary.f32(i32 13, float %7288)  ; Sin(value)
  %7290 = fmul fast float %7289, %7279
  %7291 = fmul fast float %7170, %7272
  %7292 = fdiv fast float 2.000000e+00, %7291
  %7293 = fmul fast float %7292, %6691
  %7294 = extractvalue %dx.types.CBufRet.f32 %7174, 3
  %7295 = fmul fast float %7294, %6061
  %7296 = fadd fast float %7295, %6690
  %7297 = fmul fast float %7296, %7292
  %7298 = fmul fast float %7180, %7279
  %7299 = call float @dx.op.unary.f32(i32 27, float %7293)  ; Round_ni(value)
  %7300 = fsub fast float %7293, %7299
  %7301 = fmul fast float %7300, 2.097152e+06
  %7302 = fadd fast float %7297, %7301
  %7303 = call float @dx.op.unary.f32(i32 27, float %7302)  ; Round_ni(value)
  %7304 = fsub fast float %7297, %7303
  %7305 = fmul fast float %7304, 0x401921FB60000000
  %7306 = fmul fast float %7300, 0x416921FB60000000
  %7307 = fadd fast float %7305, %7306
  %7308 = call float @dx.op.unary.f32(i32 13, float %7307)  ; Sin(value)
  %7309 = fmul fast float %7308, %7298
  %7310 = fmul fast float %7170, %7291
  %7311 = fdiv fast float 2.000000e+00, %7310
  %7312 = fmul fast float %7311, %6723
  %7313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 79)  ; CBufferLoadLegacy(handle,regIndex)
  %7314 = extractvalue %dx.types.CBufRet.f32 %7313, 0
  %7315 = fmul fast float %7314, %6061
  %7316 = fadd fast float %7315, %6722
  %7317 = fmul fast float %7316, %7311
  %7318 = fmul fast float %7180, %7298
  %7319 = call float @dx.op.unary.f32(i32 27, float %7312)  ; Round_ni(value)
  %7320 = fsub fast float %7312, %7319
  %7321 = fmul fast float %7320, 2.097152e+06
  %7322 = fadd fast float %7317, %7321
  %7323 = call float @dx.op.unary.f32(i32 27, float %7322)  ; Round_ni(value)
  %7324 = fsub fast float %7317, %7323
  %7325 = fmul fast float %7324, 0x401921FB60000000
  %7326 = fmul fast float %7320, 0x416921FB60000000
  %7327 = fadd fast float %7325, %7326
  %7328 = call float @dx.op.unary.f32(i32 13, float %7327)  ; Sin(value)
  %7329 = fmul fast float %7170, %7310
  %7330 = fdiv fast float 2.000000e+00, %7329
  %7331 = fmul fast float %7330, %6753
  %7332 = extractvalue %dx.types.CBufRet.f32 %7313, 1
  %7333 = fmul fast float %7332, %6061
  %7334 = fadd fast float %7333, %6752
  %7335 = fmul fast float %7334, %7330
  %7336 = call float @dx.op.unary.f32(i32 27, float %7331)  ; Round_ni(value)
  %7337 = fsub fast float %7331, %7336
  %7338 = fmul fast float %7337, 2.097152e+06
  %7339 = fadd fast float %7335, %7338
  %7340 = call float @dx.op.unary.f32(i32 27, float %7339)  ; Round_ni(value)
  %7341 = fsub fast float %7335, %7340
  %7342 = fmul fast float %7341, 0x401921FB60000000
  %7343 = fmul fast float %7337, 0x416921FB60000000
  %7344 = fadd fast float %7342, %7343
  %7345 = call float @dx.op.unary.f32(i32 13, float %7344)  ; Sin(value)
  %7346 = fmul fast float %7345, %7180
  %7347 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 86)  ; CBufferLoadLegacy(handle,regIndex)
  %7348 = extractvalue %dx.types.CBufRet.f32 %7347, 3
  %7349 = fmul fast float %7348, %5346
  %7350 = fdiv fast float 2.000000e+00, %7349
  %7351 = fmul fast float %7350, %6809
  %7352 = extractvalue %dx.types.CBufRet.f32 %7313, 2
  %7353 = fmul fast float %7352, %6061
  %7354 = fadd fast float %7353, %6808
  %7355 = fmul fast float %7354, %7350
  %7356 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 30)  ; CBufferLoadLegacy(handle,regIndex)
  %7357 = extractvalue %dx.types.CBufRet.f32 %7356, 3
  %7358 = fmul fast float %7357, %7279
  %7359 = call float @dx.op.unary.f32(i32 27, float %7351)  ; Round_ni(value)
  %7360 = fsub fast float %7351, %7359
  %7361 = fmul fast float %7360, 2.097152e+06
  %7362 = fadd fast float %7355, %7361
  %7363 = call float @dx.op.unary.f32(i32 27, float %7362)  ; Round_ni(value)
  %7364 = fsub fast float %7355, %7363
  %7365 = fmul fast float %7364, 0x401921FB60000000
  %7366 = fmul fast float %7360, 0x416921FB60000000
  %7367 = fadd fast float %7365, %7366
  %7368 = call float @dx.op.unary.f32(i32 13, float %7367)  ; Sin(value)
  %7369 = fmul fast float %7170, %7349
  %7370 = fdiv fast float 2.000000e+00, %7369
  %7371 = fmul fast float %7370, %6841
  %7372 = extractvalue %dx.types.CBufRet.f32 %7313, 3
  %7373 = fmul fast float %7372, %6061
  %7374 = fadd fast float %7373, %6840
  %7375 = fmul fast float %7374, %7370
  %7376 = fmul fast float %7180, %7358
  %7377 = call float @dx.op.unary.f32(i32 27, float %7371)  ; Round_ni(value)
  %7378 = fsub fast float %7371, %7377
  %7379 = fmul fast float %7378, 2.097152e+06
  %7380 = fadd fast float %7375, %7379
  %7381 = call float @dx.op.unary.f32(i32 27, float %7380)  ; Round_ni(value)
  %7382 = fsub fast float %7375, %7381
  %7383 = fmul fast float %7382, 0x401921FB60000000
  %7384 = fmul fast float %7378, 0x416921FB60000000
  %7385 = fadd fast float %7383, %7384
  %7386 = call float @dx.op.unary.f32(i32 13, float %7385)  ; Sin(value)
  %7387 = fmul fast float %7170, %7369
  %7388 = fdiv fast float 2.000000e+00, %7387
  %7389 = fmul fast float %7388, %6871
  %7390 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 80)  ; CBufferLoadLegacy(handle,regIndex)
  %7391 = extractvalue %dx.types.CBufRet.f32 %7390, 0
  %7392 = fmul fast float %7391, %6061
  %7393 = fadd fast float %7392, %6870
  %7394 = fmul fast float %7393, %7388
  %7395 = fmul fast float %7180, %7376
  %7396 = call float @dx.op.unary.f32(i32 27, float %7389)  ; Round_ni(value)
  %7397 = fsub fast float %7389, %7396
  %7398 = fmul fast float %7397, 2.097152e+06
  %7399 = fadd fast float %7394, %7398
  %7400 = call float @dx.op.unary.f32(i32 27, float %7399)  ; Round_ni(value)
  %7401 = fsub fast float %7394, %7400
  %7402 = fmul fast float %7401, 0x401921FB60000000
  %7403 = fmul fast float %7397, 0x416921FB60000000
  %7404 = fadd fast float %7402, %7403
  %7405 = call float @dx.op.unary.f32(i32 13, float %7404)  ; Sin(value)
  %7406 = fmul fast float %7170, %7387
  %7407 = fdiv fast float 2.000000e+00, %7406
  %7408 = fmul fast float %7407, %6901
  %7409 = extractvalue %dx.types.CBufRet.f32 %7390, 1
  %7410 = fmul fast float %7409, %6061
  %7411 = fadd fast float %7410, %6900
  %7412 = fmul fast float %7411, %7407
  %7413 = fmul fast float %7180, %7395
  %7414 = call float @dx.op.unary.f32(i32 27, float %7408)  ; Round_ni(value)
  %7415 = fsub fast float %7408, %7414
  %7416 = fmul fast float %7415, 2.097152e+06
  %7417 = fadd fast float %7412, %7416
  %7418 = call float @dx.op.unary.f32(i32 27, float %7417)  ; Round_ni(value)
  %7419 = fsub fast float %7412, %7418
  %7420 = fmul fast float %7419, 0x401921FB60000000
  %7421 = fmul fast float %7415, 0x416921FB60000000
  %7422 = fadd fast float %7420, %7421
  %7423 = call float @dx.op.unary.f32(i32 13, float %7422)  ; Sin(value)
  %7424 = fmul fast float %6959, %5346
  %7425 = fdiv fast float 2.000000e+00, %7424
  %7426 = fmul fast float %7425, %6957
  %7427 = fadd fast float %7353, %6956
  %7428 = fmul fast float %7427, %7425
  %7429 = call float @dx.op.unary.f32(i32 27, float %7426)  ; Round_ni(value)
  %7430 = fsub fast float %7426, %7429
  %7431 = fmul fast float %7430, 2.097152e+06
  %7432 = fadd fast float %7428, %7431
  %7433 = call float @dx.op.unary.f32(i32 27, float %7432)  ; Round_ni(value)
  %7434 = fsub fast float %7428, %7433
  %7435 = fmul fast float %7434, 0x401921FB60000000
  %7436 = fmul fast float %7430, 0x416921FB60000000
  %7437 = fadd fast float %7435, %7436
  %7438 = call float @dx.op.unary.f32(i32 13, float %7437)  ; Sin(value)
  %7439 = fmul fast float %7170, %7424
  %7440 = fdiv fast float 2.000000e+00, %7439
  %7441 = fmul fast float %7440, %6986
  %7442 = fadd fast float %7373, %6985
  %7443 = fmul fast float %7442, %7440
  %7444 = call float @dx.op.unary.f32(i32 27, float %7441)  ; Round_ni(value)
  %7445 = fsub fast float %7441, %7444
  %7446 = fmul fast float %7445, 2.097152e+06
  %7447 = fadd fast float %7443, %7446
  %7448 = call float @dx.op.unary.f32(i32 27, float %7447)  ; Round_ni(value)
  %7449 = fsub fast float %7443, %7448
  %7450 = fmul fast float %7449, 0x401921FB60000000
  %7451 = fmul fast float %7445, 0x416921FB60000000
  %7452 = fadd fast float %7450, %7451
  %7453 = call float @dx.op.unary.f32(i32 13, float %7452)  ; Sin(value)
  %7454 = fmul fast float %7170, %7439
  %7455 = fdiv fast float 2.000000e+00, %7454
  %7456 = fmul fast float %7455, %7013
  %7457 = fadd fast float %7392, %7012
  %7458 = fmul fast float %7457, %7455
  %7459 = call float @dx.op.unary.f32(i32 27, float %7456)  ; Round_ni(value)
  %7460 = fsub fast float %7456, %7459
  %7461 = fmul fast float %7460, 2.097152e+06
  %7462 = fadd fast float %7458, %7461
  %7463 = call float @dx.op.unary.f32(i32 27, float %7462)  ; Round_ni(value)
  %7464 = fsub fast float %7458, %7463
  %7465 = fmul fast float %7464, 0x401921FB60000000
  %7466 = fmul fast float %7460, 0x416921FB60000000
  %7467 = fadd fast float %7465, %7466
  %7468 = call float @dx.op.unary.f32(i32 13, float %7467)  ; Sin(value)
  %7469 = fmul fast float %7170, %7454
  %7470 = fdiv fast float 2.000000e+00, %7469
  %7471 = fmul fast float %7470, %7040
  %7472 = fadd fast float %7410, %7039
  %7473 = fmul fast float %7472, %7470
  %7474 = call float @dx.op.unary.f32(i32 27, float %7471)  ; Round_ni(value)
  %7475 = fsub fast float %7471, %7474
  %7476 = fmul fast float %7475, 2.097152e+06
  %7477 = fadd fast float %7473, %7476
  %7478 = call float @dx.op.unary.f32(i32 27, float %7477)  ; Round_ni(value)
  %7479 = fsub fast float %7473, %7478
  %7480 = fmul fast float %7479, 0x401921FB60000000
  %7481 = fmul fast float %7475, 0x416921FB60000000
  %7482 = fadd fast float %7480, %7481
  %7483 = call float @dx.op.unary.f32(i32 13, float %7482)  ; Sin(value)
  %7484 = fmul fast float %7271, %5468
  %7485 = fdiv fast float 2.000000e+00, %7484
  %7486 = fmul fast float %7485, %6054
  %7487 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 76)  ; CBufferLoadLegacy(handle,regIndex)
  %7488 = extractvalue %dx.types.CBufRet.f32 %7487, 2
  %7489 = fmul fast float %7488, %6061
  %7490 = fadd fast float %7489, %5676
  %7491 = fmul fast float %7490, %7485
  %7492 = fmul fast float %6666, 5.000000e-01
  %7493 = call float @dx.op.unary.f32(i32 27, float %7486)  ; Round_ni(value)
  %7494 = fsub fast float %7486, %7493
  %7495 = fmul fast float %7494, 2.097152e+06
  %7496 = fadd fast float %7491, %7495
  %7497 = call float @dx.op.unary.f32(i32 27, float %7496)  ; Round_ni(value)
  %7498 = fsub fast float %7491, %7497
  %7499 = fmul fast float %7498, 0x401921FB60000000
  %7500 = fmul fast float %7494, 0x416921FB60000000
  %7501 = fadd fast float %7499, %7500
  %7502 = call float @dx.op.unary.f32(i32 13, float %7501)  ; Sin(value)
  %7503 = fmul fast float %7502, %7492
  %7504 = fmul fast float %7170, %7484
  %7505 = fdiv fast float 2.000000e+00, %7504
  %7506 = fmul fast float %7505, %6691
  %7507 = extractvalue %dx.types.CBufRet.f32 %7487, 3
  %7508 = fmul fast float %7507, %6061
  %7509 = fadd fast float %7508, %6690
  %7510 = fmul fast float %7509, %7505
  %7511 = fmul fast float %7180, %7492
  %7512 = call float @dx.op.unary.f32(i32 27, float %7506)  ; Round_ni(value)
  %7513 = fsub fast float %7506, %7512
  %7514 = fmul fast float %7513, 2.097152e+06
  %7515 = fadd fast float %7510, %7514
  %7516 = call float @dx.op.unary.f32(i32 27, float %7515)  ; Round_ni(value)
  %7517 = fsub fast float %7510, %7516
  %7518 = fmul fast float %7517, 0x401921FB60000000
  %7519 = fmul fast float %7513, 0x416921FB60000000
  %7520 = fadd fast float %7518, %7519
  %7521 = call float @dx.op.unary.f32(i32 13, float %7520)  ; Sin(value)
  %7522 = fmul fast float %7521, %7511
  %7523 = fmul fast float %7170, %7504
  %7524 = fdiv fast float 2.000000e+00, %7523
  %7525 = fmul fast float %7524, %6723
  %7526 = fmul fast float %7101, %7524
  %7527 = fmul fast float %7180, %7511
  %7528 = call float @dx.op.unary.f32(i32 27, float %7525)  ; Round_ni(value)
  %7529 = fsub fast float %7525, %7528
  %7530 = fmul fast float %7529, 2.097152e+06
  %7531 = fadd fast float %7526, %7530
  %7532 = call float @dx.op.unary.f32(i32 27, float %7531)  ; Round_ni(value)
  %7533 = fsub fast float %7526, %7532
  %7534 = fmul fast float %7533, 0x401921FB60000000
  %7535 = fmul fast float %7529, 0x416921FB60000000
  %7536 = fadd fast float %7534, %7535
  %7537 = call float @dx.op.unary.f32(i32 13, float %7536)  ; Sin(value)
  %7538 = fmul fast float %7170, %7523
  %7539 = fdiv fast float 2.000000e+00, %7538
  %7540 = fmul fast float %7539, %6753
  %7541 = fmul fast float %7119, %7539
  %7542 = call float @dx.op.unary.f32(i32 27, float %7540)  ; Round_ni(value)
  %7543 = fsub fast float %7540, %7542
  %7544 = fmul fast float %7543, 2.097152e+06
  %7545 = fadd fast float %7541, %7544
  %7546 = call float @dx.op.unary.f32(i32 27, float %7545)  ; Round_ni(value)
  %7547 = fsub fast float %7541, %7546
  %7548 = fmul fast float %7547, 0x401921FB60000000
  %7549 = fmul fast float %7543, 0x416921FB60000000
  %7550 = fadd fast float %7548, %7549
  %7551 = call float @dx.op.unary.f32(i32 13, float %7550)  ; Sin(value)
  %7552 = fmul fast float %7551, %7180
  %7553 = fmul fast float %7348, %5528
  %7554 = fdiv fast float 2.000000e+00, %7553
  %7555 = fmul fast float %7554, %6809
  %7556 = fmul fast float %7138, %7554
  %7557 = fmul fast float %7357, %7492
  %7558 = call float @dx.op.unary.f32(i32 27, float %7555)  ; Round_ni(value)
  %7559 = fsub fast float %7555, %7558
  %7560 = fmul fast float %7559, 2.097152e+06
  %7561 = fadd fast float %7556, %7560
  %7562 = call float @dx.op.unary.f32(i32 27, float %7561)  ; Round_ni(value)
  %7563 = fsub fast float %7556, %7562
  %7564 = fmul fast float %7563, 0x401921FB60000000
  %7565 = fmul fast float %7559, 0x416921FB60000000
  %7566 = fadd fast float %7564, %7565
  %7567 = call float @dx.op.unary.f32(i32 13, float %7566)  ; Sin(value)
  %7568 = fmul fast float %7170, %7553
  %7569 = fdiv fast float 2.000000e+00, %7568
  %7570 = fmul fast float %7569, %6841
  %7571 = fmul fast float %7156, %7569
  %7572 = fmul fast float %7180, %7557
  %7573 = call float @dx.op.unary.f32(i32 27, float %7570)  ; Round_ni(value)
  %7574 = fsub fast float %7570, %7573
  %7575 = fmul fast float %7574, 2.097152e+06
  %7576 = fadd fast float %7571, %7575
  %7577 = call float @dx.op.unary.f32(i32 27, float %7576)  ; Round_ni(value)
  %7578 = fsub fast float %7571, %7577
  %7579 = fmul fast float %7578, 0x401921FB60000000
  %7580 = fmul fast float %7574, 0x416921FB60000000
  %7581 = fadd fast float %7579, %7580
  %7582 = call float @dx.op.unary.f32(i32 13, float %7581)  ; Sin(value)
  %7583 = fmul fast float %7170, %7568
  %7584 = fdiv fast float 2.000000e+00, %7583
  %7585 = fmul fast float %7584, %6871
  %7586 = fmul fast float %7177, %7584
  %7587 = fmul fast float %7180, %7572
  %7588 = call float @dx.op.unary.f32(i32 27, float %7585)  ; Round_ni(value)
  %7589 = fsub fast float %7585, %7588
  %7590 = fmul fast float %7589, 2.097152e+06
  %7591 = fadd fast float %7586, %7590
  %7592 = call float @dx.op.unary.f32(i32 27, float %7591)  ; Round_ni(value)
  %7593 = fsub fast float %7586, %7592
  %7594 = fmul fast float %7593, 0x401921FB60000000
  %7595 = fmul fast float %7589, 0x416921FB60000000
  %7596 = fadd fast float %7594, %7595
  %7597 = call float @dx.op.unary.f32(i32 13, float %7596)  ; Sin(value)
  %7598 = fmul fast float %7170, %7583
  %7599 = fdiv fast float 2.000000e+00, %7598
  %7600 = fmul fast float %7599, %6901
  %7601 = fmul fast float %7197, %7599
  %7602 = fmul fast float %7180, %7587
  %7603 = call float @dx.op.unary.f32(i32 27, float %7600)  ; Round_ni(value)
  %7604 = fsub fast float %7600, %7603
  %7605 = fmul fast float %7604, 2.097152e+06
  %7606 = fadd fast float %7601, %7605
  %7607 = call float @dx.op.unary.f32(i32 27, float %7606)  ; Round_ni(value)
  %7608 = fsub fast float %7601, %7607
  %7609 = fmul fast float %7608, 0x401921FB60000000
  %7610 = fmul fast float %7604, 0x416921FB60000000
  %7611 = fadd fast float %7609, %7610
  %7612 = call float @dx.op.unary.f32(i32 13, float %7611)  ; Sin(value)
  %7613 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 90)  ; CBufferLoadLegacy(handle,regIndex)
  %7614 = extractvalue %dx.types.CBufRet.f32 %7613, 0
  %7615 = fmul fast float %7614, %5528
  %7616 = fdiv fast float 2.000000e+00, %7615
  %7617 = fmul fast float %7616, %6957
  %7618 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 77)  ; CBufferLoadLegacy(handle,regIndex)
  %7619 = extractvalue %dx.types.CBufRet.f32 %7618, 2
  %7620 = fmul fast float %7619, %6061
  %7621 = fadd fast float %7620, %6956
  %7622 = fmul fast float %7621, %7616
  %7623 = call float @dx.op.unary.f32(i32 27, float %7617)  ; Round_ni(value)
  %7624 = fsub fast float %7617, %7623
  %7625 = fmul fast float %7624, 2.097152e+06
  %7626 = fadd fast float %7622, %7625
  %7627 = call float @dx.op.unary.f32(i32 27, float %7626)  ; Round_ni(value)
  %7628 = fsub fast float %7622, %7627
  %7629 = fmul fast float %7628, 0x401921FB60000000
  %7630 = fmul fast float %7624, 0x416921FB60000000
  %7631 = fadd fast float %7629, %7630
  %7632 = call float @dx.op.unary.f32(i32 13, float %7631)  ; Sin(value)
  %7633 = fmul fast float %7170, %7615
  %7634 = fdiv fast float 2.000000e+00, %7633
  %7635 = fmul fast float %7634, %6986
  %7636 = extractvalue %dx.types.CBufRet.f32 %7618, 3
  %7637 = fmul fast float %7636, %6061
  %7638 = fadd fast float %7637, %6985
  %7639 = fmul fast float %7638, %7634
  %7640 = call float @dx.op.unary.f32(i32 27, float %7635)  ; Round_ni(value)
  %7641 = fsub fast float %7635, %7640
  %7642 = fmul fast float %7641, 2.097152e+06
  %7643 = fadd fast float %7639, %7642
  %7644 = call float @dx.op.unary.f32(i32 27, float %7643)  ; Round_ni(value)
  %7645 = fsub fast float %7639, %7644
  %7646 = fmul fast float %7645, 0x401921FB60000000
  %7647 = fmul fast float %7641, 0x416921FB60000000
  %7648 = fadd fast float %7646, %7647
  %7649 = call float @dx.op.unary.f32(i32 13, float %7648)  ; Sin(value)
  %7650 = fmul fast float %7170, %7633
  %7651 = fdiv fast float 2.000000e+00, %7650
  %7652 = fmul fast float %7651, %7013
  %7653 = fmul fast float %7243, %7651
  %7654 = call float @dx.op.unary.f32(i32 27, float %7652)  ; Round_ni(value)
  %7655 = fsub fast float %7652, %7654
  %7656 = fmul fast float %7655, 2.097152e+06
  %7657 = fadd fast float %7653, %7656
  %7658 = call float @dx.op.unary.f32(i32 27, float %7657)  ; Round_ni(value)
  %7659 = fsub fast float %7653, %7658
  %7660 = fmul fast float %7659, 0x401921FB60000000
  %7661 = fmul fast float %7655, 0x416921FB60000000
  %7662 = fadd fast float %7660, %7661
  %7663 = call float @dx.op.unary.f32(i32 13, float %7662)  ; Sin(value)
  %7664 = fmul fast float %7170, %7650
  %7665 = fdiv fast float 2.000000e+00, %7664
  %7666 = fmul fast float %7665, %7040
  %7667 = fmul fast float %7258, %7665
  %7668 = call float @dx.op.unary.f32(i32 27, float %7666)  ; Round_ni(value)
  %7669 = fsub fast float %7666, %7668
  %7670 = fmul fast float %7669, 2.097152e+06
  %7671 = fadd fast float %7667, %7670
  %7672 = call float @dx.op.unary.f32(i32 27, float %7671)  ; Round_ni(value)
  %7673 = fsub fast float %7667, %7672
  %7674 = fmul fast float %7673, 0x401921FB60000000
  %7675 = fmul fast float %7669, 0x416921FB60000000
  %7676 = fadd fast float %7674, %7675
  %7677 = call float @dx.op.unary.f32(i32 13, float %7676)  ; Sin(value)
  %7678 = fadd fast float %6021, %6017
  %7679 = fadd fast float %7678, %6029
  %7680 = fadd fast float %7679, %6033
  %7681 = fmul fast float %6016, %7680
  %7682 = fadd fast float %6020, %6015
  %7683 = fadd fast float %7682, %6028
  %7684 = fadd fast float %7683, %6032
  %7685 = fmul fast float %7684, %6014
  %7686 = fadd fast float %6019, %6013
  %7687 = fadd fast float %7686, %6027
  %7688 = fadd fast float %7687, %6031
  %7689 = fmul fast float %7688, %6012
  %7690 = fadd fast float %6018, %6011
  %7691 = fadd fast float %7690, %6026
  %7692 = fadd fast float %7691, %6030
  %7693 = fmul fast float %7692, %6010
  %7694 = fadd fast float %7677, %7612
  %7695 = fmul fast float %7602, %7694
  %7696 = fadd fast float %7663, %7597
  %7697 = fmul fast float %7696, %7587
  %7698 = fadd fast float %7649, %7582
  %7699 = fmul fast float %7698, %7572
  %7700 = fadd fast float %7632, %7567
  %7701 = fmul fast float %7700, %7557
  %7702 = fadd fast float %7552, %7537
  %7703 = fmul fast float %7527, %7702
  %7704 = fadd fast float %7483, %7423
  %7705 = fmul fast float %7413, %7704
  %7706 = fadd fast float %7468, %7405
  %7707 = fmul fast float %7706, %7395
  %7708 = fadd fast float %7453, %7386
  %7709 = fmul fast float %7708, %7376
  %7710 = fadd fast float %7438, %7368
  %7711 = fmul fast float %7710, %7358
  %7712 = fadd fast float %7346, %7328
  %7713 = fmul fast float %7318, %7712
  %7714 = fadd fast float %7269, %7209
  %7715 = fmul fast float %7199, %7714
  %7716 = fadd fast float %7254, %7191
  %7717 = fmul fast float %7716, %7181
  %7718 = fadd fast float %7239, %7168
  %7719 = fmul fast float %7718, %7158
  %7720 = fadd fast float %7224, %7150
  %7721 = fmul fast float %7720, %7140
  %7722 = fadd fast float %7131, %7113
  %7723 = fmul fast float %7103, %7722
  %7724 = fadd fast float %7055, %6920
  %7725 = fmul fast float %6910, %7724
  %7726 = fadd fast float %7028, %6889
  %7727 = fmul fast float %7726, %6879
  %7728 = fadd fast float %7001, %6859
  %7729 = fmul fast float %7728, %6849
  %7730 = fadd fast float %6974, %6829
  %7731 = fmul fast float %7730, %6819
  %7732 = fadd fast float %6772, %6741
  %7733 = fmul fast float %6731, %7732
  %7734 = fadd fast float %6052, %6048
  %7735 = fmul fast float %6047, %7734
  %7736 = fadd fast float %6051, %6046
  %7737 = fmul fast float %7736, %6045
  %7738 = fadd fast float %6050, %6044
  %7739 = fmul fast float %7738, %6043
  %7740 = fadd fast float %6049, %6042
  %7741 = fmul fast float %7740, %6041
  %7742 = fadd fast float %6040, %6039
  %7743 = fmul fast float %6038, %7742
  %7744 = fadd fast float %6025, %6009
  %7745 = fmul fast float %6008, %7744
  %7746 = fadd fast float %6024, %6007
  %7747 = fmul fast float %7746, %6006
  %7748 = fadd fast float %6023, %6005
  %7749 = fmul fast float %7748, %6004
  %7750 = fadd fast float %6022, %6003
  %7751 = fmul fast float %7750, %6002
  %7752 = fadd fast float %6001, %5997
  %7753 = fmul fast float %5996, %7752
  %7754 = fadd fast float %6000, %5995
  %7755 = fmul fast float %7754, %5994
  %7756 = fadd fast float %5999, %5993
  %7757 = fmul fast float %7756, %5992
  %7758 = fadd fast float %5998, %5991
  %7759 = fmul fast float %7758, %5990
  %7760 = fadd fast float %5989, %5988
  %7761 = fmul fast float %5987, %7760
  %7762 = fadd fast float %5984, %4084
  %7763 = fadd fast float %7762, %5986
  %7764 = fadd fast float %7763, %6035
  %7765 = fadd fast float %7764, %6037
  %7766 = fadd fast float %7765, %6677
  %7767 = fadd fast float %7766, %6711
  %7768 = fadd fast float %7767, %7075
  %7769 = fadd fast float %7768, %7094
  %7770 = fadd fast float %7769, %7290
  %7771 = fadd fast float %7770, %7309
  %7772 = fadd fast float %7771, %7503
  %7773 = fadd fast float %7772, %7522
  %7774 = fadd fast float %7773, %7681
  %7775 = fadd fast float %7774, %7685
  %7776 = fadd fast float %7775, %7689
  %7777 = fadd fast float %7776, %7693
  %7778 = fadd fast float %7777, %7695
  %7779 = fadd fast float %7778, %7697
  %7780 = fadd fast float %7779, %7699
  %7781 = fadd fast float %7780, %7701
  %7782 = fadd fast float %7781, %7703
  %7783 = fadd fast float %7782, %7705
  %7784 = fadd fast float %7783, %7707
  %7785 = fadd fast float %7784, %7709
  %7786 = fadd fast float %7785, %7711
  %7787 = fadd fast float %7786, %7713
  %7788 = fadd fast float %7787, %7715
  %7789 = fadd fast float %7788, %7717
  %7790 = fadd fast float %7789, %7719
  %7791 = fadd fast float %7790, %7721
  %7792 = fadd fast float %7791, %7723
  %7793 = fadd fast float %7792, %7725
  %7794 = fadd fast float %7793, %7727
  %7795 = fadd fast float %7794, %7729
  %7796 = fadd fast float %7795, %7731
  %7797 = fadd fast float %7796, %7733
  %7798 = fadd fast float %7797, %7735
  %7799 = fadd fast float %7798, %7737
  %7800 = fadd fast float %7799, %7739
  %7801 = fadd fast float %7800, %7741
  %7802 = fadd fast float %7801, %7743
  %7803 = fadd fast float %7802, %7745
  %7804 = fadd fast float %7803, %7747
  %7805 = fadd fast float %7804, %7749
  %7806 = fadd fast float %7805, %7751
  %7807 = fadd fast float %7806, %7753
  %7808 = fadd fast float %7807, %7755
  %7809 = fadd fast float %7808, %7757
  %7810 = fadd fast float %7809, %7759
  %7811 = fadd fast float %7810, %7761
  %7812 = fmul fast float %7811, %452
  %7813 = extractvalue %dx.types.CBufRet.f32 %7613, 1
  %7814 = fsub fast float %7812, %7813
  %7815 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 91)  ; CBufferLoadLegacy(handle,regIndex)
  %7816 = extractvalue %dx.types.CBufRet.f32 %7815, 0
  %7817 = fmul fast float %7814, %7816
  %7818 = call float @dx.op.unary.f32(i32 7, float %7817)  ; Saturate(value)
  %7819 = extractvalue %dx.types.CBufRet.f32 %7815, 1
  %7820 = fmul fast float %7819, %7818
  %7821 = extractvalue %dx.types.CBufRet.f32 %7815, 2
  %7822 = fsub fast float %7820, %7821
  %7823 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 92)  ; CBufferLoadLegacy(handle,regIndex)
  %7824 = extractvalue %dx.types.CBufRet.f32 %7823, 1
  %7825 = fmul fast float %7822, %7824
  %7826 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 93)  ; CBufferLoadLegacy(handle,regIndex)
  %7827 = extractvalue %dx.types.CBufRet.f32 %7826, 1
  %7828 = fmul fast float %7827, %76
  %7829 = fmul fast float %7827, %23
  %7830 = extractvalue %dx.types.CBufRet.f32 %7826, 3
  %7831 = fmul fast float %7830, %932
  %7832 = fadd fast float %7831, 1.000000e+00
  %7833 = fmul fast float %7832, 0x3EA0000000000000
  %7834 = fadd fast float %7833, 5.000000e-01
  %7835 = fadd fast float %7828, 0x7FF8000000000000
  %7836 = fadd fast float %7829, 0x7FF8000000000000
  %7837 = call float @dx.op.unary.f32(i32 27, float %7835)  ; Round_ni(value)
  %7838 = call float @dx.op.unary.f32(i32 27, float %7836)  ; Round_ni(value)
  %7839 = call float @dx.op.unary.f32(i32 27, float %7834)  ; Round_ni(value)
  %7840 = fsub fast float %7828, %7837
  %7841 = fsub fast float %7829, %7838
  %7842 = fmul fast float %7840, 2.097152e+06
  %7843 = fmul fast float %7841, 2.097152e+06
  %7844 = fmul fast float %7839, 2.097152e+06
  %7845 = fadd fast float %7842, 0x7FF8000000000000
  %7846 = fadd fast float %7843, 0x7FF8000000000000
  %7847 = fsub fast float %7832, %7844
  br label %7848

; <label>:7848                                    ; preds = %7848, %6658
  %7849 = phi float [ %7845, %6658 ], [ %8101, %7848 ]
  %7850 = phi float [ %7846, %6658 ], [ %8102, %7848 ]
  %7851 = phi float [ %7847, %6658 ], [ %8103, %7848 ]
  %7852 = phi float [ 0.000000e+00, %6658 ], [ %8100, %7848 ]
  %7853 = phi float [ 1.000000e+00, %6658 ], [ %8104, %7848 ]
  %7854 = phi i32 [ 0, %6658 ], [ %8105, %7848 ]
  %7855 = call float @dx.op.unary.f32(i32 22, float %7849)  ; Frc(value)
  %7856 = call float @dx.op.unary.f32(i32 22, float %7850)  ; Frc(value)
  %7857 = call float @dx.op.unary.f32(i32 22, float %7851)  ; Frc(value)
  %7858 = call float @dx.op.unary.f32(i32 27, float %7849)  ; Round_ni(value)
  %7859 = call float @dx.op.unary.f32(i32 27, float %7850)  ; Round_ni(value)
  %7860 = call float @dx.op.unary.f32(i32 27, float %7851)  ; Round_ni(value)
  %7861 = call float @dx.op.dot3.f32(i32 55, float %7858, float %7859, float %7860, float 1.900000e+01, float 4.700000e+01, float 1.010000e+02)  ; Dot3(ax,ay,az,bx,by,bz)
  %7862 = fadd fast float %7861, 1.900000e+01
  %7863 = fadd fast float %7861, 4.700000e+01
  %7864 = fadd fast float %7861, 6.600000e+01
  %7865 = fadd fast float %7861, 1.010000e+02
  %7866 = fadd fast float %7861, 1.200000e+02
  %7867 = fadd fast float %7861, 1.480000e+02
  %7868 = fadd fast float %7861, 1.670000e+02
  %7869 = fptosi float %7861 to i32
  %7870 = mul i32 %7869, 1664525
  %7871 = add i32 %7870, -781160288
  %7872 = mul i32 %7871, 1013904223
  %7873 = add i32 %7872, 1013904223
  %7874 = mul i32 %7873, %7871
  %7875 = add i32 %7874, 1013904223
  %7876 = mul i32 %7875, %7873
  %7877 = add i32 %7876, %7871
  %7878 = lshr i32 %7877, 16
  %7879 = and i32 %7878, 32768
  %7880 = and i32 %7878, 16384
  %7881 = and i32 %7878, 8192
  %7882 = uitofp i32 %7879 to float
  %7883 = uitofp i32 %7880 to float
  %7884 = uitofp i32 %7881 to float
  %7885 = fmul fast float %7882, 0x3F10000000000000
  %7886 = fmul fast float %7883, 0x3F20000000000000
  %7887 = fmul fast float %7884, 0x3F30000000000000
  %7888 = fadd fast float %7885, -1.000000e+00
  %7889 = fadd fast float %7886, -1.000000e+00
  %7890 = fadd fast float %7887, -1.000000e+00
  %7891 = call float @dx.op.dot3.f32(i32 55, float %7888, float %7889, float %7890, float %7855, float %7856, float %7857)  ; Dot3(ax,ay,az,bx,by,bz)
  %7892 = fadd fast float %7855, -1.000000e+00
  %7893 = fptosi float %7862 to i32
  %7894 = mul i32 %7893, 1664525
  %7895 = add i32 %7894, -781160288
  %7896 = mul i32 %7895, 1013904223
  %7897 = add i32 %7896, 1013904223
  %7898 = mul i32 %7897, %7895
  %7899 = add i32 %7898, 1013904223
  %7900 = mul i32 %7899, %7897
  %7901 = add i32 %7900, %7895
  %7902 = lshr i32 %7901, 16
  %7903 = and i32 %7902, 32768
  %7904 = and i32 %7902, 16384
  %7905 = and i32 %7902, 8192
  %7906 = uitofp i32 %7903 to float
  %7907 = uitofp i32 %7904 to float
  %7908 = uitofp i32 %7905 to float
  %7909 = fmul fast float %7906, 0x3F10000000000000
  %7910 = fmul fast float %7907, 0x3F20000000000000
  %7911 = fmul fast float %7908, 0x3F30000000000000
  %7912 = fadd fast float %7909, -1.000000e+00
  %7913 = fadd fast float %7910, -1.000000e+00
  %7914 = fadd fast float %7911, -1.000000e+00
  %7915 = call float @dx.op.dot3.f32(i32 55, float %7912, float %7913, float %7914, float %7892, float %7856, float %7857)  ; Dot3(ax,ay,az,bx,by,bz)
  %7916 = fadd fast float %7856, -1.000000e+00
  %7917 = fptosi float %7863 to i32
  %7918 = mul i32 %7917, 1664525
  %7919 = add i32 %7918, -781160288
  %7920 = mul i32 %7919, 1013904223
  %7921 = add i32 %7920, 1013904223
  %7922 = mul i32 %7921, %7919
  %7923 = add i32 %7922, 1013904223
  %7924 = mul i32 %7923, %7921
  %7925 = add i32 %7924, %7919
  %7926 = lshr i32 %7925, 16
  %7927 = and i32 %7926, 32768
  %7928 = and i32 %7926, 16384
  %7929 = and i32 %7926, 8192
  %7930 = uitofp i32 %7927 to float
  %7931 = uitofp i32 %7928 to float
  %7932 = uitofp i32 %7929 to float
  %7933 = fmul fast float %7930, 0x3F10000000000000
  %7934 = fmul fast float %7931, 0x3F20000000000000
  %7935 = fmul fast float %7932, 0x3F30000000000000
  %7936 = fadd fast float %7933, -1.000000e+00
  %7937 = fadd fast float %7934, -1.000000e+00
  %7938 = fadd fast float %7935, -1.000000e+00
  %7939 = call float @dx.op.dot3.f32(i32 55, float %7936, float %7937, float %7938, float %7855, float %7916, float %7857)  ; Dot3(ax,ay,az,bx,by,bz)
  %7940 = fptosi float %7864 to i32
  %7941 = mul i32 %7940, 1664525
  %7942 = add i32 %7941, -781160288
  %7943 = mul i32 %7942, 1013904223
  %7944 = add i32 %7943, 1013904223
  %7945 = mul i32 %7944, %7942
  %7946 = add i32 %7945, 1013904223
  %7947 = mul i32 %7946, %7944
  %7948 = add i32 %7947, %7942
  %7949 = lshr i32 %7948, 16
  %7950 = and i32 %7949, 32768
  %7951 = and i32 %7949, 16384
  %7952 = and i32 %7949, 8192
  %7953 = uitofp i32 %7950 to float
  %7954 = uitofp i32 %7951 to float
  %7955 = uitofp i32 %7952 to float
  %7956 = fmul fast float %7953, 0x3F10000000000000
  %7957 = fmul fast float %7954, 0x3F20000000000000
  %7958 = fmul fast float %7955, 0x3F30000000000000
  %7959 = fadd fast float %7956, -1.000000e+00
  %7960 = fadd fast float %7957, -1.000000e+00
  %7961 = fadd fast float %7958, -1.000000e+00
  %7962 = call float @dx.op.dot3.f32(i32 55, float %7959, float %7960, float %7961, float %7892, float %7916, float %7857)  ; Dot3(ax,ay,az,bx,by,bz)
  %7963 = fadd fast float %7857, -1.000000e+00
  %7964 = fptosi float %7865 to i32
  %7965 = mul i32 %7964, 1664525
  %7966 = add i32 %7965, -781160288
  %7967 = mul i32 %7966, 1013904223
  %7968 = add i32 %7967, 1013904223
  %7969 = mul i32 %7968, %7966
  %7970 = add i32 %7969, 1013904223
  %7971 = mul i32 %7970, %7968
  %7972 = add i32 %7971, %7966
  %7973 = lshr i32 %7972, 16
  %7974 = and i32 %7973, 32768
  %7975 = and i32 %7973, 16384
  %7976 = and i32 %7973, 8192
  %7977 = uitofp i32 %7974 to float
  %7978 = uitofp i32 %7975 to float
  %7979 = uitofp i32 %7976 to float
  %7980 = fmul fast float %7977, 0x3F10000000000000
  %7981 = fmul fast float %7978, 0x3F20000000000000
  %7982 = fmul fast float %7979, 0x3F30000000000000
  %7983 = fadd fast float %7980, -1.000000e+00
  %7984 = fadd fast float %7981, -1.000000e+00
  %7985 = fadd fast float %7982, -1.000000e+00
  %7986 = call float @dx.op.dot3.f32(i32 55, float %7983, float %7984, float %7985, float %7855, float %7856, float %7963)  ; Dot3(ax,ay,az,bx,by,bz)
  %7987 = fptosi float %7866 to i32
  %7988 = mul i32 %7987, 1664525
  %7989 = add i32 %7988, -781160288
  %7990 = mul i32 %7989, 1013904223
  %7991 = add i32 %7990, 1013904223
  %7992 = mul i32 %7991, %7989
  %7993 = add i32 %7992, 1013904223
  %7994 = mul i32 %7993, %7991
  %7995 = add i32 %7994, %7989
  %7996 = lshr i32 %7995, 16
  %7997 = and i32 %7996, 32768
  %7998 = and i32 %7996, 16384
  %7999 = and i32 %7996, 8192
  %8000 = uitofp i32 %7997 to float
  %8001 = uitofp i32 %7998 to float
  %8002 = uitofp i32 %7999 to float
  %8003 = fmul fast float %8000, 0x3F10000000000000
  %8004 = fmul fast float %8001, 0x3F20000000000000
  %8005 = fmul fast float %8002, 0x3F30000000000000
  %8006 = fadd fast float %8003, -1.000000e+00
  %8007 = fadd fast float %8004, -1.000000e+00
  %8008 = fadd fast float %8005, -1.000000e+00
  %8009 = call float @dx.op.dot3.f32(i32 55, float %8006, float %8007, float %8008, float %7892, float %7856, float %7963)  ; Dot3(ax,ay,az,bx,by,bz)
  %8010 = fptosi float %7867 to i32
  %8011 = mul i32 %8010, 1664525
  %8012 = add i32 %8011, -781160288
  %8013 = mul i32 %8012, 1013904223
  %8014 = add i32 %8013, 1013904223
  %8015 = mul i32 %8014, %8012
  %8016 = add i32 %8015, 1013904223
  %8017 = mul i32 %8016, %8014
  %8018 = add i32 %8017, %8012
  %8019 = lshr i32 %8018, 16
  %8020 = and i32 %8019, 32768
  %8021 = and i32 %8019, 16384
  %8022 = and i32 %8019, 8192
  %8023 = uitofp i32 %8020 to float
  %8024 = uitofp i32 %8021 to float
  %8025 = uitofp i32 %8022 to float
  %8026 = fmul fast float %8023, 0x3F10000000000000
  %8027 = fmul fast float %8024, 0x3F20000000000000
  %8028 = fmul fast float %8025, 0x3F30000000000000
  %8029 = fadd fast float %8026, -1.000000e+00
  %8030 = fadd fast float %8027, -1.000000e+00
  %8031 = fadd fast float %8028, -1.000000e+00
  %8032 = call float @dx.op.dot3.f32(i32 55, float %8029, float %8030, float %8031, float %7855, float %7916, float %7963)  ; Dot3(ax,ay,az,bx,by,bz)
  %8033 = fptosi float %7868 to i32
  %8034 = mul i32 %8033, 1664525
  %8035 = add i32 %8034, -781160288
  %8036 = mul i32 %8035, 1013904223
  %8037 = add i32 %8036, 1013904223
  %8038 = mul i32 %8037, %8035
  %8039 = add i32 %8038, 1013904223
  %8040 = mul i32 %8039, %8037
  %8041 = add i32 %8040, %8035
  %8042 = lshr i32 %8041, 16
  %8043 = and i32 %8042, 32768
  %8044 = and i32 %8042, 16384
  %8045 = and i32 %8042, 8192
  %8046 = uitofp i32 %8043 to float
  %8047 = uitofp i32 %8044 to float
  %8048 = uitofp i32 %8045 to float
  %8049 = fmul fast float %8046, 0x3F10000000000000
  %8050 = fmul fast float %8047, 0x3F20000000000000
  %8051 = fmul fast float %8048, 0x3F30000000000000
  %8052 = fadd fast float %8049, -1.000000e+00
  %8053 = fadd fast float %8050, -1.000000e+00
  %8054 = fadd fast float %8051, -1.000000e+00
  %8055 = call float @dx.op.dot3.f32(i32 55, float %8052, float %8053, float %8054, float %7892, float %7916, float %7963)  ; Dot3(ax,ay,az,bx,by,bz)
  %8056 = fmul fast float %7855, %7855
  %8057 = fmul fast float %7856, %7856
  %8058 = fmul fast float %7857, %7857
  %8059 = fmul fast float %8056, %7855
  %8060 = fmul fast float %8057, %7856
  %8061 = fmul fast float %8058, %7857
  %8062 = fmul fast float %7855, 6.000000e+00
  %8063 = fmul fast float %7856, 6.000000e+00
  %8064 = fmul fast float %7857, 6.000000e+00
  %8065 = fadd fast float %8062, -1.500000e+01
  %8066 = fadd fast float %8063, -1.500000e+01
  %8067 = fadd fast float %8064, -1.500000e+01
  %8068 = fmul fast float %8065, %7855
  %8069 = fmul fast float %8066, %7856
  %8070 = fmul fast float %8067, %7857
  %8071 = fadd fast float %8068, 1.000000e+01
  %8072 = fadd fast float %8069, 1.000000e+01
  %8073 = fadd fast float %8070, 1.000000e+01
  %8074 = fmul fast float %8059, %8071
  %8075 = fmul fast float %8060, %8072
  %8076 = fmul fast float %8061, %8073
  %8077 = fsub fast float %7962, %7939
  %8078 = fmul fast float %8077, %8074
  %8079 = fsub fast float %7915, %7891
  %8080 = fmul fast float %8079, %8074
  %8081 = fadd fast float %8080, %7891
  %8082 = fsub fast float %7939, %8081
  %8083 = fadd fast float %8082, %8078
  %8084 = fmul fast float %8083, %8075
  %8085 = fadd fast float %8084, %8081
  %8086 = fsub fast float %8055, %8032
  %8087 = fmul fast float %8086, %8074
  %8088 = fsub fast float %8009, %7986
  %8089 = fmul fast float %8088, %8074
  %8090 = fadd fast float %8089, %7986
  %8091 = fsub fast float %8032, %8090
  %8092 = fadd fast float %8091, %8087
  %8093 = fmul fast float %8092, %8075
  %8094 = fsub fast float %8090, %8085
  %8095 = fadd fast float %8094, %8093
  %8096 = fmul fast float %8076, %8095
  %8097 = fadd fast float %8096, %8085
  %8098 = call float @dx.op.unary.f32(i32 6, float %8097)  ; FAbs(value)
  %8099 = fmul fast float %8098, %7853
  %8100 = fadd fast float %8099, %7852
  %8101 = fmul fast float %7849, 2.000000e+00
  %8102 = fmul fast float %7850, 2.000000e+00
  %8103 = fmul fast float %7851, 2.000000e+00
  %8104 = fmul fast float %7853, 5.000000e-01
  %8105 = add nuw nsw i32 %7854, 1
  %8106 = icmp eq i32 %8105, 10
  br i1 %8106, label %8107, label %7848, !llvm.loop !60

; <label>:8107                                    ; preds = %7848
  %8108 = call float @dx.op.unary.f32(i32 7, float %7825)  ; Saturate(value)
  %8109 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 94)  ; CBufferLoadLegacy(handle,regIndex)
  %8110 = extractvalue %dx.types.CBufRet.f32 %8109, 0
  %8111 = fmul fast float %8110, %8108
  %8112 = fsub fast float 1.000000e+00, %8100
  %8113 = fadd fast float %8112, %8111
  %8114 = call float @dx.op.unary.f32(i32 7, float %8113)  ; Saturate(value)
  %8115 = fcmp fast ole float %8114, 0.000000e+00
  %8116 = fmul fast float %8114, %8114
  %8117 = select i1 %8115, float 0.000000e+00, float %8116
  %8118 = extractvalue %dx.types.CBufRet.f32 %8109, 1
  %8119 = extractvalue %dx.types.CBufRet.f32 %8109, 2
  %8120 = fsub fast float %8118, %8119
  %8121 = fmul fast float %8120, %8117
  %8122 = fadd fast float %8121, %8119
  %8123 = call float @dx.op.unary.f32(i32 7, float %8122)  ; Saturate(value)
  %8124 = fmul fast float %8123, %8108
  %8125 = extractvalue %dx.types.CBufRet.f32 %8109, 3
  %8126 = fmul fast float %8125, %295
  %8127 = fmul fast float %8125, %296
  %8128 = fmul fast float %8125, %297
  %8129 = fmul fast float %8125, %76
  %8130 = fmul fast float %8125, %23
  %8131 = fmul fast float %8125, %77
  %8132 = fmul fast float %8126, 0x3EA0000000000000
  %8133 = fmul fast float %8127, 0x3EA0000000000000
  %8134 = fmul fast float %8128, 0x3EA0000000000000
  %8135 = fadd fast float %8129, 5.000000e-01
  %8136 = fadd fast float %8135, %8132
  %8137 = fadd fast float %8130, 5.000000e-01
  %8138 = fadd fast float %8137, %8133
  %8139 = fadd fast float %8131, 5.000000e-01
  %8140 = fadd fast float %8139, %8134
  %8141 = call float @dx.op.unary.f32(i32 27, float %8136)  ; Round_ni(value)
  %8142 = call float @dx.op.unary.f32(i32 27, float %8138)  ; Round_ni(value)
  %8143 = call float @dx.op.unary.f32(i32 27, float %8140)  ; Round_ni(value)
  %8144 = fsub fast float %8129, %8141
  %8145 = fsub fast float %8130, %8142
  %8146 = fsub fast float %8131, %8143
  %8147 = fmul fast float %8144, 2.097152e+06
  %8148 = fmul fast float %8145, 2.097152e+06
  %8149 = fmul fast float %8146, 2.097152e+06
  %8150 = fadd fast float %8147, %8126
  %8151 = fadd fast float %8148, %8127
  %8152 = fadd fast float %8149, %8128
  %8153 = call float @dx.op.unary.f32(i32 22, float %8150)  ; Frc(value)
  %8154 = call float @dx.op.unary.f32(i32 22, float %8151)  ; Frc(value)
  %8155 = call float @dx.op.unary.f32(i32 22, float %8152)  ; Frc(value)
  %8156 = call float @dx.op.unary.f32(i32 27, float %8150)  ; Round_ni(value)
  %8157 = call float @dx.op.unary.f32(i32 27, float %8151)  ; Round_ni(value)
  %8158 = call float @dx.op.unary.f32(i32 27, float %8152)  ; Round_ni(value)
  %8159 = fptosi float %8156 to i32
  %8160 = fptosi float %8157 to i32
  %8161 = fptosi float %8158 to i32
  %8162 = mul i32 %8159, 1664525
  %8163 = mul i32 %8160, 1664525
  %8164 = mul i32 %8161, 1664525
  %8165 = add i32 %8162, 1013904223
  %8166 = add i32 %8163, 1013904223
  %8167 = add i32 %8164, 1013904223
  %8168 = mul i32 %8167, %8166
  %8169 = add i32 %8165, %8168
  %8170 = mul i32 %8169, %8167
  %8171 = add i32 %8170, %8166
  %8172 = mul i32 %8171, %8169
  %8173 = add i32 %8172, %8167
  %8174 = mul i32 %8173, %8171
  %8175 = add i32 %8174, %8169
  %8176 = mul i32 %8175, %8173
  %8177 = add i32 %8176, %8171
  %8178 = mul i32 %8177, %8175
  %8179 = add i32 %8178, %8173
  %8180 = lshr i32 %8175, 16
  %8181 = lshr i32 %8177, 16
  %8182 = lshr i32 %8179, 16
  %8183 = uitofp i32 %8180 to float
  %8184 = uitofp i32 %8181 to float
  %8185 = uitofp i32 %8182 to float
  %8186 = fmul fast float %8183, 0x3EF0001000000000
  %8187 = fmul fast float %8184, 0x3EF0001000000000
  %8188 = fmul fast float %8185, 0x3EF0001000000000
  %8189 = fadd fast float %8186, -5.000000e-01
  %8190 = fadd fast float %8187, -5.000000e-01
  %8191 = fadd fast float %8188, -5.000000e-01
  %8192 = call float @dx.op.dot3.f32(i32 55, float %8189, float %8190, float %8191, float %8189, float %8190, float %8191)  ; Dot3(ax,ay,az,bx,by,bz)
  %8193 = call float @dx.op.unary.f32(i32 25, float %8192)  ; Rsqrt(value)
  %8194 = fmul fast float %8193, 0x3FD0902DE0000000
  %8195 = fmul fast float %8194, %8189
  %8196 = fmul fast float %8194, %8190
  %8197 = fmul fast float %8194, %8191
  %8198 = fsub fast float %8153, %8195
  %8199 = fsub fast float %8154, %8196
  %8200 = fsub fast float %8155, %8197
  %8201 = fadd fast float %8158, 1.000000e+00
  %8202 = fptosi float %8201 to i32
  %8203 = mul i32 %8202, 1664525
  %8204 = add i32 %8203, 1013904223
  %8205 = mul i32 %8204, %8166
  %8206 = add i32 %8165, %8205
  %8207 = mul i32 %8206, %8204
  %8208 = add i32 %8207, %8166
  %8209 = mul i32 %8208, %8206
  %8210 = add i32 %8209, %8204
  %8211 = mul i32 %8210, %8208
  %8212 = add i32 %8211, %8206
  %8213 = mul i32 %8212, %8210
  %8214 = add i32 %8213, %8208
  %8215 = mul i32 %8214, %8212
  %8216 = add i32 %8215, %8210
  %8217 = lshr i32 %8212, 16
  %8218 = lshr i32 %8214, 16
  %8219 = lshr i32 %8216, 16
  %8220 = uitofp i32 %8217 to float
  %8221 = uitofp i32 %8218 to float
  %8222 = uitofp i32 %8219 to float
  %8223 = fmul fast float %8220, 0x3EF0001000000000
  %8224 = fmul fast float %8221, 0x3EF0001000000000
  %8225 = fmul fast float %8222, 0x3EF0001000000000
  %8226 = fadd fast float %8223, -5.000000e-01
  %8227 = fadd fast float %8224, -5.000000e-01
  %8228 = fadd fast float %8225, -5.000000e-01
  %8229 = call float @dx.op.dot3.f32(i32 55, float %8226, float %8227, float %8228, float %8226, float %8227, float %8228)  ; Dot3(ax,ay,az,bx,by,bz)
  %8230 = call float @dx.op.unary.f32(i32 25, float %8229)  ; Rsqrt(value)
  %8231 = fmul fast float %8230, 0x3FD0902DE0000000
  %8232 = fmul fast float %8231, %8226
  %8233 = fmul fast float %8231, %8227
  %8234 = fmul fast float %8231, %8228
  %8235 = fsub fast float %8153, %8232
  %8236 = fsub fast float %8154, %8233
  %8237 = fadd fast float %8155, -1.000000e+00
  %8238 = fsub fast float %8237, %8234
  %8239 = fadd fast float %8157, 1.000000e+00
  %8240 = fptosi float %8239 to i32
  %8241 = mul i32 %8240, 1664525
  %8242 = add i32 %8241, 1013904223
  %8243 = mul i32 %8242, %8167
  %8244 = add i32 %8165, %8243
  %8245 = mul i32 %8244, %8167
  %8246 = add i32 %8245, %8242
  %8247 = mul i32 %8246, %8244
  %8248 = add i32 %8247, %8167
  %8249 = mul i32 %8248, %8246
  %8250 = add i32 %8249, %8244
  %8251 = mul i32 %8250, %8248
  %8252 = add i32 %8251, %8246
  %8253 = mul i32 %8252, %8250
  %8254 = add i32 %8253, %8248
  %8255 = lshr i32 %8250, 16
  %8256 = lshr i32 %8252, 16
  %8257 = lshr i32 %8254, 16
  %8258 = uitofp i32 %8255 to float
  %8259 = uitofp i32 %8256 to float
  %8260 = uitofp i32 %8257 to float
  %8261 = fmul fast float %8258, 0x3EF0001000000000
  %8262 = fmul fast float %8259, 0x3EF0001000000000
  %8263 = fmul fast float %8260, 0x3EF0001000000000
  %8264 = fadd fast float %8261, -5.000000e-01
  %8265 = fadd fast float %8262, -5.000000e-01
  %8266 = fadd fast float %8263, -5.000000e-01
  %8267 = call float @dx.op.dot3.f32(i32 55, float %8264, float %8265, float %8266, float %8264, float %8265, float %8266)  ; Dot3(ax,ay,az,bx,by,bz)
  %8268 = call float @dx.op.unary.f32(i32 25, float %8267)  ; Rsqrt(value)
  %8269 = fmul fast float %8268, 0x3FD0902DE0000000
  %8270 = fmul fast float %8269, %8264
  %8271 = fmul fast float %8269, %8265
  %8272 = fmul fast float %8269, %8266
  %8273 = fsub fast float %8153, %8270
  %8274 = fadd fast float %8154, -1.000000e+00
  %8275 = fsub fast float %8274, %8271
  %8276 = fsub fast float %8155, %8272
  %8277 = mul i32 %8204, %8242
  %8278 = add i32 %8165, %8277
  %8279 = mul i32 %8278, %8204
  %8280 = add i32 %8279, %8242
  %8281 = mul i32 %8280, %8278
  %8282 = add i32 %8281, %8204
  %8283 = mul i32 %8282, %8280
  %8284 = add i32 %8283, %8278
  %8285 = mul i32 %8284, %8282
  %8286 = add i32 %8285, %8280
  %8287 = mul i32 %8286, %8284
  %8288 = add i32 %8287, %8282
  %8289 = lshr i32 %8284, 16
  %8290 = lshr i32 %8286, 16
  %8291 = lshr i32 %8288, 16
  %8292 = uitofp i32 %8289 to float
  %8293 = uitofp i32 %8290 to float
  %8294 = uitofp i32 %8291 to float
  %8295 = fmul fast float %8292, 0x3EF0001000000000
  %8296 = fmul fast float %8293, 0x3EF0001000000000
  %8297 = fmul fast float %8294, 0x3EF0001000000000
  %8298 = fadd fast float %8295, -5.000000e-01
  %8299 = fadd fast float %8296, -5.000000e-01
  %8300 = fadd fast float %8297, -5.000000e-01
  %8301 = call float @dx.op.dot3.f32(i32 55, float %8298, float %8299, float %8300, float %8298, float %8299, float %8300)  ; Dot3(ax,ay,az,bx,by,bz)
  %8302 = call float @dx.op.unary.f32(i32 25, float %8301)  ; Rsqrt(value)
  %8303 = fmul fast float %8302, 0x3FD0902DE0000000
  %8304 = fmul fast float %8303, %8298
  %8305 = fmul fast float %8303, %8299
  %8306 = fmul fast float %8303, %8300
  %8307 = fsub fast float %8153, %8304
  %8308 = fsub fast float %8274, %8305
  %8309 = fsub fast float %8237, %8306
  %8310 = fadd fast float %8156, 1.000000e+00
  %8311 = fptosi float %8310 to i32
  %8312 = mul i32 %8311, 1664525
  %8313 = add i32 %8312, 1013904223
  %8314 = add i32 %8313, %8168
  %8315 = mul i32 %8314, %8167
  %8316 = add i32 %8315, %8166
  %8317 = mul i32 %8316, %8314
  %8318 = add i32 %8317, %8167
  %8319 = mul i32 %8318, %8316
  %8320 = add i32 %8319, %8314
  %8321 = mul i32 %8320, %8318
  %8322 = add i32 %8321, %8316
  %8323 = mul i32 %8322, %8320
  %8324 = add i32 %8323, %8318
  %8325 = lshr i32 %8320, 16
  %8326 = lshr i32 %8322, 16
  %8327 = lshr i32 %8324, 16
  %8328 = uitofp i32 %8325 to float
  %8329 = uitofp i32 %8326 to float
  %8330 = uitofp i32 %8327 to float
  %8331 = fmul fast float %8328, 0x3EF0001000000000
  %8332 = fmul fast float %8329, 0x3EF0001000000000
  %8333 = fmul fast float %8330, 0x3EF0001000000000
  %8334 = fadd fast float %8331, -5.000000e-01
  %8335 = fadd fast float %8332, -5.000000e-01
  %8336 = fadd fast float %8333, -5.000000e-01
  %8337 = call float @dx.op.dot3.f32(i32 55, float %8334, float %8335, float %8336, float %8334, float %8335, float %8336)  ; Dot3(ax,ay,az,bx,by,bz)
  %8338 = call float @dx.op.unary.f32(i32 25, float %8337)  ; Rsqrt(value)
  %8339 = fmul fast float %8338, 0x3FD0902DE0000000
  %8340 = fmul fast float %8339, %8334
  %8341 = fmul fast float %8339, %8335
  %8342 = fmul fast float %8339, %8336
  %8343 = fadd fast float %8153, -1.000000e+00
  %8344 = fsub fast float %8343, %8340
  %8345 = fsub fast float %8154, %8341
  %8346 = fsub fast float %8155, %8342
  %8347 = add i32 %8313, %8205
  %8348 = mul i32 %8347, %8204
  %8349 = add i32 %8348, %8166
  %8350 = mul i32 %8349, %8347
  %8351 = add i32 %8350, %8204
  %8352 = mul i32 %8351, %8349
  %8353 = add i32 %8352, %8347
  %8354 = mul i32 %8353, %8351
  %8355 = add i32 %8354, %8349
  %8356 = mul i32 %8355, %8353
  %8357 = add i32 %8356, %8351
  %8358 = lshr i32 %8353, 16
  %8359 = lshr i32 %8355, 16
  %8360 = lshr i32 %8357, 16
  %8361 = uitofp i32 %8358 to float
  %8362 = uitofp i32 %8359 to float
  %8363 = uitofp i32 %8360 to float
  %8364 = fmul fast float %8361, 0x3EF0001000000000
  %8365 = fmul fast float %8362, 0x3EF0001000000000
  %8366 = fmul fast float %8363, 0x3EF0001000000000
  %8367 = fadd fast float %8364, -5.000000e-01
  %8368 = fadd fast float %8365, -5.000000e-01
  %8369 = fadd fast float %8366, -5.000000e-01
  %8370 = call float @dx.op.dot3.f32(i32 55, float %8367, float %8368, float %8369, float %8367, float %8368, float %8369)  ; Dot3(ax,ay,az,bx,by,bz)
  %8371 = call float @dx.op.unary.f32(i32 25, float %8370)  ; Rsqrt(value)
  %8372 = fmul fast float %8371, 0x3FD0902DE0000000
  %8373 = fmul fast float %8372, %8367
  %8374 = fmul fast float %8372, %8368
  %8375 = fmul fast float %8372, %8369
  %8376 = fsub fast float %8343, %8373
  %8377 = fsub fast float %8154, %8374
  %8378 = fsub fast float %8237, %8375
  %8379 = add i32 %8313, %8243
  %8380 = mul i32 %8379, %8167
  %8381 = add i32 %8380, %8242
  %8382 = mul i32 %8381, %8379
  %8383 = add i32 %8382, %8167
  %8384 = mul i32 %8383, %8381
  %8385 = add i32 %8384, %8379
  %8386 = mul i32 %8385, %8383
  %8387 = add i32 %8386, %8381
  %8388 = mul i32 %8387, %8385
  %8389 = add i32 %8388, %8383
  %8390 = lshr i32 %8385, 16
  %8391 = lshr i32 %8387, 16
  %8392 = lshr i32 %8389, 16
  %8393 = uitofp i32 %8390 to float
  %8394 = uitofp i32 %8391 to float
  %8395 = uitofp i32 %8392 to float
  %8396 = fmul fast float %8393, 0x3EF0001000000000
  %8397 = fmul fast float %8394, 0x3EF0001000000000
  %8398 = fmul fast float %8395, 0x3EF0001000000000
  %8399 = fadd fast float %8396, -5.000000e-01
  %8400 = fadd fast float %8397, -5.000000e-01
  %8401 = fadd fast float %8398, -5.000000e-01
  %8402 = call float @dx.op.dot3.f32(i32 55, float %8399, float %8400, float %8401, float %8399, float %8400, float %8401)  ; Dot3(ax,ay,az,bx,by,bz)
  %8403 = call float @dx.op.unary.f32(i32 25, float %8402)  ; Rsqrt(value)
  %8404 = fmul fast float %8403, 0x3FD0902DE0000000
  %8405 = fmul fast float %8404, %8399
  %8406 = fmul fast float %8404, %8400
  %8407 = fmul fast float %8404, %8401
  %8408 = fsub fast float %8343, %8405
  %8409 = fsub fast float %8274, %8406
  %8410 = fsub fast float %8155, %8407
  %8411 = add i32 %8313, %8277
  %8412 = mul i32 %8411, %8204
  %8413 = add i32 %8412, %8242
  %8414 = mul i32 %8413, %8411
  %8415 = add i32 %8414, %8204
  %8416 = mul i32 %8415, %8413
  %8417 = add i32 %8416, %8411
  %8418 = mul i32 %8417, %8415
  %8419 = add i32 %8418, %8413
  %8420 = mul i32 %8419, %8417
  %8421 = add i32 %8420, %8415
  %8422 = lshr i32 %8417, 16
  %8423 = lshr i32 %8419, 16
  %8424 = lshr i32 %8421, 16
  %8425 = uitofp i32 %8422 to float
  %8426 = uitofp i32 %8423 to float
  %8427 = uitofp i32 %8424 to float
  %8428 = fmul fast float %8425, 0x3EF0001000000000
  %8429 = fmul fast float %8426, 0x3EF0001000000000
  %8430 = fmul fast float %8427, 0x3EF0001000000000
  %8431 = fadd fast float %8428, -5.000000e-01
  %8432 = fadd fast float %8429, -5.000000e-01
  %8433 = fadd fast float %8430, -5.000000e-01
  %8434 = call float @dx.op.dot3.f32(i32 55, float %8431, float %8432, float %8433, float %8431, float %8432, float %8433)  ; Dot3(ax,ay,az,bx,by,bz)
  %8435 = call float @dx.op.unary.f32(i32 25, float %8434)  ; Rsqrt(value)
  %8436 = fmul fast float %8435, 0x3FD0902DE0000000
  %8437 = fmul fast float %8436, %8431
  %8438 = fmul fast float %8436, %8432
  %8439 = fmul fast float %8436, %8433
  %8440 = fsub fast float %8343, %8437
  %8441 = fsub fast float %8274, %8438
  %8442 = fsub fast float %8237, %8439
  %8443 = call float @dx.op.dot3.f32(i32 55, float %8198, float %8199, float %8200, float %8198, float %8199, float %8200)  ; Dot3(ax,ay,az,bx,by,bz)
  %8444 = call float @dx.op.binary.f32(i32 36, float 1.000000e+02, float %8443)  ; FMin(a,b)
  %8445 = call float @dx.op.dot3.f32(i32 55, float %8235, float %8236, float %8238, float %8235, float %8236, float %8238)  ; Dot3(ax,ay,az,bx,by,bz)
  %8446 = call float @dx.op.binary.f32(i32 36, float %8444, float %8445)  ; FMin(a,b)
  %8447 = call float @dx.op.dot3.f32(i32 55, float %8273, float %8275, float %8276, float %8273, float %8275, float %8276)  ; Dot3(ax,ay,az,bx,by,bz)
  %8448 = call float @dx.op.binary.f32(i32 36, float %8446, float %8447)  ; FMin(a,b)
  %8449 = call float @dx.op.dot3.f32(i32 55, float %8307, float %8308, float %8309, float %8307, float %8308, float %8309)  ; Dot3(ax,ay,az,bx,by,bz)
  %8450 = call float @dx.op.binary.f32(i32 36, float %8448, float %8449)  ; FMin(a,b)
  %8451 = call float @dx.op.dot3.f32(i32 55, float %8344, float %8345, float %8346, float %8344, float %8345, float %8346)  ; Dot3(ax,ay,az,bx,by,bz)
  %8452 = call float @dx.op.binary.f32(i32 36, float %8450, float %8451)  ; FMin(a,b)
  %8453 = call float @dx.op.dot3.f32(i32 55, float %8376, float %8377, float %8378, float %8376, float %8377, float %8378)  ; Dot3(ax,ay,az,bx,by,bz)
  %8454 = call float @dx.op.binary.f32(i32 36, float %8452, float %8453)  ; FMin(a,b)
  %8455 = call float @dx.op.dot3.f32(i32 55, float %8408, float %8409, float %8410, float %8408, float %8409, float %8410)  ; Dot3(ax,ay,az,bx,by,bz)
  %8456 = call float @dx.op.binary.f32(i32 36, float %8454, float %8455)  ; FMin(a,b)
  %8457 = call float @dx.op.dot3.f32(i32 55, float %8440, float %8441, float %8442, float %8440, float %8441, float %8442)  ; Dot3(ax,ay,az,bx,by,bz)
  %8458 = call float @dx.op.binary.f32(i32 36, float %8456, float %8457)  ; FMin(a,b)
  %8459 = call float @dx.op.unary.f32(i32 24, float %8458)  ; Sqrt(value)
  %8460 = fmul fast float %8459, 2.000000e+00
  %8461 = fadd fast float %8460, -1.000000e+00
  %8462 = call float @dx.op.unary.f32(i32 6, float %8461)  ; FAbs(value)
  %8463 = fmul fast float %8462, 2.000000e+00
  %8464 = fadd fast float %8463, -1.000000e+00
  %8465 = call float @dx.op.unary.f32(i32 7, float %8464)  ; Saturate(value)
  %8466 = fmul fast float %8126, 0x3FF3333340000000
  %8467 = fmul fast float %8127, 0x3FF3333340000000
  %8468 = fmul fast float %8128, 0x3FF3333340000000
  %8469 = fmul fast float %8129, 0x3FF3333340000000
  %8470 = fmul fast float %8130, 0x3FF3333340000000
  %8471 = fmul fast float %8131, 0x3FF3333340000000
  %8472 = fmul fast float %8126, 0x3EA3333340000000
  %8473 = fmul fast float %8127, 0x3EA3333340000000
  %8474 = fmul fast float %8128, 0x3EA3333340000000
  %8475 = fadd fast float %8472, 5.000000e-01
  %8476 = fadd fast float %8473, 5.000000e-01
  %8477 = fadd fast float %8474, 5.000000e-01
  %8478 = fadd fast float %8475, %8469
  %8479 = fadd fast float %8476, %8470
  %8480 = fadd fast float %8477, %8471
  %8481 = call float @dx.op.unary.f32(i32 27, float %8478)  ; Round_ni(value)
  %8482 = call float @dx.op.unary.f32(i32 27, float %8479)  ; Round_ni(value)
  %8483 = call float @dx.op.unary.f32(i32 27, float %8480)  ; Round_ni(value)
  %8484 = fsub fast float %8469, %8481
  %8485 = fsub fast float %8470, %8482
  %8486 = fsub fast float %8471, %8483
  %8487 = fmul fast float %8484, 2.097152e+06
  %8488 = fmul fast float %8485, 2.097152e+06
  %8489 = fmul fast float %8486, 2.097152e+06
  %8490 = fadd fast float %8487, %8466
  %8491 = fadd fast float %8488, %8467
  %8492 = fadd fast float %8489, %8468
  %8493 = call float @dx.op.unary.f32(i32 22, float %8490)  ; Frc(value)
  %8494 = call float @dx.op.unary.f32(i32 22, float %8491)  ; Frc(value)
  %8495 = call float @dx.op.unary.f32(i32 22, float %8492)  ; Frc(value)
  %8496 = call float @dx.op.unary.f32(i32 27, float %8490)  ; Round_ni(value)
  %8497 = call float @dx.op.unary.f32(i32 27, float %8491)  ; Round_ni(value)
  %8498 = call float @dx.op.unary.f32(i32 27, float %8492)  ; Round_ni(value)
  %8499 = fptosi float %8496 to i32
  %8500 = fptosi float %8497 to i32
  %8501 = fptosi float %8498 to i32
  %8502 = mul i32 %8499, 1664525
  %8503 = mul i32 %8500, 1664525
  %8504 = mul i32 %8501, 1664525
  %8505 = add i32 %8502, 1013904223
  %8506 = add i32 %8503, 1013904223
  %8507 = add i32 %8504, 1013904223
  %8508 = mul i32 %8507, %8506
  %8509 = add i32 %8505, %8508
  %8510 = mul i32 %8509, %8507
  %8511 = add i32 %8510, %8506
  %8512 = mul i32 %8511, %8509
  %8513 = add i32 %8512, %8507
  %8514 = mul i32 %8513, %8511
  %8515 = add i32 %8514, %8509
  %8516 = mul i32 %8515, %8513
  %8517 = add i32 %8516, %8511
  %8518 = mul i32 %8517, %8515
  %8519 = add i32 %8518, %8513
  %8520 = lshr i32 %8515, 16
  %8521 = lshr i32 %8517, 16
  %8522 = lshr i32 %8519, 16
  %8523 = uitofp i32 %8520 to float
  %8524 = uitofp i32 %8521 to float
  %8525 = uitofp i32 %8522 to float
  %8526 = fmul fast float %8523, 0x3EF0001000000000
  %8527 = fmul fast float %8524, 0x3EF0001000000000
  %8528 = fmul fast float %8525, 0x3EF0001000000000
  %8529 = fadd fast float %8526, -5.000000e-01
  %8530 = fadd fast float %8527, -5.000000e-01
  %8531 = fadd fast float %8528, -5.000000e-01
  %8532 = call float @dx.op.dot3.f32(i32 55, float %8529, float %8530, float %8531, float %8529, float %8530, float %8531)  ; Dot3(ax,ay,az,bx,by,bz)
  %8533 = call float @dx.op.unary.f32(i32 25, float %8532)  ; Rsqrt(value)
  %8534 = fmul fast float %8533, 0x3FD0902DE0000000
  %8535 = fmul fast float %8534, %8529
  %8536 = fmul fast float %8534, %8530
  %8537 = fmul fast float %8534, %8531
  %8538 = fsub fast float %8493, %8535
  %8539 = fsub fast float %8494, %8536
  %8540 = fsub fast float %8495, %8537
  %8541 = fadd fast float %8498, 1.000000e+00
  %8542 = fptosi float %8541 to i32
  %8543 = mul i32 %8542, 1664525
  %8544 = add i32 %8543, 1013904223
  %8545 = mul i32 %8544, %8506
  %8546 = add i32 %8505, %8545
  %8547 = mul i32 %8546, %8544
  %8548 = add i32 %8547, %8506
  %8549 = mul i32 %8548, %8546
  %8550 = add i32 %8549, %8544
  %8551 = mul i32 %8550, %8548
  %8552 = add i32 %8551, %8546
  %8553 = mul i32 %8552, %8550
  %8554 = add i32 %8553, %8548
  %8555 = mul i32 %8554, %8552
  %8556 = add i32 %8555, %8550
  %8557 = lshr i32 %8552, 16
  %8558 = lshr i32 %8554, 16
  %8559 = lshr i32 %8556, 16
  %8560 = uitofp i32 %8557 to float
  %8561 = uitofp i32 %8558 to float
  %8562 = uitofp i32 %8559 to float
  %8563 = fmul fast float %8560, 0x3EF0001000000000
  %8564 = fmul fast float %8561, 0x3EF0001000000000
  %8565 = fmul fast float %8562, 0x3EF0001000000000
  %8566 = fadd fast float %8563, -5.000000e-01
  %8567 = fadd fast float %8564, -5.000000e-01
  %8568 = fadd fast float %8565, -5.000000e-01
  %8569 = call float @dx.op.dot3.f32(i32 55, float %8566, float %8567, float %8568, float %8566, float %8567, float %8568)  ; Dot3(ax,ay,az,bx,by,bz)
  %8570 = call float @dx.op.unary.f32(i32 25, float %8569)  ; Rsqrt(value)
  %8571 = fmul fast float %8570, 0x3FD0902DE0000000
  %8572 = fmul fast float %8571, %8566
  %8573 = fmul fast float %8571, %8567
  %8574 = fmul fast float %8571, %8568
  %8575 = fsub fast float %8493, %8572
  %8576 = fsub fast float %8494, %8573
  %8577 = fadd fast float %8495, -1.000000e+00
  %8578 = fsub fast float %8577, %8574
  %8579 = fadd fast float %8497, 1.000000e+00
  %8580 = fptosi float %8579 to i32
  %8581 = mul i32 %8580, 1664525
  %8582 = add i32 %8581, 1013904223
  %8583 = mul i32 %8582, %8507
  %8584 = add i32 %8505, %8583
  %8585 = mul i32 %8584, %8507
  %8586 = add i32 %8585, %8582
  %8587 = mul i32 %8586, %8584
  %8588 = add i32 %8587, %8507
  %8589 = mul i32 %8588, %8586
  %8590 = add i32 %8589, %8584
  %8591 = mul i32 %8590, %8588
  %8592 = add i32 %8591, %8586
  %8593 = mul i32 %8592, %8590
  %8594 = add i32 %8593, %8588
  %8595 = lshr i32 %8590, 16
  %8596 = lshr i32 %8592, 16
  %8597 = lshr i32 %8594, 16
  %8598 = uitofp i32 %8595 to float
  %8599 = uitofp i32 %8596 to float
  %8600 = uitofp i32 %8597 to float
  %8601 = fmul fast float %8598, 0x3EF0001000000000
  %8602 = fmul fast float %8599, 0x3EF0001000000000
  %8603 = fmul fast float %8600, 0x3EF0001000000000
  %8604 = fadd fast float %8601, -5.000000e-01
  %8605 = fadd fast float %8602, -5.000000e-01
  %8606 = fadd fast float %8603, -5.000000e-01
  %8607 = call float @dx.op.dot3.f32(i32 55, float %8604, float %8605, float %8606, float %8604, float %8605, float %8606)  ; Dot3(ax,ay,az,bx,by,bz)
  %8608 = call float @dx.op.unary.f32(i32 25, float %8607)  ; Rsqrt(value)
  %8609 = fmul fast float %8608, 0x3FD0902DE0000000
  %8610 = fmul fast float %8609, %8604
  %8611 = fmul fast float %8609, %8605
  %8612 = fmul fast float %8609, %8606
  %8613 = fsub fast float %8493, %8610
  %8614 = fadd fast float %8494, -1.000000e+00
  %8615 = fsub fast float %8614, %8611
  %8616 = fsub fast float %8495, %8612
  %8617 = mul i32 %8544, %8582
  %8618 = add i32 %8505, %8617
  %8619 = mul i32 %8618, %8544
  %8620 = add i32 %8619, %8582
  %8621 = mul i32 %8620, %8618
  %8622 = add i32 %8621, %8544
  %8623 = mul i32 %8622, %8620
  %8624 = add i32 %8623, %8618
  %8625 = mul i32 %8624, %8622
  %8626 = add i32 %8625, %8620
  %8627 = mul i32 %8626, %8624
  %8628 = add i32 %8627, %8622
  %8629 = lshr i32 %8624, 16
  %8630 = lshr i32 %8626, 16
  %8631 = lshr i32 %8628, 16
  %8632 = uitofp i32 %8629 to float
  %8633 = uitofp i32 %8630 to float
  %8634 = uitofp i32 %8631 to float
  %8635 = fmul fast float %8632, 0x3EF0001000000000
  %8636 = fmul fast float %8633, 0x3EF0001000000000
  %8637 = fmul fast float %8634, 0x3EF0001000000000
  %8638 = fadd fast float %8635, -5.000000e-01
  %8639 = fadd fast float %8636, -5.000000e-01
  %8640 = fadd fast float %8637, -5.000000e-01
  %8641 = call float @dx.op.dot3.f32(i32 55, float %8638, float %8639, float %8640, float %8638, float %8639, float %8640)  ; Dot3(ax,ay,az,bx,by,bz)
  %8642 = call float @dx.op.unary.f32(i32 25, float %8641)  ; Rsqrt(value)
  %8643 = fmul fast float %8642, 0x3FD0902DE0000000
  %8644 = fmul fast float %8643, %8638
  %8645 = fmul fast float %8643, %8639
  %8646 = fmul fast float %8643, %8640
  %8647 = fsub fast float %8493, %8644
  %8648 = fsub fast float %8614, %8645
  %8649 = fsub fast float %8577, %8646
  %8650 = fadd fast float %8496, 1.000000e+00
  %8651 = fptosi float %8650 to i32
  %8652 = mul i32 %8651, 1664525
  %8653 = add i32 %8652, 1013904223
  %8654 = add i32 %8653, %8508
  %8655 = mul i32 %8654, %8507
  %8656 = add i32 %8655, %8506
  %8657 = mul i32 %8656, %8654
  %8658 = add i32 %8657, %8507
  %8659 = mul i32 %8658, %8656
  %8660 = add i32 %8659, %8654
  %8661 = mul i32 %8660, %8658
  %8662 = add i32 %8661, %8656
  %8663 = mul i32 %8662, %8660
  %8664 = add i32 %8663, %8658
  %8665 = lshr i32 %8660, 16
  %8666 = lshr i32 %8662, 16
  %8667 = lshr i32 %8664, 16
  %8668 = uitofp i32 %8665 to float
  %8669 = uitofp i32 %8666 to float
  %8670 = uitofp i32 %8667 to float
  %8671 = fmul fast float %8668, 0x3EF0001000000000
  %8672 = fmul fast float %8669, 0x3EF0001000000000
  %8673 = fmul fast float %8670, 0x3EF0001000000000
  %8674 = fadd fast float %8671, -5.000000e-01
  %8675 = fadd fast float %8672, -5.000000e-01
  %8676 = fadd fast float %8673, -5.000000e-01
  %8677 = call float @dx.op.dot3.f32(i32 55, float %8674, float %8675, float %8676, float %8674, float %8675, float %8676)  ; Dot3(ax,ay,az,bx,by,bz)
  %8678 = call float @dx.op.unary.f32(i32 25, float %8677)  ; Rsqrt(value)
  %8679 = fmul fast float %8678, 0x3FD0902DE0000000
  %8680 = fmul fast float %8679, %8674
  %8681 = fmul fast float %8679, %8675
  %8682 = fmul fast float %8679, %8676
  %8683 = fadd fast float %8493, -1.000000e+00
  %8684 = fsub fast float %8683, %8680
  %8685 = fsub fast float %8494, %8681
  %8686 = fsub fast float %8495, %8682
  %8687 = add i32 %8653, %8545
  %8688 = mul i32 %8687, %8544
  %8689 = add i32 %8688, %8506
  %8690 = mul i32 %8689, %8687
  %8691 = add i32 %8690, %8544
  %8692 = mul i32 %8691, %8689
  %8693 = add i32 %8692, %8687
  %8694 = mul i32 %8693, %8691
  %8695 = add i32 %8694, %8689
  %8696 = mul i32 %8695, %8693
  %8697 = add i32 %8696, %8691
  %8698 = lshr i32 %8693, 16
  %8699 = lshr i32 %8695, 16
  %8700 = lshr i32 %8697, 16
  %8701 = uitofp i32 %8698 to float
  %8702 = uitofp i32 %8699 to float
  %8703 = uitofp i32 %8700 to float
  %8704 = fmul fast float %8701, 0x3EF0001000000000
  %8705 = fmul fast float %8702, 0x3EF0001000000000
  %8706 = fmul fast float %8703, 0x3EF0001000000000
  %8707 = fadd fast float %8704, -5.000000e-01
  %8708 = fadd fast float %8705, -5.000000e-01
  %8709 = fadd fast float %8706, -5.000000e-01
  %8710 = call float @dx.op.dot3.f32(i32 55, float %8707, float %8708, float %8709, float %8707, float %8708, float %8709)  ; Dot3(ax,ay,az,bx,by,bz)
  %8711 = call float @dx.op.unary.f32(i32 25, float %8710)  ; Rsqrt(value)
  %8712 = fmul fast float %8711, 0x3FD0902DE0000000
  %8713 = fmul fast float %8712, %8707
  %8714 = fmul fast float %8712, %8708
  %8715 = fmul fast float %8712, %8709
  %8716 = fsub fast float %8683, %8713
  %8717 = fsub fast float %8494, %8714
  %8718 = fsub fast float %8577, %8715
  %8719 = add i32 %8653, %8583
  %8720 = mul i32 %8719, %8507
  %8721 = add i32 %8720, %8582
  %8722 = mul i32 %8721, %8719
  %8723 = add i32 %8722, %8507
  %8724 = mul i32 %8723, %8721
  %8725 = add i32 %8724, %8719
  %8726 = mul i32 %8725, %8723
  %8727 = add i32 %8726, %8721
  %8728 = mul i32 %8727, %8725
  %8729 = add i32 %8728, %8723
  %8730 = lshr i32 %8725, 16
  %8731 = lshr i32 %8727, 16
  %8732 = lshr i32 %8729, 16
  %8733 = uitofp i32 %8730 to float
  %8734 = uitofp i32 %8731 to float
  %8735 = uitofp i32 %8732 to float
  %8736 = fmul fast float %8733, 0x3EF0001000000000
  %8737 = fmul fast float %8734, 0x3EF0001000000000
  %8738 = fmul fast float %8735, 0x3EF0001000000000
  %8739 = fadd fast float %8736, -5.000000e-01
  %8740 = fadd fast float %8737, -5.000000e-01
  %8741 = fadd fast float %8738, -5.000000e-01
  %8742 = call float @dx.op.dot3.f32(i32 55, float %8739, float %8740, float %8741, float %8739, float %8740, float %8741)  ; Dot3(ax,ay,az,bx,by,bz)
  %8743 = call float @dx.op.unary.f32(i32 25, float %8742)  ; Rsqrt(value)
  %8744 = fmul fast float %8743, 0x3FD0902DE0000000
  %8745 = fmul fast float %8744, %8739
  %8746 = fmul fast float %8744, %8740
  %8747 = fmul fast float %8744, %8741
  %8748 = fsub fast float %8683, %8745
  %8749 = fsub fast float %8614, %8746
  %8750 = fsub fast float %8495, %8747
  %8751 = add i32 %8653, %8617
  %8752 = mul i32 %8751, %8544
  %8753 = add i32 %8752, %8582
  %8754 = mul i32 %8753, %8751
  %8755 = add i32 %8754, %8544
  %8756 = mul i32 %8755, %8753
  %8757 = add i32 %8756, %8751
  %8758 = mul i32 %8757, %8755
  %8759 = add i32 %8758, %8753
  %8760 = mul i32 %8759, %8757
  %8761 = add i32 %8760, %8755
  %8762 = lshr i32 %8757, 16
  %8763 = lshr i32 %8759, 16
  %8764 = lshr i32 %8761, 16
  %8765 = uitofp i32 %8762 to float
  %8766 = uitofp i32 %8763 to float
  %8767 = uitofp i32 %8764 to float
  %8768 = fmul fast float %8765, 0x3EF0001000000000
  %8769 = fmul fast float %8766, 0x3EF0001000000000
  %8770 = fmul fast float %8767, 0x3EF0001000000000
  %8771 = fadd fast float %8768, -5.000000e-01
  %8772 = fadd fast float %8769, -5.000000e-01
  %8773 = fadd fast float %8770, -5.000000e-01
  %8774 = call float @dx.op.dot3.f32(i32 55, float %8771, float %8772, float %8773, float %8771, float %8772, float %8773)  ; Dot3(ax,ay,az,bx,by,bz)
  %8775 = call float @dx.op.unary.f32(i32 25, float %8774)  ; Rsqrt(value)
  %8776 = fmul fast float %8775, 0x3FD0902DE0000000
  %8777 = fmul fast float %8776, %8771
  %8778 = fmul fast float %8776, %8772
  %8779 = fmul fast float %8776, %8773
  %8780 = fsub fast float %8683, %8777
  %8781 = fsub fast float %8614, %8778
  %8782 = fsub fast float %8577, %8779
  %8783 = call float @dx.op.dot3.f32(i32 55, float %8538, float %8539, float %8540, float %8538, float %8539, float %8540)  ; Dot3(ax,ay,az,bx,by,bz)
  %8784 = call float @dx.op.binary.f32(i32 36, float 1.000000e+02, float %8783)  ; FMin(a,b)
  %8785 = call float @dx.op.dot3.f32(i32 55, float %8575, float %8576, float %8578, float %8575, float %8576, float %8578)  ; Dot3(ax,ay,az,bx,by,bz)
  %8786 = call float @dx.op.binary.f32(i32 36, float %8784, float %8785)  ; FMin(a,b)
  %8787 = call float @dx.op.dot3.f32(i32 55, float %8613, float %8615, float %8616, float %8613, float %8615, float %8616)  ; Dot3(ax,ay,az,bx,by,bz)
  %8788 = call float @dx.op.binary.f32(i32 36, float %8786, float %8787)  ; FMin(a,b)
  %8789 = call float @dx.op.dot3.f32(i32 55, float %8647, float %8648, float %8649, float %8647, float %8648, float %8649)  ; Dot3(ax,ay,az,bx,by,bz)
  %8790 = call float @dx.op.binary.f32(i32 36, float %8788, float %8789)  ; FMin(a,b)
  %8791 = call float @dx.op.dot3.f32(i32 55, float %8684, float %8685, float %8686, float %8684, float %8685, float %8686)  ; Dot3(ax,ay,az,bx,by,bz)
  %8792 = call float @dx.op.binary.f32(i32 36, float %8790, float %8791)  ; FMin(a,b)
  %8793 = call float @dx.op.dot3.f32(i32 55, float %8716, float %8717, float %8718, float %8716, float %8717, float %8718)  ; Dot3(ax,ay,az,bx,by,bz)
  %8794 = call float @dx.op.binary.f32(i32 36, float %8792, float %8793)  ; FMin(a,b)
  %8795 = call float @dx.op.dot3.f32(i32 55, float %8748, float %8749, float %8750, float %8748, float %8749, float %8750)  ; Dot3(ax,ay,az,bx,by,bz)
  %8796 = call float @dx.op.binary.f32(i32 36, float %8794, float %8795)  ; FMin(a,b)
  %8797 = call float @dx.op.dot3.f32(i32 55, float %8780, float %8781, float %8782, float %8780, float %8781, float %8782)  ; Dot3(ax,ay,az,bx,by,bz)
  %8798 = call float @dx.op.binary.f32(i32 36, float %8796, float %8797)  ; FMin(a,b)
  %8799 = call float @dx.op.unary.f32(i32 24, float %8798)  ; Sqrt(value)
  %8800 = fmul fast float %8799, 2.000000e+00
  %8801 = fadd fast float %8800, -1.000000e+00
  %8802 = call float @dx.op.unary.f32(i32 6, float %8801)  ; FAbs(value)
  %8803 = fmul fast float %8802, 2.000000e+00
  %8804 = fadd fast float %8803, -1.000000e+00
  %8805 = call float @dx.op.unary.f32(i32 7, float %8804)  ; Saturate(value)
  %8806 = fadd fast float %8124, %2268
  %8807 = fsub fast float %8806, %8465
  %8808 = fsub fast float %8807, %8805
  %8809 = fmul fast float %8808, %467
  %8810 = call float @dx.op.unary.f32(i32 7, float %8809)  ; Saturate(value)
  %8811 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 95)  ; CBufferLoadLegacy(handle,regIndex)
  %8812 = extractvalue %dx.types.CBufRet.f32 %8811, 0
  %8813 = extractvalue %dx.types.CBufRet.f32 %8811, 1
  %8814 = fsub fast float %8812, %8813
  %8815 = fmul fast float %8814, %8810
  %8816 = fadd fast float %8815, %8813
  %8817 = call float @dx.op.dot3.f32(i32 55, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float %438, float %298, float %439)  ; Dot3(ax,ay,az,bx,by,bz)
  %8818 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %8817)  ; FMax(a,b)
  %8819 = fsub fast float 1.000000e+00, %8818
  %8820 = call float @dx.op.unary.f32(i32 6, float %8819)  ; FAbs(value)
  %8821 = call float @dx.op.binary.f32(i32 35, float %8820, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %8822 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 97)  ; CBufferLoadLegacy(handle,regIndex)
  %8823 = extractvalue %dx.types.CBufRet.f32 %8822, 0
  %8824 = fsub fast float 1.000000e+00, %8823
  %8825 = fmul fast float %8824, %8810
  %8826 = fadd fast float %8825, %8823
  %8827 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 104)  ; CBufferLoadLegacy(handle,regIndex)
  %8828 = extractvalue %dx.types.CBufRet.f32 %8827, 1
  %8829 = fcmp fast ole float %8821, 0.000000e+00
  %8830 = call float @dx.op.unary.f32(i32 23, float %8821)  ; Log(value)
  %8831 = fmul fast float %8830, %8828
  %8832 = call float @dx.op.unary.f32(i32 21, float %8831)  ; Exp(value)
  %8833 = select i1 %8829, float 0.000000e+00, float %8832
  %8834 = extractvalue %dx.types.CBufRet.f32 %8827, 3
  %8835 = fmul fast float %8834, %8833
  %8836 = extractvalue %dx.types.CBufRet.f32 %8827, 2
  %8837 = fadd fast float %8835, %8836
  %8838 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 103)  ; CBufferLoadLegacy(handle,regIndex)
  %8839 = extractvalue %dx.types.CBufRet.f32 %8838, 3
  %8840 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %74, i32 105)  ; CBufferLoadLegacy(handle,regIndex)
  %8841 = extractvalue %dx.types.CBufRet.f32 %8840, 0
  %8842 = fsub fast float %8839, %8841
  %8843 = fmul fast float %8842, %8837
  %8844 = fadd fast float %8843, %8841
  %8845 = fsub fast float 1.000000e+00, %8844
  %8846 = fmul fast float %8845, %8810
  %8847 = fadd fast float %8846, %8844
  %8848 = extractvalue %dx.types.CBufRet.f32 %8840, 1
  %8849 = fmul fast float %8848, %8810
  %8850 = mul nuw nsw i32 %70, 41
  %8851 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %5)  ; CreateHandleForLib(Resource)
  %8852 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %8851, %dx.types.ResourceProperties { i32 12, i32 16 })  ; AnnotateHandle(res,props)  resource: StructuredBuffer<stride=16>
  %8853 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8852, i32 %8850, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %8854 = extractvalue %dx.types.ResRet.f32 %8853, 0
  %8855 = bitcast float %8854 to i32
  %8856 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %8857 = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  %8858 = icmp eq i32 %8857, 254
  %8859 = zext i1 %8858 to i32
  %8860 = lshr i32 %8855, 4
  %8861 = and i32 %8860, 32
  %8862 = lshr i32 %8855, 2
  %8863 = and i32 %8862, 64
  %8864 = call float @dx.op.unary.f32(i32 7, float %8849)  ; Saturate(value)
  %8865 = fmul fast float %8864, %82
  %8866 = fadd fast float %8865, %29
  %8867 = fadd fast float %8865, %81
  %8868 = fadd fast float %8865, %30
  %8869 = call float @dx.op.unary.f32(i32 7, float %8847)  ; Saturate(value)
  %8870 = fmul fast float %8869, %83
  %8871 = fadd fast float %8870, %32
  %8872 = fmul fast float %8816, %84
  %8873 = fadd fast float %8872, %34
  %8874 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 243)  ; CBufferLoadLegacy(handle,regIndex)
  %8875 = extractvalue %dx.types.CBufRet.f32 %8874, 2
  %8876 = call float @dx.op.binary.f32(i32 35, float %8875, float %8873)  ; FMax(a,b)
  %8877 = call float @dx.op.unary.f32(i32 7, float %8876)  ; Saturate(value)
  %8878 = call float @dx.op.unary.f32(i32 7, float %8826)  ; Saturate(value)
  %8879 = or i32 %8861, %8863
  %8880 = or i32 %8879, 4
  %8881 = call float @dx.op.dot3.f32(i32 55, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000)  ; Dot3(ax,ay,az,bx,by,bz)
  %8882 = call float @dx.op.unary.f32(i32 25, float %8881)  ; Rsqrt(value)
  %8883 = fmul fast float %8882, 0x7FF8000000000000
  %8884 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %19, i32 132)  ; CBufferLoadLegacy(handle,regIndex)
  %8885 = extractvalue %dx.types.CBufRet.f32 %8884, 2
  %8886 = fadd fast float %8885, 3.906250e-03
  %8887 = call float @dx.op.unary.f32(i32 23, float %8886)  ; Log(value)
  %8888 = fmul fast float %8887, 1.593750e+01
  %8889 = fadd fast float %8888, 1.275000e+02
  %8890 = call float @dx.op.binary.f32(i32 36, float 2.550000e+02, float %8889)  ; FMin(a,b)
  %8891 = fptoui float %8890 to i32
  %8892 = shl i32 %8891, 8
  %8893 = and i32 %8892, 65280
  %8894 = or i32 %8893, %8880
  %8895 = call float @dx.op.unary.f32(i32 7, float %8866)  ; Saturate(value)
  %8896 = call float @dx.op.unary.f32(i32 7, float %8867)  ; Saturate(value)
  %8897 = call float @dx.op.unary.f32(i32 7, float %8868)  ; Saturate(value)
  %8898 = fcmp fast olt float %8895, 0x3F69A57DA0000000
  br i1 %8898, label %8899, label %8901

; <label>:8899                                    ; preds = %8107
  %8900 = fmul fast float %8895, 0x4029D70A40000000
  br label %8907

; <label>:8901                                    ; preds = %8107
  %8902 = call float @dx.op.unary.f32(i32 23, float %8895)  ; Log(value)
  %8903 = fmul fast float %8902, 0x3FDAAAAAA0000000
  %8904 = call float @dx.op.unary.f32(i32 21, float %8903)  ; Exp(value)
  %8905 = fmul fast float %8904, 0x3FF0E147A0000000
  %8906 = fadd fast float %8905, 0xBFAC28F5C0000000
  br label %8907

; <label>:8907                                    ; preds = %8901, %8899
  %8908 = phi float [ %8900, %8899 ], [ %8906, %8901 ]
  %8909 = fcmp fast olt float %8896, 0x3F69A57DA0000000
  br i1 %8909, label %8910, label %8912

; <label>:8910                                    ; preds = %8907
  %8911 = fmul fast float %8896, 0x4029D70A40000000
  br label %8918

; <label>:8912                                    ; preds = %8907
  %8913 = call float @dx.op.unary.f32(i32 23, float %8896)  ; Log(value)
  %8914 = fmul fast float %8913, 0x3FDAAAAAA0000000
  %8915 = call float @dx.op.unary.f32(i32 21, float %8914)  ; Exp(value)
  %8916 = fmul fast float %8915, 0x3FF0E147A0000000
  %8917 = fadd fast float %8916, 0xBFAC28F5C0000000
  br label %8918

; <label>:8918                                    ; preds = %8912, %8910
  %8919 = phi float [ %8911, %8910 ], [ %8917, %8912 ]
  %8920 = fcmp fast olt float %8897, 0x3F69A57DA0000000
  br i1 %8920, label %8921, label %8923

; <label>:8921                                    ; preds = %8918
  %8922 = fmul fast float %8897, 0x4029D70A40000000
  br label %8929

; <label>:8923                                    ; preds = %8918
  %8924 = call float @dx.op.unary.f32(i32 23, float %8897)  ; Log(value)
  %8925 = fmul fast float %8924, 0x3FDAAAAAA0000000
  %8926 = call float @dx.op.unary.f32(i32 21, float %8925)  ; Exp(value)
  %8927 = fmul fast float %8926, 0x3FF0E147A0000000
  %8928 = fadd fast float %8927, 0xBFAC28F5C0000000
  br label %8929

; <label>:8929                                    ; preds = %8923, %8921
  %8930 = phi float [ %8922, %8921 ], [ %8928, %8923 ]
  %8931 = call float @dx.op.unary.f32(i32 7, float %8908)  ; Saturate(value)
  %8932 = call float @dx.op.unary.f32(i32 7, float %8919)  ; Saturate(value)
  %8933 = fmul fast float %8931, 1.270000e+02
  %8934 = fptoui float %8933 to i32
  %8935 = fmul fast float %8932, 1.270000e+02
  %8936 = fptoui float %8935 to i32
  %8937 = shl i32 %8936, 7
  %8938 = or i32 %8937, %8934
  %8939 = call float @dx.op.unary.f32(i32 7, float %8930)  ; Saturate(value)
  %8940 = fmul fast float %8939, 6.300000e+01
  %8941 = fptoui float %8940 to i32
  %8942 = shl i32 %8941, 14
  %8943 = or i32 %8938, %8942
  %8944 = lshr i32 %8943, 4
  %8945 = and i32 %8944, 65280
  %8946 = call float @dx.op.unary.f32(i32 7, float %8877)  ; Saturate(value)
  %8947 = fmul fast float %8946, 2.550000e+02
  %8948 = fptoui float %8947 to i32
  %8949 = or i32 %8945, %8948
  %8950 = shl i32 %8949, 16
  %8951 = or i32 %8950, %8894
  %8952 = call float @dx.op.unary.f32(i32 7, float %8878)  ; Saturate(value)
  %8953 = call float @dx.op.unary.f32(i32 7, float %8952)  ; Saturate(value)
  %8954 = fmul fast float %8953, 1.270000e+02
  %8955 = fptoui float %8954 to i32
  %8956 = call float @dx.op.unary.f32(i32 7, float %8871)  ; Saturate(value)
  %8957 = call float @dx.op.unary.f32(i32 7, float %8956)  ; Saturate(value)
  %8958 = fmul fast float %8957, 6.300000e+01
  %8959 = fptoui float %8958 to i32
  %8960 = shl i32 %8959, 14
  %8961 = shl i32 %8938, 20
  %8962 = or i32 %8955, %8961
  %8963 = or i32 %8962, %8960
  %8964 = call float @dx.op.unary.f32(i32 6, float %8883)  ; FAbs(value)
  %8965 = call float @dx.op.dot3.f32(i32 55, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %8964, float %8964, float %8964)  ; Dot3(ax,ay,az,bx,by,bz)
  %8966 = fdiv fast float %8883, %8965
  %8967 = fcmp fast ugt float %8883, 0.000000e+00
  br i1 %8967, label %8974, label %8968

; <label>:8968                                    ; preds = %8929
  %8969 = call float @dx.op.unary.f32(i32 6, float %8966)  ; FAbs(value)
  %8970 = fsub fast float 1.000000e+00, %8969
  %8971 = fcmp fast oge float %8966, 0.000000e+00
  %8972 = select i1 %8971, float 1.000000e+00, float -1.000000e+00
  %8973 = fmul fast float %8970, %8972
  br label %8974

; <label>:8974                                    ; preds = %8968, %8929
  %8975 = phi float [ %8973, %8968 ], [ %8966, %8929 ]
  %8976 = fmul fast float %8975, 1.023000e+03
  %8977 = fmul fast float %8975, 1.023000e+03
  %8978 = fadd fast float %8976, 1.024000e+03
  %8979 = fadd fast float %8977, 1.024000e+03
  %8980 = call float @dx.op.binary.f32(i32 35, float %8978, float 0.000000e+00)  ; FMax(a,b)
  %8981 = call float @dx.op.binary.f32(i32 35, float %8979, float 0.000000e+00)  ; FMax(a,b)
  %8982 = call float @dx.op.binary.f32(i32 36, float %8980, float 2.047000e+03)  ; FMin(a,b)
  %8983 = call float @dx.op.binary.f32(i32 36, float %8981, float 2.047000e+03)  ; FMin(a,b)
  %8984 = fptoui float %8982 to i32
  %8985 = fptoui float %8983 to i32
  %8986 = shl i32 %8985, 11
  %8987 = or i32 %8986, %8984
  %8988 = shl i32 %8987, 10
  %8989 = call float @dx.op.unary.f32(i32 7, float %8877)  ; Saturate(value)
  %8990 = fmul fast float %8989, 2.550000e+02
  %8991 = fptoui float %8990 to i32
  %8992 = shl i32 %8991, 2
  %8993 = or i32 %8992, %8988
  %8994 = or i32 %8993, 2
  %8995 = fsub fast float 0x3FE5559B40000000, %440
  %8996 = fcmp fast olt float %8995, 0.000000e+00
  %8997 = select i1 %8996, float 0.000000e+00, float 1.000000e+00
  %8998 = call i32 @dx.op.legacyF32ToF16(i32 130, float %86)  ; LegacyF32ToF16(value)
  %8999 = call i32 @dx.op.legacyF32ToF16(i32 130, float %39)  ; LegacyF32ToF16(value)
  %9000 = shl i32 %8999, 16
  %9001 = or i32 %9000, %8998
  %9002 = shl i32 %8855, 8
  %9003 = and i32 %9002, 3670016
  %9004 = or i32 %9003, %8859
  %9005 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %9006 = shl i32 %9005, 17
  %9007 = and i32 %9006, -2097152
  %9008 = shl i32 %9005, 6
  %9009 = and i32 %9008, 2096128
  %9010 = lshr i32 %9005, 5
  %9011 = and i32 %9010, 1023
  %9012 = or i32 %9009, %9007
  %9013 = or i32 %9012, %9011
  %9014 = call float @dx.op.unary.f32(i32 7, float %8997)  ; Saturate(value)
  %9015 = fmul fast float %9014, 2.550000e+02
  %9016 = fptoui float %9015 to i32
  %9017 = shl i32 %9016, 24
  %9018 = or i32 %9004, %9017
  store float %8856, float* %21, align 4
  store i32 %9001, i32* %35, align 4
  store i32 %9018, i32* %192, align 4
  %9019 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3
  store i32 %9013, i32* %9019, align 4
  %9020 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4
  store i32 0, i32* %9020, align 4
  %9021 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  store i32 0, i32* %9021, align 4
  %9022 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 0
  store i32 %8994, i32* %9022, align 4
  %9023 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 0
  store i32 %8951, i32* %9023, align 4
  %9024 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 1
  store i32 %8963, i32* %9024, align 4
  %9025 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 2
  store i32 0, i32* %9025, align 4
  %9026 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 3
  store i32 0, i32* %9026, align 4
  %9027 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 4
  store i32 0, i32* %9027, align 4
  %9028 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 5
  store i32 0, i32* %9028, align 4
  %9029 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 6
  store i32 0, i32* %9029, align 4
  %9030 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 7
  store i32 0, i32* %9030, align 4
  br i1 %195, label %9031, label %9078

; <label>:9031                                    ; preds = %8974
  %9032 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %9033 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %15, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %9034 = extractvalue %dx.types.CBufRet.i32 %9033, 0
  %9035 = sub i32 %9032, %9034
  %9036 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %8852, i32 %45, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %9037 = extractvalue %dx.types.ResRet.f32 %9036, 1
  %9038 = bitcast float %9037 to i32
  %9039 = extractvalue %dx.types.ResRet.f32 %9036, 2
  %9040 = bitcast float %9039 to i32
  %9041 = icmp eq i32 %9040, 1
  %9042 = select i1 %9041, i32 0, i32 %9035
  %9043 = add i32 %9042, %9038
  store i32 %9043, i32* %9021, align 4, !tbaa !55
  %9044 = call float @dx.op.unary.f32(i32 6, float %189)  ; FAbs(value)
  %9045 = call float @dx.op.unary.f32(i32 6, float %190)  ; FAbs(value)
  %9046 = call float @dx.op.unary.f32(i32 6, float %191)  ; FAbs(value)
  %9047 = call float @dx.op.dot3.f32(i32 55, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %9044, float %9045, float %9046)  ; Dot3(ax,ay,az,bx,by,bz)
  %9048 = fdiv fast float %189, %9047
  %9049 = fdiv fast float %190, %9047
  %9050 = fcmp fast ugt float %191, 0.000000e+00
  br i1 %9050, label %9062, label %9051

; <label>:9051                                    ; preds = %9031
  %9052 = call float @dx.op.unary.f32(i32 6, float %9049)  ; FAbs(value)
  %9053 = call float @dx.op.unary.f32(i32 6, float %9048)  ; FAbs(value)
  %9054 = fsub fast float 1.000000e+00, %9052
  %9055 = fsub fast float 1.000000e+00, %9053
  %9056 = fcmp fast oge float %9048, 0.000000e+00
  %9057 = fcmp fast oge float %9049, 0.000000e+00
  %9058 = select i1 %9056, float 1.000000e+00, float -1.000000e+00
  %9059 = select i1 %9057, float 1.000000e+00, float -1.000000e+00
  %9060 = fmul fast float %9054, %9058
  %9061 = fmul fast float %9055, %9059
  br label %9062

; <label>:9062                                    ; preds = %9051, %9031
  %9063 = phi float [ %9060, %9051 ], [ %9048, %9031 ]
  %9064 = phi float [ %9061, %9051 ], [ %9049, %9031 ]
  %9065 = fmul fast float %9063, 3.276750e+04
  %9066 = fmul fast float %9064, 3.276750e+04
  %9067 = fadd fast float %9065, 3.276800e+04
  %9068 = fadd fast float %9066, 3.276800e+04
  %9069 = call float @dx.op.binary.f32(i32 35, float %9067, float 0.000000e+00)  ; FMax(a,b)
  %9070 = call float @dx.op.binary.f32(i32 35, float %9068, float 0.000000e+00)  ; FMax(a,b)
  %9071 = call float @dx.op.binary.f32(i32 36, float %9069, float 6.553500e+04)  ; FMin(a,b)
  %9072 = call float @dx.op.binary.f32(i32 36, float %9070, float 6.553500e+04)  ; FMin(a,b)
  %9073 = fptoui float %9071 to i32
  %9074 = fptoui float %9072 to i32
  %9075 = shl i32 %9073, 16
  %9076 = and i32 %9074, 65535
  %9077 = or i32 %9076, %9075
  store i32 %9077, i32* %9020, align 4, !tbaa !55
  br label %9078

; <label>:9078                                    ; preds = %9062, %8974, %247
  ret void
}

; Function Attrs: nounwind
define void @"\01?MaterialAHS@@YAXUFPackedMaterialClosestHitPayload@@UFRayTracingIntersectionAttributes@@@Z"(%struct.FPackedMaterialClosestHitPayload* noalias %PackedPayload, %struct.FRayTracingIntersectionAttributes* nocapture readnone %Attributes) #0 {
  %1 = load %dx.types.Handle, %dx.types.Handle* @UniformBufferConstants_MaterialCollection0, align 4
  %2 = load %dx.types.Handle, %dx.types.Handle* @UniformBufferConstants_View, align 4
  %3 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %1)  ; CreateHandleForLib(Resource)
  %4 = call %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32 160, %dx.types.Handle %2)  ; CreateHandleForLib(Resource)
  %5 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %4, %dx.types.ResourceProperties { i32 13, i32 5484 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %6 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 3
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 5
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 6
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6, i32 1, i32 7
  %35 = load i32, i32* %34, align 4
  %36 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %37 = extractvalue %dx.types.CBufRet.f32 %36, 0
  %38 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %39 = extractvalue %dx.types.CBufRet.f32 %38, 0
  %40 = call %dx.types.Handle @dx.op.annotateHandle(i32 216, %dx.types.Handle %3, %dx.types.ResourceProperties { i32 13, i32 80 })  ; AnnotateHandle(res,props)  resource: CBuffer
  %41 = extractvalue %dx.types.CBufRet.f32 %36, 1
  %42 = extractvalue %dx.types.CBufRet.f32 %38, 1
  %43 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %44 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %45 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 341)  ; CBufferLoadLegacy(handle,regIndex)
  %46 = extractvalue %dx.types.CBufRet.f32 %45, 0
  %47 = extractvalue %dx.types.CBufRet.f32 %45, 1
  %48 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %5, i32 342)  ; CBufferLoadLegacy(handle,regIndex)
  %49 = extractvalue %dx.types.CBufRet.f32 %48, 0
  %50 = extractvalue %dx.types.CBufRet.f32 %48, 1
  %51 = fsub fast float %49, %37
  %52 = fsub fast float %50, %41
  %53 = fmul fast float %51, 2.097152e+06
  %54 = fmul fast float %52, 2.097152e+06
  %55 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %56 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %57 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %58 = fmul fast float %57, %55
  %59 = fmul fast float %57, %56
  %60 = fsub fast float %43, %46
  %61 = fadd fast float %60, %39
  %62 = fadd fast float %61, %53
  %63 = fadd fast float %62, %58
  %64 = fsub fast float %44, %47
  %65 = fadd fast float %64, %42
  %66 = fadd fast float %65, %54
  %67 = fadd fast float %66, %59
  %68 = fsub fast float %63, %39
  %69 = fsub fast float %67, %42
  %70 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %71 = extractvalue %dx.types.CBufRet.f32 %70, 0
  %72 = extractvalue %dx.types.CBufRet.f32 %70, 1
  %73 = extractvalue %dx.types.CBufRet.f32 %70, 2
  %74 = fsub fast float %71, %68
  %75 = fsub fast float %72, %69
  %76 = fmul fast float %74, %74
  %77 = fmul fast float %74, 0x3EB0000000000000
  %78 = fsub fast float %77, %37
  %79 = fmul fast float %78, %37
  %80 = fmul fast float %75, %75
  %81 = fmul fast float %75, 0x3EB0000000000000
  %82 = fsub fast float %81, %41
  %83 = fmul fast float %41, %82
  %84 = fmul fast float %73, %73
  %85 = fsub fast float -0.000000e+00, %79
  %86 = fsub fast float %85, %83
  %87 = fadd fast float %80, %84
  %88 = fadd fast float %87, %76
  %89 = fmul fast float %88, 0x3D50000000000000
  %90 = fadd fast float %86, %89
  %91 = call float @dx.op.unary.f32(i32 24, float %90)  ; Sqrt(value)
  %92 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %40, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.f32 %92, 0
  %94 = call float @dx.op.binary.f32(i32 35, float 0x3EE4F8B580000000, float %93)  ; FMax(a,b)
  %95 = fdiv fast float 1.000000e+00, %94
  %96 = fmul fast float %91, 2.097152e+11
  %97 = fmul fast float %96, %95
  %98 = fsub fast float 1.000000e+05, %97
  %99 = call float @dx.op.unary.f32(i32 7, float %98)  ; Saturate(value)
  %100 = fsub fast float 0x3FE5559B40000000, %99
  %101 = fcmp fast olt float %100, 0.000000e+00
  br i1 %101, label %102, label %103

; <label>:102                                     ; preds = %0
  store float %7, float* %6, align 4
  store i32 %9, i32* %8, align 4
  store i32 %11, i32* %10, align 4
  store i32 %13, i32* %12, align 4
  store i32 %15, i32* %14, align 4
  store i32 %17, i32* %16, align 4
  store i32 %19, i32* %18, align 4
  store i32 %21, i32* %20, align 4
  store i32 %23, i32* %22, align 4
  store i32 %25, i32* %24, align 4
  store i32 %27, i32* %26, align 4
  store i32 %29, i32* %28, align 4
  store i32 %31, i32* %30, align 4
  store i32 %33, i32* %32, align 4
  store i32 %35, i32* %34, align 4
  call void @dx.op.ignoreHit(i32 155)  ; IgnoreHit()
  unreachable

; <label>:103                                     ; preds = %0
  store float %7, float* %6, align 4
  store i32 %9, i32* %8, align 4
  store i32 %11, i32* %10, align 4
  store i32 %13, i32* %12, align 4
  store i32 %15, i32* %14, align 4
  store i32 %17, i32* %16, align 4
  store i32 %19, i32* %18, align 4
  store i32 %21, i32* %20, align 4
  store i32 %23, i32* %22, align 4
  store i32 %25, i32* %24, align 4
  store i32 %27, i32* %26, align 4
  store i32 %29, i32* %28, align 4
  store i32 %31, i32* %30, align 4
  store i32 %33, i32* %32, align 4
  store i32 %35, i32* %34, align 4
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayOrigin.f32(i32, i8) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.hitKind.i32(i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: noreturn nounwind
declare void @dx.op.ignoreHit(i32) #3

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldToObject.f32(i32, i32, i8) #1

; Function Attrs: nounwind readnone
declare %dx.types.Handle @dx.op.annotateHandle(i32, %dx.types.Handle, %dx.types.ResourceProperties) #1

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.dx.types.Handle(i32, %dx.types.Handle) #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }
attributes #3 = { noreturn nounwind }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!24, !27, !29}

!0 = !{!"dxc(private) 1.7.0.0 (private, 00000000)"}
!1 = !{i32 1, i32 6}
!2 = !{i32 1, i32 7}
!3 = !{!"lib", i32 6, i32 6}
!4 = !{!5, null, !16, !21}
!5 = !{!6, !8, !10, !11, !13, !14, !15}
!6 = !{i32 0, %"class.Texture3D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?View_GlobalDistanceFieldPageAtlasTexture@@3V?$Texture3D@V?$vector@M$03@@@@A" to %"class.Texture3D<vector<float, 4> >"*), !"View_GlobalDistanceFieldPageAtlasTexture", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 9}
!8 = !{i32 1, %"class.Texture3D<unsigned int>"* bitcast (%dx.types.Handle* @"\01?View_GlobalDistanceFieldPageTableTexture@@3V?$Texture3D@I@@A" to %"class.Texture3D<unsigned int>"*), !"View_GlobalDistanceFieldPageTableTexture", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 5}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?View_PerlinNoise3DTexture@@3V?$Texture3D@V?$vector@M$03@@@@A" to %"class.Texture3D<vector<float, 4> >"*), !"View_PerlinNoise3DTexture", i32 0, i32 2, i32 1, i32 4, i32 0, !7}
!11 = !{i32 3, %"class.StructuredBuffer<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?Scene_GPUScene_GPUSceneInstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" to %"class.StructuredBuffer<vector<float, 4> >"*), !"Scene_GPUScene_GPUSceneInstanceSceneData", i32 0, i32 3, i32 1, i32 12, i32 0, !12}
!12 = !{i32 1, i32 16}
!13 = !{i32 4, %"class.StructuredBuffer<vector<float, 4> >"* bitcast (%dx.types.Handle* @"\01?Scene_GPUScene_GPUScenePrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" to %"class.StructuredBuffer<vector<float, 4> >"*), !"Scene_GPUScene_GPUScenePrimitiveSceneData", i32 0, i32 4, i32 1, i32 12, i32 0, !12}
!14 = !{i32 5, %struct.ByteAddressBuffer* bitcast (%dx.types.Handle* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" to %struct.ByteAddressBuffer*), !"HitGroupSystemIndexBuffer", i32 2, i32 0, i32 1, i32 11, i32 0, null}
!15 = !{i32 6, %struct.ByteAddressBuffer* bitcast (%dx.types.Handle* @"\01?HitGroupSystemVertexBuffer@@3UByteAddressBuffer@@A" to %struct.ByteAddressBuffer*), !"HitGroupSystemVertexBuffer", i32 2, i32 1, i32 1, i32 11, i32 0, null}
!16 = !{!17, !18, !19, !20}
!17 = !{i32 0, %UniformBufferConstants_View* bitcast (%dx.types.Handle* @UniformBufferConstants_View to %UniformBufferConstants_View*), !"UniformBufferConstants_View", i32 0, i32 0, i32 1, i32 5484, null}
!18 = !{i32 1, %UniformBufferConstants_MaterialCollection0* bitcast (%dx.types.Handle* @UniformBufferConstants_MaterialCollection0 to %UniformBufferConstants_MaterialCollection0*), !"UniformBufferConstants_MaterialCollection0", i32 0, i32 1, i32 1, i32 80, null}
!19 = !{i32 2, %UniformBufferConstants_Material* bitcast (%dx.types.Handle* @UniformBufferConstants_Material to %UniformBufferConstants_Material*), !"UniformBufferConstants_Material", i32 0, i32 2, i32 1, i32 1756, null}
!20 = !{i32 3, %HitGroupSystemRootConstants* bitcast (%dx.types.Handle* @HitGroupSystemRootConstants to %HitGroupSystemRootConstants*), !"HitGroupSystemRootConstants", i32 2, i32 0, i32 1, i32 24, null}
!21 = !{!22, !23}
!22 = !{i32 0, %struct.SamplerState* bitcast (%dx.types.Handle* @"\01?D3DStaticTrilinearWrappedSampler@@3USamplerState@@A" to %struct.SamplerState*), !"D3DStaticTrilinearWrappedSampler", i32 1000, i32 4, i32 1, i32 0, null}
!23 = !{i32 1, %struct.SamplerState* bitcast (%dx.types.Handle* @"\01?View_PerlinNoise3DTextureSampler@@3USamplerState@@A" to %struct.SamplerState*), !"View_PerlinNoise3DTextureSampler", i32 0, i32 0, i32 1, i32 0, null}
!24 = !{null, !"", null, !4, !25}
!25 = !{i32 0, i64 8388624, i32 5, !26}
!26 = !{i32 0}
!27 = !{void (%struct.FPackedMaterialClosestHitPayload*, %struct.FRayTracingIntersectionAttributes*)* @"\01?MaterialAHS@@YAXUFPackedMaterialClosestHitPayload@@UFRayTracingIntersectionAttributes@@@Z", !"\01?MaterialAHS@@YAXUFPackedMaterialClosestHitPayload@@UFRayTracingIntersectionAttributes@@@Z", null, null, !28}
!28 = !{i32 8, i32 9, i32 6, i32 60, i32 7, i32 8, i32 5, !26}
!29 = !{void (%struct.FPackedMaterialClosestHitPayload*, %struct.FRayTracingIntersectionAttributes*)* @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFRayTracingIntersectionAttributes@@@Z", !"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFRayTracingIntersectionAttributes@@@Z", null, null, !30}
!30 = !{i32 8, i32 10, i32 6, i32 60, i32 7, i32 8, i32 5, !26}
!31 = !{!32, !34}
!32 = distinct !{!32, !33, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@UByteAddressBuffer@@II0III@Z: %agg.result"}
!33 = distinct !{!33, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@UByteAddressBuffer@@II0III@Z"}
!34 = distinct !{!34, !35, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z: %agg.result"}
!35 = distinct !{!35, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z"}
!36 = !{!37, !39, !41, !43, !45, !46}
!37 = distinct !{!37, !38, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z: %agg.result"}
!38 = distinct !{!38, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z"}
!39 = distinct !{!39, !40, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z: %agg.result"}
!40 = distinct !{!40, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z"}
!41 = distinct !{!41, !42, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!42 = distinct !{!42, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!43 = distinct !{!43, !44, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFRayTracingIntersectionAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %Interpolants"}
!44 = distinct !{!44, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFRayTracingIntersectionAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z"}
!45 = distinct !{!45, !44, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFRayTracingIntersectionAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %FaceNormal"}
!46 = distinct !{!46, !47, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFRayTracingIntersectionAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z: %Interpolants"}
!47 = distinct !{!47, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFRayTracingIntersectionAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"\01?internal.GetGlobalDistanceFieldPage@@YA?AUFGlobalDistanceFieldPage@@V?$vector@M$02@@I@Z: %agg.result"}
!50 = distinct !{!50, !"\01?internal.GetGlobalDistanceFieldPage@@YA?AUFGlobalDistanceFieldPage@@V?$vector@M$02@@I@Z"}
!51 = !{!52, !52, i64 0}
!52 = !{!"float", !53, i64 0}
!53 = !{!"omnipotent char", !54, i64 0}
!54 = !{!"Simple C/C++ TBAA"}
!55 = !{!56, !56, i64 0}
!56 = !{!"int", !53, i64 0}
!57 = !{!58}
!58 = distinct !{!58, !59, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ: %agg.result"}
!59 = distinct !{!59, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ"}
!60 = distinct !{!60, !61}
!61 = !{!"llvm.loop.unroll.disable"}
